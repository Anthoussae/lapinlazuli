{"version":3,"sources":["main.js","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["_Object$freeze3","_toArray","r","_arrayWithHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableRest","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","e","t","Array","isArray","length","_n","F","s","n","done","value","f","TypeError","a","u","call","next","return","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_slicedToArray","_iterableToArrayLimit","l","i","_toConsumableArray","_arrayWithoutHoles","_nonIterableSpread","_arrayLikeToArray","toString","slice","name","from","test","_toPropertyKey","configurable","writable","_toPrimitive","toPrimitive","String","Number","ENEMY_ABILITIES","freeze","INK_DRINK","INCREASE_HEALTH","HAND_SIZE_REDUCTION","ADD_PEBBLES","ADD_MERCURY","ADD_CLUTTER","DOWNGRADE_CARDS","DAMAGE_TYPES","BUNNY","FIRE","LIGHTNING","POISON","SPECIAL_CARD_SUBTYPES","CURSE","UNIQUE","STATUS","DIFFICULTIES","EASY","MEDIUM","HARD","TRIGGER_EVENTS","CARD_PICKUP","RELIC_PICKUP","POTION_PICKUP","DRINK_POTION","ASSIGN_SHOP_PRICES","REST","COMBAT_START","POPULATE_PATHS","SHUFFLE_GRAVEYARD_INTO_DECK","PLAY_CARD","CAST_SPELLBOOK","COMBAT_END","DEAL_DAMAGE","PATHS","EASY_FIGHT","MEDIUM_FIGHT","HARD_FIGHT","BOSS_FIGHT","SHOP","RELIC_OFFERING","GEM_OFFERING","CARD_OFFERING","ENCHANT","POTION_OFFERING","HOARD","PURGE","TRANSMUTE","SCREENS","MAIN","DECK","SETTINGS","MOD","COMBAT_DECK","GRAVEYARD","EXILE","RARITIES","BASIC_POLY","BASIC_MONO","COMMON","UNCOMMON","RARE","MYTHIC","LEGENDARY","PHASES","MAIN_MENU","DIFFICULTY_SELECTION","MYTHIC_RELIC_OFFERING","SOCKET_GEM","PATH_SELECTION","COMBAT","GAME_OVER","ACTIONS","NEW_GAME","SET_DIFFICULTY","GENERATE_STARTER_DECK","APPLY_DIFFICULTY_MODIFIERS","ADVANCE_PHASE","LOG_MESSAGE","CREATE_CARD_INSTANCE","POPULATE_RELIC_OFFERINGS","PICK_RELIC","POPULATE_PATH_OFFERINGS","PICK_PATH","POPULATE_CARD_OFFERINGS","PICK_CARD","POPULATE_POTION_OFFERINGS","PICK_POTION","POPULATE_GEM_OFFERINGS","OPEN_MOD_SCREEN","APPLY_CARD_MOD","SCREEN_CHANGE","POPULATE_SHOPFRONT","INCREASE_BASE_BUNNIES","GAIN_GOLD","PRACTICE_WANDWORK","LOOT_HOARD","START_TURN","DRAW_CARD","CARD_TYPES","INSTANT","SPELL","REST_OPTIONS","HEAL","PRACTICE","difficultyModifiersMap","maxHealthModifier","goldModifier","basicCardCountModifier","luckModifier","shopPriceMultiplierModifier","restHealthRestoreModifier","enemyHealthMultiplierModifier","pathMap","rarity","isFight","leadsTo","difficulty","SPECIAL","enemyAbilityDataMap","baseValue","incrementValue","description","prefix","cardList","cardType","inkCost","bunnyAdd","bunnyMult","goldAdd","permanentlyUpgradeRandomCardsInDeck","cardDraw","exileOnCast","inkAdd","permanentlyUpgradeRandomCardsInHand","damage","inkCostIncreasePerLevel","damageMultiplierPerLevel","damageTypes","upgradesOnCast","damageRoll","dice","sides","flatBonus","unupgradable","unsocketable","uncastable","specialSubtype","gemList","relicList","triggers","bonusPages","bonusBaseBunnies","bonusHealth","BonusMulligans","bonusBooks","bonusInk","bonusGold","upgradeCard","upgradePotion","healPlayer","shopPriceMultiplier","revealAnonymousPaths","weakenEnemyHpPercent","bossOnly","damageTypeTrigger","multiplyDamage","ifLightningDrawCards","reduceInkCostOfFireCardsInDeck","reduceInkCostIfFire","bonusHandSize","potionList","healthRestore","drinkableOutOfCombat","increaseMaxHp","capitalize","word","charAt","toUpperCase","shuffleArray","originalArray","array","j","Math","floor","random","_ref","weightedRandomChoice","weightedMap","entries","totalWeight","reduce","sum","_ref2","_ref3","_","weight","cumulative","_i","_entries","_entries$_i","key","changeScreen","dispatch","screen","type","payload","inspectDeck","inspectCombatDeck","inspectGraveyard","inspectExile","returnToMain","assignShopPrices","state","globalMultiplier","basePrices","card","potion","gem","relic","rarityMultipliers","common","uncommon","rare","mythic","legendary","updatedShopfront","offerings","shopfront","map","entry","_item$rarity","_item$rarity$toLowerC","item","console","warn","basePrice","upgrades","upgradeCost","includes","toLowerCase","rarityMultiplier","price","round","log","concat","anonymizeObject","obj","anonymousNameDisplay","generateStarterDeck","error","modifiers","deck","basicMonoCards","_iterator","_step","createCardInstance","err","basicPolyCards","_iterator2","_step2","generateRandomCard","shuffledDeck","campaign","applyDifficultyModifiers","gold","basicCardCount","luck","restHealthRestore","maxHealth","health","enemyHealthMultiplier","advancePhaseTo","phaseAdvancedTo","values","currentPhase","handlePhaseTransitions","phase","populatePathOfferings","populateCardOfferings","populateRelicOfferings","populatePotionOfferings","populateGemOfferings","populateShopfront","initializeCombatPhase","currentPath","pickPath","index","_state$level","paths","chosenPath","pathKey","path","pathData","level","newCards","_loop","some","existing","_ret","cards","selectedPotions","usedNames","Set","attempts","generateRandomPotion","has","add","potions","undefined","selected","maxRelics","_loop2","generateRandomRelic","relics","selectedGems","generateRandomGem","gems","_state$campaign$deck","_state$campaign$deck2","misery","bossPath","fightWeights","fightPathKey","fightPath","allPaths","_ref4","_ref5","_ref6","_ref7","data","bossLevels","isBossLevel","allCardsSocketed","every","allCardsUnupgradable","filteredPaths","pathObj","rarityWeights","getLuckAdjustedRarityWeights","chosenRarities","chosenPaths","usedPaths","_loop3","_chosenRarities","_i3","candidates","p","pick","remainingPool","idx","splice","firstTwoAreFights","finalPaths","newMisery","thirdOptions","nonFights","fights","weightedPool","allFights","shopIndex","findIndex","replaceableOptions","ENCHANT_OFFERING","existingPaths","replacements","replacement","anonChance","max","anonIndex","triggerResult","checkRelicTriggers","POPULATE_PATH","updatedPaths","result","updatedState","pickCard","sourceArrayName","combatRewards","sourceArray","pickedCard","_entry$item","charged","chargeGoldPrice","upgradedCard","updatedCampaign","updatedOfferings","newState","trashed","trashPile","pickRelic","pickedRelic","_entry$item$price","_entry$item2","relicPrice","chargedState","relicBelt","isOfferingPhase","updatedTrashPile","triggeredState","pickPotion","_offerings$combatRewa","pickedPotion","_entry$item$price2","_entry$item3","triggeredPotion","updatedPotionBelt","potionBelt","drinkPotion","heal","combat","ink","amount","upgradeCardsInHand","hand","upgradable","numToUpgrade","min","shuffled","sort","toUpgrade","newHand","drawCard","addBunnies","multiplyBunnies","belt","newPotionBelt","newTrash","triggered","openModScreen","mod","_state$offerings$gems","originPhase","validKeys","chosenGemName","discardedGems","g","updatedRewards","reward","_mod$gem$price","_mod$gem","currentScreen","modData","origin","increaseBaseBunnies","newAmount","baseBunnies","applyModToCard","_state$modData","_state$modData2","updatedDeck","cardIndex","c","modifiedCard","upgrade","socketCardWithGem","purge","transmute","transmuteCard","nextPhase","shopfrontTypes","previousItems","discardedItems","updatedTrash","typeCounts","_i4","_Object$entries","_Object$entries$_i","count","generatedItems","usedKeys","_i5","_shopfrontTypes","attempt","gainGold","newGold","practiceWandwork","lootHoard","_state$defeatedEnemie","baseGold","levelBonus","enemiesDefeated","defeatedEnemies","enemyBonus","luckBonus","totalGold","hoardsLooted","rest","amountToHeal","currentHealth","healedAmount","msg","startsWith","toggleDeckInspect","isInspectingDeck","returnTo","previousScreen","createInitialState","stage","mulligans","books","pages","handSize","graveyard","exile","spellbook","combatEnded","maxInk","maxBooks","bunnies","maxPages","enemy","difficulties","restOptions","selectDifficultyAndBeginGame","createGameApp","initialState","reducer","renderFn","action","cardName","found","find","createRelicInstance","relicName","createPotionInstance","potionName","createGemInstance","gemName","getRandomBossRelic","bossRelics","chosen","_ref8","_ref8$rarity","ownedRelics","GOLD_BAG","filtered","_state$level2","_state$defeatedEnemie2","_ref9","_ref9$rarity","_ref9$upgrades","_ref9$gem","finalRarity","totalFortune","upgradeWeights","finalUpgrades","defeatedCount","maxUpgrades","cappedUpgrades","_state$level3","_ref0","_ref0$rarity","_ref0$upgrades","basePotion","_ref1","_ref1$rarity","fallbackGem","chosenGem","healthCost","pow","baseName","replace","_upgradedCard$damageR","_upgradedCard$damageR2","_upgradedCard$damageR3","downgradeCard","undowngradable","downgradedCard","originalLevel","newLevel","levelDiff","applyHalvedBase","ceil","_downgradedCard$damag","_downgradedCard$damag2","_downgradedCard$damag3","upgradedPotion","socketedCard","upgradeLevel","applyEffect","baseAmount","perUpgrade","damageType","_iterator3","_step3","dmgType","_socketedCard$damageR","_socketedCard$damageR2","_socketedCard$damageR3","gemRoll","baseDice","baseSides","baseBonus","nameSuffix","_socketedCard$damageR4","context","triggerEvent","_relic$triggers","_updatedState$offerin","effect","newHealth","newMaxHealth","modifiedCount","_campaign$mulligans","upgradedDeck","newMultiplier","getShopPriceMultiplier","_item$rarity2","_item$rarity2$toLower","_iterator4","_step4","_relic$triggers2","checkEnemyTriggers","_updatedState$combat","abilities","logMessages","newMaxInk","newInk","multiplier","enemyHp","hp","downgradable","toDowngrade","addCardToCombatDeck","modifyCombatInk","_state$combat$ink","_state$combat","_state$combat$maxInk","_state$combat2","current","actualChange","excludedSubtypes","alternatives","unchoosableByTransmute","newBase","purgeCard","_state$level4","_state$stage","_state$campaign$mulli","_state$baseBunnies","modifyEnemyAbilityPower","_ref11","currentValue","generateEnemy","deepDeckCopy","JSON","parse","stringify","newCombat","startTurn","_pathMap$path$path","_state$level5","_state$stage2","_state$enemyHealthMul","_baseHealthMap$diffic","_perLevelIncrement$di","_perStageMultiplier$s","isBoss","baseHealthMap","easy","medium","hard","boss","perLevelIncrement","perStageMultiplier","base","increment","stageMultiplier","allAbilities","selectedAbilities","numAbilities","_state$luck","bonusChance","size","ability","_iterator5","_step5","_data$baseValue","_data$incrementValue","_state$stage3","enemyLevel","smallMonsters","mediumMonsters","largeMonsters","vegetables","bossNames","monsterList","vegetable","monster","prefixes","_enemyAbilityDataMap$","Boolean","join","loot","generateEnemyLoot","_state$luck2","_state$level6","_state$campaign$deck3","_state$campaign","allGemmedOrUnsocketable","weights","drops","chanceTwo","chanceThree","usedTypes","bossRelic","available","_ref12","_ref13","_ref14","_ref15","w","roll","_iterator6","_step6","_step6$value","_easy$medium$hard$dif","numUpgrades","upgradableCards","upgradedCards","indexOf","_state$combat3","newCard","combatDeck","insertIndex","gameReducer","_action$payload","potionIndex","potionToDrink","CLOSE_COMBAT_REWARDS","closeCombatRewards","MULLIGAN","mulligan","CLAIM_GOLD_REWARD","_action$payload2","newRewards","playCard","castSpellbook","EXIT_SHOP","exitShop","render","_state$campaign$deck4","_state$level7","_state$modData3","output","document","getElementById","createElement","id","body","appendChild","innerHTML","renderCardList","title","section","ul","li","textContent","renderModPhaseEntry","label","modKey","modBtn","style","fontSize","padding","onclick","disabled","info","acc","_ref16","_ref17","isCombatInspectScreen","combatSection","border","margin","_state$combat4","_state$combat$mulliga","_state$combat5","enemyBox","display","justifyContent","alignItems","fontWeight","marginBottom","nameSpan","hpSpan","gap","page","pageDiv","width","height","backgroundColor","spellbookLabel","castRow","allPagesBlank","castButton","bunnyDisplay","mulliganBtn","remaining","cursor","resourcesRow","inkDisplay","booksDisplay","handRow","flexWrap","_card$inkCost","cardBtn","cardCost","canAfford","isUncastable","costText","opacity","empty","handLabel","inspectRow","marginTop","_ref18","btn","inspectZoneLabel","_state$combat6","_state$combat7","_state$combat8","button","relicSection","pathSection","cardSection","potionSection","gemSection","shopSection","list","_entry$item$price3","_entry$item4","_state$gold","playerGold","isGem","exitBtn","modSection","isGemMod","restBtn","practiceBtn","_state$offerings","combatEndSection","hasUnclaimedLoot","rewardSection","shouldDisable","gameOverSection","classList","banner","summary","newGameBtn","deckBtn","nextScreen","deckView","beltSection","isCombatPhase","isDrinkableNow","window","onload","addEventListener","_state$combat$baseBun","newBook","fill","refillInkpot","shuffleGraveyardIntoDeck","_state$combat$graveya","_state$combat9","_state$combat$deck","_state$combat0","combinedDeck","checkCombatEndViaDeath","_state$combat$maxInk2","_state$combat1","_state$combat10","playerDead","enemyDead","combatEnd","currentCombat","takeDamage","skipDeathCheck","_currentCombat$deck","drawnCard","remainingDeck","checkCardTriggers","_card$triggers","_state$combat$bunnies","_state$combat$bunnies2","dmg","_options$skipDeathChe","options","trace","dealDamage","_options$isBonus","isBonus","newEnemyHp","_iterator7","_step7","checkGameOver","_card$inkCost2","resolveSpell","firstBlank","_updatedState$combat2","_iterator8","_step8","releaseBunnies","_state$combat$bunnies3","bunnyDamage","endTurn","remainingHand","updatedGraveyard","effects","upgradedHand","types","_card$damageRoll","_card$damageRoll$flat","rollDice","typeList","upgradeSpecificCardInCampaignDeck","destination","updatedSpellbook","trashpile","_context$result","_updatedState$combat3","victory","_updatedState$combat$","_enemy$loot","_updatedState$defeate","rewards","_updatedState$stage","_updatedState$combat$2","_updatedState$combat4","remainingEnemyHp","_enemy$name","_enemy$name2","cleanedCombat","finalState","gameOverResult","_state$offerings2","logEntry","pathState","defeatedBosses","gameOver","gameResult","cleanedState","numDice","sidesPerDie","total","_state$campaign2","_relic$triggers3","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","message","stack","overlay","createErrorOverlay","remove","stackTrace","innerText","getParents","modules","parents","k","d","dep","Function","deps","cached","cache","cb"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n\n//#region enums\nconst ENEMY_ABILITIES = Object.freeze({\n  INK_DRINK: \"inkDrink\",\n  INCREASE_HEALTH: \"increaseHealth\",\n  HAND_SIZE_REDUCTION: \"handSizeReduction\",\n  ADD_PEBBLES: \"addOnePebble\",\n  ADD_MERCURY: \"addTwoMercury\",\n  ADD_CLUTTER: \"addThreeClutter\",\n  DOWNGRADE_CARDS: \"downgradeCards\",\n});\nconst DAMAGE_TYPES = Object.freeze({\n  BUNNY: \"Bunny\",\n  FIRE: \"Fire\",\n  LIGHTNING: \"Lightning\",\n  POISON: \"Poison\",\n});\nconst SPECIAL_CARD_SUBTYPES = Object.freeze({\n  CURSE: \"curse\",\n  UNIQUE: \"unique\",\n  STATUS: \"status\",\n});\nconst DIFFICULTIES = Object.freeze({\n  EASY: \"easy\",\n  MEDIUM: \"medium\",\n  HARD: \"hard\",\n});\nconst TRIGGER_EVENTS = Object.freeze({\n  CARD_PICKUP: \"CARD_PICKUP\",\n  RELIC_PICKUP: \"RELIC_PICKUP\",\n  POTION_PICKUP: \"POTION_PICKUP\",\n  DRINK_POTION: \"DRINK_POTION\",\n  ASSIGN_SHOP_PRICES: \"ASSIGN_SHOP_PRICES\",\n  REST: \"REST\",\n  COMBAT_START: \"COMBAT_START\",\n  POPULATE_PATHS: \"POPULATE_PATHS\",\n  SHUFFLE_GRAVEYARD_INTO_DECK: \"SHUFFLE_GRAVEYARD_INTO_DECK\",\n  PLAY_CARD: \"PLAY_CARD\",\n  CAST_SPELLBOOK: \"CAST_SPELLBOOK\",\n  COMBAT_END: \"COMBAT_END\",\n  DEAL_DAMAGE: \"DEAL_DAMAGE\",\n});\nconst PATHS = Object.freeze({\n  EASY_FIGHT: \"Easy Fight\",\n  MEDIUM_FIGHT: \"Medium Fight\",\n  HARD_FIGHT: \"Hard Fight\",\n  BOSS_FIGHT: \"Boss Fight\",\n  REST: \"Rest\",\n  SHOP: \"Shop\",\n  RELIC_OFFERING: \"Relic Offering\",\n  GEM_OFFERING: \"Gem Offering\",\n  CARD_OFFERING: \"Card Offering\",\n  ENCHANT: \"Enchant\",\n  POTION_OFFERING: \"Potion Offering\",\n  HOARD: \"Hoard\",\n  PURGE: \"Purge\",\n  TRANSMUTE: \"Transmute\",\n});\nconst SCREENS = Object.freeze({\n  MAIN: \"main view\",\n  DECK: \"inspect deck\",\n  SETTINGS: \"settings\",\n  MOD: \"modscreen\",\n  COMBAT_DECK: \"combat deck\",\n  GRAVEYARD: \"graveyard\",\n  EXILE: \"exile\",\n});\nconst RARITIES = Object.freeze({\n  BASIC_POLY: \"basic-poly\", // basic poly cards, several of which go in the starter deck.\n  BASIC_MONO: \"basic-mono\", // basic mono cards, only one goes in the starter deck.\n  COMMON: \"common\",\n  UNCOMMON: \"uncommon\",\n  RARE: \"rare\",\n  MYTHIC: \"mythic\",\n  LEGENDARY: \"legendary\",\n});\nconst PHASES = Object.freeze({\n  MAIN_MENU: \"main menu\",\n  DIFFICULTY_SELECTION: \"difficulty selection\",\n  MYTHIC_RELIC_OFFERING: \"mythic relic offering\",\n  RELIC_OFFERING: \"relic offering\",\n  CARD_OFFERING: \"card offering\",\n  GEM_OFFERING: \"gem offering\",\n  POTION_OFFERING: \"potion offering\",\n  COMBAT_END: \"combat end\",\n  SOCKET_GEM: \"socket gem\",\n  SHOP: \"shop\",\n  PATH_SELECTION: \"path selection\",\n  REST: \"rest\",\n  ENCHANT: \"ENCHANT\",\n  TRANSMUTE: \"transmute\",\n  COMBAT: \"combat\",\n  GAME_OVER: \"game over\",\n  PURGE: \"purge\",\n  HOARD: \"hoard\",\n});\nconst ACTIONS = Object.freeze({\n  NEW_GAME: \"NEW_GAME\",\n  SET_DIFFICULTY: \"SET_DIFFICULTY\",\n  GENERATE_STARTER_DECK: \"GENERATE_STARTER_DECK\",\n  APPLY_DIFFICULTY_MODIFIERS: \"APPLY_DIFFICULTY_MODIFIERS\",\n  ADVANCE_PHASE: \"ADVANCE_PHASE\",\n  LOG_MESSAGE: \"LOG_MESSAGE\",\n  CREATE_CARD_INSTANCE: \"CREATE_CARD_INSTANCE\",\n  POPULATE_RELIC_OFFERINGS: \"POPULATE_RELIC_OFFERINGS\",\n  PICK_RELIC: \"PICK_RELIC\",\n  POPULATE_PATH_OFFERINGS: \"POPULATE_PATH_OFFERINGS\",\n  PICK_PATH: \"PICK_PATH\",\n  POPULATE_CARD_OFFERINGS: \"POPULATE_CARD_OFFERINGS\",\n  PICK_CARD: \"PICK_CARD\",\n  POPULATE_POTION_OFFERINGS: \"POPULATE_POTION_OFFERINGS\",\n  PICK_POTION: \"PICK_POTION\",\n  DRINK_POTION: \"DRINK_POTION\",\n  POPULATE_GEM_OFFERINGS: \"POPULATE_GEM_OFFERINGS\",\n  OPEN_MOD_SCREEN: \"OPEN_MOD_SCREEN\",\n  APPLY_CARD_MOD: \"APPLY_CARD_MOD\",\n  SCREEN_CHANGE: \"SCREEN_CHANGE\",\n  POPULATE_SHOPFRONT: \"POPULATE_SHOPFRONT\",\n  INCREASE_BASE_BUNNIES: \"INCREASE_BASE_BUNNIES\",\n  GAIN_GOLD: \"GAIN_GOLD\",\n  PRACTICE_WANDWORK: \"PRACTICE_WANDWORK\",\n  LOOT_HOARD: \"LOOT_HOARD\",\n  REST: \"REST\",\n  START_TURN: \"START_TURN\",\n  DRAW_CARD: \"DRAW_CARD\", // triggered when a card is drawn\n  PICK_CARD: \"PICK_CARD\", // triggered when a card is added to your deck\n  CLOSE_COMBAT_REWARDS: \"CLOSE_COMBAT_REWARDS\",\n  CLAIM_GOLD_REWARD: \"CLAIM_GOLD_REWARD\",\n  PLAY_CARD: \"PLAY_CARD\", // triggered when a card is played\n  CAST_SPELLBOOK: \"CAST_SPELLBOOK\", // triggered when the spellbook is cast\n  EXIT_SHOP: \"EXIT_SHOP\",\n  MULLIGAN: \"MULLIGAN\",\n});\nconst CARD_TYPES = Object.freeze({\n  INSTANT: \"instant\", // resolves immediately when played, does not go to the spellbook.\n  SPELL: \"spell\", // goes to the spellbook when played, resolves when the spellbook is cast.\n  CURSE: \"curse\", // negative card that can be removed or purged.\n  STATUS: \"status\", // temporary effect card, like a buff or debuff.\n});\nconst REST_OPTIONS = Object.freeze({\n  HEAL: \"heal\",\n  PRACTICE: \"practice\",\n  ENCHANT: \"enchant\",\n});\n//#endregion enums\n//#region data maps\nconst difficultyModifiersMap = Object.freeze({\n  [DIFFICULTIES.EASY]: {\n    maxHealthModifier: 100,\n    goldModifier: 20,\n    basicCardCountModifier: 5,\n    luckModifier: 2,\n    shopPriceMultiplierModifier: -0.2, // 20% cheaper shop prices\n    restHealthRestoreModifier: 30, // heal 30 health when resting\n    enemyHealthMultiplierModifier: -0.2, // 20% less health for enemies\n  },\n  [DIFFICULTIES.MEDIUM]: {\n    maxHealthModifier: 75,\n    goldModifier: 10,\n    basicCardCountModifier: 8,\n    luckModifier: 1,\n    shopPriceMultiplierModifier: 0, // normal shop prices\n    restHealthRestoreModifier: 25, // heal 20 health when resting\n    enemyHealthMultiplierModifier: 0,\n  },\n  [DIFFICULTIES.HARD]: {\n    maxHealthModifier: 50,\n    goldModifier: 0,\n    basicCardCountModifier: 11,\n    luckModifier: 0,\n    shopPriceMultiplierModifier: 0.2, // 20% more expensive shop prices\n    restHealthRestoreModifier: 20, // heal 20 health when resting\n    enemyHealthMultiplierModifier: 0.2, // 20% more health for enemies\n  },\n});\nconst pathMap = Object.freeze({\n  [PATHS.EASY_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.EASY,\n  },\n  [PATHS.MEDIUM_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.MEDIUM,\n  },\n  [PATHS.HARD_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.HARD,\n  },\n  [PATHS.BOSS_FIGHT]: {\n    rarity: RARITIES.SPECIAL,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: \"boss\",\n  },\n  [PATHS.REST]: { rarity: RARITIES.UNCOMMON, leadsTo: PHASES.REST },\n  [PATHS.SHOP]: { rarity: RARITIES.UNCOMMON, leadsTo: PHASES.SHOP },\n  [PATHS.RELIC_OFFERING]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.RELIC_OFFERING,\n  },\n  [PATHS.GEM_OFFERING]: { rarity: RARITIES.RARE, leadsTo: PHASES.GEM_OFFERING },\n  [PATHS.CARD_OFFERING]: {\n    rarity: RARITIES.UNCOMMON,\n    leadsTo: PHASES.CARD_OFFERING,\n  },\n  [PATHS.ENCHANT]: { rarity: RARITIES.RARE, leadsTo: PHASES.ENCHANT },\n  [PATHS.POTION_OFFERING]: {\n    rarity: RARITIES.RARE,\n    leadsTo: PHASES.POTION_OFFERING,\n  },\n  [PATHS.HOARD]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.HOARD,\n  },\n  [PATHS.PURGE]: { rarity: RARITIES.RARE, leadsTo: PHASES.PURGE },\n  [PATHS.TRANSMUTE]: { rarity: RARITIES.RARE, leadsTo: PHASES.TRANSMUTE },\n});\nconst enemyAbilityDataMap = {\n  [ENEMY_ABILITIES.INK_DRINK]: {\n    baseValue: 1,\n    incrementValue: 1,\n    description: \"Reduces player's ink at combat start\",\n    prefix: \"Inkdrinking\",\n  },\n  [ENEMY_ABILITIES.INCREASE_HEALTH]: {\n    baseValue: 1.5,\n    incrementValue: 0.5,\n    description: \"Increases enemy HP\",\n    prefix: \"Tanky\",\n  },\n  [ENEMY_ABILITIES.HAND_SIZE_REDUCTION]: {\n    baseValue: 2,\n    incrementValue: 1,\n    description: \"Reduces player's hand size at combat start\",\n    prefix: \"Maddening\",\n  },\n  [ENEMY_ABILITIES.ADD_PEBBLES]: {\n    baseValue: 1,\n    incrementValue: 2,\n    description: \"Adds Sisyphus' Pebble to your deck at combat start\",\n    prefix: \"Sisyphean\",\n  },\n  [ENEMY_ABILITIES.ADD_MERCURY]: {\n    baseValue: 2,\n    incrementValue: 2,\n    description: \"Adds Mercury Droplets to your deck at combat start\",\n    prefix: \"Mercurial\",\n  },\n  [ENEMY_ABILITIES.ADD_CLUTTER]: {\n    baseValue: 3,\n    incrementValue: 2,\n    description: \"Adds Clutter cards to your deck at combat start\",\n    prefix: \"Messy\",\n  },\n  [ENEMY_ABILITIES.DOWNGRADE_CARDS]: {\n    baseValue: 3,\n    incrementValue: 2,\n    description: \"Downgrades random cards in your combat deck at combat start\",\n    prefix: \"Withering\",\n  },\n};\n\n//#endregion data maps\n//#region data arrays of game objects\nconst cardList = [\n  {\n    name: \"Bunnymancy\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    inkCost: 1,\n    bunnyAdd: 6,\n  },\n  {\n    name: \"Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    inkCost: 1,\n    bunnyMult: 2,\n  },\n  {\n    name: \"Fairy Gold\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    inkCost: 1,\n    goldAdd: 8,\n  },\n  {\n    name: \"Enchant Bookshelf\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    inkCost: 1,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ponder\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    cardDraw: 3,\n    exileOnCast: true,\n  },\n  {\n    name: \"Inkswell\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 1,\n    inkAdd: 2,\n    exileOnCast: true,\n  },\n  {\n    name: \"Cloudfluff Conjuration\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 0,\n    bunnyAdd: 6,\n  },\n  {\n    name: \"Cloudfluff Boon\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    inkCost: 0,\n    bunnyAdd: 3,\n  },\n  {\n    name: \"Midas Touch\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    inkCost: 2,\n    goldAdd: 35,\n  },\n  {\n    name: \"Enchant Library\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    inkCost: 2,\n    permanentlyUpgradeRandomCardsInDeck: 3,\n  },\n  {\n    name: \"Dusk Lotus\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    inkCost: 0,\n    inkAdd: 3,\n    exileOnCast: true,\n  },\n  {\n    name: \"Weasel's Bargain\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 0,\n    goldAdd: 8,\n  },\n  {\n    name: \"Carrot Festival\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    bunnyAdd: 12,\n  },\n  {\n    name: \"Mega Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 2,\n    bunnyMult: 4,\n  },\n  {\n    name: \"Enchant Fingertips\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 1,\n    permanentlyUpgradeRandomCardsInHand: 1,\n  },\n  {\n    name: \"Enchant Hands\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    inkCost: 2,\n    permanentlyUpgradeRandomCardsInHand: 7,\n  },\n  {\n    name: \"Wisdom of the Warrens\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    inkCost: 0,\n    cardDraw: 1,\n    exileOnCast: true,\n  },\n  {\n    name: \"Magic Missile\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    damage: 6,\n    inkCostIncreasePerLevel: 1,\n    damageMultiplierPerLevel: 2,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n  },\n  {\n    name: \"Fireball\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 3,\n    damage: 30,\n    inkCostIncreasePerLevel: 1,\n    damageMultiplierPerLevel: 2,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n  },\n  {\n    name: \"Lightning Bolt 1d4\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    upgradesOnCast: 1,\n    exileOnCast: true,\n    damageTypes: [DAMAGE_TYPES.LIGHTNING],\n    damageRoll: {\n      dice: 1,\n      sides: 4,\n      flatBonus: 0,\n    },\n  },\n  {\n    name: \"Thunderstrike 2d2\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 2,\n    upgradesOnCast: 2,\n    exileOnCast: true,\n    damageTypes: [DAMAGE_TYPES.LIGHTNING],\n    damageRoll: {\n      dice: 2,\n      sides: 2,\n      flatBonus: 0,\n    },\n  },\n  // === Curses ===\n  {\n    name: \"Sisyphus' Pebble\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    uncastable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    // No effect; added to deck via events, not in loot pool\n  },\n  {\n    name: \"Clutter\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    uncastable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    // Added to combat deck by enemies; no effect\n  },\n  {\n    name: \"Mirage\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    inkCost: 0,\n    exileOnCast: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n  },\n  {\n    name: \"Mercury Droplet\",\n    cardType: CARD_TYPES.INSTANT,\n    inkCost: 1,\n    unupgradable: true,\n    unsocketable: true,\n    exileOnCast: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n  },\n];\nconst gemList = [\n  {\n    name: \"Amethyst\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 2,\n  },\n  {\n    name: \"Lapis Lazuli\",\n    rarity: RARITIES.COMMON,\n    bunnyMult: 1.5,\n  },\n  // {\n  //   name: \"Sapphire\",\n  //   rarity: RARITIES.UNCOMMON,\n  //   cardDraw: 1,\n  // },\n  {\n    name: \"Topaz\",\n    rarity: RARITIES.COMMON,\n    goldAdd: 7,\n  },\n  {\n    name: \"Jet\",\n    rarity: RARITIES.MYTHIC,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ruby\",\n    rarity: RARITIES.RARE,\n    damage: 5,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n    inkCostIncreasePerLevel: 1,\n    damageMultiplierPerLevel: 2,\n  },\n  {\n    name: \"Amber\",\n    rarity: RARITIES.RARE,\n    damageRoll: {\n      dice: 1,\n      sides: 4,\n      flatBonus: 0,\n    },\n    upgradesOnCast: 1,\n    damageTypes: [DAMAGE_TYPES.LIGHTNING],\n  },\n];\nconst relicList = [\n  {\n    name: \"Magic Scroll\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusPages: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Wand\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBaseBunnies: 3,\n      },\n    },\n  },\n  // {\n  //   name: \"Fabergé Egg\",\n  //   rarity: RARITIES.COMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       bonusGold: 100,\n  //     },\n  //   },\n  // },\n  {\n    name: \"Heartstone\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHealth: 25,\n      },\n    },\n  },\n  {\n    name: \"Cowbell\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        BonusMulligans: 1,\n      },\n    },\n  },\n  // {\n  //   // fix to reduce damage taken on combat loss.\n  //   name: \"Protective Amulet\",\n  //   rarity: RARITIES.UNCOMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       bonusHealth: 10,\n  //     },\n  //   },\n  // },\n  {\n    name: \"Magic Encyclopedia\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n        BonusMulligans: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Inkpot\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 2,\n      },\n    },\n  },\n  {\n    name: \"Enchanted Cardsleeves\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        permanentlyUpgradeRandomCardsInDeck: 5,\n      },\n    },\n  },\n  {\n    name: \"Magic Quill\",\n    rarity: RARITIES.LEGENDARY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 3,\n      },\n    },\n  },\n  {\n    name: \"Gold Bag\",\n    rarity: RARITIES.BASIC_POLY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusGold: 25,\n      },\n    },\n  },\n  {\n    name: \"Whetstone\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        upgradeCard: true,\n      },\n    },\n  },\n  {\n    name: \"Witch's Cauldron\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.POTION_PICKUP]: {\n        upgradePotion: true,\n      },\n    },\n  },\n  {\n    name: \"Crystal Vial\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.DRINK_POTION]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Discount Voucher\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.ASSIGN_SHOP_PRICES]: {\n        shopPriceMultiplier: 0.8, // 20% cheaper shop prices\n      },\n    },\n  },\n  {\n    name: \"Sleeping Bag\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        healPlayer: 50,\n      },\n    },\n  },\n  {\n    name: \"Toothfairy's Charm\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        goldAdd: 50,\n      },\n    },\n  },\n  {\n    name: \"Planetarium Mobile\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        permanentlyUpgradeRandomCardsInDeck: 2, // upgrade random cards in the deck when resting\n      },\n    },\n  },\n  {\n    name: \"Dousing Rod\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.POPULATE_PATHS]: {\n        revealAnonymousPaths: true,\n      },\n    },\n  },\n  {\n    //fix the names of this\n    name: \"Gem of Weakness\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.COMBAT_START]: {\n        weakenEnemyHpPercent: 0.1, // 10% reduction\n      },\n    },\n  },\n  {\n    name: \"Phylactery\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.SHUFFLE_GRAVEYARD_INTO_DECK]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Crystal Ball\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.DRAW_CARD]: {\n        bunnyAdd: 1,\n      },\n    },\n  },\n  {\n    name: \"Arcane Brush\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.PLAY_CARD]: {\n        bunnyAdd: 2,\n      },\n    },\n  },\n  {\n    name: \"Golden Carrot\",\n    rarity: RARITIES.LEGENDARY,\n    bossOnly: true,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n        bonusPages: 1,\n        bonusInk: 1,\n        BonusMulligans: 1,\n      },\n    },\n  },\n  {\n    name: \"Voynich Manuscript\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.CAST_SPELLBOOK]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Corsair's Coin\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.COMBAT_END]: {\n        goldAdd: 25,\n      },\n    },\n  },\n  {\n    name: \"Carrot Staff\",\n    rarity: RARITIES.MYTHIC,\n    description: \"Doubles all Bunny damage you deal.\",\n    triggers: {\n      [TRIGGER_EVENTS.DEAL_DAMAGE]: {\n        damageTypeTrigger: DAMAGE_TYPES.BUNNY,\n        multiplyDamage: 1.5,\n      },\n    },\n  },\n  {\n    name: \"Lightning Rod\",\n    rarity: RARITIES.MYTHIC,\n    description: \"Whenever you cast a Lightning spell, draw 2 cards.\",\n    triggers: {\n      [TRIGGER_EVENTS.PLAY_CARD]: {\n        ifLightningDrawCards: 2,\n      },\n    },\n  },\n  {\n    name: \"Firemage's Hat\",\n    rarity: RARITIES.MYTHIC,\n    description: \"All Fire cards cost 1 less ink.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        reduceInkCostOfFireCardsInDeck: 1,\n      },\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        reduceInkCostIfFire: 1,\n      },\n    },\n  },\n  {\n    name: \"Thinking Cap\",\n    rarity: RARITIES.MYTHIC,\n    description: \"Your hand size is permanently increased by 3.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHandSize: 3,\n      },\n    },\n  },\n  {\n    name: \"Silk Gloves\",\n    rarity: RARITIES.COMMON,\n    description: \"Your hand size is permanently increased by 1.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHandSize: 1,\n      },\n    },\n  },\n  {\n    name: \"Ring of Athena\",\n    rarity: RARITIES.RARE,\n    description: \"Your hand size is permanently increased by 2.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHandSize: 2,\n      },\n    },\n  },\n];\nconst potionList = [\n  {\n    name: \"Lesser Healing Potion\",\n    rarity: RARITIES.COMMON,\n    healthRestore: 10,\n  },\n  {\n    name: \"Healing Potion\",\n    rarity: RARITIES.UNCOMMON,\n    healthRestore: 15,\n  },\n  {\n    name: \"Greater Healing Potion\",\n    rarity: RARITIES.RARE,\n    healthRestore: 20,\n  },\n  {\n    name: \"Elixir of Life\",\n    rarity: RARITIES.MYTHIC,\n    healthRestore: 50,\n  },\n  {\n    name: \"Squid Brew\",\n    rarity: RARITIES.UNCOMMON,\n    bonusInk: 1,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Hearty Soup\",\n    rarity: RARITIES.RARE,\n    increaseMaxHp: 10,\n  },\n  {\n    name: \"Coconut Juice\",\n    rarity: RARITIES.COMMON,\n    increaseMaxHp: 2,\n  },\n  {\n    name: \"Ponderous Potion\",\n    rarity: RARITIES.UNCOMMON,\n    cardDraw: 2,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Bunny Brew\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 5,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Warren Elixir\",\n    rarity: RARITIES.RARE,\n    bunnyMult: 2,\n    drinkableOutOfCombat: false,\n  },\n];\n//#endregion\n//#region utility functions\nfunction capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\nfunction shuffleArray(originalArray) {\n  const array = [...originalArray]; // copy to avoid mutation\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction weightedRandomChoice(weightedMap) {\n  const entries = Object.entries(weightedMap);\n  const totalWeight = entries.reduce((sum, [_, weight]) => sum + weight, 0);\n  const r = Math.random() * totalWeight;\n  let cumulative = 0;\n\n  for (const [key, weight] of entries) {\n    cumulative += weight;\n    if (r <= cumulative) return key;\n  }\n}\nfunction changeScreen(dispatch, screen) {\n  dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: screen });\n}\nfunction inspectDeck(dispatch) {\n  changeScreen(dispatch, SCREENS.DECK);\n}\nfunction inspectCombatDeck(dispatch) {\n  changeScreen(dispatch, SCREENS.COMBAT_DECK);\n}\nfunction inspectGraveyard(dispatch) {\n  changeScreen(dispatch, SCREENS.GRAVEYARD);\n}\nfunction inspectExile(dispatch) {\n  changeScreen(dispatch, SCREENS.EXILE);\n}\nfunction returnToMain(dispatch) {\n  changeScreen(dispatch, SCREENS.MAIN);\n}\n\nfunction assignShopPrices(state) {\n  const globalMultiplier = state.shopPriceMultiplier || 1;\n\n  const basePrices = {\n    card: 10,\n    potion: 20,\n    gem: 30,\n    relic: 100,\n  };\n\n  const rarityMultipliers = {\n    common: 1,\n    uncommon: 1.2,\n    rare: 1.4,\n    mythic: 1.6,\n    legendary: 2,\n  };\n\n  const updatedShopfront = state.offerings.shopfront.map((entry) => {\n    const { type, item } = entry;\n\n    if (!item || !item.name) {\n      console.warn(\"Invalid shop item during price assignment:\", entry);\n      return entry;\n    }\n\n    const basePrice = basePrices[type] || 0;\n    const upgrades = item.upgrades || 0;\n    const upgradeCost = [\"card\", \"potion\"].includes(type) ? upgrades * 5 : 0;\n\n    const rarity = item.rarity?.toLowerCase?.() || \"common\";\n    const rarityMultiplier = rarityMultipliers[rarity] || 1;\n\n    const price = Math.round(\n      (basePrice + upgradeCost) * rarityMultiplier * globalMultiplier\n    );\n\n    return {\n      ...entry,\n      item: {\n        ...item,\n        price,\n      },\n    };\n  });\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: updatedShopfront,\n    },\n    log: [`Assigned prices to shop items.`, ...state.log],\n  };\n}\nfunction anonymizeObject(obj) {\n  return {\n    ...obj,\n    anonymousNameDisplay: true,\n  };\n}\n\n//#endregion\n//#region reducer-action handlers\nfunction generateStarterDeck(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\n      \"Cannot generate starter deck: invalid difficulty:\",\n      difficulty\n    );\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n  const deck = [];\n\n  // 1. Add one of each basic mono card\n  const basicMonoCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_MONO\n  );\n  for (const card of basicMonoCards) {\n    deck.push(createCardInstance(card.name));\n  }\n\n  // 2. Add 3 of each basic poly card\n  const basicPolyCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_POLY\n  );\n  for (const card of basicPolyCards) {\n    for (let i = 0; i < 3; i++) {\n      deck.push(createCardInstance(card.name));\n    }\n  }\n\n  // 3. Add additional random basic poly cards based on difficulty\n  for (let i = 0; i < modifiers.basicCardCountModifier; i++) {\n    const card = generateRandomCard(state, { rarity: RARITIES.BASIC_POLY });\n    if (card) deck.push(card);\n  }\n\n  // 4. Shuffle the deck (pure)\n  const shuffledDeck = shuffleArray(deck);\n\n  // 5. Return new state with updated campaign.deck\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: shuffledDeck,\n    },\n    log: [...state.log],\n  };\n}\n\nfunction applyDifficultyModifiers(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\"Invalid or missing difficulty:\", difficulty);\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n\n  return {\n    ...state,\n    gold: state.gold + modifiers.goldModifier,\n    basicCardCount: state.basicCardCount + modifiers.basicCardCountModifier,\n    luck: (state.luck || 0) + (modifiers.luckModifier || 0),\n    shopPriceMultiplier:\n      (state.shopPriceMultiplier || 1) +\n      (modifiers.shopPriceMultiplierModifier || 0),\n    restHealthRestore:\n      (state.restHealthRestore || 0) +\n      (modifiers.restHealthRestoreModifier || 0),\n    maxHealth: state.maxHealth + modifiers.maxHealthModifier,\n    health: state.health + modifiers.maxHealthModifier,\n    enemyHealthMultiplier:\n      (state.enemyHealthMultiplier || 1) +\n      (modifiers.enemyHealthMultiplierModifier || 0),\n  };\n}\n\nfunction advancePhaseTo(state, phaseAdvancedTo) {\n  console.log(\">>> Advancing to phase:\", phaseAdvancedTo);\n\n  if (!Object.values(PHASES).includes(phaseAdvancedTo)) {\n    console.error(\"Invalid phase passed to advancePhaseTo:\", phaseAdvancedTo);\n    return state;\n  }\n\n  return {\n    ...state,\n    currentPhase: phaseAdvancedTo,\n  };\n}\nfunction handlePhaseTransitions(state) {\n  const phase = state.currentPhase;\n\n  switch (phase) {\n    case PHASES.DIFFICULTY_SELECTION:\n      return {\n        ...state,\n        log: [\"Choose your difficulty.\", ...state.log],\n      };\n\n    case PHASES.PATH_SELECTION:\n      console.log(\">> Entering PHASES.PATH_SELECTION\");\n      return populatePathOfferings(state);\n\n    case PHASES.CARD_OFFERING:\n      console.log(\">> Entering PHASES.CARD_OFFERING\");\n      return populateCardOfferings(state);\n\n    case PHASES.MYTHIC_RELIC_OFFERING:\n      console.log(\">> Entering PHASES.MYTHIC_RELIC_OFFERING .\");\n      return populateRelicOfferings(state, RARITIES.MYTHIC);\n\n    case PHASES.RELIC_OFFERING:\n      console.log(\">> Entering PHASES.RELIC_OFFERING.\");\n      return populateRelicOfferings(state);\n\n    case PHASES.POTION_OFFERING:\n      console.log(\">> Entering POTION_OFFERING phase.\");\n      return populatePotionOfferings(state);\n\n    case PHASES.GEM_OFFERING:\n      console.log(\">> Entering GEM_OFFERING phase.\");\n      return populateGemOfferings(state);\n\n    case PHASES.SHOP:\n      return populateShopfront(state);\n\n    case PHASES.COMBAT:\n      return initializeCombatPhase(state, state.currentPath);\n\n    default:\n      return state;\n  }\n}\nfunction pickPath(state, index) {\n  const paths = state.offerings.paths;\n\n  if (!paths || index < 0 || index >= paths.length) {\n    console.error(\"Invalid path index:\", index);\n    return state;\n  }\n\n  const chosenPath = paths[index];\n  const pathKey = chosenPath.path;\n  const pathData = pathMap[pathKey];\n\n  if (!pathData || !pathData.leadsTo) {\n    console.error(\"Path has no destination phase:\", pathKey);\n    return state;\n  }\n\n  return handlePhaseTransitions({\n    ...state,\n    level: (state.level ?? 0) + 1,\n    currentPath: chosenPath, // ✅ store the path here\n    currentPhase: pathData.leadsTo,\n    log: [`Chose path: ${pathKey}`, ...state.log],\n    offerings: {\n      ...state.offerings,\n      paths: [],\n    },\n  });\n}\nfunction populateCardOfferings(state) {\n  const newCards = [];\n\n  while (newCards.length < 3) {\n    const card = generateRandomCard(state);\n    if (!card) continue;\n    if (newCards.some((existing) => existing.name === card.name)) continue;\n    newCards.push(card);\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      cards: newCards,\n    },\n  };\n}\nfunction populatePotionOfferings(state) {\n  const selectedPotions = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedPotions.length < 3 && attempts < 50) {\n    attempts++;\n\n    const potion = generateRandomPotion(state);\n    if (!potion) continue;\n\n    if (usedNames.has(potion.name)) continue;\n\n    selectedPotions.push(potion);\n    usedNames.add(potion.name);\n  }\n\n  if (selectedPotions.length < 3) {\n    console.warn(\"Not enough unique potions to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      potions: selectedPotions,\n    },\n  };\n}\nfunction populateRelicOfferings(state, rarity = null) {\n  const selected = [];\n  const maxRelics = 3;\n\n  while (selected.length < maxRelics) {\n    const relic = generateRandomRelic(state, { rarity });\n\n    // Ensure uniqueness by name\n    if (selected.some((r) => r.name === relic.name)) continue;\n\n    selected.push(relic);\n  }\n\n  console.log(\"Selected relic offerings:\", selected);\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      relics: selected,\n    },\n  };\n}\nfunction populateGemOfferings(state) {\n  const selectedGems = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedGems.length < 3 && attempts < 50) {\n    attempts++;\n\n    const gem = generateRandomGem(state);\n    if (!gem) continue;\n\n    if (usedNames.has(gem.name)) continue;\n\n    selectedGems.push(gem);\n    usedNames.add(gem.name);\n  }\n\n  if (selectedGems.length < 3) {\n    console.warn(\"Not enough unique gems to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      gems: selectedGems,\n    },\n  };\n}\nfunction populatePathOfferings(state) {\n  const luck = state.luck || 0;\n  const misery = state.misery || 0;\n  const level = state.level || 0;\n\n  // === Step 0: Boss override ===\n  if ([15, 30, 45].includes(level)) {\n    const bossPath = {\n      path: PATHS.BOSS_FIGHT,\n      ...pathMap[PATHS.BOSS_FIGHT],\n    };\n    return {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        paths: [bossPath, bossPath, bossPath],\n      },\n      log: [`Boss floor! All paths lead to a boss fight.`, ...state.log],\n    };\n  }\n\n  // === Step 1: Always pick 1 fight path ===\n  const fightWeights = {\n    [PATHS.EASY_FIGHT]: 3,\n    [PATHS.MEDIUM_FIGHT]: 2,\n    [PATHS.HARD_FIGHT]: 1,\n  };\n  const fightPathKey = weightedRandomChoice(fightWeights);\n  const fightPath = {\n    path: fightPathKey,\n    ...pathMap[fightPathKey],\n  };\n\n  // === Step 2: Create pool of all valid paths (excluding duplicate of picked fight) ===\n  const allPaths = Object.entries(pathMap)\n    .filter(([key]) => key !== fightPathKey)\n    .map(([path, data]) => ({ path, ...data }));\n\n  const bossLevels = [15, 30, 45];\n  const isBossLevel = bossLevels.includes(level);\n\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null || card.unsocketable);\n\n  const allCardsUnupgradable =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.unupgradable);\n\n  const filteredPaths = allPaths.filter((pathObj) => {\n    if (pathObj.path === PATHS.BOSS_FIGHT && !isBossLevel) return false;\n    if (pathObj.path === PATHS.GEM_OFFERING && allCardsSocketed) return false;\n    if (pathObj.path === PATHS.ENCHANT && allCardsUnupgradable) return false;\n    return true;\n  });\n\n  // === Step 3: Pick first two paths using rarity weights ===\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const chosenRarities = [\n    weightedRandomChoice(rarityWeights),\n    weightedRandomChoice(rarityWeights),\n  ];\n\n  const chosenPaths = [];\n  const usedPaths = new Set([fightPathKey]);\n\n  for (const rarity of chosenRarities) {\n    const candidates = filteredPaths.filter(\n      (p) => p.rarity === rarity && !usedPaths.has(p.path)\n    );\n    if (candidates.length > 0) {\n      const pick = candidates[Math.floor(Math.random() * candidates.length)];\n      usedPaths.add(pick.path);\n      chosenPaths.push(pick);\n    }\n  }\n\n  // === Step 4: Fill in missing 2nd path if needed\n  const remainingPool = filteredPaths.filter((p) => !usedPaths.has(p.path));\n  while (chosenPaths.length < 2 && remainingPool.length > 0) {\n    const idx = Math.floor(Math.random() * remainingPool.length);\n    const pick = remainingPool.splice(idx, 1)[0];\n    usedPaths.add(pick.path);\n    chosenPaths.push(pick);\n  }\n\n  // === Step 5: Optional override for 3rd path using misery + luck if both are fights\n  const firstTwoAreFights = chosenPaths.every((p) => p.isFight);\n  let finalPaths = [fightPath, ...chosenPaths];\n  let newMisery = misery;\n\n  if (firstTwoAreFights && misery > 0 && remainingPool.length > 0) {\n    const thirdOptions = remainingPool.filter((p) => !usedPaths.has(p.path));\n    if (thirdOptions.length > 0) {\n      const nonFights = thirdOptions.filter((p) => !p.isFight);\n      const fights = thirdOptions.filter((p) => p.isFight);\n\n      const weightedPool = [];\n      nonFights.forEach((p) => {\n        for (let i = 0; i < misery + luck; i++) weightedPool.push(p);\n      });\n      fights.forEach((p) => {\n        weightedPool.push(p); // 1 weight each\n      });\n\n      if (weightedPool.length > 0) {\n        const pick =\n          weightedPool[Math.floor(Math.random() * weightedPool.length)];\n        usedPaths.add(pick.path);\n        finalPaths[2] = pick;\n        if (!pick.isFight) newMisery = misery - 1;\n      }\n    }\n  }\n\n  // === Step 6: Check again if all 3 are fights and increment misery\n  const allFights = finalPaths.every((p) => p.isFight);\n  if (allFights) newMisery++;\n\n  // === Step 6.5: Replace SHOP if player is broke\n  if (state.gold < 100) {\n    const shopIndex = finalPaths.findIndex((p) => p.path === PATHS.SHOP);\n    if (shopIndex !== -1) {\n      const replaceableOptions = [\n        PATHS.REST,\n        PATHS.PURGE,\n        PATHS.TRANSMUTE,\n        PATHS.CARD_OFFERING,\n        PATHS.RELIC_OFFERING,\n        PATHS.ENCHANT_OFFERING,\n      ];\n      const existingPaths = new Set(finalPaths.map((p) => p.path));\n      const replacements = replaceableOptions.filter(\n        (p) => !existingPaths.has(p)\n      );\n\n      if (replacements.length > 0) {\n        const replacement =\n          replacements[Math.floor(Math.random() * replacements.length)];\n        finalPaths[shopIndex] = {\n          path: replacement,\n          ...pathMap[replacement],\n        };\n        console.log(\n          `💰 Replaced SHOP with ${replacement} because player has < 100 gold.`\n        );\n      }\n    }\n  }\n\n  // === Step 7: Randomly anonymize one path based on (50% - luck) chance\n  const anonChance = Math.max(0, 0.5 - (state.luck || 0) * 0.01);\n  const anonIndex = Math.floor(Math.random() * finalPaths.length);\n  if (Math.random() < anonChance) {\n    finalPaths[anonIndex] = anonymizeObject(finalPaths[anonIndex]);\n  }\n\n  // === Step 8: Apply relic triggers\n  const triggerResult = checkRelicTriggers(\n    state,\n    TRIGGER_EVENTS.POPULATE_PATH,\n    {\n      payload: finalPaths,\n    }\n  );\n  const updatedPaths = triggerResult.result || finalPaths;\n  const updatedState = { ...triggerResult };\n\n  console.log(\"📍 Populating path offerings with:\", updatedPaths);\n  return {\n    ...updatedState,\n    misery: newMisery,\n    offerings: {\n      ...updatedState.offerings,\n      paths: updatedPaths,\n    },\n  };\n}\n\nfunction pickCard(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  let sourceArrayName = null;\n\n  if (offerings.cards && index < offerings.cards.length) {\n    sourceArrayName = \"cards\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid card index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap\n  const pickedCard =\n    sourceArrayName === \"shopfront\"\n      ? entry.item\n      : sourceArrayName === \"combatRewards\"\n      ? entry.value\n      : entry;\n\n  if (!pickedCard || !pickedCard.name) {\n    console.warn(\"⚠️ Picked card is invalid:\", pickedCard);\n  }\n\n  if (!pickedCard) {\n    console.error(\"No card found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const price = entry.item?.price !== undefined ? entry.item.price : 20;\n    const charged = chargeGoldPrice(state, price, \"card\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  // === 3. Trigger relics BEFORE adding to deck ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.CARD_PICKUP,\n    {\n      payload: pickedCard,\n    }\n  );\n\n  const upgradedCard = triggerResult.result || pickedCard;\n  updatedState = { ...triggerResult, result: undefined };\n\n  // === 4. Add to campaign deck ===\n  const updatedCampaign = {\n    ...updatedState.campaign,\n    deck: [...updatedState.campaign.deck, upgradedCard],\n  };\n\n  // === 5. Remove from offerings ===\n  const updatedOfferings = {\n    ...updatedState.offerings,\n    [sourceArrayName]: sourceArray.filter((_, i) => i !== index),\n  };\n\n  // === 6. Build new state ===\n  let newState = {\n    ...updatedState,\n    campaign: updatedCampaign,\n    offerings: updatedOfferings,\n    log: [`Picked card: ${upgradedCard.name}`, ...updatedState.log],\n  };\n\n  // === 7. Trash if from offering ===\n  if (phase === PHASES.CARD_OFFERING) {\n    const trashed = sourceArray.filter((_, i) => i !== index);\n    newState = {\n      ...newState,\n      trashPile: [...(newState.trashPile || []), ...trashed],\n      offerings: {\n        ...newState.offerings,\n        [sourceArrayName]: [],\n      },\n    };\n\n    newState = handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\nfunction pickRelic(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  if (offerings.relics && index < offerings.relics.length) {\n    sourceArrayName = \"relics\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid relic index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap relic from shopfront if needed\n  const pickedRelic =\n    sourceArrayName === \"shopfront\"\n      ? entry.item\n      : sourceArrayName === \"combatRewards\"\n      ? entry.value\n      : entry;\n  if (!pickedRelic) {\n    console.error(\"No relic found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const relicPrice = entry.item?.price ?? 50;\n    const chargedState = chargeGoldPrice(state, relicPrice, \"relic\");\n    if (chargedState === state) return state; // not enough gold\n    updatedState = chargedState;\n  }\n\n  // === 3. Add relic to belt ===\n  updatedState = {\n    ...updatedState,\n    relicBelt: [...updatedState.relicBelt, pickedRelic],\n  };\n\n  // === 4. Remove the picked relic from offerings ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 5. Trash unchosen relics if from offering phase ===\n  const isOfferingPhase = [\n    PHASES.MYTHIC_RELIC_OFFERING,\n    PHASES.RELIC_OFFERING,\n  ].includes(phase);\n\n  let updatedTrashPile = updatedState.trashPile;\n  if (isOfferingPhase) {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.relics.filter((_, i) => i !== index),\n    ];\n    offerings.relics = [];\n  }\n\n  // === 6. Build the new state ===\n  const newState = {\n    ...updatedState,\n    trashPile: updatedTrashPile, // ✅ Root-level trash pile\n    offerings,\n    log: [`Picked relic: ${pickedRelic.name}`, ...updatedState.log],\n  };\n\n  // === 7. Trigger relic effects\n  const triggeredState = checkRelicTriggers(\n    newState,\n    TRIGGER_EVENTS.RELIC_PICKUP,\n    { relic: pickedRelic }\n  );\n\n  // === 8. Advance phase if in offering\n  if (isOfferingPhase) {\n    return handlePhaseTransitions(\n      advancePhaseTo(triggeredState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return triggeredState;\n}\n\nfunction pickPotion(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  let sourceArray = null;\n\n  if (offerings.potions && index < offerings.potions.length) {\n    sourceArrayName = \"potions\";\n    sourceArray = offerings.potions;\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n    sourceArray = offerings.shopfront;\n  } else if (\n    phase === PHASES.COMBAT_END &&\n    offerings.combatRewards &&\n    offerings.combatRewards[index]?.type === \"potion\"\n  ) {\n    sourceArrayName = \"combatRewards\";\n    sourceArray = offerings.combatRewards;\n  } else {\n    console.error(\"Invalid potion index:\", index);\n    return state;\n  }\n\n  const entry = sourceArray[index];\n\n  // === 2. Unwrap the potion if needed ===\n  let pickedPotion;\n  if (sourceArrayName === \"shopfront\") {\n    pickedPotion = entry.item;\n  } else if (sourceArrayName === \"combatRewards\") {\n    pickedPotion = entry.value;\n  } else {\n    pickedPotion = entry;\n  }\n\n  if (!pickedPotion) {\n    console.error(\"No potion found at index:\", index);\n    return state;\n  }\n\n  // === 3. Charge cost if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const price = entry.item?.price ?? 30;\n    const charged = chargeGoldPrice(state, price, \"potion\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  // === 4. Apply pickup relic triggers (may upgrade the potion) ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.POTION_PICKUP,\n    { payload: pickedPotion }\n  );\n  const triggeredPotion = triggerResult.result;\n  updatedState = { ...triggerResult }; // includes possible log/relic changes\n\n  // === 5. Add to potion belt ===\n  const updatedPotionBelt = [...updatedState.potionBelt, triggeredPotion];\n\n  // === 6. Remove picked potion from source\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 7. Trash unchosen potions if from potion offering\n  let updatedTrashPile = updatedState.trashPile;\n  if (phase === PHASES.POTION_OFFERING && sourceArrayName === \"potions\") {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.potions.filter((_, i) => i !== index),\n    ];\n    offerings.potions = [];\n  }\n\n  // === 8. Build new state\n  const newState = {\n    ...updatedState,\n    potionBelt: updatedPotionBelt,\n    trashPile: updatedTrashPile,\n    offerings,\n    log: [`Picked potion: ${pickedPotion.name}`, ...updatedState.log],\n  };\n\n  // === 9. Advance phase if from potion offering\n  if (phase === PHASES.POTION_OFFERING) {\n    return handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\n\nfunction drinkPotion(state, potion) {\n  if (!potion) {\n    console.error(\"No potion passed to drinkPotion\");\n    return state;\n  }\n\n  console.log(\"🧪 Drinking potion:\", potion);\n\n  let updatedState = { ...state };\n\n  // === 1. Apply effects ===\n  if (potion.healthRestore) {\n    updatedState = heal(updatedState, potion.healthRestore);\n  }\n\n  if (potion.bonusInk && state.currentPhase === PHASES.COMBAT) {\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        ink: updatedState.combat.ink + potion.bonusInk,\n      },\n      log: [\n        `Gained ${potion.bonusInk} bonus ink from ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  if (potion.increaseMaxHp) {\n    const amount = potion.increaseMaxHp;\n    updatedState = {\n      ...updatedState,\n      maxHealth: updatedState.maxHealth + amount,\n      health: updatedState.health + amount,\n      log: [\n        `Max and current HP increased by ${amount} from ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  // === Upgrade cards in hand (if applicable) ===\n  if (\n    potion.upgradeCardsInHand &&\n    state.currentPhase === PHASES.COMBAT &&\n    updatedState.combat.hand\n  ) {\n    const hand = [...updatedState.combat.hand];\n    const upgradable = hand.filter(\n      (card) => !card.unupgradable && typeof card.upgrades === \"number\"\n    );\n    const numToUpgrade = Math.min(potion.upgradeCardsInHand, upgradable.length);\n\n    const shuffled = [...upgradable].sort(() => Math.random() - 0.5);\n    const toUpgrade = shuffled.slice(0, numToUpgrade);\n\n    const newHand = hand.map((card) => {\n      if (toUpgrade.includes(card)) {\n        return { ...card, upgrades: card.upgrades + 1 };\n      }\n      return card;\n    });\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        hand: newHand,\n      },\n      log: [\n        `Upgraded ${toUpgrade.length} card(s) in hand with ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  // === Always apply draw, bunnyAdd, bunnyMult if present ===\n  if (potion.cardDraw && state.currentPhase === PHASES.COMBAT) {\n    for (let i = 0; i < potion.cardDraw; i++) {\n      updatedState = drawCard(updatedState);\n    }\n  }\n\n  if (potion.bunnyAdd) {\n    updatedState = addBunnies(updatedState, potion.bunnyAdd);\n  }\n\n  if (potion.bunnyMult) {\n    updatedState = multiplyBunnies(updatedState, potion.bunnyMult);\n  }\n\n  // === 2. Remove potion from belt and add to trash ===\n  const belt = updatedState.potionBelt || [];\n  const index = belt.findIndex((p) => p.name === potion.name);\n  const newPotionBelt =\n    index >= 0 ? [...belt.slice(0, index), ...belt.slice(index + 1)] : belt;\n  const newTrash = [...updatedState.trashPile, potion];\n\n  updatedState = {\n    ...updatedState,\n    potionBelt: newPotionBelt,\n    trashPile: newTrash,\n  };\n\n  // === 3. Trigger relic effects\n  const triggered = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.DRINK_POTION,\n    { potion }\n  );\n\n  return {\n    ...triggered,\n    log: triggered.log || updatedState.log,\n  };\n}\n\nfunction openModScreen(state, mod, originPhase = null) {\n  const validKeys = [\"upgrade\", \"gem\", \"purge\", \"transmute\"];\n  const keys = Object.keys(mod || {});\n  if (keys.length !== 1 || !validKeys.includes(keys[0])) {\n    console.error(\"Invalid mod passed to openModScreen:\", mod);\n    return state;\n  }\n\n  // === GEM LOGIC: Discard unchosen gems only if from gem offering ===\n  if (mod.gem && (state.offerings.gems?.length || 0) > 0) {\n    const chosenGemName = mod.gem.name;\n\n    const discardedGems = state.offerings.gems.filter(\n      (g) => g.name !== chosenGemName\n    );\n\n    state = {\n      ...state,\n      campaign: {\n        ...state.campaign,\n        trashPile: [...state.trashPile, ...discardedGems],\n      },\n      offerings: {\n        ...state.offerings,\n        gems: [], // clear offering gems\n      },\n      log: [`Discarded ${discardedGems.length} unchosen gem(s).`, ...state.log],\n    };\n  }\n\n  // === If the chosen gem came from combat rewards, remove it ===\n  if (\n    mod.gem &&\n    state.currentPhase === PHASES.COMBAT_END &&\n    Array.isArray(state.offerings.combatRewards)\n  ) {\n    const updatedRewards = state.offerings.combatRewards.filter(\n      (reward) => reward.type !== \"gem\" || reward.value.name !== mod.gem.name\n    );\n\n    state = {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        combatRewards: updatedRewards,\n      },\n      log: [`Picked gem: ${mod.gem.name}`, ...state.log],\n    };\n  }\n\n  // === Charge gold if in shop ===\n  if (state.currentPhase === PHASES.SHOP) {\n    const price = mod?.gem?.price ?? 50;\n\n    const charged = chargeGoldPrice(state, price, \"card modification\");\n    if (charged === state) return state; // insufficient gold\n    state = charged;\n  }\n\n  // Remove purchased gem from shopfront\n  if (mod.gem && Array.isArray(state.offerings.shopfront)) {\n    const updatedShopfront = state.offerings.shopfront.filter(\n      (entry) => !(entry.type === \"gem\" && entry.item.name === mod.gem.name)\n    );\n\n    state = {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        shopfront: updatedShopfront,\n      },\n      log: [`Purchased gem: ${mod.gem.name}`, ...state.log],\n    };\n  }\n\n  return {\n    ...state,\n    currentScreen: SCREENS.MOD,\n    modData: {\n      mod,\n      origin: originPhase || state.currentPhase,\n    },\n    log: [`Opened mod screen (${keys[0]}).`, ...state.log],\n  };\n}\n\nfunction increaseBaseBunnies(state, amount) {\n  const newAmount = Math.max(0, (state.baseBunnies || 0) + amount);\n\n  return {\n    ...state,\n    baseBunnies: newAmount,\n    log: [`Base bunnies increased by ${amount}.`, ...state.log],\n  };\n}\nfunction applyModToCard(state, card) {\n  const mod = state.modData?.mod;\n  const origin = state.modData?.origin;\n\n  if (!mod || !card) {\n    console.warn(\"applyModToCard called without a valid mod or card.\");\n    return state;\n  }\n\n  let updatedDeck = [...state.campaign.deck];\n  const cardIndex = updatedDeck.findIndex((c) => c === card);\n\n  if (cardIndex === -1) {\n    console.warn(\"Card not found in campaign deck.\");\n    return state;\n  }\n\n  // Apply mod\n  let modifiedCard = { ...card };\n  if (mod.upgrade) {\n    modifiedCard = upgradeCard(modifiedCard, mod.upgrade);\n  } else if (mod.gem) {\n    modifiedCard = socketCardWithGem(modifiedCard, mod.gem);\n  } else if (mod.purge) {\n    updatedDeck.splice(cardIndex, 1); // Remove the card\n  } else if (mod.transmute) {\n    modifiedCard = transmuteCard(modifiedCard);\n  }\n\n  // Replace modified card if not purged\n  if (!mod.purge) {\n    updatedDeck[cardIndex] = modifiedCard;\n  }\n\n  // Determine next phase\n  const nextPhase =\n    origin === PHASES.SHOP || origin === PHASES.COMBAT_END\n      ? origin\n      : PHASES.PATH_SELECTION;\n\n  const updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n    },\n    modData: null,\n    currentScreen: SCREENS.MAIN,\n    currentPhase: nextPhase,\n    log: [`Applied mod to ${card.name}.`, ...state.log],\n  };\n\n  // If transitioning to path selection, trigger path population\n  return nextPhase === PHASES.PATH_SELECTION\n    ? handlePhaseTransitions(updatedState)\n    : updatedState;\n}\nfunction populateShopfront(state) {\n  const shopfrontTypes = [];\n  // === Clear existing shop items into trash ===\n  const previousItems = state.offerings.shopfront || [];\n  const discardedItems = previousItems.map((entry) => entry.item);\n  const updatedTrash = [...(state.trashPile || []), ...discardedItems];\n  // === Step 1: Populate exactly 3 of each item type ===\n  const typeCounts = {\n    card: 3,\n    potion: 3,\n    gem: 3,\n    relic: 3,\n  };\n\n  for (const [type, count] of Object.entries(typeCounts)) {\n    for (let i = 0; i < count; i++) {\n      shopfrontTypes.push(type);\n    }\n  }\n\n  // === Step 3: Generate actual items, avoiding duplicates ===\n  const generatedItems = [];\n  const usedKeys = new Set();\n\n  for (let type of shopfrontTypes) {\n    let item = null;\n    let attempt = 0;\n\n    while (attempt < 20) {\n      attempt++;\n      try {\n        switch (type) {\n          case \"card\":\n            item = generateRandomCard(state);\n            break;\n          case \"potion\":\n            item = generateRandomPotion(state);\n            break;\n          case \"gem\":\n            item = generateRandomGem(state);\n            break;\n          case \"relic\":\n            item = generateRandomRelic(state);\n            break;\n          default:\n            item = null;\n        }\n\n        if (!item) continue;\n\n        const key = `${type}-${item.name}`;\n        if (usedKeys.has(key)) continue;\n\n        usedKeys.add(key);\n        generatedItems.push({ type, item });\n        break; // done\n      } catch (e) {\n        console.warn(\"Shop item generation failed:\", type, e);\n      }\n    }\n  }\n\n  // === Step 4: Insert shopfront and assign prices ===\n  let updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      trashPile: updatedTrash,\n    },\n    offerings: {\n      ...state.offerings,\n      shopfront: generatedItems,\n    },\n  };\n\n  updatedState = assignShopPrices(updatedState);\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.ASSIGN_SHOP_PRICES\n  );\n\n  return {\n    ...updatedState,\n    log: [...updatedState.log],\n  };\n}\nfunction gainGold(state, amount) {\n  const newGold = (state.gold || 0) + amount;\n\n  return {\n    ...state,\n    gold: newGold,\n    log: [`Gained ${amount} gold.`, ...state.log],\n  };\n}\nfunction practiceWandwork(state) {\n  // Step 1: Increase base bunnies by 1\n  let newState = increaseBaseBunnies(state, 1);\n\n  // Step 2: Advance to path selection\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  // Step 3: Handle the transition (populate offerings)\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\nfunction lootHoard(state) {\n  const baseGold = 10;\n  const levelBonus = state.level || 0;\n  const enemiesDefeated = state.defeatedEnemies?.length || 0;\n  const luck = state.luck || 0;\n\n  const enemyBonus = enemiesDefeated * 5;\n  const luckBonus = luck * 2;\n\n  const totalGold = baseGold + levelBonus + enemyBonus + luckBonus;\n\n  // Step 1: Gain gold\n  let newState = gainGold(state, totalGold);\n\n  // Step 2: Track hoards looted\n  const hoardsLooted = (newState.hoardsLooted || 0) + 1;\n  newState = {\n    ...newState,\n    hoardsLooted,\n    log: [`Looted a hoard! (${totalGold}g)`, ...newState.log],\n  };\n\n  // Step 3: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction rest(state) {\n  const amountToHeal = state.restHealthRestore || 0;\n  const currentHealth = state.health || 0;\n\n  // Step 1: Heal the player\n  let newState = heal(state, amountToHeal);\n  const healedAmount = newState.health - currentHealth;\n\n  // Step 2: Check relic triggers for REST\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.REST);\n\n  // Step 3: Add one summary log line\n  newState = {\n    ...newState,\n    log: [\n      `Rested at the fire and recovered ${healedAmount} HP.`,\n      ...newState.log.filter((msg) => !msg.startsWith(\"Healed\")),\n    ],\n  };\n\n  // Step 4: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  //Step 5: Populate offerings for the new phase\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction toggleDeckInspect(state, dispatch) {\n  const isInspectingDeck = state.currentScreen === SCREENS.DECK;\n  const returnTo = state.previousScreen || SCREENS.MAIN;\n\n  dispatch({\n    type: ACTIONS.SCREEN_CHANGE,\n    payload: isInspectingDeck ? returnTo : SCREENS.DECK,\n  });\n}\n\n//#endregion\n//#region state setup and game initialization\nfunction createInitialState() {\n  return {\n    log: [],\n    currentScreen: SCREENS.MAIN,\n    previousScreen: null,\n    currentPhase: PHASES.MAIN_MENU,\n    currentPath: null,\n\n    basicCardCount: 5,\n    restHealthRestore: 10,\n    shopPriceMultiplier: 1,\n    enemyHealthMultiplier: 1,\n    difficulty: null,\n\n    maxHealth: 0,\n    health: 0,\n    baseBunnies: 0,\n\n    gold: 100,\n\n    luck: 0,\n    level: 0,\n    stage: 0,\n    misery: 0,\n\n    hoardsLooted: 0,\n    defeatedEnemies: [],\n    trashPile: [],\n\n    relicBelt: [],\n    potionBelt: [],\n\n    campaign: {\n      mulligans: 0,\n      deck: [],\n      ink: 4,\n      books: 1,\n      pages: 4,\n      handSize: 6,\n    },\n    combat: {\n      mulligans: 0,\n      deck: [],\n      hand: [],\n      graveyard: [],\n      exile: [],\n      spellbook: [],\n\n      combatEnded: null,\n\n      baseBunnies: 0,\n      ink: 0,\n      maxInk: 0,\n      books: 0,\n      maxBooks: 0,\n      pages: 0,\n      bunnies: 0,\n      maxPages: 0,\n      handSize: 0,\n\n      enemy: null,\n    },\n    offerings: {\n      difficulties: [],\n      shopfront: [],\n      cards: [],\n      potions: [],\n      gems: [],\n      relics: [],\n      paths: [],\n      combatRewards: [],\n      restOptions: [],\n    },\n  };\n}\nfunction selectDifficultyAndBeginGame(dispatch, difficulty) {\n  dispatch({ type: ACTIONS.SET_DIFFICULTY, payload: difficulty });\n  dispatch({ type: ACTIONS.GENERATE_STARTER_DECK });\n  dispatch({ type: ACTIONS.APPLY_DIFFICULTY_MODIFIERS });\n  dispatch({\n    type: ACTIONS.ADVANCE_PHASE,\n    payload: PHASES.MYTHIC_RELIC_OFFERING,\n  });\n}\nfunction createGameApp(initialState, reducer, renderFn) {\n  let state = initialState;\n  function dispatch(action) {\n    state = reducer(state, action);\n    renderFn(state, dispatch); // pass dispatch so buttons etc. can use it\n  }\n  // Start the game\n  dispatch({ type: ACTIONS.NEW_GAME });\n  return { dispatch };\n}\n\n//#endregion\n//#region game mechanics\nfunction createCardInstance(\n  cardName = null,\n  rarity = null,\n  upgrades = 0,\n  gem = null\n) {\n  let card;\n  if (rarity) {\n    console.log(\"🔍 createCardInstance got rarity:\", rarity);\n  }\n  if (cardName) {\n    const found = cardList.find((c) => c.name === cardName);\n    if (!found) {\n      console.error(`Card not found: ${cardName}`);\n      return null;\n    }\n    card = { ...found };\n  } else if (rarity) {\n    const candidates = cardList.filter(\n      (c) =>\n        c.rarity === rarity &&\n        ![\"curse\", \"unique\", \"status\"].includes(c.specialSubtype)\n    );\n    if (candidates.length === 0) {\n      console.error(`No cards found with rarity: ${rarity}`);\n      return null;\n    }\n    card = { ...candidates[Math.floor(Math.random() * candidates.length)] };\n  } else {\n    console.error(\"createCardInstance requires either a cardName or a rarity.\");\n    return null;\n  }\n\n  // Apply upgrades if needed\n  if (upgrades > 0) {\n    card = upgradeCard(card, upgrades); // this should set .upgrades itself\n  }\n\n  // Apply gem if needed\n  if (gem) {\n    card = socketCardWithGem(card, gem);\n  }\n\n  return card;\n}\n\nfunction createRelicInstance(relicName) {\n  const found = relicList.find((r) => r.name === relicName);\n  if (!found) {\n    console.error(`Relic not found: ${relicName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction createPotionInstance(potionName, upgrades = 0) {\n  const found = potionList.find((p) => p.name === potionName);\n  if (!found) {\n    console.error(`Potion not found: ${potionName}`);\n    return null;\n  }\n\n  let potion = { ...found };\n\n  if (upgrades > 0) {\n    potion = upgradePotion(potion, upgrades);\n  }\n\n  return potion;\n}\nfunction createGemInstance(gemName) {\n  const found = gemList.find((g) => g.name === gemName);\n  if (!found) {\n    console.error(`Gem not found: ${gemName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction getRandomBossRelic() {\n  const bossRelics = relicList.filter((r) => r.bossOnly);\n  if (bossRelics.length === 0) return null;\n  const chosen = bossRelics[Math.floor(Math.random() * bossRelics.length)];\n  return { ...chosen };\n}\n\nfunction generateRandomRelic(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const ownedRelics = new Set([\n    ...state.relicBelt.map((r) => r.name),\n    ...state.trashPile.map((r) => r.name),\n  ]);\n\n  const GOLD_BAG = \"Gold Bag\";\n\n  // Exclude Gold Bag and duplicate high-rarity relics\n  let candidates = relicList.filter((r) => {\n    if (r.name === GOLD_BAG) return false;\n    if (r.bossOnly) return false; // ← new line to exclude boss-only relics from general pool\n    if (\n      (r.rarity === RARITIES.MYTHIC || r.rarity === RARITIES.LEGENDARY) &&\n      ownedRelics.has(r.name)\n    ) {\n      return false;\n    }\n    return true;\n  });\n\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  const filtered = candidates.filter((r) => r.rarity === rarity);\n  if (filtered.length === 0) {\n    console.warn(`No relics found for rarity: ${rarity}`);\n    return createRelicInstance(GOLD_BAG);\n  }\n\n  const chosen = filtered[Math.floor(Math.random() * filtered.length)];\n  return { ...chosen };\n}\nfunction generateRandomCard(\n  state,\n  { rarity = null, upgrades = undefined, gem = null } = {}\n) {\n  const luck = state.luck || 0;\n\n  const finalRarity =\n    rarity || weightedRandomChoice(getLuckAdjustedRarityWeights(luck));\n\n  const level = state.level ?? 0;\n  const totalFortune = (luck ?? 0) + level;\n\n  const upgradeWeights = {\n    0: Math.max(0, 60 - totalFortune),\n    1: 5 + totalFortune,\n    2: 3 + totalFortune,\n    3: 2 + totalFortune,\n    4: 0 + totalFortune,\n  };\n\n  const finalUpgrades =\n    upgrades !== undefined\n      ? upgrades\n      : Number(weightedRandomChoice(upgradeWeights));\n\n  const defeatedCount = state.defeatedEnemies?.length || 0;\n  const maxUpgrades = Math.min(4, Math.floor(defeatedCount / 3));\n  const cappedUpgrades = Math.min(finalUpgrades, maxUpgrades);\n\n  return createCardInstance(undefined, finalRarity, cappedUpgrades, gem);\n}\nfunction generateRandomPotion(state, { rarity = null, upgrades = null } = {}) {\n  const luck = state.luck || 0;\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n\n  const level = state.level ?? 0;\n  const totalFortune = (luck ?? 0) + level;\n\n  const upgradeWeights = {\n    0: Math.max(0, 70 - totalFortune),\n    1: 5 + totalFortune,\n    2: 3 + totalFortune,\n    3: 2 + totalFortune,\n    4: 0 + totalFortune,\n  };\n\n  // === Choose rarity if not provided ===\n  if (!rarity) {\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // === Fallback in case rarity yields no results ===\n  const candidates = potionList.filter((p) => p.rarity === rarity);\n  let basePotion;\n  if (candidates.length === 0) {\n    console.warn(\n      `No potions found for rarity: ${rarity}. Falling back to Lesser Healing Potion.`\n    );\n    basePotion = potionList.find((p) => p.name === \"Lesser Healing Potion\");\n    if (!basePotion) {\n      console.error(\n        \"Fallback potion 'Lesser Healing Potion' not found in potionList.\"\n      );\n      return null;\n    }\n    upgrades = 0; // ensure fallback is always unupgraded\n  } else {\n    basePotion = candidates[Math.floor(Math.random() * candidates.length)];\n\n    // === Choose upgrade level if not provided ===\n    if (upgrades === null) {\n      upgrades = Number(weightedRandomChoice(upgradeWeights));\n    }\n    upgrades = Math.min(upgrades, 4);\n  }\n\n  return createPotionInstance(basePotion.name, upgrades);\n}\nfunction generateRandomGem(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const fallbackGem = createGemInstance(\"Amethyst\");\n\n  // Choose rarity based on luck if not specified\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // Filter by rarity\n  const candidates = gemList.filter((gem) => gem.rarity === rarity);\n\n  if (candidates.length === 0) {\n    console.warn(\n      `No gems found for rarity: ${rarity}, returning fallback gem.`\n    );\n    return fallbackGem;\n  }\n\n  const chosenGem = candidates[Math.floor(Math.random() * candidates.length)];\n  return { ...chosenGem };\n}\nfunction upgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to upgradeCard:\", card);\n    return card;\n  }\n\n  if (card.unupgradable) {\n    console.warn(`Card ${card.name} is marked unupgradable.`);\n    return card;\n  }\n\n  const upgradedCard = { ...card };\n  let upgradable = false;\n\n  if (\"bunnyAdd\" in upgradedCard) {\n    upgradedCard.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedCard) {\n    upgradedCard.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"goldAdd\" in upgradedCard) {\n    upgradedCard.goldAdd += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInDeck += level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInHand\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInHand += level;\n    upgradable = true;\n  }\n\n  if (\"cardDraw\" in upgradedCard) {\n    upgradedCard.cardDraw += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"inkAdd\" in upgradedCard) {\n    upgradedCard.inkAdd += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"healthCost\" in upgradedCard) {\n    upgradedCard.healthCost -= 1 * level;\n    upgradable = true;\n  }\n\n  // === Upgrade damageRoll (any type) ===\n  if (upgradedCard.damageRoll) {\n    upgradedCard.damageRoll = {\n      ...upgradedCard.damageRoll,\n      dice: upgradedCard.damageRoll.dice + level,\n      sides: upgradedCard.damageRoll.sides + level,\n      flatBonus: upgradedCard.damageRoll.flatBonus + level,\n    };\n    upgradable = true;\n  }\n\n  // === Increase inkCost by per-level amount ===\n  if (\n    \"inkCostIncreasePerLevel\" in upgradedCard &&\n    typeof upgradedCard.inkCost === \"number\"\n  ) {\n    upgradedCard.inkCost += upgradedCard.inkCostIncreasePerLevel * level;\n    upgradable = true;\n  }\n\n  // === Multiply base damage by per-level multiplier ===\n  if (\n    \"damageMultiplierPerLevel\" in upgradedCard &&\n    typeof upgradedCard.damage === \"number\"\n  ) {\n    upgradedCard.damage *= Math.pow(\n      upgradedCard.damageMultiplierPerLevel,\n      level\n    );\n    upgradable = true;\n  }\n\n  // Add or increment the upgrade level\n  upgradedCard.upgrades = (upgradedCard.upgrades || 0) + level;\n\n  // === Smart renaming ===\n  const baseName = card.name\n    .replace(/\\s\\+\\d+$/, \"\") // remove trailing \"+3\"\n    .replace(/\\s\\d+d\\d+(\\s?\\+\\d+)?$/, \"\"); // remove \"3d6\" or \"3d6 +3\"\n\n  if (upgradedCard.damageRoll) {\n    const { dice = 1, sides, flatBonus = 0 } = upgradedCard.damageRoll;\n    upgradedCard.name = `${baseName} ${dice}d${sides}${\n      flatBonus > 0 ? `+${flatBonus}` : \"\"\n    }`;\n  } else {\n    upgradedCard.name = `${baseName} +${upgradedCard.upgrades}`;\n  }\n\n  return upgradedCard;\n}\n\nfunction downgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to downgradeCard:\", card);\n    return card;\n  }\n\n  if (card.undowngradable) {\n    console.warn(`Card ${card.name} is marked undowngradable.`);\n    return card;\n  }\n\n  const downgradedCard = { ...card };\n  const originalLevel = downgradedCard.upgrades || 0;\n  const newLevel = Math.max(originalLevel - level, -1);\n  const levelDiff = originalLevel - newLevel;\n\n  const applyHalvedBase = () => {\n    if (\"bunnyAdd\" in card)\n      downgradedCard.bunnyAdd = Math.floor(card.bunnyAdd / 2);\n    if (\"bunnyMult\" in card)\n      downgradedCard.bunnyMult = Math.floor(card.bunnyMult / 2);\n    if (\"goldAdd\" in card)\n      downgradedCard.goldAdd = Math.floor(card.goldAdd / 2);\n    if (\"permanentlyUpgradeRandomCardsInDeck\" in card)\n      downgradedCard.permanentlyUpgradeRandomCardsInDeck = Math.floor(\n        card.permanentlyUpgradeRandomCardsInDeck / 2\n      );\n    if (\"permanentlyUpgradeRandomCardsInHand\" in card)\n      downgradedCard.permanentlyUpgradeRandomCardsInHand = Math.floor(\n        card.permanentlyUpgradeRandomCardsInHand / 2\n      );\n    if (\"cardDraw\" in card)\n      downgradedCard.cardDraw = Math.floor(card.cardDraw / 2);\n    if (\"inkAdd\" in card) downgradedCard.inkAdd = Math.floor(card.inkAdd / 2);\n    if (\"healthCost\" in card)\n      downgradedCard.healthCost = Math.floor(card.healthCost * 1.5);\n\n    if (typeof card.damage === \"number\")\n      downgradedCard.damage = Math.ceil(card.damage / 2);\n\n    if (card.damageRoll) {\n      downgradedCard.damageRoll = {\n        dice: Math.max(1, Math.floor(card.damageRoll.dice / 2)),\n        sides: Math.max(1, Math.floor(card.damageRoll.sides / 2)),\n        flatBonus: Math.max(0, Math.floor(card.damageRoll.flatBonus / 2)),\n      };\n    }\n  };\n\n  if (newLevel === -1) {\n    applyHalvedBase();\n  } else {\n    if (\"bunnyAdd\" in downgradedCard) downgradedCard.bunnyAdd -= 3 * levelDiff;\n    if (\"bunnyMult\" in downgradedCard)\n      downgradedCard.bunnyMult -= 0.5 * levelDiff;\n    if (\"goldAdd\" in downgradedCard) downgradedCard.goldAdd -= 2 * levelDiff;\n    if (\"permanentlyUpgradeRandomCardsInDeck\" in downgradedCard)\n      downgradedCard.permanentlyUpgradeRandomCardsInDeck -= 1 * levelDiff;\n    if (\"permanentlyUpgradeRandomCardsInHand\" in downgradedCard)\n      downgradedCard.permanentlyUpgradeRandomCardsInHand -= 1 * levelDiff;\n    if (\"cardDraw\" in downgradedCard) downgradedCard.cardDraw -= 1 * levelDiff;\n    if (\"inkAdd\" in downgradedCard) downgradedCard.inkAdd -= 1 * levelDiff;\n    if (\"healthCost\" in downgradedCard)\n      downgradedCard.healthCost += 1 * levelDiff;\n\n    // Reduce inkCost if it was increased on upgrade\n    if (\n      \"inkCostIncreasePerLevel\" in downgradedCard &&\n      typeof downgradedCard.inkCost === \"number\"\n    ) {\n      downgradedCard.inkCost -=\n        downgradedCard.inkCostIncreasePerLevel * levelDiff;\n    }\n\n    // Halve base damage if upgraded by multiplier\n    if (\n      \"damageMultiplierPerLevel\" in downgradedCard &&\n      typeof downgradedCard.damage === \"number\"\n    ) {\n      downgradedCard.damage = Math.ceil(\n        downgradedCard.damage /\n          Math.pow(downgradedCard.damageMultiplierPerLevel, levelDiff)\n      );\n    }\n\n    // Reduce damageRoll values\n    if (downgradedCard.damageRoll) {\n      downgradedCard.damageRoll = {\n        ...downgradedCard.damageRoll,\n        dice: Math.max(1, downgradedCard.damageRoll.dice - levelDiff),\n        sides: Math.max(1, downgradedCard.damageRoll.sides - levelDiff),\n        flatBonus: Math.max(0, downgradedCard.damageRoll.flatBonus - levelDiff),\n      };\n    }\n  }\n\n  // Update upgrade level\n  downgradedCard.upgrades = newLevel;\n\n  // === Smart renaming ===\n  const baseName = card.name\n    .replace(/\\s\\+\\d+$/, \"\") // remove trailing \"+3\"\n    .replace(/\\s\\d+d\\d+(\\s?\\+\\d+)?$/, \"\"); // remove \"3d6\" or \"3d6 +3\"\n\n  if (downgradedCard.damageRoll) {\n    const { dice = 1, sides, flatBonus = 0 } = downgradedCard.damageRoll;\n    downgradedCard.name = `${baseName} ${dice}d${sides}${\n      flatBonus > 0 ? `+${flatBonus}` : \"\"\n    }`;\n  } else if (newLevel > 0) {\n    downgradedCard.name = `${baseName} +${newLevel}`;\n  } else if (newLevel === -1) {\n    downgradedCard.name = `${baseName} -1`;\n  } else {\n    downgradedCard.name = baseName;\n  }\n\n  return downgradedCard;\n}\n\nfunction upgradePotion(potion, level = 1) {\n  if (!potion || typeof potion !== \"object\") {\n    console.error(\"Invalid potion passed to upgradePotion:\", potion);\n    return potion;\n  }\n\n  // Clone the potion to avoid mutating the original\n  const upgradedPotion = { ...potion };\n\n  let upgradable = false;\n\n  // === Upgradeable Effects ===\n  if (\"healthRestore\" in upgradedPotion) {\n    upgradedPotion.healthRestore += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"bonusInk\" in upgradedPotion) {\n    upgradedPotion.bonusInk += level;\n    upgradable = true;\n  }\n\n  if (\"increaseMaxHp\" in upgradedPotion) {\n    upgradedPotion.increaseMaxHp += level * 2;\n    upgradable = true;\n  }\n\n  if (\"upgradeCardsInHand\" in upgradedPotion) {\n    upgradedPotion.upgradeCardsInHand += level;\n    upgradable = true;\n  }\n  if (\"cardDraw\" in upgradedPotion) {\n    upgradedPotion.cardDraw += level;\n    upgradable = true;\n  }\n\n  if (\"bunnyAdd\" in upgradedPotion) {\n    upgradedPotion.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedPotion) {\n    upgradedPotion.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Potion cannot be upgraded: ${potion.name}`);\n    return potion;\n  }\n\n  // === Track upgrade level ===\n  upgradedPotion.upgrades = (upgradedPotion.upgrades || 0) + level;\n\n  // === Update potion name to reflect upgrades ===\n  upgradedPotion.name =\n    potion.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedPotion.upgrades}`;\n\n  return upgradedPotion;\n}\n\nfunction socketCardWithGem(card, gem) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to socketCardWithGem:\", card);\n    return card;\n  }\n\n  if (card.unsocketable) {\n    console.warn(`Card ${card.name} is marked unsocketable.`);\n    return card;\n  }\n\n  if (!gem || typeof gem !== \"object\" || !gem.name) {\n    console.error(\"Invalid gem passed to socketCardWithGem:\", gem);\n    return card;\n  }\n\n  const socketedCard = { ...card };\n  const upgradeLevel = socketedCard.upgrades || 0;\n\n  const applyEffect = (key, baseAmount, perUpgrade) => {\n    socketedCard[key] =\n      (socketedCard[key] || 0) + baseAmount + perUpgrade * upgradeLevel;\n  };\n\n  // === Standard effects ===\n\n  if (\"bunnyAdd\" in gem) applyEffect(\"bunnyAdd\", gem.bunnyAdd, 3);\n  if (\"bunnyMult\" in gem) applyEffect(\"bunnyMult\", gem.bunnyMult, 0.5);\n  if (\"goldAdd\" in gem) applyEffect(\"goldAdd\", gem.goldAdd, 2);\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in gem)\n    applyEffect(\n      \"permanentlyUpgradeRandomCardsInDeck\",\n      gem.permanentlyUpgradeRandomCardsInDeck,\n      1\n    );\n  if (\"permanentlyUpgradeRandomCardsInHand\" in gem)\n    applyEffect(\n      \"permanentlyUpgradeRandomCardsInHand\",\n      gem.permanentlyUpgradeRandomCardsInHand,\n      1\n    );\n  if (\"damage\" in gem) applyEffect(\"damage\", gem.damage, 5);\n  if (\"damageType\" in gem) socketedCard.damageType = gem.damageType;\n  if (\"cardDraw\" in gem) applyEffect(\"cardDraw\", gem.cardDraw, 1);\n  if (\"inkAdd\" in gem) applyEffect(\"inkAdd\", gem.inkAdd, 1);\n  if (\"healthCost\" in gem) applyEffect(\"healthCost\", gem.healthCost, -1);\n\n  // === Add upgradesOnCast property ===\n  if (\"upgradesOnCast\" in gem) {\n    socketedCard.upgradesOnCast =\n      (socketedCard.upgradesOnCast || 0) + gem.upgradesOnCast;\n  }\n  // === Apply ink cost increase per level (fire effect)\n  if (\"inkCostIncreasePerLevel\" in gem) {\n    socketedCard.inkCostIncreasePerLevel = gem.inkCostIncreasePerLevel;\n    // Apply retroactive increase if inkCost exists\n    if (typeof socketedCard.inkCost === \"number\") {\n      socketedCard.inkCost += gem.inkCostIncreasePerLevel * upgradeLevel;\n    }\n  }\n\n  // === Apply damage multiplier per level (fire effect)\n  if (\"damageMultiplierPerLevel\" in gem) {\n    socketedCard.damageMultiplierPerLevel = gem.damageMultiplierPerLevel;\n    // Apply retroactive multiplier if damage exists\n    if (typeof socketedCard.damage === \"number\") {\n      socketedCard.damage *= Math.pow(\n        gem.damageMultiplierPerLevel,\n        upgradeLevel\n      );\n    }\n  }\n\n  // === Merge damageTypes (if gem has them) ===\n  if (Array.isArray(gem.damageTypes)) {\n    socketedCard.damageTypes = Array.isArray(socketedCard.damageTypes)\n      ? [...socketedCard.damageTypes]\n      : [];\n\n    for (const dmgType of gem.damageTypes) {\n      if (!socketedCard.damageTypes.includes(dmgType)) {\n        socketedCard.damageTypes.push(dmgType);\n      }\n    }\n  }\n\n  // === Add damageRoll support (e.g., Amber) ===\n\n  if (\"damageRoll\" in gem && typeof gem.damageRoll === \"object\") {\n    const gemRoll = gem.damageRoll;\n    const baseDice = gemRoll.dice || 0;\n    const baseSides = gemRoll.sides || 0;\n    const baseBonus = gemRoll.flatBonus || 0;\n\n    socketedCard.damageRoll = {\n      dice: (socketedCard.damageRoll?.dice || 0) + baseDice + upgradeLevel,\n      sides: (socketedCard.damageRoll?.sides || 0) + baseSides + upgradeLevel,\n      flatBonus:\n        (socketedCard.damageRoll?.flatBonus || 0) + baseBonus + upgradeLevel,\n    };\n  }\n\n  // === Attach gem and rename card ===\n\n  socketedCard.gem = gem;\n\n  // Build name suffix if there's a damageRoll\n  let nameSuffix = \"\";\n  if (\n    socketedCard.damageRoll &&\n    typeof socketedCard.damageRoll.dice === \"number\" &&\n    typeof socketedCard.damageRoll.sides === \"number\"\n  ) {\n    const { dice, sides, flatBonus } = socketedCard.damageRoll;\n    nameSuffix = ` ${dice}d${sides}${flatBonus ? `+${flatBonus}` : \"\"}`;\n  }\n\n  // Final name: GemName OriginalName + dice suffix if present\n  socketedCard.name = `${gem.name} ${card.name.replace(\n    /\\s\\d+d\\d+(\\+\\d+)?$/,\n    \"\"\n  )}${nameSuffix}`;\n\n  return socketedCard;\n}\n\nfunction getLuckAdjustedRarityWeights(luck = 0) {\n  return {\n    [RARITIES.COMMON]: Math.max(20, 60 - luck * 2),\n    [RARITIES.UNCOMMON]: Math.max(20, 40 - luck),\n    [RARITIES.RARE]: Math.min(20, 5 + luck),\n    [RARITIES.MYTHIC]: Math.min(10, 2 + Math.ceil(luck / 2)),\n    [RARITIES.LEGENDARY]: Math.min(5, 1 + Math.ceil(luck / 3)),\n  };\n}\nfunction chargeGoldPrice(state, price, context = \"purchase\") {\n  if (state.gold < price) {\n    console.warn(`Not enough gold for ${context}!`);\n    return state; // return unmodified state\n  }\n\n  return {\n    ...state,\n    gold: state.gold - price, // ✅ correct location\n    log: [`Spent ${price} gold on ${context}.`, ...state.log],\n  };\n}\nfunction checkRelicTriggers(\n  state,\n  triggerEvent,\n  context = { damageType: null }\n) {\n  let updatedState = { ...state };\n  let result = context.payload || null;\n\n  // Special case: handle only the new relic when a relic is picked up\n  if (triggerEvent === TRIGGER_EVENTS.RELIC_PICKUP && context.relic) {\n    const relic = context.relic;\n    const effect = relic.triggers?.[triggerEvent];\n    if (!effect) return { ...updatedState, result };\n\n    const campaign = { ...updatedState.campaign };\n    let newHealth = updatedState.health;\n    let newMaxHealth = updatedState.maxHealth;\n\n    if (effect.reduceInkCostOfFireCardsInDeck > 0) {\n      let modifiedCount = 0;\n\n      campaign.deck = campaign.deck.map((card) => {\n        if (\n          Array.isArray(card.damageTypes) &&\n          card.damageTypes.includes(DAMAGE_TYPES.FIRE) &&\n          typeof card.inkCost === \"number\"\n        ) {\n          modifiedCount++;\n          return {\n            ...card,\n            inkCost: Math.max(\n              0,\n              card.inkCost - effect.reduceInkCostOfFireCardsInDeck\n            ),\n          };\n        }\n        return card;\n      });\n\n      if (modifiedCount > 0) {\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} reduced the ink cost of ${modifiedCount} fire card(s) in your deck.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    if (effect.bonusPages) {\n      campaign.pages += effect.bonusPages;\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} gave you +${effect.bonusPages} max pages.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (effect.BonusMulligans) {\n      campaign.mulligans = (campaign.mulligans ?? 0) + effect.BonusMulligans;\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} gave you +${effect.BonusMulligans} mulligan.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (effect.bonusInk) {\n      campaign.ink += effect.bonusInk;\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} gave you +${effect.bonusInk} max ink.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (effect.bonusBooks) {\n      campaign.books += effect.bonusBooks;\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} gave you +${effect.bonusBooks} max books.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (effect.bonusHandSize) {\n      campaign.handSize += effect.bonusHandSize;\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} increased your hand size by ${effect.bonusHandSize}.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (effect.bonusHealth) {\n      newHealth += effect.bonusHealth;\n      newMaxHealth += effect.bonusHealth;\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} increased your max health by ${effect.bonusHealth} HP.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (effect.bonusGold) {\n      updatedState = gainGold(updatedState, effect.bonusGold);\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} gave you ${effect.bonusGold} gold.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (effect.bonusBaseBunnies) {\n      updatedState = increaseBaseBunnies(updatedState, effect.bonusBaseBunnies);\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} added ${effect.bonusBaseBunnies} base bunnies.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (effect.permanentlyUpgradeRandomCardsInDeck > 0) {\n      const { deck } = campaign;\n      const numToUpgrade = Math.min(\n        effect.permanentlyUpgradeRandomCardsInDeck,\n        deck.length\n      );\n\n      const upgradedDeck = permanentlyUpgradeRandomCardsInDeck(\n        deck,\n        numToUpgrade\n      );\n      campaign.deck = upgradedDeck;\n\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} permanently upgraded ${numToUpgrade} card(s) in your deck.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (\n      effect.shopPriceMultiplier &&\n      state.currentPhase === PHASES.SHOP &&\n      updatedState.offerings?.shopfront\n    ) {\n      const newMultiplier = getShopPriceMultiplier(updatedState);\n\n      const updatedShopfront = updatedState.offerings.shopfront.map((entry) => {\n        const { type, item } = entry;\n\n        const basePrices = {\n          card: 10,\n          potion: 20,\n          gem: 30,\n          relic: 100,\n        };\n\n        const rarityMultipliers = {\n          common: 1,\n          uncommon: 1.2,\n          rare: 1.4,\n          mythic: 1.6,\n          legendary: 2,\n        };\n\n        const basePrice = basePrices[type] || 0;\n        const upgrades = item.upgrades || 0;\n        const upgradeCost = [\"card\", \"potion\"].includes(type)\n          ? upgrades * 5\n          : 0;\n\n        const rarity = item.rarity?.toLowerCase?.() || \"common\";\n        const rarityMultiplier = rarityMultipliers[rarity] || 1;\n\n        const price = Math.round(\n          (basePrice + upgradeCost) * rarityMultiplier * newMultiplier\n        );\n\n        return {\n          ...entry,\n          item: {\n            ...item,\n            price,\n          },\n        };\n      });\n\n      updatedState = {\n        ...updatedState,\n        offerings: {\n          ...updatedState.offerings,\n          shopfront: updatedShopfront,\n        },\n        log: [\n          `${relic.name} triggered and updated shop prices.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    updatedState = {\n      ...updatedState,\n      campaign,\n      health: newHealth,\n      maxHealth: newMaxHealth,\n    };\n\n    return { ...updatedState, result };\n  }\n\n  // All other trigger types still loop through relics in relicBelt\n  for (const relic of updatedState.relicBelt) {\n    const effect = relic.triggers?.[triggerEvent];\n    if (!effect) continue;\n\n    if (effect.bunnyAdd) {\n      const amount = effect.bunnyAdd;\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          bunnies: (updatedState.combat.bunnies || 0) + amount,\n        },\n        log: [\n          `${relic.name} summoned ${amount} bunny${amount === 1 ? \"\" : \"ies\"}!`,\n          ...updatedState.log,\n        ],\n      };\n    }\n  }\n\n  return {\n    ...updatedState,\n    result,\n  };\n}\n\nfunction checkEnemyTriggers(state, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  const enemy = updatedState.combat?.enemy;\n  if (!enemy) return updatedState;\n\n  const abilities = enemy.abilities || {};\n  const logMessages = [];\n\n  if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n    // Ink Drink effect\n    if (abilities[ENEMY_ABILITIES.INK_DRINK]) {\n      const amount = abilities[ENEMY_ABILITIES.INK_DRINK];\n\n      const newMaxInk = Math.max(0, updatedState.combat.maxInk - amount);\n      const newInk = Math.min(updatedState.combat.ink, newMaxInk); // Ensure current ink doesn't exceed new max\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          maxInk: newMaxInk,\n          ink: newInk,\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} drained ${amount} max ink at the start of combat!`\n      );\n    }\n\n    // Increase Health effect\n    if (abilities[ENEMY_ABILITIES.INCREASE_HEALTH]) {\n      const multiplier = abilities[ENEMY_ABILITIES.INCREASE_HEALTH]; // e.g., 1.5\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          enemyHp: Math.floor(updatedState.combat.enemyHp * multiplier),\n          enemy: {\n            ...updatedState.combat.enemy,\n            hp: Math.floor(updatedState.combat.enemy.hp * multiplier),\n          },\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} increased its health by ${Math.round(\n          (multiplier - 1) * 100\n        )}%!`\n      );\n    }\n\n    // Downgrade Cards at Combat Start\n    if (abilities[ENEMY_ABILITIES.DOWNGRADE_CARDS]) {\n      const amount = abilities[ENEMY_ABILITIES.DOWNGRADE_CARDS];\n      const deck = [...updatedState.combat.deck];\n      const downgradable = deck.filter((card) => !card.undowngradable);\n\n      const shuffled = [...downgradable].sort(() => Math.random() - 0.5);\n      const toDowngrade = shuffled.slice(0, amount);\n\n      const updatedDeck = deck.map((card) =>\n        toDowngrade.includes(card) ? downgradeCard(card, 1) : card\n      );\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          deck: updatedDeck,\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} downgraded ${toDowngrade.length} card(s) in your deck!`\n      );\n    }\n\n    // Hand Size Reduction\n    if (abilities[ENEMY_ABILITIES.HAND_SIZE_REDUCTION]) {\n      const amount = abilities[ENEMY_ABILITIES.HAND_SIZE_REDUCTION];\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          handSize: Math.max(1, updatedState.combat.handSize - amount),\n        },\n      };\n      logMessages.push(`${enemy.name} reduces your hand size by ${amount}!`);\n    }\n\n    // === Add curses at combat start ===\n    if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n      const abilities = enemy.abilities || {};\n\n      if (abilities[ENEMY_ABILITIES.ADD_PEBBLES]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_PEBBLES];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Sisyphus' Pebble\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Sisyphus' Pebble to your deck!`\n        );\n      }\n\n      if (abilities[ENEMY_ABILITIES.ADD_MERCURY]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_MERCURY];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Mercury Droplet\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Mercury Droplet(s) to your deck!`\n        );\n      }\n\n      if (abilities[ENEMY_ABILITIES.ADD_CLUTTER]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_CLUTTER];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Clutter\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Clutter card(s) to your deck!`\n        );\n      }\n    }\n  }\n\n  if (logMessages.length > 0) {\n    updatedState = {\n      ...updatedState,\n      log: [`⚠️ Enemy ability activated!`, ...logMessages, ...updatedState.log],\n    };\n  }\n\n  return updatedState;\n}\n\nfunction modifyCombatInk(state, amount) {\n  const current = state.combat?.ink ?? 0;\n  const max = state.combat?.maxInk ?? 0;\n\n  const newInk = Math.max(0, Math.min(current + amount, max));\n  const actualChange = newInk - current;\n\n  // let changeMessage =\n  //   actualChange === 0\n  //     ? `Ink unchanged.`\n  //     : actualChange > 0\n  //     ? `Gained ${actualChange} ink.`\n  //     : `Spent ${Math.abs(actualChange)} ink.`;\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      ink: newInk,\n    },\n    // log: [changeMessage, ...state.log],\n  };\n}\n\nfunction heal(state, amount) {\n  const current = state.health || 0;\n  const max = state.maxHealth || 0;\n  const newHealth = Math.min(current + amount, max);\n  const healedAmount = newHealth - current;\n\n  return {\n    ...state,\n    health: newHealth,\n    log: [`Healed ${healedAmount} HP.`, ...state.log],\n  };\n}\nfunction transmuteCard(card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to transmuteCard:\", card);\n    return null;\n  }\n\n  // Define excluded subtypes (easily extendable)\n  const excludedSubtypes = new Set([\n    SPECIAL_CARD_SUBTYPES.CURSE,\n    // Add more subtypes here in future\n  ]);\n\n  const alternatives = cardList.filter(\n    (c) =>\n      c.name !== card.name &&\n      !c.unchoosableByTransmute &&\n      (!c.specialSubtype || !excludedSubtypes.has(c.specialSubtype))\n  );\n\n  if (alternatives.length === 0) {\n    console.warn(\n      `No valid alternatives found to transmute ${card.name}. Returning original.`\n    );\n    return { ...card };\n  }\n\n  const newBase = alternatives[Math.floor(Math.random() * alternatives.length)];\n  return createCardInstance(newBase.name, null, card.upgrades, card.gem);\n}\n\nfunction purgeCard(state, card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to purgeCard:\", card);\n    return state;\n  }\n\n  const updatedDeck = state.campaign.deck.filter((c) => c !== card);\n  const updatedTrash = [...(state.trashPile || []), card];\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n      trashPile: updatedTrash,\n    },\n    log: [`Purged card: ${card.name}`, ...state.log],\n  };\n}\n\nfunction initializeCombatPhase(state, path) {\n  const level = state.level ?? 1;\n  const stage = state.stage ?? 0;\n\n  // Define ability power modifier based on level\n  const modifyEnemyAbilityPower = ({ currentValue }) => {\n    if (stage === 2) return currentValue + 2;\n    if (stage === 1) return currentValue + 1;\n    return currentValue;\n  };\n\n  const enemy = generateEnemy(state, path, modifyEnemyAbilityPower);\n\n  // Deep copy and shuffle the deck\n  const deepDeckCopy = JSON.parse(JSON.stringify(state.campaign.deck));\n  const shuffledDeck = shuffleArray(deepDeckCopy);\n\n  const newCombat = {\n    enemy,\n    enemyHp: enemy.hp,\n    deck: shuffledDeck,\n    hand: [],\n    graveyard: [], // was 'discard' but rest of code uses 'graveyard'\n    exile: [],\n    mulligans: state.campaign.mulligans ?? 0,\n    ink: state.campaign.ink,\n    maxInk: state.campaign.ink,\n    books: state.campaign.books,\n    maxBooks: state.campaign.books,\n    pages: state.campaign.pages,\n    maxPages: state.campaign.pages,\n    handSize: state.campaign.handSize,\n    baseBunnies: state.baseBunnies ?? 0,\n    bunnies: 0,\n    combatEnded: false,\n  };\n\n  let newState = {\n    ...state,\n    combat: newCombat,\n    log: [`⚔️ Combat begins against ${enemy.name}!`, ...state.log],\n  };\n\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.COMBAT_START);\n  newState = checkEnemyTriggers(newState, TRIGGER_EVENTS.COMBAT_START);\n  console.log(\"🛠️ Starting combat with baseBunnies =\", newCombat.baseBunnies);\n\n  // Start the player's turn (draw hand, refill ink, setup spellbook, etc.)\n  newState = startTurn(newState);\n\n  return newState;\n}\n\nfunction generateEnemy(state, path, modifyEnemyAbilityPower = null) {\n  const difficulty = pathMap[path?.path]?.difficulty;\n  console.log(\"Path:\", path?.path, \"| Difficulty:\", difficulty);\n\n  const level = state.level ?? 1;\n  const stage = state.stage ?? 0;\n  console.log(`Generating enemy at stage ${stage}`);\n\n  const multiplier = state.enemyHealthMultiplier ?? 1;\n  const isBoss = difficulty === \"boss\";\n\n  // === Health Calculation ===\n  const baseHealthMap = {\n    easy: 10,\n    medium: 13,\n    hard: 16,\n    boss: 25,\n  };\n\n  const perLevelIncrement = {\n    easy: 4,\n    medium: 5,\n    hard: 6,\n    boss: 10,\n  };\n\n  const perStageMultiplier = {\n    0: 1,\n    1: 2,\n    2: 3,\n  };\n\n  let base = baseHealthMap[difficulty] ?? 10;\n  let increment = perLevelIncrement[difficulty] ?? 3;\n  let stageMultiplier = perStageMultiplier[stage] ?? 1;\n  let health = (base + level * increment) * multiplier * stageMultiplier;\n\n  // === Ability Assignment ===\n  const allAbilities = Object.keys(enemyAbilityDataMap);\n  const selectedAbilities = new Set();\n\n  let numAbilities = 0;\n  if (difficulty === \"medium\") numAbilities = 1;\n  else if (difficulty === \"hard\") numAbilities = 2;\n  if (isBoss) numAbilities = 0;\n\n  if (state.difficulty === DIFFICULTIES.HARD) {\n    const bonusChance = Math.max(0, 0.5 - (state.luck ?? 0));\n    if (Math.random() < bonusChance) numAbilities += 1;\n  }\n\n  numAbilities = Math.min(numAbilities, 3);\n\n  while (selectedAbilities.size < numAbilities) {\n    const ability =\n      allAbilities[Math.floor(Math.random() * allAbilities.length)];\n    selectedAbilities.add(ability);\n  }\n\n  // === Build abilities object ===\n  const abilities = {};\n  for (const key of selectedAbilities) {\n    const data = enemyAbilityDataMap[key];\n    const baseValue = data.baseValue ?? 0;\n    const increment = data.incrementValue ?? 0;\n    const stage = state.stage ?? 0;\n    let value = baseValue + increment * stage;\n    console.log(\n      `→ Ability: ${key} | Base: ${baseValue}, Incr: ${increment}, Stage: ${stage}, Final Value: ${value}`\n    );\n\n    if (typeof modifyEnemyAbilityPower === \"function\") {\n      value = modifyEnemyAbilityPower({\n        ability: key,\n        baseValue,\n        increment,\n        currentValue: value,\n        stage,\n        enemyLevel: level,\n        difficulty,\n        isBoss,\n        state,\n      });\n    }\n\n    abilities[key] = value;\n  }\n  // === Name Generation ===\n  let name;\n  const smallMonsters = [\n    \"goblin\",\n    \"kobold\",\n    \"rat\",\n    \"spider\",\n    \"imp\",\n    \"gremlin\",\n    \"bat\",\n    \"quasit\",\n    \"skeleton\",\n    \"zombie\",\n  ];\n\n  const mediumMonsters = [\n    \"orc\",\n    \"ogre\",\n    \"gnoll\",\n    \"troll\",\n    \"hobgoblin\",\n    \"ghoul\",\n    \"harpy\",\n    \"lizardfolk\",\n    \"wight\",\n    \"mimic\",\n  ];\n\n  const largeMonsters = [\n    \"dragon\",\n    \"manticore\",\n    \"hydra\",\n    \"wyvern\",\n    \"beholder\",\n    \"medusa\",\n    \"chimera\",\n    \"giant\",\n    \"basilisk\",\n    \"banshee\",\n  ];\n  const vegetables = [\n    \"carrot\",\n    \"broccoli\",\n    \"spinach\",\n    \"kale\",\n    \"zucchini\",\n    \"eggplant\",\n    \"cauliflower\",\n    \"cabbage\",\n    \"lettuce\",\n    \"beet\",\n    \"radish\",\n    \"turnip\",\n    \"bokchoi\",\n    \"chilli\",\n    \"nopal\",\n    \"durian\",\n    \"bean\",\n    \"yam\",\n    \"tomato\",\n    \"asparagus\",\n    \"potato\",\n    \"pumpkin\",\n    \"bellpepper\",\n    \"celery\",\n    \"onion\",\n  ];\n  const bossNames = [\"Avatar of the Weasel\", \"Fox Spirit\", \"Beaglesoul\"];\n\n  if (isBoss) {\n    name = bossNames[Math.floor(Math.random() * bossNames.length)];\n  } else {\n    // Base monster type\n    let monsterList;\n    if (stage === 0) {\n      monsterList = smallMonsters;\n    } else if (stage === 1) {\n      monsterList = mediumMonsters;\n    } else {\n      monsterList = largeMonsters;\n    }\n\n    const vegetable = vegetables[Math.floor(Math.random() * vegetables.length)];\n    const monster = monsterList[Math.floor(Math.random() * monsterList.length)];\n\n    // Prefixes based on abilities\n    const prefixes = Object.keys(abilities)\n      .map((ability) => enemyAbilityDataMap[ability]?.prefix)\n      .filter(Boolean);\n\n    name = [...prefixes, capitalize(vegetable), capitalize(monster)].join(\" \");\n  }\n\n  // === Loot Generation ===\n  const loot = generateEnemyLoot(state, difficulty, numAbilities, isBoss);\n\n  return {\n    name,\n    hp: Math.round(health),\n    abilities,\n    loot,\n  };\n}\n\nfunction generateEnemyLoot(state, difficulty, numAbilities, isBoss) {\n  const luck = state.luck ?? 0;\n  const level = state.level ?? 1;\n  const deck = state.campaign?.deck ?? [];\n  const allGemmedOrUnsocketable =\n    deck.length > 0 && deck.every((card) => card.gem || card.unsocketable);\n  const weights = {\n    gold: 30,\n    potion: 30,\n    card: 40,\n    relic: 5 + luck + numAbilities * 4,\n    gem: allGemmedOrUnsocketable ? 0 : 5 + luck + numAbilities * 4,\n  };\n\n  let drops = isBoss ? 3 : 1;\n  if (!isBoss) {\n    const chanceTwo = 50 + luck + numAbilities * 20;\n    if (Math.random() * 100 < chanceTwo) {\n      drops++;\n      const chanceThree = 35 + luck + numAbilities * 15;\n      if (Math.random() * 100 < chanceThree) {\n        drops++;\n      }\n    }\n  }\n\n  const usedTypes = new Set();\n  const loot = [];\n\n  if (isBoss) {\n    const bossRelic = getRandomBossRelic();\n    if (bossRelic) {\n      loot.push({ type: \"relic\", value: bossRelic });\n      usedTypes.add(\"relic\"); // still prevents duplicate relic drops\n    } else {\n      console.warn(\"No boss relics available in relicList!\");\n    }\n  }\n\n  while (loot.length < drops) {\n    const available = Object.entries(weights).filter(\n      ([type, weight]) => weight > 0 && !usedTypes.has(type)\n    );\n\n    if (available.length === 0) break;\n\n    const totalWeight = available.reduce((sum, [_, w]) => sum + w, 0);\n    let roll = Math.random() * totalWeight;\n\n    let selected;\n    for (const [type, weight] of available) {\n      if (roll < weight) {\n        selected = type;\n        break;\n      }\n      roll -= weight;\n    }\n\n    usedTypes.add(selected);\n\n    if (selected === \"gold\") {\n      const base = { easy: 3, medium: 5, hard: 8 }[difficulty] ?? 2;\n      const amount =\n        (base + level + luck + numAbilities * 3) * (0.5 + Math.random());\n      loot.push({ type: \"gold\", value: Math.max(1, Math.round(amount)) });\n    } else if (selected === \"card\") {\n      loot.push({ type: \"card\", value: generateRandomCard(state) });\n    } else if (selected === \"potion\") {\n      loot.push({ type: \"potion\", value: generateRandomPotion(state) });\n    } else if (selected === \"relic\") {\n      loot.push({ type: \"relic\", value: generateRandomRelic(state) });\n    } else if (selected === \"gem\") {\n      loot.push({ type: \"gem\", value: generateRandomGem(state) });\n    }\n  }\n\n  return loot;\n}\nfunction permanentlyUpgradeRandomCardsInDeck(deck, numUpgrades = 1) {\n  const upgradableCards = deck.filter((card) => !card.unupgradable);\n  const shuffled = [...upgradableCards].sort(() => Math.random() - 0.5);\n  const toUpgrade = shuffled.slice(0, numUpgrades);\n  const upgradedCards = toUpgrade.map((card) => upgradeCard(card, 1));\n\n  return deck.map((card) => {\n    const index = toUpgrade.indexOf(card);\n    return index !== -1 ? upgradedCards[index] : card;\n  });\n}\n\nfunction addCardToCombatDeck(state, cardName) {\n  const base = cardList.find((c) => c.name === cardName);\n  if (!base) {\n    console.warn(`Could not find card \"${cardName}\"`);\n    return state;\n  }\n\n  const newCard = createCardInstance(cardName);\n  const combatDeck = Array.isArray(state.combat?.deck)\n    ? [...state.combat.deck]\n    : [];\n\n  const insertIndex = Math.floor(Math.random() * (combatDeck.length + 1));\n  combatDeck.splice(insertIndex, 0, newCard); // insert at random index\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      deck: combatDeck,\n    },\n  };\n}\n\n//#endregion\n//#region game reducer\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.NEW_GAME:\n      return {\n        ...createInitialState(),\n        log: [\"New game started.\"],\n      };\n\n    case ACTIONS.SET_DIFFICULTY: {\n      if (state.difficulty === action.payload) {\n        console.log(\"Difficulty already set to\", action.payload);\n        return state;\n      }\n      console.log(`Difficulty set to ${action.payload}`);\n      return {\n        ...state,\n        difficulty: action.payload, // ✅ store at root\n        log: [`Difficulty set to ${action.payload}.`, ...state.log],\n      };\n    }\n\n    case ACTIONS.GENERATE_STARTER_DECK:\n      return generateStarterDeck(state);\n\n    case ACTIONS.APPLY_DIFFICULTY_MODIFIERS:\n      return applyDifficultyModifiers(state);\n\n    case ACTIONS.ADVANCE_PHASE:\n      const newState = advancePhaseTo(state, action.payload);\n      return handlePhaseTransitions(newState);\n\n    case ACTIONS.CREATE_CARD_INSTANCE: {\n      const newCard = createCardInstance(\n        action.payload.cardName,\n        action.payload.rarity,\n        action.payload.upgrades,\n        action.payload.gem\n      );\n      return {\n        ...state,\n        campaign: {\n          ...state.campaign,\n          deck: [...state.campaign.deck, newCard],\n        },\n        log: [`Created card: ${newCard.name}`, ...state.log],\n      };\n    }\n\n    case ACTIONS.POPULATE_RELIC_OFFERINGS:\n      return populateRelicOfferings(state, action.payload?.rarity);\n\n    case ACTIONS.PICK_RELIC:\n      return pickRelic(state, action.payload);\n\n    case ACTIONS.POPULATE_PATH_OFFERINGS:\n      return populatePathOfferings(state);\n\n    case ACTIONS.PICK_PATH:\n      return pickPath(state, action.payload);\n\n    case ACTIONS.POPULATE_CARD_OFFERINGS:\n      return populateCardOfferings(state);\n\n    case ACTIONS.PICK_CARD:\n      return pickCard(state, action.payload);\n\n    case ACTIONS.POPULATE_POTION_OFFERINGS:\n      return populatePotionOfferings(state);\n\n    case ACTIONS.PICK_POTION:\n      return pickPotion(state, action.payload);\n\n    case ACTIONS.DRINK_POTION: {\n      const potionIndex = action.payload;\n      const potionToDrink = state.potionBelt[potionIndex];\n      if (!potionToDrink) {\n        console.error(\"Invalid potion index:\", potionIndex);\n        return state;\n      }\n      return drinkPotion(state, potionToDrink);\n    }\n\n    case ACTIONS.POPULATE_GEM_OFFERINGS:\n      return populateGemOfferings(state);\n\n    case ACTIONS.OPEN_MOD_SCREEN:\n      return openModScreen(state, action.payload.mod, action.payload.origin);\n\n    case ACTIONS.APPLY_CARD_MOD:\n      return applyModToCard(state, action.payload); // payload = selected card\n\n    case ACTIONS.SCREEN_CHANGE:\n      return {\n        ...state,\n        previousScreen: state.currentScreen,\n        currentScreen: action.payload,\n      };\n\n    case ACTIONS.POPULATE_SHOPFRONT:\n      return populateShopfront(state);\n\n    case ACTIONS.INCREASE_BASE_BUNNIES:\n      return increaseBaseBunnies(state, action.payload);\n\n    case ACTIONS.GAIN_GOLD:\n      return gainGold(state, action.payload);\n\n    case ACTIONS.PRACTICE_WANDWORK:\n      return practiceWandwork(state);\n\n    case ACTIONS.LOOT_HOARD:\n      return lootHoard(state);\n\n    case ACTIONS.REST:\n      return rest(state);\n\n    case ACTIONS.START_TURN:\n      return startTurn(state, action.dispatch);\n\n    case ACTIONS.CLOSE_COMBAT_REWARDS:\n      return closeCombatRewards(state);\n\n    case ACTIONS.MULLIGAN:\n      return mulligan(state);\n\n    case ACTIONS.CLAIM_GOLD_REWARD: {\n      const { index, amount } = action.payload;\n      const newRewards = [...state.offerings.combatRewards];\n      newRewards.splice(index, 1);\n\n      return {\n        ...gainGold(state, amount),\n        offerings: {\n          ...state.offerings,\n          combatRewards: newRewards,\n        },\n      };\n    }\n\n    case ACTIONS.DRAW_CARD:\n      return drawCard(state);\n\n    case ACTIONS.PLAY_CARD:\n      return playCard(state, action.payload);\n\n    case ACTIONS.CAST_SPELLBOOK:\n      return castSpellbook(state);\n\n    case ACTIONS.EXIT_SHOP:\n      return exitShop(state);\n\n    case ACTIONS.LOG_MESSAGE:\n      return {\n        ...state,\n        log: [action.payload, ...state.log],\n      };\n\n    default:\n      console.warn(\"Unknown action type:\", action.type);\n      return state;\n  }\n}\n//#endregion\n//#region render function\nfunction render(state, dispatch) {\n  // Get or create output div\n  let output = document.getElementById(\"output\");\n  if (!output) {\n    output = document.createElement(\"div\");\n    output.id = \"output\";\n    document.body.appendChild(output);\n  }\n  output.innerHTML = \"\"; // Clear previous contents\n  // //check and see if all cards in the deck are socketed\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null || card.unsocketable);\n\n  //\n  function renderCardList(title, cards) {\n    const section = document.createElement(\"div\");\n    section.innerHTML = `<h3>${title}</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    cards.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    section.appendChild(ul);\n    output.appendChild(section);\n  }\n\n  // render utility function\n  function renderModPhaseEntry(phase, label, modKey) {\n    if (state.currentPhase === phase && state.currentScreen !== SCREENS.MOD) {\n      const modBtn = document.createElement(\"button\");\n      modBtn.textContent = label;\n      modBtn.style.fontSize = \"1.5rem\";\n      modBtn.style.padding = \"1rem 2rem\";\n      modBtn.onclick = () => {\n        modBtn.disabled = true; // prevent double click\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { [modKey]: true },\n            origin: phase,\n          },\n        });\n      };\n      output.appendChild(modBtn);\n    }\n  }\n\n  // === Game Info ===\n  const info = document.createElement(\"div\");\n  info.innerHTML = `\n  <h2>Game Info</h2>\n  <p><strong>Current Screen:</strong> ${state.currentScreen}</p>\n  <p><strong>Phase:</strong> ${\n    state.currentPhase\n  } &nbsp;&nbsp; <strong>Level:</strong> ${state.level ?? 0}</p>\n  <p><strong>Gold:</strong> ${state.gold}</p>\n  <p><strong>Health:</strong> ${state.health}/${state.maxHealth}</p>\n  <p><strong>Deck Size:</strong> ${state.campaign.deck.length}</p>\n  <p><strong>Relics:</strong> ${\n    state.relicBelt.length > 0\n      ? Object.entries(\n          state.relicBelt.reduce((acc, relic) => {\n            acc[relic.name] = (acc[relic.name] || 0) + 1;\n            return acc;\n          }, {})\n        )\n          .map(([name, count]) => (count > 1 ? `${name} x${count}` : name))\n          .join(\", \")\n      : \"None\"\n  }</p>\n`;\n  output.appendChild(info);\n\n  // === Combat Display ===\n  const isCombatInspectScreen = [\n    SCREENS.COMBAT_DECK,\n    SCREENS.GRAVEYARD,\n    SCREENS.EXILE,\n  ].includes(state.currentScreen);\n\n  if (state.currentPhase === PHASES.COMBAT && state.combat) {\n    const combatSection = document.createElement(\"div\");\n    combatSection.style.border = \"2px solid black\";\n    combatSection.style.padding = \"1rem\";\n    combatSection.style.margin = \"1rem 0\";\n    combatSection.innerHTML = `<h3>Combat</h3>`;\n\n    // === Main Combat UI (skip if inspecting)\n    if (!isCombatInspectScreen) {\n      // Enemy Name + HP (on same line)\n      const enemyBox = document.createElement(\"div\");\n      enemyBox.style.display = \"flex\";\n      enemyBox.style.justifyContent = \"space-between\";\n      enemyBox.style.alignItems = \"center\";\n      enemyBox.style.fontSize = \"1.5rem\";\n      enemyBox.style.fontWeight = \"bold\";\n      enemyBox.style.border = \"1px solid red\";\n      enemyBox.style.padding = \"1rem\";\n      enemyBox.style.marginBottom = \"1rem\";\n\n      // Enemy name\n      const nameSpan = document.createElement(\"span\");\n      nameSpan.textContent = state.combat.enemy.name;\n\n      // Enemy HP\n      const hpSpan = document.createElement(\"span\");\n      hpSpan.textContent = `HP: ${state.combat.enemyHp}`;\n\n      enemyBox.appendChild(nameSpan);\n      enemyBox.appendChild(hpSpan);\n      combatSection.appendChild(enemyBox);\n\n      // Spellbook Pages\n      const spellbook = document.createElement(\"div\");\n      spellbook.style.display = \"flex\";\n      spellbook.style.gap = \"0.5rem\";\n      spellbook.style.marginBottom = \"1rem\";\n      state.combat.spellbook.forEach((page, index) => {\n        const pageDiv = document.createElement(\"div\");\n        pageDiv.style.width = \"60px\";\n        pageDiv.style.height = \"90px\";\n        pageDiv.style.border = \"1px solid #333\";\n        pageDiv.style.display = \"flex\";\n        pageDiv.style.alignItems = \"center\";\n        pageDiv.style.justifyContent = \"center\";\n        pageDiv.style.backgroundColor =\n          page === \"blank page\" ? \"lightgrey\" : \"white\";\n        pageDiv.textContent = page === \"blank page\" ? \"\" : page.name;\n        spellbook.appendChild(pageDiv);\n      });\n\n      const spellbookLabel = document.createElement(\"p\");\n      spellbookLabel.textContent = \"Spellbook:\";\n      spellbookLabel.style.fontWeight = \"bold\";\n      spellbookLabel.style.marginBottom = \"0.25rem\";\n      combatSection.appendChild(spellbookLabel);\n      combatSection.appendChild(spellbook);\n\n      // Cast + Ink + Bunny Count\n      const castRow = document.createElement(\"div\");\n      castRow.style.display = \"flex\";\n      castRow.style.alignItems = \"center\";\n      castRow.style.gap = \"1rem\";\n      castRow.style.marginBottom = \"0.5rem\";\n\n      const allPagesBlank =\n        state.combat.spellbook.length > 0 &&\n        state.combat.spellbook.every((page) => page === \"blank page\");\n\n      const castButton = document.createElement(\"button\");\n      if (allPagesBlank) {\n        castButton.textContent = \"Skip Turn\";\n        castButton.style.backgroundColor = \"#f88\";\n      } else {\n        castButton.textContent = \"Cast Spellbook\";\n      }\n      castButton.onclick = () => dispatch({ type: ACTIONS.CAST_SPELLBOOK });\n\n      const bunnyDisplay = document.createElement(\"span\");\n      bunnyDisplay.textContent = `BUNNIES: ${state.combat?.bunnies || 0}`;\n\n      castRow.appendChild(castButton);\n      castRow.appendChild(castButton);\n\n      // === Mulligan Button ===\n      const mulliganBtn = document.createElement(\"button\");\n      const remaining = state.combat?.mulligans ?? 0;\n      mulliganBtn.textContent = `Mulligan (${remaining})`;\n\n      if (remaining <= 0) {\n        mulliganBtn.disabled = true;\n        mulliganBtn.style.backgroundColor = \"#ccc\";\n        mulliganBtn.style.cursor = \"not-allowed\";\n      } else {\n        mulliganBtn.onclick = () => {\n          dispatch({ type: ACTIONS.MULLIGAN });\n        };\n      }\n\n      castRow.appendChild(mulliganBtn);\n      castRow.appendChild(bunnyDisplay);\n      combatSection.appendChild(castRow);\n\n      // === INK and BOOKS Line (below cast + bunnies)\n      const resourcesRow = document.createElement(\"div\");\n      resourcesRow.style.display = \"flex\";\n      resourcesRow.style.gap = \"1rem\";\n      resourcesRow.style.marginBottom = \"1rem\";\n\n      const inkDisplay = document.createElement(\"span\");\n      inkDisplay.textContent = `INK: ${state.combat.ink}/${state.combat.maxInk}`;\n\n      const booksDisplay = document.createElement(\"span\");\n      booksDisplay.textContent = `BOOKS: ${state.combat.books}`;\n\n      resourcesRow.appendChild(inkDisplay);\n      resourcesRow.appendChild(booksDisplay);\n      combatSection.appendChild(resourcesRow);\n\n      // Hand\n      const handRow = document.createElement(\"div\");\n      handRow.style.display = \"flex\";\n      handRow.style.gap = \"0.5rem\";\n      handRow.style.flexWrap = \"wrap\";\n\n      if (state.combat.hand && state.combat.hand.length > 0) {\n        state.combat.hand.forEach((card, index) => {\n          const cardBtn = document.createElement(\"button\");\n\n          const cardCost = card.inkCost ?? 0;\n          const canAfford = cardCost <= state.combat.ink;\n          const isUncastable = !!card.uncastable;\n\n          // Display name and cost\n          const costText =\n            !isUncastable && card.inkCost != null\n              ? ` (Cost: ${card.inkCost})`\n              : \"\";\n          cardBtn.textContent = `${card.name}${costText}`;\n\n          // Disable the button if the card is uncastable or too expensive\n          cardBtn.disabled = isUncastable || !canAfford;\n\n          // Style disabled buttons\n          if (cardBtn.disabled) {\n            cardBtn.style.opacity = \"0.5\";\n            cardBtn.style.cursor = \"not-allowed\";\n          }\n\n          // Only dispatch if allowed\n          cardBtn.onclick = () => {\n            if (!cardBtn.disabled) {\n              dispatch({ type: ACTIONS.PLAY_CARD, payload: index });\n            }\n          };\n\n          handRow.appendChild(cardBtn);\n        });\n      } else {\n        const empty = document.createElement(\"p\");\n        empty.textContent = \"Your hand is empty.\";\n        handRow.appendChild(empty);\n      }\n\n      // Hand label\n      const handLabel = document.createElement(\"p\");\n      handLabel.textContent = \"Hand:\";\n      handLabel.style.fontWeight = \"bold\";\n      handLabel.style.marginBottom = \"0.25rem\";\n      combatSection.appendChild(handLabel);\n\n      combatSection.appendChild(handRow);\n    }\n\n    // === Inspect Buttons (always shown in combat)\n    const inspectRow = document.createElement(\"div\");\n    inspectRow.style.marginTop = \"1rem\";\n    inspectRow.style.display = \"flex\";\n    inspectRow.style.gap = \"0.5rem\";\n\n    [\n      {\n        label: `Combat Deck (${state.combat.deck.length})`,\n        screen: SCREENS.COMBAT_DECK,\n      },\n      {\n        label: `Graveyard (${state.combat.graveyard.length})`,\n        screen: SCREENS.GRAVEYARD,\n      },\n      {\n        label: `Exile (${state.combat.exile.length})`,\n        screen: SCREENS.EXILE,\n      },\n    ].forEach(({ label, screen }) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent =\n        state.currentScreen === screen ? \"Return\" : `Inspect ${label}`;\n      btn.onclick = () => {\n        if (state.currentScreen === screen) {\n          returnToMain(dispatch);\n        } else {\n          changeScreen(dispatch, screen);\n        }\n      };\n      inspectRow.appendChild(btn);\n    });\n\n    //label\n    const inspectZoneLabel = document.createElement(\"p\");\n    inspectZoneLabel.textContent = \"Inspect Zones:\";\n    inspectZoneLabel.style.fontWeight = \"bold\";\n    inspectZoneLabel.style.marginBottom = \"0.25rem\";\n    combatSection.appendChild(inspectZoneLabel);\n    combatSection.appendChild(inspectRow);\n    output.appendChild(combatSection);\n  }\n\n  if (state.currentScreen === SCREENS.COMBAT_DECK) {\n    renderCardList(\"Combat Deck\", state.combat?.deck || []);\n  }\n  if (state.currentScreen === SCREENS.GRAVEYARD) {\n    renderCardList(\"Graveyard\", state.combat?.graveyard || []);\n  }\n  if (state.currentScreen === SCREENS.EXILE) {\n    renderCardList(\"Exile\", state.combat?.exile || []);\n  }\n\n  // === Log ===\n  const log = document.createElement(\"div\");\n  log.innerHTML = `<h3>Log</h3><ul>${state.log\n    .slice(0, 5)\n    .map((msg) => `<li>${msg}</li>`)\n    .join(\"\")}</ul>`;\n  output.appendChild(log);\n\n  // === Main Menu ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.MAIN_MENU\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = \"New Game\";\n    button.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.DIFFICULTY_SELECTION,\n      });\n    };\n    output.appendChild(button);\n  }\n\n  // === Difficulty Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.DIFFICULTY_SELECTION\n  ) {\n    const difficulties = [\n      DIFFICULTIES.EASY,\n      DIFFICULTIES.MEDIUM,\n      DIFFICULTIES.HARD,\n    ];\n    difficulties.forEach((difficulty) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `Start ${difficulty} Game`;\n      btn.onclick = () => selectDifficultyAndBeginGame(dispatch, difficulty);\n      output.appendChild(btn);\n    });\n  }\n\n  // === Relic Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.relics &&\n    state.offerings.relics.length > 0\n  ) {\n    const relicSection = document.createElement(\"div\");\n    relicSection.innerHTML = `<h3>Relic Offerings</h3>`;\n    state.offerings.relics.forEach((relic, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${relic.name}`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n      relicSection.appendChild(btn);\n    });\n    output.appendChild(relicSection);\n  }\n  // === Path Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.paths &&\n    state.offerings.paths.length > 0\n  ) {\n    const pathSection = document.createElement(\"div\");\n    pathSection.innerHTML = `<h3>Choose a Path</h3>`;\n\n    state.offerings.paths.forEach((path, index) => {\n      const btn = document.createElement(\"button\");\n\n      // === Conditionally render based on anonymity ===\n      if (path.anonymousNameDisplay) {\n        btn.textContent = `???`;\n      } else {\n        btn.textContent = `${path.path}`;\n      }\n\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_PATH, payload: index });\n\n      pathSection.appendChild(btn);\n    });\n\n    output.appendChild(pathSection);\n  }\n\n  // === Card Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.cards &&\n    state.offerings.cards.length > 0\n  ) {\n    const cardSection = document.createElement(\"div\");\n    cardSection.innerHTML = `<h3>Choose a Card</h3>`;\n\n    state.offerings.cards.forEach((card, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.inkCost})${\n        card.gem ? ` [Gem: ${card.gem.name}]` : \"\"\n      }`;\n\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n      cardSection.appendChild(btn);\n    });\n\n    output.appendChild(cardSection);\n  }\n\n  // === Potion Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.POTION_OFFERING &&\n    state.offerings.potions &&\n    state.offerings.potions.length > 0\n  ) {\n    const potionSection = document.createElement(\"div\");\n    potionSection.innerHTML = `<h3>Choose a Potion</h3>`;\n\n    state.offerings.potions.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${potion.name} (${potion.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n      potionSection.appendChild(btn);\n    });\n\n    output.appendChild(potionSection);\n  }\n\n  // ==== Gem Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentScreen === SCREENS.MAIN &&\n    state.currentPhase === PHASES.GEM_OFFERING &&\n    state.offerings.gems &&\n    state.offerings.gems.length > 0\n  ) {\n    const gemSection = document.createElement(\"div\");\n    gemSection.innerHTML = `<h3>Choose a Gem</h3>`;\n\n    state.offerings.gems.forEach((gem, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${gem.name} (${gem.rarity})`;\n\n      btn.onclick = () =>\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { gem },\n            origin: PHASES.GEM_OFFERING,\n          },\n        });\n\n      gemSection.appendChild(btn);\n    });\n\n    output.appendChild(gemSection);\n  }\n  // === Shopfront Display ===\n\n  if (\n    state.currentPhase === PHASES.SHOP &&\n    state.currentScreen !== SCREENS.MOD &&\n    state.offerings.shopfront.length > 0\n  ) {\n    const shopSection = document.createElement(\"div\");\n    shopSection.innerHTML = `<h3>Shop Inventory</h3>`;\n\n    const list = document.createElement(\"ul\");\n    state.offerings.shopfront.forEach((entry, index) => {\n      if (!entry || !entry.item || !entry.item.name) return;\n\n      const li = document.createElement(\"li\");\n\n      const btn = document.createElement(\"button\");\n      const price = entry.item?.price ?? 0;\n      const playerGold = state.gold ?? 0;\n      const isGem = entry.type === \"gem\";\n      const disabled = price > playerGold || (isGem && allCardsSocketed);\n      btn.textContent = `${entry.type.toUpperCase()}: ${\n        entry.item.name\n      } (${price}g)`;\n      if (disabled) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      // Bind correct function based on type\n      btn.onclick = () => {\n        switch (entry.type) {\n          case \"card\":\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n            break;\n          case \"potion\":\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n            break;\n          case \"gem\":\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: entry.item },\n                origin: PHASES.SHOP,\n              },\n            });\n            break;\n\n          case \"relic\":\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n            break;\n          default:\n            console.warn(\"Unknown shop item type:\", entry.type);\n        }\n      };\n\n      li.appendChild(btn);\n      list.appendChild(li);\n    });\n\n    // Exit Shop Button (for future logic)\n    const exitBtn = document.createElement(\"button\");\n    exitBtn.textContent = \"Exit Shop\";\n    exitBtn.onclick = () => {\n      dispatch({ type: ACTIONS.EXIT_SHOP });\n    };\n    shopSection.appendChild(list);\n    shopSection.appendChild(exitBtn);\n    output.appendChild(shopSection);\n  }\n\n  // === Mod Screen ===\n  if (state.currentScreen === SCREENS.MOD && state.modData?.mod) {\n    const modSection = document.createElement(\"div\");\n    modSection.innerHTML = `<h3>Choose a card to modify</h3>`;\n\n    const mod = state.modData.mod;\n    const isGemMod = !!mod.gem;\n\n    state.campaign.deck.forEach((card) => {\n      // === Filter based on mod type ===\n      if (isGemMod && (card.gem || card.unsocketable)) return;\n      if (mod.upgrade && card.unupgradable) return;\n\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.inkCost})`;\n\n      btn.onclick = () => {\n        dispatch({ type: ACTIONS.APPLY_CARD_MOD, payload: card });\n      };\n\n      modSection.appendChild(btn);\n    });\n\n    output.appendChild(modSection);\n  }\n\n  // ======= render purge, transmute, and enchant phases (AKA mod phases) ======\n\n  renderModPhaseEntry(PHASES.PURGE, \"Lethian Font\", \"purge\");\n  renderModPhaseEntry(PHASES.TRANSMUTE, \"Metamorphosis\", \"transmute\");\n  renderModPhaseEntry(PHASES.ENCHANT, \"Enchanted Dolmen\", \"upgrade\");\n\n  // ====== render hoard phase= ======\n  if (state.currentPhase === PHASES.HOARD) {\n    const btn = document.createElement(\"button\");\n    btn.textContent = \"Loot Hoard\";\n    btn.style.fontSize = \"1.5rem\";\n    btn.style.padding = \"1rem 2rem\";\n    btn.onclick = () => {\n      // Placeholder until lootHoard is implemented\n      dispatch({ type: \"LOOT_HOARD\" }); // or just console.log(\"Loot Hoard\")\n    };\n    output.appendChild(btn);\n  }\n  // ====== rest phase rendering ======\n  if (state.currentPhase === PHASES.REST) {\n    const restBtn = document.createElement(\"button\");\n    restBtn.textContent = \"Fireside Rest\";\n    restBtn.style.fontSize = \"1.5rem\";\n    restBtn.style.padding = \"1rem 2rem\";\n    restBtn.onclick = () => {\n      dispatch({ type: \"REST\" }); // Placeholder\n    };\n\n    const practiceBtn = document.createElement(\"button\");\n    practiceBtn.textContent = \"Practice Wandwork\";\n    practiceBtn.style.fontSize = \"1.5rem\";\n    practiceBtn.style.padding = \"1rem 2rem\";\n    practiceBtn.onclick = () => {\n      dispatch({ type: \"PRACTICE_WANDWORK\" }); // Placeholder\n    };\n\n    output.appendChild(restBtn);\n    output.appendChild(practiceBtn);\n  }\n\n  // === Combat End Phase ===\n  if (state.currentPhase === PHASES.COMBAT_END) {\n    const combatEndSection = document.createElement(\"div\");\n    combatEndSection.innerHTML = `<h3>Combat Concluded</h3>`;\n\n    const hasUnclaimedLoot =\n      state.offerings?.combatRewards &&\n      state.offerings.combatRewards.length > 0;\n\n    const btn = document.createElement(\"button\");\n    btn.textContent = hasUnclaimedLoot ? \"Skip Loot\" : \"Continue\";\n    btn.onclick = () => {\n      dispatch({ type: ACTIONS.CLOSE_COMBAT_REWARDS });\n    };\n\n    combatEndSection.appendChild(btn);\n    output.appendChild(combatEndSection);\n  }\n  if (\n    state.currentPhase === PHASES.COMBAT_END &&\n    state.offerings.combatRewards &&\n    state.offerings.combatRewards.length > 0\n  ) {\n    const rewardSection = document.createElement(\"div\");\n    rewardSection.innerHTML = `<h3>Combat Rewards</h3>`;\n\n    state.offerings.combatRewards.forEach((reward, index) => {\n      const btn = document.createElement(\"button\");\n\n      let label = \"\";\n      switch (reward.type) {\n        case \"gold\":\n          label = `Gold: ${reward.value}`;\n          break;\n        case \"card\":\n          label = `Card: ${reward.value.name}`;\n          break;\n        case \"relic\":\n          label = `Relic: ${reward.value.name}`;\n          break;\n        case \"potion\":\n          label = `Potion: ${reward.value.name}`;\n          break;\n        case \"gem\":\n          label = `Gem: ${reward.value.name}`;\n          break;\n        default:\n          label = \"Unknown Reward\";\n      }\n\n      btn.textContent = label;\n\n      const isGem = reward.type === \"gem\";\n      const shouldDisable = isGem && allCardsSocketed;\n\n      if (shouldDisable) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      if (!shouldDisable) {\n        btn.onclick = () => {\n          if (reward.type === \"gold\") {\n            dispatch({\n              type: ACTIONS.CLAIM_GOLD_REWARD,\n              payload: { index, amount: reward.value },\n            });\n          } else if (reward.type === \"card\") {\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n          } else if (reward.type === \"relic\") {\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n          } else if (reward.type === \"potion\") {\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n          } else if (reward.type === \"gem\") {\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: reward.value },\n                origin: PHASES.COMBAT_END,\n              },\n            });\n          }\n        };\n      }\n\n      rewardSection.appendChild(btn);\n    });\n\n    output.appendChild(rewardSection);\n  }\n  // === GAME OVER screen ====\n  if (state.currentPhase === PHASES.GAME_OVER) {\n    const gameOverSection = document.createElement(\"div\");\n    gameOverSection.classList.add(\"game-over\");\n\n    const banner = document.createElement(\"h1\");\n    banner.textContent =\n      state.result === \"Victory\" ? \"🏆 Victory!\" : \"💀 Defeat!\";\n    gameOverSection.appendChild(banner);\n\n    const summary = document.createElement(\"div\");\n    summary.innerHTML = `\n      <p>Game ended at level: ${state.level}</p>\n      <h3>Decklist:</h3>\n      <ul>\n        ${state.campaign.deck\n          .map(\n            (card) =>\n              `<li>${card.name}</li>\n`\n          )\n          .join(\"\")}\n      </ul>\n      <h3>Relics:</h3>\n      <ul>\n        ${state.relicBelt.map((relic) => `<li>${relic.name}</li>`).join(\"\")}\n      </ul>\n    `;\n    gameOverSection.appendChild(summary);\n\n    const newGameBtn = document.createElement(\"button\");\n    newGameBtn.textContent = \"Return to Main Menu\";\n    newGameBtn.onclick = () => {\n      dispatch({ type: ACTIONS.NEW_GAME });\n    };\n\n    gameOverSection.appendChild(newGameBtn);\n    output.appendChild(gameOverSection);\n  }\n\n  // === Deck Inspect / Return Button ===\n  //deck inspect button\n  if (\n    (state.currentScreen === SCREENS.MAIN ||\n      state.currentScreen === SCREENS.DECK) &&\n    state.campaign.deck.length > 0\n  ) {\n    const deckBtn = document.createElement(\"button\");\n    deckBtn.textContent =\n      state.currentScreen === SCREENS.MAIN\n        ? `Inspect Deck (${state.campaign.deck.length})`\n        : \"Return\";\n    deckBtn.onclick = () => {\n      const nextScreen =\n        state.currentScreen === SCREENS.MAIN ? SCREENS.DECK : SCREENS.MAIN;\n      dispatch({\n        type: ACTIONS.SCREEN_CHANGE,\n        payload: nextScreen,\n      });\n    };\n    output.appendChild(deckBtn);\n  }\n  // deck inspect screen\n  if (state.currentScreen === SCREENS.DECK) {\n    const deckView = document.createElement(\"div\");\n    deckView.innerHTML = `<h3>Campaign Deck</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    state.campaign.deck.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    deckView.appendChild(ul);\n    output.appendChild(deckView);\n  }\n\n  // === Always-Visible Potion Belt ===\n  if (state.potionBelt && state.potionBelt.length > 0) {\n    const beltSection = document.createElement(\"div\");\n    beltSection.innerHTML = `<h3>Your Potions</h3>`;\n\n    state.potionBelt.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = potion.name;\n\n      const isCombatPhase = state.currentPhase === PHASES.COMBAT;\n      const isDrinkableNow =\n        potion.drinkableOutOfCombat !== false || isCombatPhase;\n\n      if (!isDrinkableNow) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      btn.onclick = () => {\n        if (isDrinkableNow) {\n          dispatch({ type: ACTIONS.DRINK_POTION, payload: index });\n        }\n      };\n\n      beltSection.appendChild(btn);\n    });\n\n    output.appendChild(beltSection);\n  }\n}\n// #endregion\n\n// Initialize the game app\nwindow.onload = () => {\n  createGameApp(createInitialState(), gameReducer, render);\n};\n\n//hotkeys\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Escape\") {\n    dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: SCREENS.MAIN });\n  }\n});\n\n//#region WIP\n// //------------------------------------------------WIP functions for MVP ------------------------------------------------\nfunction startTurn(state) {\n  console.log(\">>> Starting new turn. Books remaining: \", state.combat.books);\n\n  if (state.combat.books < 1) {\n    return {\n      ...state,\n      combat: {\n        ...state.combat,\n        combatEnded: true,\n      },\n      log: [\"📕 You have no books left. Combat ends.\", ...state.log],\n    };\n  }\n\n  // Open a new spellbook of blank pages\n  const newBook = Array(state.combat.pages).fill(\"blank page\");\n\n  const baseBunnies = state.combat.baseBunnies ?? 0;\n\n  // Subtract one book, set up spellbook, and apply base bunnies\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      books: state.combat.books - 1,\n      spellbook: newBook,\n      bunnies: baseBunnies, // ✅ Set starting bunnies for the turn\n      combatEnded: false,\n    },\n    log: [\n      `📖 A new turn begins. 🐇 Gained ${baseBunnies} bunnies.`,\n      ...state.log,\n    ],\n  };\n\n  updatedState = newHand(updatedState);\n  updatedState = refillInkpot(updatedState);\n\n  return updatedState;\n}\n\nfunction shuffleGraveyardIntoDeck(state) {\n  const graveyard = state.combat?.graveyard ?? [];\n  const deck = state.combat?.deck ?? [];\n\n  if (graveyard.length === 0) {\n    return {\n      ...state,\n      log: [\"Your graveyard is already empty.\", ...state.log],\n    };\n  }\n\n  // Purely combine and shuffle\n  const combinedDeck = [...deck, ...graveyard];\n  const shuffledDeck = shuffleArray(combinedDeck);\n\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      deck: shuffledDeck,\n      graveyard: [], // clear graveyard\n    },\n    log: [\"You shuffled your graveyard into your deck.\", ...state.log],\n  };\n\n  // 🔁 Check for relic triggers\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.SHUFFLE_GRAVEYARD_INTO_DECK\n  );\n\n  // 🧪 Check if anyone died as a result of relic effects\n  updatedState = checkCombatEndViaDeath(updatedState);\n\n  return updatedState;\n}\n\nfunction refillInkpot(state) {\n  const maxInk = state.combat?.maxInk ?? 0;\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      ink: maxInk,\n    },\n    log: [`🔮 Inkpot refilled to ${maxInk}.`, ...state.log],\n  };\n}\nfunction checkCombatEndViaDeath(state) {\n  const playerDead = state.health <= 0;\n  const enemyDead = state.combat?.enemyHp <= 0;\n\n  if (playerDead) {\n    console.log(\">>> Player is dead. Ending combat.\");\n\n    return combatEnd(state, { result: \"loss\" });\n  }\n\n  if (enemyDead) {\n    console.log(\">>> Enemy is dead. Ending combat.\");\n\n    return combatEnd(state, { result: \"win\" });\n  }\n\n  // No one is dead — combat continues\n  return state;\n}\nfunction newHand(state) {\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      hand: [], // clear hand before drawing\n    },\n  };\n\n  for (let i = 0; i < updatedState.combat.handSize; i++) {\n    updatedState = drawCard(updatedState);\n  }\n\n  return updatedState;\n}\nfunction drawCard(state) {\n  let updatedState = { ...state };\n\n  // 🛠 Use the most recent combat state from the input state\n  let currentCombat = updatedState.combat;\n\n  // Step 1: If deck is empty, try to shuffle from graveyard\n  if (currentCombat.deck.length === 0) {\n    updatedState = shuffleGraveyardIntoDeck(updatedState);\n  }\n\n  // 🧠 Rebind again after potential shuffle\n  currentCombat = updatedState.combat;\n\n  // Step 2: If still no cards, apply fatigue\n  if (currentCombat.deck.length === 0) {\n    updatedState = takeDamage(updatedState, 1, { skipDeathCheck: false });\n    updatedState = {\n      ...updatedState,\n      log: [\n        \"💀 Lost 1 HP to fatigue by attempting to draw from an empty deck.\",\n        ...updatedState.log,\n      ],\n    };\n    return updatedState;\n  }\n\n  // Step 3: Draw the card normally\n  const [drawnCard, ...remainingDeck] = currentCombat.deck;\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...currentCombat,\n      deck: remainingDeck,\n      hand: [...currentCombat.hand, drawnCard],\n    },\n    log: [`📜 Drew card: ${drawnCard.name}`, ...updatedState.log],\n  };\n\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.DRAW_CARD);\n  updatedState = checkCardTriggers(\n    updatedState,\n    drawnCard,\n    TRIGGER_EVENTS.DRAW_CARD\n  );\n\n  return updatedState;\n}\n\nfunction checkCardTriggers(state, card, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  const effect = card.triggers?.[triggerEvent];\n  if (!effect) return updatedState;\n  // === Handle DRAW_CARD triggers ===\n  if (triggerEvent === TRIGGER_EVENTS.DRAW_CARD) {\n    // on draw triggers go here\n  }\n  // === Handle PICK_CARD triggers ===\n  if (triggerEvent === TRIGGER_EVENTS.PICK_CARD) {\n    // on pick triggers go here\n  }\n  return updatedState;\n}\nfunction addBunnies(state, bunnyAdd) {\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      bunnies: (state.combat.bunnies ?? 0) + bunnyAdd,\n    },\n  };\n}\nfunction multiplyBunnies(state, bunnyMult) {\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      bunnies: Math.floor((state.combat.bunnies ?? 0) * bunnyMult),\n    },\n  };\n}\nfunction takeDamage(state, dmg, options = {}) {\n  console.trace(\"taking damage:\", dmg, \"options:\", options);\n  const skipDeathCheck = options.skipDeathCheck ?? false;\n\n  const updatedState = {\n    ...state,\n    health: Math.max(0, state.health - dmg),\n    log: [`You took ${dmg} damage.`, ...state.log],\n  };\n\n  return skipDeathCheck ? updatedState : checkCombatEndViaDeath(updatedState);\n}\n\nfunction dealDamage(state, damage, damageTypes = [], options = {}) {\n  const { isBonus = false } = options;\n  const newEnemyHp = Math.max(0, state.combat.enemyHp - damage);\n\n  console.log(\n    `>> dealDamage: current enemy HP = ${\n      state.combat.enemyHp\n    }, damage = ${damage}, new = ${newEnemyHp}, types = [${damageTypes.join(\n      \", \"\n    )}], isBonus = ${isBonus}`\n  );\n\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      enemyHp: newEnemyHp,\n    },\n    log: [\n      `⚔️ You dealt ${damage} damage to ${state.combat.enemy.name}` +\n        (damageTypes.length > 0 ? ` (${damageTypes.join(\", \")})` : \"\") +\n        \".\",\n      ...state.log,\n    ],\n  };\n\n  // Only trigger relics if this isn't bonus damage\n  if (!isBonus) {\n    for (const damageType of damageTypes) {\n      updatedState = checkRelicTriggers(\n        updatedState,\n        TRIGGER_EVENTS.DEAL_DAMAGE,\n        {\n          damageType,\n          amount: damage,\n          enemy: state.combat.enemy,\n        }\n      );\n    }\n  }\n\n  updatedState = checkCombatEndViaDeath(updatedState);\n  updatedState = checkGameOver(updatedState);\n\n  return updatedState;\n}\n\nfunction playCard(state, index) {\n  const hand = [...state.combat.hand];\n  const card = hand[index];\n\n  /* ── Guard clauses ─────────────────────────────────────────────────── */\n  if (!card || card.uncastable) return state;\n  if ((card.inkCost ?? 0) > state.combat.ink) return state;\n\n  /* ── Step 1: deduct ink ────────────────────────────────────────────── */\n  let updatedState = modifyCombatInk({ ...state }, -card.inkCost);\n\n  /* ── Step 2: remove card from hand ─────────────────────────────────── */\n  hand.splice(index, 1);\n  updatedState = {\n    ...updatedState,\n    combat: { ...updatedState.combat, hand },\n  };\n\n  /* ── Step 3: relic triggers for PLAY_CARD ──────────────────────────── */\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.PLAY_CARD, {\n    card,\n  });\n\n  /* ── INSTANT cards resolve immediately ─────────────────────────────── */\n  if (card.cardType === CARD_TYPES.INSTANT) {\n    //  No zone-placement here!  resolveSpell will handle graveyard/exile\n    updatedState = resolveSpell(updatedState, card);\n    updatedState = checkCombatEndViaDeath(updatedState);\n    updatedState = checkGameOver(updatedState);\n    return updatedState;\n  }\n\n  /* ── SPELL cards: place into spellbook ─────────────────────────────── */\n  const spellbook = [...updatedState.combat.spellbook];\n  const firstBlank = spellbook.indexOf(\"blank page\");\n  if (firstBlank === -1) return updatedState; // failsafe\n\n  spellbook[firstBlank] = card;\n  updatedState = {\n    ...updatedState,\n    combat: { ...updatedState.combat, spellbook },\n  };\n\n  /* ── Auto-cast when the spellbook is full ───────────────────────────── */\n  if (!spellbook.includes(\"blank page\")) {\n    updatedState = castSpellbook(updatedState);\n    updatedState = checkCombatEndViaDeath(updatedState);\n    updatedState = checkGameOver(updatedState);\n  }\n\n  return updatedState;\n}\n\nfunction castSpellbook(state) {\n  let updatedState = { ...state };\n\n  // 🌀 Trigger relic effects for CAST_SPELLBOOK\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.CAST_SPELLBOOK\n  );\n\n  // 🔮 Cast each non-blank spell in the spellbook\n  for (const card of updatedState.combat.spellbook) {\n    if (typeof card !== \"object\" || card.name === \"blank page\") continue;\n    updatedState = resolveSpell(updatedState, card);\n  }\n\n  // 🐇 Release bunnies (deal damage equal to bunny count)\n  updatedState = releaseBunnies(updatedState);\n\n  // ✅ If enemy is still alive\n  if (updatedState.combat?.enemyHp > 0) {\n    // 👇 Check if any books remain\n    if (updatedState.combat.books > 0) {\n      console.log(\">>> Enemy survived, but books remain. Next turn begins.\");\n      return startTurn(updatedState);\n    } else {\n      console.log(\">>> Enemy survived. No books left. Player loses combat.\");\n      return combatEnd(updatedState, { result: \"loss\" });\n    }\n  }\n\n  // ✅ Enemy is dead → player wins\n  return combatEnd(updatedState, { result: \"win\" });\n}\nfunction releaseBunnies(state) {\n  const bunnyDamage = state.combat.bunnies ?? 0;\n\n  if (bunnyDamage <= 0) {\n    return {\n      ...state,\n      combat: {\n        ...state.combat,\n        bunnies: 0,\n      },\n    };\n  }\n\n  let updatedState = { ...state };\n\n  // ✅ Pass as an array now\n  updatedState = dealDamage(updatedState, bunnyDamage, [DAMAGE_TYPES.BUNNY]);\n\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...updatedState.combat,\n      bunnies: 0,\n    },\n    log: [\n      `Released ${bunnyDamage} bunn${bunnyDamage === 1 ? \"y\" : \"ies\"}!`,\n      ...updatedState.log,\n    ],\n  };\n\n  return updatedState;\n}\n\nfunction endTurn(state) {\n  let updatedState = { ...state };\n\n  // 🧪 Check if combat has ended via death\n  updatedState = checkCombatEndViaDeath(updatedState);\n  if (updatedState.combat.combatEnded) return updatedState;\n\n  // 🪦 Move remaining cards in hand to the graveyard\n  const remainingHand = updatedState.combat.hand || [];\n  const updatedGraveyard = [...updatedState.combat.graveyard, ...remainingHand];\n\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...updatedState.combat,\n      hand: [],\n      graveyard: updatedGraveyard,\n    },\n    log: [`You ended your turn.`, ...updatedState.log],\n  };\n\n  // 🧪 Check again before starting next turn\n  if (updatedState.combat.combatEnded) return updatedState;\n\n  // 🔁 Start a new turn\n  return startTurn(updatedState);\n}\n\nfunction resolveSpell(state, card) {\n  if (!card || typeof card !== \"object\") return state;\n\n  let updatedState = { ...state };\n  const effects = [];\n\n  // === Bunny Add ===\n  if (card.bunnyAdd) {\n    updatedState = addBunnies(updatedState, card.bunnyAdd);\n    effects.push(`+${card.bunnyAdd} bunn${card.bunnyAdd === 1 ? \"y\" : \"ies\"}`);\n  }\n\n  // === Bunny Multiply ===\n  if (card.bunnyMult) {\n    updatedState = multiplyBunnies(updatedState, card.bunnyMult);\n    effects.push(`×${card.bunnyMult} bunnies`);\n  }\n\n  // === Gain Gold ===\n  if (card.goldAdd) {\n    updatedState = gainGold(updatedState, card.goldAdd);\n    effects.push(`+${card.goldAdd} gold`);\n  }\n\n  // === Add Ink ===\n  if (card.inkAdd) {\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        ink: updatedState.combat.ink + card.inkAdd,\n      },\n    };\n    effects.push(`+${card.inkAdd} ink`);\n  }\n\n  // === Draw Cards ===\n  if (card.cardDraw) {\n    for (let i = 0; i < card.cardDraw; i++) {\n      updatedState = drawCard(updatedState);\n    }\n    effects.push(`Drew ${card.cardDraw} card${card.cardDraw === 1 ? \"\" : \"s\"}`);\n  }\n\n  // === Health Cost ===\n  if (card.healthCost) {\n    updatedState = takeDamage(updatedState, card.healthCost);\n    effects.push(`-${card.healthCost} HP`);\n  }\n\n  // === Permanently Upgrade Cards in Deck ===\n  if (card.permanentlyUpgradeRandomCardsInDeck) {\n    const numToUpgrade = Math.min(\n      card.permanentlyUpgradeRandomCardsInDeck,\n      updatedState.campaign.deck.length\n    );\n    const upgradedDeck = permanentlyUpgradeRandomCardsInDeck(\n      updatedState.campaign.deck,\n      numToUpgrade\n    );\n    updatedState = {\n      ...updatedState,\n      campaign: {\n        ...updatedState.campaign,\n        deck: upgradedDeck,\n      },\n    };\n    effects.push(`Upgraded ${numToUpgrade} card(s) in deck`);\n  }\n\n  // === Permanently Upgrade Cards in Hand ===\n  if (card.permanentlyUpgradeRandomCardsInHand) {\n    const numToUpgrade = Math.min(\n      card.permanentlyUpgradeRandomCardsInHand,\n      updatedState.combat.hand.length\n    );\n    const upgradedHand = permanentlyUpgradeRandomCardsInDeck(\n      updatedState.combat.hand,\n      numToUpgrade\n    );\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        hand: upgradedHand,\n      },\n    };\n    effects.push(`Upgraded ${numToUpgrade} card(s) in hand`);\n  }\n\n  // === Flat Damage ===\n  if (card.damage) {\n    const types =\n      Array.isArray(card.damageTypes) && card.damageTypes.length > 0\n        ? card.damageTypes\n        : [DAMAGE_TYPES.BUNNY];\n\n    updatedState = dealDamage(updatedState, card.damage, types);\n    effects.push(`Dealt ${card.damage} ${types.join(\"/\")} damage`);\n  }\n\n  // === Rolled Damage (e.g., Lightning) ===\n  if (\n    card.damageRoll &&\n    typeof card.damageRoll.dice === \"number\" &&\n    typeof card.damageRoll.sides === \"number\"\n  ) {\n    const { dice, sides, flatBonus = 0 } = card.damageRoll;\n    const damage = rollDice(dice, sides, flatBonus);\n\n    const types =\n      Array.isArray(card.damageTypes) && card.damageTypes.length > 0\n        ? card.damageTypes\n        : [DAMAGE_TYPES.BUNNY];\n\n    updatedState = dealDamage(updatedState, damage, types);\n\n    const typeList = types.join(\" & \");\n    effects.push(`Dealt ${damage} ${typeList} damage`);\n  }\n\n  /// === Upgrade on Cast (if applicable) ===\n  if (card.upgradesOnCast) {\n    const upgradedCard = upgradeCard(card, card.upgradesOnCast);\n\n    // === Update campaign deck with upgraded version\n    updatedState = upgradeSpecificCardInCampaignDeck(\n      updatedState,\n      card,\n      card.upgradesOnCast\n    );\n\n    const destination = upgradedCard.exileOnCast ? \"exile\" : \"graveyard\";\n    const updatedSpellbook = updatedState.combat.spellbook.filter(\n      (c) => c.name !== card.name\n    );\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        spellbook: updatedSpellbook,\n        [destination]: [...updatedState.combat[destination], upgradedCard],\n      },\n      trashpile: [...(updatedState.trashpile || []), card],\n      log: [`Cast ${card.name}: ${effects.join(\", \")}`, ...updatedState.log],\n    };\n\n    return checkCombatEndViaDeath(updatedState);\n  } else {\n    // === Move to Exile or Graveyard ===\n    const destination = card.exileOnCast ? \"exile\" : \"graveyard\";\n    const updatedSpellbook = updatedState.combat.spellbook.filter(\n      (c) => c.name !== card.name\n    );\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        spellbook: updatedSpellbook,\n        [destination]: [...updatedState.combat[destination], card],\n      },\n      trashpile: [...(updatedState.trashpile || []), card],\n      log: [`Cast ${card.name}: ${effects.join(\", \")}`, ...updatedState.log],\n    };\n\n    return checkCombatEndViaDeath(updatedState);\n  }\n}\n\nfunction combatEnd(state, context = {}) {\n  console.log(\">>> Entered combatEnd with context:\", context);\n\n  if (!state.combat || state.currentPhase === PHASES.COMBAT_END) {\n    return state; // Already ended or invalid\n  }\n\n  let updatedState = { ...state };\n  const result = context.result ?? \"loss\";\n  const victory = result === \"win\";\n  const enemy = updatedState.combat?.enemy;\n\n  // === Call relic triggers for COMBAT_END\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.COMBAT_END);\n\n  // === Handle victory\n  if (victory) {\n    const rewards = [\n      ...(updatedState.combat.rewards ?? []),\n      ...(enemy?.loot ?? []),\n    ];\n\n    if (enemy?.isBoss) {\n      const bossRelic = getRandomBossRelic();\n      if (bossRelic) rewards.push(bossRelic);\n\n      // ✅ Increase stage when defeating a boss\n      updatedState.stage = (updatedState.stage ?? 0) + 1;\n\n      updatedState = {\n        ...updatedState,\n        log: [\n          `🏆 You defeated a boss! Stage increased to ${updatedState.stage}.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    const defeatedEnemies = [...(updatedState.defeatedEnemies ?? []), enemy];\n\n    updatedState = {\n      ...updatedState,\n      defeatedEnemies,\n      offerings: {\n        ...updatedState.offerings,\n        combatRewards: rewards,\n      },\n    };\n\n    updatedState = checkGameOver(updatedState);\n  } else {\n    // === Handle defeat: take damage equal to enemy's remaining HP\n    const remainingEnemyHp = updatedState.combat?.enemyHp ?? 0;\n\n    if (remainingEnemyHp > 0) {\n      updatedState = takeDamage(updatedState, remainingEnemyHp, {\n        skipDeathCheck: true,\n      });\n      updatedState = {\n        ...updatedState,\n        log: [\n          `☠️ You were defeated by ${\n            enemy?.name ?? \"the enemy\"\n          } and took ${remainingEnemyHp} damage.`,\n          ...updatedState.log,\n        ],\n      };\n    } else {\n      updatedState = {\n        ...updatedState,\n        log: [\n          `☠️ You were defeated by ${enemy?.name ?? \"the enemy.\"}`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    updatedState = checkGameOver(updatedState);\n  }\n\n  // === Clean up combat state\n  const cleanedCombat = {\n    ...updatedState.combat,\n    spellbook: [],\n    hand: [],\n    graveyard: [],\n    bunnies: 0,\n  };\n\n  // === Determine next phase\n  let finalState = {\n    ...updatedState,\n    combat: cleanedCombat,\n  };\n\n  if (finalState.gameOverResult) {\n    finalState = advancePhaseTo(finalState, PHASES.GAME_OVER);\n    finalState = {\n      ...finalState,\n      log: [`🛑 Game Over: ${finalState.gameOverResult}`, ...finalState.log],\n    };\n  } else {\n    finalState = advancePhaseTo(finalState, PHASES.COMBAT_END);\n  }\n\n  return handlePhaseTransitions(finalState);\n}\n\nfunction closeCombatRewards(state) {\n  const hasUnclaimedLoot =\n    state.offerings?.combatRewards && state.offerings.combatRewards.length > 0;\n\n  // Optional: Log message about skipping loot\n  const logEntry = hasUnclaimedLoot\n    ? \"Skipped remaining combat loot.\"\n    : \"Combat complete.\";\n\n  const newState = {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      combatRewards: [], // clear the rewards\n    },\n    log: [logEntry, ...state.log],\n  };\n\n  const pathState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n  return handlePhaseTransitions(pathState);\n}\nfunction checkGameOver(state) {\n  const playerDead = state.health <= 0;\n  const defeatedBosses = (state.defeatedEnemies || []).filter(\n    (enemy) => enemy.isBoss\n  ).length;\n\n  if (playerDead) {\n    return {\n      ...state,\n      gameOverResult: \"loss\",\n    };\n  }\n\n  if (defeatedBosses >= 3) {\n    return {\n      ...state,\n      gameOverResult: \"victory\",\n    };\n  }\n\n  return state;\n}\n\nfunction gameOver(state, result) {\n  return {\n    ...state,\n    gameResult: result,\n    currentPhase: PHASES.GAME_OVER,\n    log: [`🛑 Game Over: ${result}`, ...state.log],\n  };\n}\nfunction exitShop(state) {\n  const cleanedState = {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: [], // Clear the shop\n    },\n    log: [\"🛒 Exited the shop.\", ...state.log],\n  };\n\n  // Use your phase transition helpers to change to the next phase\n  return handlePhaseTransitions(\n    advancePhaseTo(cleanedState, PHASES.PATH_SELECTION)\n  );\n}\n\nfunction rollDice(numDice, sidesPerDie, flatBonus = 0) {\n  let total = 0;\n  for (let i = 0; i < numDice; i++) {\n    total += Math.floor(Math.random() * sidesPerDie) + 1;\n  }\n  return total + flatBonus;\n}\n\nfunction upgradeSpecificCardInCampaignDeck(state, card, upgrades = 1) {\n  if (!state?.campaign?.deck || !Array.isArray(state.campaign.deck)) {\n    console.error(\"No valid campaign deck found in state.\");\n    return state;\n  }\n\n  const deck = [...state.campaign.deck];\n  const index = deck.findIndex((c) => c.name === card.name);\n\n  if (index === -1) {\n    console.warn(`Card not found in campaign deck: ${card.name}`);\n    return state;\n  }\n\n  deck[index] = upgradeCard(deck[index], upgrades);\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck,\n    },\n  };\n}\n\nfunction getShopPriceMultiplier(state) {\n  return state.relicBelt.reduce((multiplier, relic) => {\n    const effect = relic.triggers?.[TRIGGER_EVENTS.ASSIGN_SHOP_PRICES];\n    return effect?.shopPriceMultiplier\n      ? multiplier * effect.shopPriceMultiplier\n      : multiplier;\n  }, 1);\n}\n\nfunction mulligan(state) {\n  let updatedState = { ...state };\n  const combat = updatedState.combat;\n\n  if (!combat || combat.mulligans <= 0) {\n    console.warn(\"Cannot mulligan: no mulligans remaining.\");\n    return updatedState;\n  }\n\n  const handSize = combat.hand.length;\n\n  // Move hand to graveyard\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...combat,\n      hand: [],\n      graveyard: [...combat.graveyard, ...combat.hand],\n      mulligans: combat.mulligans - 1,\n    },\n    log: [`🔄 Mulliganed ${handSize} card(s).`, ...updatedState.log],\n  };\n\n  // Draw the same number of cards\n  for (let i = 0; i < handSize; i++) {\n    updatedState = drawCard(updatedState);\n  }\n\n  return updatedState;\n}\n\n//current bugs/fixes/additions.\n\n// if you start a new game after losing, it seems to carry on some of the previous game state. Make sure to completely clean the state.\n// game gets mega bugged if you continue to play after a defeat. Really double check the state cleanup.\n\n//bug with socketing naming (or at least displaying) - eg., Amber Bunnymancy +1 2d5+1 (checkinspect deck render as well as the naming logic, error could be in either place)\n// same bug in card offerings too?\n\n// crystal ball triggers when we start path selection (??????)\n// planetarium mobile doesn't work.\n// same boss can appear twice.\n// stage is not advancing.\n// game continues past level 46. (Should end when 3rd boss is defeated.)\n// discount voucher doesn't actually work when bought in the shop. It should simply be unavailable in the shop (easiest fix)\n\n//losing to bosses does't make you lose the game (it should, but it doesn't).\n\n//expanding the game\n// a mythic gem that makes a spell cost 1 less ink, be an instant, and exile on cast.\n// implement \"critical hit\" mechanics; cards, gems, and relics, plus three 'critical hit matters' mythics - one that boosts crit amounts,  one that increases crit chance, and one that gives crits to everything.\n// implement three boss abilties keyed to the boss name: 'downgrade all cards in enemy deck', '+1 ink cost to all enemy cards', and 'enemy loses 1 hp whenever they play a card'.\n// implement an enemy ablity that exiles 3 random cards from your deck at combat start, increment value 2. (\"Milling\")\n// implement an enemy ability that removes the 1 most-upgraded card in your deck (\"Lobotomizing\"), increment value 1.\n// a card that heals HP. (exiles on cast ofc)\n\n//reward deck size mechanics:\n// a card that adds bunnies based on the #cards in the campaign deck. adds 1x campaign deck cards, each upgrade increases the mult by 1.\n// a relic that on pickup gives you +HP based on the #cards in the campaign deck.\n// a relic that on pickup gives you +baseBunnies based on the #cards in the campaign deck.\n// a potion that heals based on the #cards in the campaign deck.\n// a card that grants gold based on the #cards in the campaign deck.\n// a card that heals bades on the #cards in the campaign deck.\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}