{"version":3,"sources":["main.js"],"names":["_Object$freeze2","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","r","e","t","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","a","u","call","next","return","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","from","_arrayLikeToArray","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","toString","slice","name","test","l","i","_toPropertyKey","configurable","writable","_toPrimitive","toPrimitive","String","Number","ENEMY_ABILITIES","freeze","INK_DRINK","DOUBLE_HEALTH","HAND_SIZE_REDUCTION","ADD_ONE_PEBBLE","ADD_TWO_MERCURY","ADD_THREE_CLUTTER","SPECIAL_CARD_SUBTYPES","CURSE","UNIQUE","STATUS","DIFFICULTIES","EASY","MEDIUM","HARD","TRIGGER_EVENTS","CARD_PICKUP","RELIC_PICKUP","POTION_PICKUP","DRINK_POTION","ASSIGN_SHOP_PRICES","REST","COMBAT_START","POPULATE_PATHS","PATHS","EASY_FIGHT","MEDIUM_FIGHT","HARD_FIGHT","BOSS_FIGHT","SHOP","RELIC_OFFERING","GEM_OFFERING","CARD_OFFERING","ENCHANT","POTION_OFFERING","HOARD","PURGE","TRANSMUTE","SCREENS","MAIN","DECK","SETTINGS","MOD","COMBAT_DECK","GRAVEYARD","EXILE","RARITIES","BASIC_POLY","BASIC_MONO","COMMON","UNCOMMON","RARE","MYTHIC","LEGENDARY","PHASES","MAIN_MENU","DIFFICULTY_SELECTION","MYTHIC_RELIC_OFFERING","COMBAT_END","SOCKET_GEM","PATH_SELECTION","COMBAT","DEATH","VICTORY","ACTIONS","NEW_GAME","SET_DIFFICULTY","GENERATE_STARTER_DECK","APPLY_DIFFICULTY_MODIFIERS","ADVANCE_PHASE","LOG_MESSAGE","CREATE_CARD_INSTANCE","POPULATE_RELIC_OFFERINGS","PICK_RELIC","POPULATE_PATH_OFFERINGS","PICK_PATH","POPULATE_CARD_OFFERINGS","PICK_CARD","POPULATE_POTION_OFFERINGS","PICK_POTION","POPULATE_GEM_OFFERINGS","OPEN_MOD_SCREEN","APPLY_CARD_MOD","SCREEN_CHANGE","POPULATE_SHOPFRONT","INCREASE_BASE_BUNNIES","GAIN_GOLD","PRACTICE_WANDWORK","LOOT_HOARD","CARD_TYPES","INSTANT","SPELL","REST_OPTIONS","HEAL","PRACTICE","difficultyModifiersMap","maxHealthModifier","goldModifier","basicCardCountModifier","luckModifier","shopPriceMultiplierModifier","restHealthRestoreModifier","enemyHealthMultiplierModifier","pathMap","rarity","isFight","leadsTo","difficulty","SPECIAL","enemyAbilityDataMap","description","prefix","cardList","cardType","cost","bunnyAdd","bunnyMult","goldAdd","permanentlyUpgradeRandomCardsInDeck","cardDraw","inkAdd","healthCost","exile","permanentlyUpgradeRandomCardsInHand","unupgradable","unsocketable","specialSubtype","triggers","onDraw","gemList","relicList","bonusPages","bonusBaseBunnies","bonusGold","bonusHealthOnCombatVictory","bonusHealth","bonusBooks","bonusInk","bunnyAddOnCast","goldAddOnCombatVictory","upgradeCard","upgradePotion","healPlayer","shopPriceMultiplier","revealAnonymousPaths","weakenEnemyHpPercent","potionList","healthRestore","capitalize","word","charAt","toUpperCase","shuffle","array","j","Math","floor","random","_ref","weightedRandomChoice","weightedMap","entries","totalWeight","reduce","sum","_ref2","_ref3","_","weight","cumulative","_i","_entries","_entries$_i","key","changeScreen","dispatch","screen","type","payload","inspectDeck","inspectCombatDeck","inspectGraveyard","inspectExile","returnToMain","assignShopPrices","state","globalMultiplier","basePrices","card","potion","gem","relic","rarityMultipliers","common","uncommon","rare","mythic","legendary","updatedShopfront","offerings","shopfront","map","entry","_item$rarity","_item$rarity$toLowerC","item","basePrice","upgrades","upgradeCost","includes","toLowerCase","rarityMultiplier","round","log","concat","anonymizeObject","obj","anonymousNameDisplay","generateStarterDeck","console","error","modifiers","deck","basicMonoCards","_iterator","_step","createCardInstance","err","basicPolyCards","_iterator2","_step2","generateRandomCard","campaign","applyDifficultyModifiers","gold","basicCardCount","luck","restHealthRestore","maxHealth","health","enemyHealthMultiplier","advancePhaseTo","phaseAdvancedTo","values","currentPhase","handlePhaseTransitions","phase","populatePathOfferings","populateCardOfferings","populateRelicOfferings","populatePotionOfferings","populateGemOfferings","populateShopfront","initializeCombatPhase","currentPath","pickPath","index","_state$level","paths","chosenPath","pathKey","path","pathData","level","newCards","_loop","some","existing","_ret","cards","selectedPotions","usedNames","Set","attempts","generateRandomPotion","has","add","warn","potions","undefined","selected","maxRelics","_loop2","generateRandomRelic","relics","selectedGems","generateRandomGem","gems","_state$campaign$deck","_state$campaign$deck2","misery","bossPath","fightWeights","fightPathKey","fightPath","allPaths","_ref4","_ref5","_ref6","_ref7","data","allCardsSocketed","every","allCardsUnupgradable","filteredPaths","pathObj","ENCHANT_OFFERING","rarityWeights","getLuckAdjustedRarityWeights","chosenRarities","chosenPaths","usedPaths","_loop3","_chosenRarities","_i3","candidates","p","pick","remainingPool","idx","splice","firstTwoAreFights","finalPaths","newMisery","thirdOptions","nonFights","fights","weightedPool","allFights","anonChance","max","anonIndex","triggerResult","checkRelicTriggers","POPULATE_PATH","updatedPaths","result","updatedState","pickCard","sourceArrayName","combatRewards","sourceArray","pickedCard","charged","chargeGoldCost","updatedCampaign","updatedOfferings","newState","trashed","trashPile","pickRelic","pickedRelic","relicCost","chargedState","relicBelt","isOfferingPhase","updatedTrashPile","triggeredState","pickPotion","pickedPotion","triggeredPotion","updatedPotionBelt","potionBelt","drinkPotion","heal","newPotionBelt","newTrash","openModScreen","mod","_state$offerings$gems","originPhase","validKeys","chosenGemName","discardedGems","g","_mod$gem","currentScreen","modData","origin","increaseBaseBunnies","amount","newAmount","baseBunnies","applyModToCard","_state$modData","_state$modData2","updatedDeck","cardIndex","findIndex","c","modifiedCard","upgrade","socketCardWithGem","purge","transmute","transmuteCard","nextPhase","shopfrontTypes","previousItems","discardedItems","updatedTrash","guaranteedTypes","weights","flatMap","_ref8","_ref9","fill","safetyCounter","chosen","generatedItems","usedKeys","_i4","_shopfrontTypes","attempt","gainGold","newGold","practiceWandwork","lootHoard","_state$defeatedEnemie","baseGold","levelBonus","enemiesDefeated","defeatedEnemies","enemyBonus","luckBonus","totalGold","hoardsLooted","rest","amountToHeal","currentHealth","healedAmount","msg","startsWith","toggleDeckInspect","isInspectingDeck","returnTo","previousScreen","createInitialState","ink","books","pages","handSize","combat","hand","graveyard","spellbook","maxInk","maxBooks","bunnies","maxPages","enemy","difficulties","restOptions","selectDifficultyAndBeginGame","createGameApp","initialState","reducer","renderFn","action","cardName","found","find","createRelicInstance","relicName","createPotionInstance","potionName","createGemInstance","gemName","_ref0","_ref0$rarity","ownedRelics","GOLD_BAG","filtered","_state$defeatedEnemie2","_ref1","_ref1$rarity","_ref1$upgrades","_ref1$gem","finalRarity","upgradeWeights","finalUpgrades","defeatedCount","maxUpgrades","min","cappedUpgrades","_ref10","_ref10$rarity","_ref10$upgrades","basePotion","_ref11","_ref11$rarity","fallbackGem","chosenGem","upgradedCard","upgradable","replace","upgradedPotion","socketedCard","ceil","context","triggerEvent","_iterator3","_step3","_loop4","_relic$triggers","effect","newHealth","newMaxHealth","adjustedCost","numToUpgrade","upgradedDeck","event","triggerData","_updatedState$combat","enemyHp","reduction","checkEnemyTriggers","_updatedState$combat2","abilities","logMessages","modifyCombatInk","hp","addCardToCombatDeck","_state$combat$ink","_state$combat","_state$combat$maxInk","_state$combat2","current","newInk","actualChange","changeMessage","abs","alternatives","unchoosableByTransmute","newBase","purgeCard","_state$baseBunnies","generateEnemy","newCombat","JSON","parse","stringify","discard","_pathMap$path$path","_state$level2","_state$enemyHealthMul","_baseHealthMap$diffic","_perLevelIncrement$di","multiplier","isBoss","baseHealthMap","easy","medium","hard","boss","perLevelIncrement","base","increment","allAbilities","selectedAbilities","numAbilities","_state$luck","bonusChance","size","ability","_iterator4","_step4","smallMonsters","mediumMonsters","largeMonsters","vegetables","bossNames","monsterList","vegetable","monster","prefixes","_enemyAbilityDataMap$","Boolean","join","loot","generateEnemyLoot","_state$luck2","_state$level3","_state$campaign$deck3","_state$campaign","allGemmedOrUnsocketable","drops","chanceTwo","chanceThree","usedTypes","available","_ref13","_ref14","_ref15","_ref16","w","roll","_iterator5","_step5","_step5$value","_easy$medium$hard$dif","numUpgrades","upgradableCards","shuffled","sort","toUpgrade","upgradedCards","indexOf","_state$combat3","newCard","combatDeck","gameReducer","_action$payload","potionIndex","potionToDrink","render","_state$level4","_state$modData3","output","document","getElementById","createElement","id","body","appendChild","innerHTML","renderCardList","title","section","ul","li","textContent","renderModPhaseEntry","label","modKey","modBtn","style","fontSize","padding","onclick","disabled","info","isCombatInspectScreen","combatSection","border","margin","enemyBox","display","justifyContent","alignItems","fontWeight","marginBottom","nameSpan","hpSpan","gap","page","width","height","backgroundColor","castRow","castButton","castSpellbook","bunnyDisplay","handRow","flexWrap","cardBtn","playCard","empty","inspectRow","marginTop","_ref17","btn","_state$combat4","_state$combat5","_state$combat6","button","relicSection","pathSection","cardSection","potionSection","gemSection","shopSection","list","_entry$item$cost","_entry$item","_state$gold","playerGold","opacity","cursor","exitBtn","modSection","isGemMod","restBtn","practiceBtn","deckBtn","nextScreen","deckView","beltSection","window","onload","addEventListener"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n//note to self: most functions that create a new gamestate (reducer actions) will require:\n\n// 1) the function itself\n// 2) adding to the action enum.\n// 3) adding to the reducer switch statement\n// 4) adding to the render function.\n// 5) possibly adding to the phase transition handler.\n\n//#region enums\nconst ENEMY_ABILITIES = Object.freeze({\n  INK_DRINK: \"inkDrink\",\n  DOUBLE_HEALTH: \"doubleHealth\",\n  HAND_SIZE_REDUCTION: \"handSizeReduction\",\n  ADD_ONE_PEBBLE: \"addOnePebble\",\n  ADD_TWO_MERCURY: \"addTwoMercury\",\n  ADD_THREE_CLUTTER: \"addThreeClutter\",\n});\nconst SPECIAL_CARD_SUBTYPES = Object.freeze({\n  CURSE: \"curse\",\n  UNIQUE: \"unique\",\n  STATUS: \"status\",\n});\nconst DIFFICULTIES = Object.freeze({\n  EASY: \"easy\",\n  MEDIUM: \"medium\",\n  HARD: \"hard\",\n});\nconst TRIGGER_EVENTS = Object.freeze({\n  CARD_PICKUP: \"CARD_PICKUP\",\n  RELIC_PICKUP: \"RELIC_PICKUP\",\n  POTION_PICKUP: \"POTION_PICKUP\",\n  DRINK_POTION: \"DRINK_POTION\",\n  ASSIGN_SHOP_PRICES: \"ASSIGN_SHOP_PRICES\",\n  REST: \"REST\",\n  COMBAT_START: \"COMBAT_START\",\n  POPULATE_PATHS: \"POPULATE_PATHS\",\n});\nconst PATHS = Object.freeze({\n  EASY_FIGHT: \"easy fight\",\n  MEDIUM_FIGHT: \"medium fight\",\n  HARD_FIGHT: \"hard fight\",\n  BOSS_FIGHT: \"boss fight\",\n  REST: \"rest\",\n  SHOP: \"shop\",\n  RELIC_OFFERING: \"relicOffering\",\n  GEM_OFFERING: \"gemOffering\",\n  CARD_OFFERING: \"cardOffering\",\n  ENCHANT: \"ENCHANT\",\n  POTION_OFFERING: \"potionOffering\",\n  HOARD: \"hoard\",\n  PURGE: \"purge\",\n  TRANSMUTE: \"transmute\",\n});\nconst SCREENS = Object.freeze({\n  MAIN: \"main view\",\n  DECK: \"inspect deck\",\n  SETTINGS: \"settings\",\n  MOD: \"modscreen\",\n  COMBAT_DECK: \"combat deck\",\n  GRAVEYARD: \"graveyard\",\n  EXILE: \"exile\",\n});\nconst RARITIES = Object.freeze({\n  BASIC_POLY: \"basic-poly\", // basic poly cards, several of which go in the starter deck.\n  BASIC_MONO: \"basic-mono\", // basic mono cards, only one goes in the starter deck.\n  COMMON: \"common\", // common cards\n  UNCOMMON: \"uncommon\", // uncommon cards\n  RARE: \"rare\", // rare cards\n  MYTHIC: \"mythic\", // mythic cards\n  LEGENDARY: \"legendary\", // legendary cards\n});\nconst PHASES = Object.freeze({\n  MAIN_MENU: \"main menu\",\n  DIFFICULTY_SELECTION: \"difficulty selection\",\n  MYTHIC_RELIC_OFFERING: \"mythic relic offering\",\n  RELIC_OFFERING: \"relic offering\",\n  CARD_OFFERING: \"card offering\",\n  GEM_OFFERING: \"gem offering\",\n  POTION_OFFERING: \"potion offering\",\n  COMBAT_END: \"combat end\",\n  SOCKET_GEM: \"socket gem\",\n  SHOP: \"shop\",\n  PATH_SELECTION: \"path selection\",\n  REST: \"rest\",\n  ENCHANT: \"ENCHANT\",\n  TRANSMUTE: \"transmute\",\n  COMBAT: \"combat\",\n  DEATH: \"death\",\n  VICTORY: \"victory\",\n  PURGE: \"purge\",\n  HOARD: \"hoard\",\n});\nconst ACTIONS = Object.freeze({\n  NEW_GAME: \"NEW_GAME\",\n  SET_DIFFICULTY: \"SET_DIFFICULTY\",\n  GENERATE_STARTER_DECK: \"GENERATE_STARTER_DECK\",\n  APPLY_DIFFICULTY_MODIFIERS: \"APPLY_DIFFICULTY_MODIFIERS\",\n  ADVANCE_PHASE: \"ADVANCE_PHASE\",\n  LOG_MESSAGE: \"LOG_MESSAGE\",\n  CREATE_CARD_INSTANCE: \"CREATE_CARD_INSTANCE\",\n  POPULATE_RELIC_OFFERINGS: \"POPULATE_RELIC_OFFERINGS\",\n  PICK_RELIC: \"PICK_RELIC\",\n  POPULATE_PATH_OFFERINGS: \"POPULATE_PATH_OFFERINGS\",\n  PICK_PATH: \"PICK_PATH\",\n  POPULATE_CARD_OFFERINGS: \"POPULATE_CARD_OFFERINGS\",\n  PICK_CARD: \"PICK_CARD\",\n  POPULATE_POTION_OFFERINGS: \"POPULATE_POTION_OFFERINGS\",\n  PICK_POTION: \"PICK_POTION\",\n  DRINK_POTION: \"DRINK_POTION\",\n  POPULATE_GEM_OFFERINGS: \"POPULATE_GEM_OFFERINGS\",\n  OPEN_MOD_SCREEN: \"OPEN_MOD_SCREEN\",\n  APPLY_CARD_MOD: \"APPLY_CARD_MOD\",\n  SCREEN_CHANGE: \"SCREEN_CHANGE\",\n  POPULATE_SHOPFRONT: \"POPULATE_SHOPFRONT\",\n  INCREASE_BASE_BUNNIES: \"INCREASE_BASE_BUNNIES\",\n  GAIN_GOLD: \"GAIN_GOLD\",\n  PRACTICE_WANDWORK: \"PRACTICE_WANDWORK\",\n  LOOT_HOARD: \"LOOT_HOARD\",\n  REST: \"REST\",\n});\nconst CARD_TYPES = Object.freeze({\n  INSTANT: \"instant\", // resolves immediately when played, does not go to the spellbook.\n  SPELL: \"spell\", // goes to the spellbook when played, resolves when the spellbook is cast.\n  CURSE: \"curse\", // negative card that can be removed or purged.\n  STATUS: \"status\", // temporary effect card, like a buff or debuff.\n});\nconst REST_OPTIONS = Object.freeze({\n  HEAL: \"heal\",\n  PRACTICE: \"practice\",\n  ENCHANT: \"enchant\",\n});\n//#endregion enums\n//#region data maps\nconst difficultyModifiersMap = Object.freeze({\n  [DIFFICULTIES.EASY]: {\n    maxHealthModifier: 100,\n    goldModifier: 20,\n    basicCardCountModifier: 5,\n    luckModifier: 2,\n    shopPriceMultiplierModifier: -0.2, // 20% cheaper shop prices\n    restHealthRestoreModifier: 30, // heal 30 health when resting\n    enemyHealthMultiplierModifier: -0.2, // 20% less health for enemies\n  },\n  [DIFFICULTIES.MEDIUM]: {\n    maxHealthModifier: 75,\n    goldModifier: 10,\n    basicCardCountModifier: 8,\n    luckModifier: 1,\n    shopPriceMultiplierModifier: 0, // normal shop prices\n    restHealthRestoreModifier: 25, // heal 20 health when resting\n    enemyHealthMultiplierModifier: 0,\n  },\n  [DIFFICULTIES.HARD]: {\n    maxHealthModifier: 50,\n    goldModifier: 0,\n    basicCardCountModifier: 11,\n    luckModifier: 0,\n    shopPriceMultiplierModifier: 0.2, // 20% more expensive shop prices\n    restHealthRestoreModifier: 20, // heal 20 health when resting\n    enemyHealthMultiplierModifier: 0.2, // 20% more health for enemies\n  },\n});\nconst pathMap = Object.freeze({\n  [PATHS.EASY_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.EASY,\n  },\n  [PATHS.MEDIUM_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.MEDIUM,\n  },\n  [PATHS.HARD_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.HARD,\n  },\n  [PATHS.BOSS_FIGHT]: {\n    rarity: RARITIES.SPECIAL,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: \"boss\",\n  },\n  [PATHS.REST]: { rarity: RARITIES.RARE, leadsTo: PHASES.REST },\n  [PATHS.SHOP]: { rarity: RARITIES.RARE, leadsTo: PHASES.SHOP },\n  [PATHS.RELIC_OFFERING]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.RELIC_OFFERING,\n  },\n  [PATHS.GEM_OFFERING]: { rarity: RARITIES.RARE, leadsTo: PHASES.GEM_OFFERING },\n  [PATHS.CARD_OFFERING]: {\n    rarity: RARITIES.UNCOMMON,\n    leadsTo: PHASES.CARD_OFFERING,\n  },\n  [PATHS.ENCHANT]: { rarity: RARITIES.RARE, leadsTo: PHASES.ENCHANT },\n  [PATHS.POTION_OFFERING]: {\n    rarity: RARITIES.RARE,\n    leadsTo: PHASES.POTION_OFFERING,\n  },\n  [PATHS.HOARD]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.HOARD,\n  },\n  [PATHS.PURGE]: { rarity: RARITIES.RARE, leadsTo: PHASES.PURGE },\n  [PATHS.TRANSMUTE]: { rarity: RARITIES.RARE, leadsTo: PHASES.TRANSMUTE },\n});\nconst enemyAbilityDataMap = {\n  [ENEMY_ABILITIES.INK_DRINK]: {\n    value: 1,\n    description: \"Reduces player's ink by 1 at combat start\",\n    prefix: \"Inkdrinking\",\n  },\n  [ENEMY_ABILITIES.DOUBLE_HEALTH]: {\n    value: 2,\n    description: \"Doubles enemy HP\",\n    prefix: \"Tanky\",\n  },\n  [ENEMY_ABILITIES.HAND_SIZE_REDUCTION]: {\n    value: 2,\n    description: \"Reduces player's hand size by 2 at combat start\",\n    prefix: \"Maddening\",\n  },\n  [ENEMY_ABILITIES.ADD_ONE_PEBBLE]: {\n    value: 1,\n    description: \"Adds 1 Sisyphus' Pebble to your deck at combat start\",\n    prefix: \"Sisyphean\",\n  },\n  [ENEMY_ABILITIES.ADD_TWO_MERCURY]: {\n    value: 2,\n    description: \"Adds 2 Mercury Droplets to your deck at combat start\",\n    prefix: \"Mercurial\",\n  },\n  [ENEMY_ABILITIES.ADD_THREE_CLUTTER]: {\n    value: 3,\n    description: \"Adds 3 Clutter cards to your deck at combat start\",\n    prefix: \"Messy\",\n  },\n};\n\n//#endregion data maps\n//#region data arrays of game objects\nconst cardList = [\n  {\n    name: \"Bunnymancy\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    cost: 1,\n    bunnyAdd: 5,\n  },\n  {\n    name: \"Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    cost: 2,\n    bunnyMult: 2,\n  },\n  {\n    name: \"Fairy Gold\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    cost: 1,\n    goldAdd: 3,\n  },\n  {\n    name: \"Enchant\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    cost: 2,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ponder\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    cost: 1,\n    cardDraw: 3,\n  },\n  {\n    name: \"Inkswell\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    cost: 1,\n    inkAdd: 2,\n  },\n  {\n    name: \"Cloudfluff Conjuration\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 0,\n    bunnyAdd: 4,\n  },\n  {\n    name: \"Cloudfluff Boon\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    cost: 0,\n    bunnyAdd: 2,\n  },\n  {\n    name: \"Midas Touch\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    goldAdd: 12,\n  },\n  {\n    name: \"Enchanted Twilight\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    permanentlyUpgradeRandomCardsInDeck: 2,\n  },\n  {\n    name: \"Dusk Lotus\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    cost: 0,\n    inkAdd: 3,\n    healthCost: 3,\n    exile: true, // Exile this card after use\n  },\n  {\n    name: \"Weasel's Bargain\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.UNCOMMON,\n    cost: 0,\n    healthCost: 2,\n    goldAdd: 6,\n  },\n  {\n    name: \"Carrot Festival\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 2,\n    bunnyAdd: 14,\n  },\n  {\n    name: \"Mega Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 2,\n    bunnyMult: 4,\n  },\n  {\n    name: \"Empower\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    cost: 1,\n    permanentlyUpgradeRandomCardsInHand: 1,\n  },\n  {\n    name: \"Mass Empower\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    permanentlyUpgradeRandomCardsInHand: 7,\n  },\n  {\n    name: \"Wisdom of the Warrens\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    cost: 0,\n    cardDraw: 1,\n  },\n  // === Curses ===\n  {\n    name: \"Sisyphus' Pebble\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    cost: 0,\n    // No effect; added to deck via events, not in loot pool\n  },\n  {\n    name: \"Clutter\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    cost: 0,\n    // Added to combat deck by enemies; no effect\n  },\n  {\n    name: \"Mirage\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    cost: 0,\n    triggers: {\n      onDraw: {\n        exile: true, // Exile when drawn\n      },\n    },\n  },\n  {\n    name: \"Mercury Droplet\",\n    cardType: CARD_TYPES.INSTANT,\n    cost: 1,\n    unupgradable: true,\n    unsocketable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    // You can define a specific effect if needed — right now it's just a harmful cost\n  },\n];\nconst gemList = [\n  {\n    name: \"Amethyst\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 2,\n  },\n  {\n    name: \"Lapis Lazuli\",\n    rarity: RARITIES.COMMON,\n    bunnyMult: 1.5,\n  },\n  {\n    name: \"Sapphire\",\n    rarity: RARITIES.UNCOMMON,\n    cardDraw: 1,\n  },\n  {\n    name: \"Topaz\",\n    rarity: RARITIES.RARE,\n    goldAdd: 5,\n  },\n  {\n    name: \"Ruby\",\n    rarity: RARITIES.MYTHIC,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n];\nconst relicList = [\n  {\n    name: \"Magic Scroll\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusPages: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Wand\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBaseBunnies: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Egg\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusGold: 100,\n      },\n    },\n  },\n  {\n    name: \"Healing Stone\",\n    rarity: RARITIES.COMMON,\n    // not a pickup trigger — save for future COMBAT_VICTORY event\n    bonusHealthOnCombatVictory: 10,\n  },\n  {\n    name: \"Protective Amulet\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHealth: 10,\n      },\n    },\n  },\n  {\n    name: \"Magic Encyclopedia\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Inkpot\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Wand\",\n    rarity: RARITIES.MYTHIC,\n    // not triggered on pickup — belongs to CARD_CAST or similar\n    bunnyAddOnCast: 5,\n  },\n  {\n    name: \"Magic Keys\",\n    rarity: RARITIES.MYTHIC,\n    // not a pickup effect — save for COMBAT_VICTORY\n    goldAddOnCombatVictory: 10,\n  },\n  {\n    name: \"Magic Quill\",\n    rarity: RARITIES.LEGENDARY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 2,\n      },\n    },\n  },\n  {\n    name: \"Gold Bag\",\n    rarity: RARITIES.BASIC_POLY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusGold: 25,\n      },\n    },\n  },\n  {\n    name: \"Whetstone\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        upgradeCard: true,\n      },\n    },\n  },\n  {\n    name: \"Witch's Cauldron\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.POTION_PICKUP]: {\n        upgradePotion: true,\n      },\n    },\n  },\n  {\n    name: \"Crystal Vial\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.DRINK_POTION]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Discount Voucher\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.ASSIGN_SHOP_PRICES]: {\n        shopPriceMultiplier: 0.8, // 20% cheaper shop prices\n      },\n    },\n  },\n  {\n    name: \"Sleeping Bag\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        healPlayer: 20, // heal 20 health when resting\n      },\n    },\n  },\n  {\n    name: \"Toothfairy's Charm\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        goldAdd: 10, // gain 10 gold when resting\n      },\n    },\n  },\n  {\n    name: \"Planetarium Mobile\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        permanentlyUpgradeRandomCardsInDeck: 1, // upgrade a random card in the deck when resting\n      },\n    },\n  },\n  {\n    name: \"Dousing Rod\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.POPULATE_PATHS]: {\n        revealAnonymousPaths: true,\n      },\n    },\n  },\n  {\n    name: \"Gem of Weakness\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.COMBAT_START]: {\n        weakenEnemyHpPercent: 0.1, // 10% reduction\n      },\n    },\n  },\n];\nconst potionList = [\n  {\n    name: \"Lesser Healing Potion\",\n    rarity: RARITIES.COMMON,\n    healthRestore: 10,\n  },\n  {\n    name: \"Healing Potion\",\n    rarity: RARITIES.UNCOMMON,\n    healthRestore: 15,\n  },\n  {\n    name: \"Greater Healing Potion\",\n    rarity: RARITIES.RARE,\n    healthRestore: 20,\n  },\n  {\n    name: \"Elixir of Life\",\n    rarity: RARITIES.MYTHIC,\n    healthRestore: 50,\n  },\n];\n//#endregion\n//#region utility functions\nfunction capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\nfunction weightedRandomChoice(weightedMap) {\n  const entries = Object.entries(weightedMap);\n  const totalWeight = entries.reduce((sum, [_, weight]) => sum + weight, 0);\n  const r = Math.random() * totalWeight;\n  let cumulative = 0;\n\n  for (const [key, weight] of entries) {\n    cumulative += weight;\n    if (r <= cumulative) return key;\n  }\n}\nfunction changeScreen(dispatch, screen) {\n  dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: screen });\n}\nfunction inspectDeck(dispatch) {\n  changeScreen(dispatch, SCREENS.DECK);\n}\nfunction inspectCombatDeck(dispatch) {\n  changeScreen(dispatch, SCREENS.COMBAT_DECK);\n}\nfunction inspectGraveyard(dispatch) {\n  changeScreen(dispatch, SCREENS.GRAVEYARD);\n}\nfunction inspectExile(dispatch) {\n  changeScreen(dispatch, SCREENS.EXILE);\n}\nfunction returnToMain(dispatch) {\n  changeScreen(dispatch, SCREENS.MAIN);\n}\n\nfunction assignShopPrices(state) {\n  const globalMultiplier = state.shopPriceMultiplier || 1;\n\n  const basePrices = {\n    card: 10,\n    potion: 20,\n    gem: 30,\n    relic: 100,\n  };\n\n  const rarityMultipliers = {\n    common: 1,\n    uncommon: 1.2,\n    rare: 1.4,\n    mythic: 1.6,\n    legendary: 2,\n  };\n\n  const updatedShopfront = state.offerings.shopfront.map((entry) => {\n    const { type, item } = entry;\n\n    const basePrice = basePrices[type] || 0;\n    const upgrades = item.upgrades || 0;\n    const upgradeCost = [\"card\", \"potion\"].includes(type) ? upgrades * 5 : 0;\n\n    const rarity = item.rarity?.toLowerCase?.() || \"common\";\n    const rarityMultiplier = rarityMultipliers[rarity] || 1;\n\n    const cost = Math.round(\n      (basePrice + upgradeCost) * rarityMultiplier * globalMultiplier\n    );\n\n    return {\n      ...entry,\n      item: {\n        ...item,\n        cost,\n      },\n    };\n  });\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: updatedShopfront,\n    },\n    log: [`Assigned prices to shop items.`, ...state.log],\n  };\n}\nfunction anonymizeObject(obj) {\n  return {\n    ...obj,\n    anonymousNameDisplay: true,\n  };\n}\n\n//#endregion\n//#region reducer-action handlers\nfunction generateStarterDeck(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\n      \"Cannot generate starter deck: invalid difficulty:\",\n      difficulty\n    );\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n  const deck = [];\n\n  // 1. Add one of each basic mono card\n  const basicMonoCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_MONO\n  );\n  for (const card of basicMonoCards) {\n    deck.push(createCardInstance(card.name));\n  }\n\n  // 2. Add 3 of each basic poly card\n  const basicPolyCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_POLY\n  );\n  for (const card of basicPolyCards) {\n    for (let i = 0; i < 3; i++) {\n      deck.push(createCardInstance(card.name));\n    }\n  }\n\n  // 3. Add additional random basic poly cards based on difficulty\n  for (let i = 0; i < modifiers.basicCardCountModifier; i++) {\n    const card = generateRandomCard(state, { rarity: RARITIES.BASIC_POLY });\n    if (card) deck.push(card);\n  }\n\n  // 4. Shuffle the deck\n  shuffle(deck);\n\n  // 5. Return new state with updated campaign.deck\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck,\n    },\n    log: [`Generated starter deck (${deck.length} cards).`, ...state.log],\n  };\n}\nfunction applyDifficultyModifiers(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\"Invalid or missing difficulty:\", difficulty);\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n\n  return {\n    ...state,\n    gold: state.gold + modifiers.goldModifier,\n    basicCardCount: state.basicCardCount + modifiers.basicCardCountModifier,\n    luck: (state.luck || 0) + (modifiers.luckModifier || 0),\n    shopPriceMultiplier:\n      (state.shopPriceMultiplier || 1) +\n      (modifiers.shopPriceMultiplierModifier || 0),\n    restHealthRestore:\n      (state.restHealthRestore || 0) +\n      (modifiers.restHealthRestoreModifier || 0),\n    maxHealth: state.maxHealth + modifiers.maxHealthModifier,\n    health: state.health + modifiers.maxHealthModifier,\n    enemyHealthMultiplier:\n      (state.enemyHealthMultiplier || 1) +\n      (modifiers.enemyHealthMultiplierModifier || 0),\n    log: [`Applied difficulty modifiers for ${difficulty}.`, ...state.log],\n  };\n}\n\nfunction advancePhaseTo(state, phaseAdvancedTo) {\n  if (!Object.values(PHASES).includes(phaseAdvancedTo)) {\n    console.error(\"Invalid phase passed to advancePhaseTo:\", phaseAdvancedTo);\n    return state;\n  }\n\n  return {\n    ...state,\n    currentPhase: phaseAdvancedTo,\n    log: [`Advanced to phase: ${phaseAdvancedTo}`, ...state.log],\n  };\n}\nfunction handlePhaseTransitions(state) {\n  const phase = state.currentPhase;\n\n  switch (phase) {\n    case PHASES.DIFFICULTY_SELECTION:\n      return {\n        ...state,\n        log: [\"Choose your difficulty.\", ...state.log],\n      };\n\n    case PHASES.PATH_SELECTION:\n      console.log(\">> Entering PHASES.PATH_SELECTION\");\n      return populatePathOfferings(state);\n\n    case PHASES.CARD_OFFERING:\n      console.log(\">> Entering PHASES.CARD_OFFERING\");\n      return populateCardOfferings(state);\n\n    case PHASES.MYTHIC_RELIC_OFFERING:\n      console.log(\">> Entering PHASES.MYTHIC_RELIC_OFFERING .\");\n      return populateRelicOfferings(state, RARITIES.MYTHIC);\n\n    case PHASES.RELIC_OFFERING:\n      console.log(\">> Entering PHASES.RELIC_OFFERING.\");\n      return populateRelicOfferings(state);\n\n    case PHASES.POTION_OFFERING:\n      console.log(\">> Entering POTION_OFFERING phase.\");\n      return populatePotionOfferings(state);\n\n    case PHASES.GEM_OFFERING:\n      console.log(\">> Entering GEM_OFFERING phase.\");\n      return populateGemOfferings(state);\n\n    case PHASES.SHOP:\n      return populateShopfront(state);\n\n    case PHASES.COMBAT:\n      return initializeCombatPhase(state, state.currentPath);\n\n    default:\n      return state;\n  }\n}\nfunction pickPath(state, index) {\n  const paths = state.offerings.paths;\n\n  if (!paths || index < 0 || index >= paths.length) {\n    console.error(\"Invalid path index:\", index);\n    return state;\n  }\n\n  const chosenPath = paths[index];\n  const pathKey = chosenPath.path;\n  const pathData = pathMap[pathKey];\n\n  if (!pathData || !pathData.leadsTo) {\n    console.error(\"Path has no destination phase:\", pathKey);\n    return state;\n  }\n\n  return handlePhaseTransitions({\n    ...state,\n    level: (state.level ?? 0) + 1,\n    currentPath: chosenPath, // ✅ store the path here\n    currentPhase: pathData.leadsTo,\n    log: [`Chose path: ${pathKey}`, ...state.log],\n    offerings: {\n      ...state.offerings,\n      paths: [],\n    },\n  });\n}\nfunction populateCardOfferings(state) {\n  const newCards = [];\n\n  while (newCards.length < 3) {\n    const card = generateRandomCard(state);\n    if (!card) continue;\n    if (newCards.some((existing) => existing.name === card.name)) continue;\n    newCards.push(card);\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      cards: newCards,\n    },\n    log: [`Populated card offerings.`, ...state.log],\n  };\n}\nfunction populatePotionOfferings(state) {\n  const selectedPotions = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedPotions.length < 3 && attempts < 50) {\n    attempts++;\n\n    const potion = generateRandomPotion(state);\n    if (!potion) continue;\n\n    if (usedNames.has(potion.name)) continue;\n\n    selectedPotions.push(potion);\n    usedNames.add(potion.name);\n  }\n\n  if (selectedPotions.length < 3) {\n    console.warn(\"Not enough unique potions to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      potions: selectedPotions,\n    },\n    log: [`Populated potion offerings.`, ...state.log],\n  };\n}\nfunction populateRelicOfferings(state, rarity = null) {\n  const selected = [];\n  const maxRelics = 3;\n\n  while (selected.length < maxRelics) {\n    const relic = generateRandomRelic(state, { rarity });\n\n    // Ensure uniqueness by name\n    if (selected.some((r) => r.name === relic.name)) continue;\n\n    selected.push(relic);\n  }\n\n  console.log(\"Selected relic offerings:\", selected);\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      relics: selected,\n    },\n    log: [`Populated relic offerings.`, ...state.log],\n  };\n}\nfunction populateGemOfferings(state) {\n  const selectedGems = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedGems.length < 3 && attempts < 50) {\n    attempts++;\n\n    const gem = generateRandomGem(state);\n    if (!gem) continue;\n\n    if (usedNames.has(gem.name)) continue;\n\n    selectedGems.push(gem);\n    usedNames.add(gem.name);\n  }\n\n  if (selectedGems.length < 3) {\n    console.warn(\"Not enough unique gems to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      gems: selectedGems,\n    },\n    log: [`Populated gem offerings.`, ...state.log],\n  };\n}\nfunction populatePathOfferings(state) {\n  const luck = state.luck || 0;\n  const misery = state.misery || 0;\n  const level = state.level || 0;\n\n  // === Step 0: Boss override ===\n  if ([15, 30, 45].includes(level)) {\n    const bossPath = {\n      path: PATHS.BOSS_FIGHT,\n      ...pathMap[PATHS.BOSS_FIGHT],\n    };\n    return {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        paths: [bossPath, bossPath, bossPath],\n      },\n      log: [`Boss floor! All paths lead to a boss fight.`, ...state.log],\n    };\n  }\n\n  // === Step 1: Always pick 1 fight path ===\n  const fightWeights = {\n    [PATHS.EASY_FIGHT]: 3,\n    [PATHS.MEDIUM_FIGHT]: 2,\n    [PATHS.HARD_FIGHT]: 1,\n  };\n  const fightPathKey = weightedRandomChoice(fightWeights);\n  const fightPath = {\n    path: fightPathKey,\n    ...pathMap[fightPathKey],\n  };\n\n  // === Step 2: Create a pool of all valid paths (excluding duplicate of picked fight) ===\n  const allPaths = Object.entries(pathMap)\n    .filter(([key]) => key !== fightPathKey)\n    .map(([path, data]) => ({ path, ...data }));\n\n  // === Step 2a: Exclude GEM_OFFERING if all cards are socketed ===\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null || card.unsocketable);\n\n  const allCardsUnupgradable =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.unupgradable);\n\n  const filteredPaths = allPaths.filter((pathObj) => {\n    if (pathObj.path === PATHS.GEM_OFFERING && allCardsSocketed) return false;\n    if (pathObj.path === PATHS.ENCHANT_OFFERING && allCardsUnupgradable)\n      return false;\n    return true;\n  });\n\n  // === Step 3: Pick first two paths using rarity weights ===\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const chosenRarities = [\n    weightedRandomChoice(rarityWeights),\n    weightedRandomChoice(rarityWeights),\n  ];\n\n  const chosenPaths = [];\n  const usedPaths = new Set([fightPathKey]);\n\n  for (const rarity of chosenRarities) {\n    const candidates = filteredPaths.filter(\n      (p) => p.rarity === rarity && !usedPaths.has(p.path)\n    );\n    if (candidates.length > 0) {\n      const pick = candidates[Math.floor(Math.random() * candidates.length)];\n      usedPaths.add(pick.path);\n      chosenPaths.push(pick);\n    }\n  }\n\n  // === Step 4: Fill in missing 2nd path if needed\n  const remainingPool = filteredPaths.filter((p) => !usedPaths.has(p.path));\n  while (chosenPaths.length < 2 && remainingPool.length > 0) {\n    const idx = Math.floor(Math.random() * remainingPool.length);\n    const pick = remainingPool.splice(idx, 1)[0];\n    usedPaths.add(pick.path);\n    chosenPaths.push(pick);\n  }\n\n  // === Step 5: Optional override for 3rd path using misery + luck if both are fights\n  const firstTwoAreFights = chosenPaths.every((p) => p.isFight);\n  let finalPaths = [fightPath, ...chosenPaths];\n  let newMisery = misery;\n\n  if (firstTwoAreFights && misery > 0 && remainingPool.length > 0) {\n    const thirdOptions = remainingPool.filter((p) => !usedPaths.has(p.path));\n    if (thirdOptions.length > 0) {\n      const nonFights = thirdOptions.filter((p) => !p.isFight);\n      const fights = thirdOptions.filter((p) => p.isFight);\n\n      const weightedPool = [];\n      nonFights.forEach((p) => {\n        for (let i = 0; i < misery + luck; i++) weightedPool.push(p);\n      });\n      fights.forEach((p) => {\n        weightedPool.push(p); // 1 weight each\n      });\n\n      if (weightedPool.length > 0) {\n        const pick =\n          weightedPool[Math.floor(Math.random() * weightedPool.length)];\n        usedPaths.add(pick.path);\n        finalPaths[2] = pick;\n        if (!pick.isFight) newMisery = misery - 1;\n      }\n    }\n  }\n\n  // === Step 6: Check again if all 3 are fights and increment misery\n  const allFights = finalPaths.every((p) => p.isFight);\n  if (allFights) newMisery++;\n\n  console.log(\"Populated path options:\", finalPaths);\n\n  // === Step 6.5: Randomly anonymize one path based on (50% - luck) chance\n  const anonChance = Math.max(0, 0.5 - (state.luck || 0) * 0.01); // luck is per % point\n  const anonIndex = Math.floor(Math.random() * finalPaths.length);\n\n  if (Math.random() < anonChance) {\n    finalPaths[anonIndex] = anonymizeObject(finalPaths[anonIndex]);\n  }\n\n  // === Step 7: Apply relic triggers for POPULATE_PATH\n  const triggerResult = checkRelicTriggers(\n    state,\n    TRIGGER_EVENTS.POPULATE_PATH,\n    {\n      payload: finalPaths,\n    }\n  );\n  const updatedPaths = triggerResult.result || finalPaths;\n  const updatedState = { ...triggerResult };\n\n  return {\n    ...updatedState,\n    misery: newMisery,\n    offerings: {\n      ...updatedState.offerings,\n      paths: updatedPaths,\n    },\n    log: [\n      allFights\n        ? `Populated path options (all fights — misery increased to ${newMisery}).`\n        : `Populated path options.`,\n      ...updatedState.log,\n    ],\n  };\n}\n\nfunction pickCard(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  let sourceArrayName = null;\n\n  if (offerings.cards && index < offerings.cards.length) {\n    sourceArrayName = \"cards\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid card index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap if from shop\n  const pickedCard = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedCard) {\n    console.error(\"No card found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const cost = entry.cost || 20;\n    const charged = chargeGoldCost(state, cost, \"card\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  // === 3. Add to campaign deck ===\n  const updatedCampaign = {\n    ...updatedState.campaign,\n    deck: [...updatedState.campaign.deck, pickedCard],\n  };\n\n  // === 4. Remove from offerings ===\n  const updatedOfferings = {\n    ...updatedState.offerings,\n    [sourceArrayName]: sourceArray.filter((_, i) => i !== index),\n  };\n\n  // === 5. Apply triggers ===\n  let newState = {\n    ...updatedState,\n    campaign: updatedCampaign,\n    offerings: updatedOfferings,\n    log: [`Picked card: ${pickedCard.name}`, ...updatedState.log],\n  };\n\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.CARD_PICKUP, {\n    payload: pickedCard,\n  });\n\n  // === 6. Trash unchosen cards if from offering ===\n  if (phase === PHASES.CARD_OFFERING) {\n    const trashed = sourceArray.filter((_, i) => i !== index);\n\n    newState = {\n      ...newState,\n      trashPile: [...(newState.trashPile || []), ...trashed],\n      offerings: {\n        ...newState.offerings,\n        [sourceArrayName]: [],\n      },\n    };\n\n    newState = handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\nfunction pickRelic(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  if (offerings.relics && index < offerings.relics.length) {\n    sourceArrayName = \"relics\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid relic index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap relic from shopfront if needed\n  const pickedRelic = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedRelic) {\n    console.error(\"No relic found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const relicCost = entry.cost || 50;\n    const chargedState = chargeGoldCost(state, relicCost, \"relic\");\n    if (chargedState === state) return state; // not enough gold\n    updatedState = chargedState;\n  }\n\n  // === 3. Add relic to belt ===\n  updatedState = {\n    ...updatedState,\n    relicBelt: [...updatedState.relicBelt, pickedRelic],\n  };\n\n  // === 4. Remove the picked relic from offerings ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 5. Trash unchosen relics if from offering phase ===\n  const isOfferingPhase = [\n    PHASES.MYTHIC_RELIC_OFFERING,\n    PHASES.RELIC_OFFERING,\n  ].includes(phase);\n\n  let updatedTrashPile = updatedState.trashPile;\n  if (isOfferingPhase) {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.relics.filter((_, i) => i !== index),\n    ];\n    offerings.relics = [];\n  }\n\n  // === 6. Build the new state ===\n  const newState = {\n    ...updatedState,\n    trashPile: updatedTrashPile, // ✅ Root-level trash pile\n    offerings,\n    log: [`Picked relic: ${pickedRelic.name}`, ...updatedState.log],\n  };\n\n  // === 7. Trigger relic effects\n  const triggeredState = checkRelicTriggers(\n    newState,\n    TRIGGER_EVENTS.RELIC_PICKUP,\n    { relic: pickedRelic }\n  );\n\n  // === 8. Advance phase if in offering\n  if (isOfferingPhase) {\n    return handlePhaseTransitions(\n      advancePhaseTo(triggeredState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return triggeredState;\n}\n\nfunction pickPotion(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  if (offerings.potions && index < offerings.potions.length) {\n    sourceArrayName = \"potions\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else {\n    console.error(\"Invalid potion index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap the potion if it came from the shop\n  const pickedPotion = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedPotion) {\n    console.error(\"No potion found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge cost if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const cost = entry.cost || 30;\n    const charged = chargeGoldCost(state, cost, \"potion\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  // === 3. Apply pickup relic triggers (may upgrade the potion) ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.POTION_PICKUP,\n    { payload: pickedPotion }\n  );\n  const triggeredPotion = triggerResult.result;\n  updatedState = { ...triggerResult }; // ensures any other state changes are included\n\n  // === 4. Add to top-level potion belt ===\n  const updatedPotionBelt = [...updatedState.potionBelt, triggeredPotion];\n\n  // === 5. Remove the picked potion from the offerings ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 6. Trash unchosen potions if from offering ===\n  let updatedTrashPile = updatedState.trashPile;\n  if (phase === PHASES.POTION_OFFERING) {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.potions.filter((_, i) => i !== index),\n    ];\n    offerings.potions = [];\n  }\n\n  // === 7. Build the new state ===\n  const newState = {\n    ...updatedState,\n    potionBelt: updatedPotionBelt,\n    trashPile: updatedTrashPile, // ✅ Root-level trash pile\n    offerings,\n    log: [`Picked potion: ${pickedPotion.name}`, ...updatedState.log],\n  };\n\n  // === 8. Advance if from offering ===\n  if (phase === PHASES.POTION_OFFERING) {\n    return handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\n\nfunction drinkPotion(state, potion) {\n  if (!potion) {\n    console.error(\"No potion passed to drinkPotion\");\n    return state;\n  }\n\n  let updatedState = { ...state };\n\n  // === 1. Apply effects ===\n  if (potion.healthRestore) {\n    updatedState = heal(updatedState, potion.healthRestore);\n  }\n\n  // === 2. Remove potion from potionBelt and add to trash ===\n  const newPotionBelt = updatedState.potionBelt.filter((p) => p !== potion);\n  const newTrash = [...updatedState.trashPile, potion];\n\n  updatedState = {\n    ...updatedState,\n    campaign: {\n      ...updatedState.campaign,\n      potionBelt: newPotionBelt,\n      trashPile: newTrash,\n    },\n    log: [`Drank potion: ${potion.name}`, ...updatedState.log],\n  };\n\n  // === 3. Check relic triggers ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.DRINK_POTION,\n    { potion }\n  );\n\n  return {\n    ...triggerResult,\n    log: triggerResult.log || updatedState.log,\n  };\n}\nfunction openModScreen(state, mod, originPhase = null) {\n  const validKeys = [\"upgrade\", \"gem\", \"purge\", \"transmute\"];\n  const keys = Object.keys(mod || {});\n  if (keys.length !== 1 || !validKeys.includes(keys[0])) {\n    console.error(\"Invalid mod passed to openModScreen:\", mod);\n    return state;\n  }\n\n  // === GEM LOGIC: Discard unchosen gems only if from gem offering ===\n  if (mod.gem && (state.offerings.gems?.length || 0) > 0) {\n    const chosenGemName = mod.gem.name;\n\n    const discardedGems = state.offerings.gems.filter(\n      (g) => g.name !== chosenGemName\n    );\n\n    state = {\n      ...state,\n      campaign: {\n        ...state.campaign,\n        trashPile: [...state.trashPile, ...discardedGems],\n      },\n      offerings: {\n        ...state.offerings,\n        gems: [], // clear offering gems\n      },\n      log: [`Discarded ${discardedGems.length} unchosen gem(s).`, ...state.log],\n    };\n  }\n\n  // === Charge gold if in shop ===\n  if (state.currentPhase === PHASES.SHOP) {\n    let cost = 50;\n    if (mod?.gem?.cost !== undefined) {\n      cost = mod.gem.cost;\n    }\n\n    const charged = chargeGoldCost(state, cost, \"card modification\");\n    if (charged === state) return state; // insufficient gold\n    state = charged;\n  }\n\n  return {\n    ...state,\n    currentScreen: SCREENS.MOD,\n    modData: {\n      mod,\n      origin: originPhase || state.currentPhase,\n    },\n    log: [`Opened mod screen (${keys[0]}).`, ...state.log],\n  };\n}\nfunction increaseBaseBunnies(state, amount) {\n  const newAmount = Math.max(0, (state.baseBunnies || 0) + amount);\n\n  return {\n    ...state,\n    baseBunnies: newAmount,\n    log: [`Base bunnies increased by ${amount}.`, ...state.log],\n  };\n}\nfunction applyModToCard(state, card) {\n  const mod = state.modData?.mod;\n  const origin = state.modData?.origin;\n\n  if (!mod || !card) {\n    console.warn(\"applyModToCard called without a valid mod or card.\");\n    return state;\n  }\n\n  let updatedDeck = [...state.campaign.deck];\n  const cardIndex = updatedDeck.findIndex((c) => c === card);\n\n  if (cardIndex === -1) {\n    console.warn(\"Card not found in campaign deck.\");\n    return state;\n  }\n\n  // Apply mod\n  let modifiedCard = { ...card };\n  if (mod.upgrade) {\n    modifiedCard = upgradeCard(modifiedCard, mod.upgrade);\n  } else if (mod.gem) {\n    modifiedCard = socketCardWithGem(modifiedCard, mod.gem);\n  } else if (mod.purge) {\n    updatedDeck.splice(cardIndex, 1); // Remove the card\n  } else if (mod.transmute) {\n    modifiedCard = transmuteCard(modifiedCard);\n  }\n\n  // Replace modified card if not purged\n  if (!mod.purge) {\n    updatedDeck[cardIndex] = modifiedCard;\n  }\n\n  // Determine next phase\n  const nextPhase =\n    origin === PHASES.SHOP || origin === PHASES.COMBAT_END\n      ? origin\n      : PHASES.PATH_SELECTION;\n\n  const updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n    },\n    modData: null,\n    currentScreen: SCREENS.MAIN,\n    currentPhase: nextPhase,\n    log: [`Applied mod to ${card.name}.`, ...state.log],\n  };\n\n  // If transitioning to path selection, trigger path population\n  return nextPhase === PHASES.PATH_SELECTION\n    ? handlePhaseTransitions(updatedState)\n    : updatedState;\n}\nfunction populateShopfront(state) {\n  const shopfrontTypes = [];\n  // === Clear existing shop items into trash ===\n  const previousItems = state.offerings.shopfront || [];\n  const discardedItems = previousItems.map((entry) => entry.item);\n  const updatedTrash = [...(state.trashPile || []), ...discardedItems];\n  // === Step 1: Ensure 1 of each type ===\n  const guaranteedTypes = [\"relic\", \"potion\", \"card\", \"gem\"];\n  guaranteedTypes.forEach((type) => shopfrontTypes.push(type));\n\n  // === Step 2: Fill remaining 8 items using weighted choice ===\n  const weights = {\n    card: 12,\n    potion: 3,\n    gem: 1,\n    relic: 1,\n  };\n\n  const weightedPool = Object.entries(weights).flatMap(([type, weight]) =>\n    Array(weight).fill(type)\n  );\n\n  let safetyCounter = 0;\n  while (shopfrontTypes.length < 12 && safetyCounter < 100) {\n    safetyCounter++;\n    const chosen =\n      weightedPool[Math.floor(Math.random() * weightedPool.length)];\n    shopfrontTypes.push(chosen);\n  }\n\n  // === Step 3: Generate actual items, avoiding duplicates ===\n  const generatedItems = [];\n  const usedKeys = new Set();\n\n  for (let type of shopfrontTypes) {\n    let item = null;\n    let attempt = 0;\n\n    while (attempt < 20) {\n      attempt++;\n      try {\n        switch (type) {\n          case \"card\":\n            item = generateRandomCard(state);\n            break;\n          case \"potion\":\n            item = generateRandomPotion(state);\n            break;\n          case \"gem\":\n            item = generateRandomGem(state);\n            break;\n          case \"relic\":\n            item = generateRandomRelic(state);\n            break;\n          default:\n            item = null;\n        }\n\n        if (!item) continue;\n\n        const key = `${type}-${item.name}`;\n        if (usedKeys.has(key)) continue;\n\n        usedKeys.add(key);\n        generatedItems.push({ type, item });\n        break; // done\n      } catch (e) {\n        console.warn(\"Shop item generation failed:\", type, e);\n      }\n    }\n  }\n\n  // === Step 4: Insert shopfront and assign prices ===\n  let updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      trashPile: updatedTrash,\n    },\n    offerings: {\n      ...state.offerings,\n      shopfront: generatedItems,\n    },\n  };\n\n  updatedState = assignShopPrices(updatedState);\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.ASSIGN_SHOP_PRICES\n  );\n\n  return {\n    ...updatedState,\n    log: [\n      `Populated shopfront with ${generatedItems.length} unique items.`,\n      ...updatedState.log,\n    ],\n  };\n}\nfunction gainGold(state, amount) {\n  const newGold = (state.gold || 0) + amount;\n\n  return {\n    ...state,\n    gold: newGold,\n    log: [`Gained ${amount} gold.`, ...state.log],\n  };\n}\nfunction practiceWandwork(state) {\n  // Step 1: Increase base bunnies by 1\n  let newState = increaseBaseBunnies(state, 1);\n\n  // Step 2: Advance to path selection\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  // Step 3: Handle the transition (populate offerings)\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\nfunction lootHoard(state) {\n  const baseGold = 10;\n  const levelBonus = state.level || 0;\n  const enemiesDefeated = state.defeatedEnemies?.length || 0;\n  const luck = state.luck || 0;\n\n  const enemyBonus = enemiesDefeated * 5;\n  const luckBonus = luck * 2;\n\n  const totalGold = baseGold + levelBonus + enemyBonus + luckBonus;\n\n  // Step 1: Gain gold\n  let newState = gainGold(state, totalGold);\n\n  // Step 2: Track hoards looted\n  const hoardsLooted = (newState.hoardsLooted || 0) + 1;\n  newState = {\n    ...newState,\n    hoardsLooted,\n    log: [`Looted a hoard! (${totalGold}g)`, ...newState.log],\n  };\n\n  // Step 3: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction rest(state) {\n  const amountToHeal = state.restHealthRestore || 0;\n  const currentHealth = state.health || 0;\n\n  // Step 1: Heal the player\n  let newState = heal(state, amountToHeal);\n  const healedAmount = newState.health - currentHealth;\n\n  // Step 2: Check relic triggers for REST\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.REST);\n\n  // Step 3: Add one summary log line\n  newState = {\n    ...newState,\n    log: [\n      `Rested at the fire and recovered ${healedAmount} HP.`,\n      ...newState.log.filter((msg) => !msg.startsWith(\"Healed\")),\n    ],\n  };\n\n  // Step 4: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  //Step 5: Populate offerings for the new phase\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction toggleDeckInspect(state, dispatch) {\n  const isInspectingDeck = state.currentScreen === SCREENS.DECK;\n  const returnTo = state.previousScreen || SCREENS.MAIN;\n\n  dispatch({\n    type: ACTIONS.SCREEN_CHANGE,\n    payload: isInspectingDeck ? returnTo : SCREENS.DECK,\n  });\n}\n\n//#endregion\n//#region state setup and game initialization\nfunction createInitialState() {\n  return {\n    log: [],\n    currentScreen: SCREENS.MAIN,\n    previousScreen: null,\n    currentPhase: PHASES.MAIN_MENU,\n    currentPath: null,\n\n    basicCardCount: 5,\n    restHealthRestore: 10,\n    shopPriceMultiplier: 1,\n    enemyHealthMultiplier: 1,\n    difficulty: null,\n\n    maxHealth: 0,\n    health: 0,\n    baseBunnies: 0,\n\n    gold: 0,\n\n    luck: 0,\n    level: 0,\n    misery: 0,\n\n    hoardsLooted: 0,\n    defeatedEnemies: [],\n    trashPile: [],\n\n    relicBelt: [],\n    potionBelt: [],\n\n    campaign: {\n      deck: [],\n      ink: 3,\n      books: 1,\n      pages: 3,\n      handSize: 5,\n    },\n    combat: {\n      deck: [],\n      hand: [],\n      graveyard: [],\n      exile: [],\n      spellbook: [],\n\n      baseBunnies: 0,\n      ink: 0,\n      maxInk: 0,\n      books: 0,\n      maxBooks: 0,\n      pages: 0,\n      bunnies: 0,\n      maxPages: 0,\n      handSize: 0,\n\n      enemy: null,\n    },\n    offerings: {\n      difficulties: [],\n      shopfront: [],\n      cards: [],\n      potions: [],\n      gems: [],\n      relics: [],\n      paths: [],\n      combatRewards: [],\n      restOptions: [],\n    },\n  };\n}\nfunction selectDifficultyAndBeginGame(dispatch, difficulty) {\n  dispatch({ type: ACTIONS.SET_DIFFICULTY, payload: difficulty });\n  dispatch({ type: ACTIONS.GENERATE_STARTER_DECK });\n  dispatch({ type: ACTIONS.APPLY_DIFFICULTY_MODIFIERS });\n  dispatch({\n    type: ACTIONS.ADVANCE_PHASE,\n    payload: PHASES.MYTHIC_RELIC_OFFERING,\n  });\n}\nfunction createGameApp(initialState, reducer, renderFn) {\n  let state = initialState;\n  function dispatch(action) {\n    state = reducer(state, action);\n    renderFn(state, dispatch); // pass dispatch so buttons etc. can use it\n  }\n  // Start the game\n  dispatch({ type: ACTIONS.NEW_GAME });\n  return { dispatch };\n}\n\n//#endregion\n//#region game mechanics\nfunction createCardInstance(\n  cardName = null,\n  rarity = null,\n  upgrades = 0,\n  gem = null\n) {\n  let card;\n  if (rarity) {\n    console.log(\"🔍 createCardInstance got rarity:\", rarity);\n  }\n  if (cardName) {\n    const found = cardList.find((c) => c.name === cardName);\n    if (!found) {\n      console.error(`Card not found: ${cardName}`);\n      return null;\n    }\n    card = { ...found };\n  } else if (rarity) {\n    const candidates = cardList.filter(\n      (c) =>\n        c.rarity === rarity &&\n        ![\"curse\", \"unique\", \"status\"].includes(c.specialSubtype)\n    );\n    if (candidates.length === 0) {\n      console.error(`No cards found with rarity: ${rarity}`);\n      return null;\n    }\n    card = { ...candidates[Math.floor(Math.random() * candidates.length)] };\n  } else {\n    console.error(\"createCardInstance requires either a cardName or a rarity.\");\n    return null;\n  }\n\n  // Apply upgrades if needed\n  if (upgrades > 0) {\n    card = upgradeCard(card, upgrades); // this should set .upgrades itself\n  }\n\n  // Apply gem if needed\n  if (gem) {\n    card = socketCardWithGem(card, gem);\n  }\n\n  return card;\n}\n\nfunction createRelicInstance(relicName) {\n  const found = relicList.find((r) => r.name === relicName);\n  if (!found) {\n    console.error(`Relic not found: ${relicName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction createPotionInstance(potionName, upgrades = 0) {\n  const found = potionList.find((p) => p.name === potionName);\n  if (!found) {\n    console.error(`Potion not found: ${potionName}`);\n    return null;\n  }\n\n  let potion = { ...found };\n\n  if (upgrades > 0) {\n    potion = upgradePotion(potion, upgrades);\n  }\n\n  return potion;\n}\nfunction createGemInstance(gemName) {\n  const found = gemList.find((g) => g.name === gemName);\n  if (!found) {\n    console.error(`Gem not found: ${gemName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction generateRandomRelic(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const ownedRelics = new Set([\n    ...state.relicBelt.map((r) => r.name),\n    ...state.trashPile.map((r) => r.name),\n  ]);\n\n  const GOLD_BAG = \"Gold Bag\";\n\n  // Exclude Gold Bag and duplicate high-rarity relics\n  let candidates = relicList.filter((r) => {\n    if (r.name === GOLD_BAG) return false;\n    if (\n      (r.rarity === RARITIES.MYTHIC || r.rarity === RARITIES.LEGENDARY) &&\n      ownedRelics.has(r.name)\n    ) {\n      return false;\n    }\n    return true;\n  });\n\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  const filtered = candidates.filter((r) => r.rarity === rarity);\n  if (filtered.length === 0) {\n    console.warn(`No relics found for rarity: ${rarity}`);\n    return createRelicInstance(GOLD_BAG);\n  }\n\n  const chosen = filtered[Math.floor(Math.random() * filtered.length)];\n  return { ...chosen };\n}\nfunction generateRandomCard(\n  state,\n  { rarity = null, upgrades = undefined, gem = null } = {}\n) {\n  const luck = state.luck || 0;\n\n  const finalRarity =\n    rarity || weightedRandomChoice(getLuckAdjustedRarityWeights(luck));\n\n  const upgradeWeights = {\n    0: Math.max(0, 100 - luck),\n    1: 3 + luck,\n    2: 2 + luck,\n    3: 1 + luck,\n    4: 0 + luck,\n  };\n\n  const finalUpgrades =\n    upgrades !== undefined\n      ? upgrades\n      : Number(weightedRandomChoice(upgradeWeights));\n\n  const defeatedCount = state.defeatedEnemies?.length || 0;\n  const maxUpgrades = Math.min(4, Math.floor(defeatedCount / 3));\n  const cappedUpgrades = Math.min(finalUpgrades, maxUpgrades);\n\n  return createCardInstance(undefined, finalRarity, cappedUpgrades, gem);\n}\nfunction generateRandomPotion(state, { rarity = null, upgrades = null } = {}) {\n  const luck = state.luck || 0;\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const upgradeWeights = {\n    0: Math.max(0, 100 - luck),\n    1: 3 + luck,\n    2: 2 + luck,\n    3: 1 + luck,\n    4: 0 + luck,\n  };\n\n  // === Choose rarity if not provided ===\n  if (!rarity) {\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // === Fallback in case rarity yields no results ===\n  const candidates = potionList.filter((p) => p.rarity === rarity);\n  let basePotion;\n  if (candidates.length === 0) {\n    console.warn(\n      `No potions found for rarity: ${rarity}. Falling back to Lesser Healing Potion.`\n    );\n    basePotion = potionList.find((p) => p.name === \"Lesser Healing Potion\");\n    if (!basePotion) {\n      console.error(\n        \"Fallback potion 'Lesser Healing Potion' not found in potionList.\"\n      );\n      return null;\n    }\n    upgrades = 0; // ensure fallback is always unupgraded\n  } else {\n    basePotion = candidates[Math.floor(Math.random() * candidates.length)];\n\n    // === Choose upgrade level if not provided ===\n    if (upgrades === null) {\n      upgrades = Number(weightedRandomChoice(upgradeWeights));\n    }\n    upgrades = Math.min(upgrades, 4);\n  }\n\n  return createPotionInstance(basePotion.name, upgrades);\n}\nfunction generateRandomGem(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const fallbackGem = createGemInstance(\"Amethyst\");\n\n  // Choose rarity based on luck if not specified\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // Filter by rarity\n  const candidates = gemList.filter((gem) => gem.rarity === rarity);\n\n  if (candidates.length === 0) {\n    console.warn(\n      `No gems found for rarity: ${rarity}, returning fallback gem.`\n    );\n    return fallbackGem;\n  }\n\n  const chosenGem = candidates[Math.floor(Math.random() * candidates.length)];\n  return { ...chosenGem };\n}\nfunction upgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to upgradeCard:\", card);\n    return card;\n  }\n\n  if (card.unupgradable) {\n    console.warn(`Card ${card.name} is marked unupgradable.`);\n    return card;\n  }\n\n  const upgradedCard = { ...card };\n  let upgradable = false;\n\n  if (\"bunnyAdd\" in upgradedCard) {\n    upgradedCard.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedCard) {\n    upgradedCard.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"goldAdd\" in upgradedCard) {\n    upgradedCard.goldAdd += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInDeck += level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInHand\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInHand += level;\n    upgradable = true;\n  }\n\n  if (\"cardDraw\" in upgradedCard) {\n    upgradedCard.cardDraw += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"inkAdd\" in upgradedCard) {\n    upgradedCard.inkAdd += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"healthCost\" in upgradedCard) {\n    upgradedCard.healthCost -= 1 * level; // reduce health cost\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Card cannot be upgraded: ${card.name}`);\n    return card;\n  }\n\n  // Add or increment the upgrade level\n  upgradedCard.upgrades = (upgradedCard.upgrades || 0) + level;\n\n  // Rename the card to reflect its upgrade level\n  upgradedCard.name =\n    card.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedCard.upgrades}`;\n\n  return upgradedCard;\n}\nfunction upgradePotion(potion, level = 1) {\n  if (!potion || typeof potion !== \"object\") {\n    console.error(\"Invalid potion passed to upgradePotion:\", potion);\n    return potion;\n  }\n\n  // Clone the potion to avoid mutating the original\n  const upgradedPotion = { ...potion };\n\n  let upgradable = false;\n\n  // === Upgradeable Effects ===\n  if (\"healthRestore\" in upgradedPotion) {\n    upgradedPotion.healthRestore += 2 * level;\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Potion cannot be upgraded: ${potion.name}`);\n    return potion;\n  }\n\n  // === Track upgrade level ===\n  upgradedPotion.upgrades = (upgradedPotion.upgrades || 0) + level;\n\n  // === Update potion name to reflect upgrades ===\n  upgradedPotion.name =\n    potion.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedPotion.upgrades}`;\n\n  return upgradedPotion;\n}\nfunction socketCardWithGem(card, gem) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to socketCardWithGem:\", card);\n    return card;\n  }\n\n  if (card.unsocketable) {\n    console.warn(`Card ${card.name} is marked unsocketable.`);\n    return card;\n  }\n\n  if (!gem || typeof gem !== \"object\" || !gem.name) {\n    console.error(\"Invalid gem passed to socketCardWithGem:\", gem);\n    return card;\n  }\n\n  const socketedCard = { ...card };\n\n  if (\"bunnyAdd\" in gem) {\n    socketedCard.bunnyAdd = (socketedCard.bunnyAdd || 0) + gem.bunnyAdd;\n  }\n\n  socketedCard.gem = gem;\n  socketedCard.name = `${gem.name} ${card.name}`;\n\n  return socketedCard;\n}\nfunction getLuckAdjustedRarityWeights(luck = 0) {\n  return {\n    [RARITIES.COMMON]: Math.max(20, 60 - luck * 2),\n    [RARITIES.UNCOMMON]: Math.max(20, 40 - luck),\n    [RARITIES.RARE]: Math.min(20, 5 + luck),\n    [RARITIES.MYTHIC]: Math.min(10, 2 + Math.ceil(luck / 2)),\n    [RARITIES.LEGENDARY]: Math.min(5, 1 + Math.ceil(luck / 3)),\n  };\n}\nfunction chargeGoldCost(state, cost, context = \"purchase\") {\n  if (state.gold < cost) {\n    console.warn(`Not enough gold for ${context}!`);\n    return state; // return unmodified state\n  }\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      gold: state.gold - cost,\n    },\n    log: [`Spent ${cost} gold on ${context}.`, ...state.log],\n  };\n}\nfunction checkRelicTriggers(state, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  let result = context.payload || null;\n\n  for (const relic of updatedState.relicBelt) {\n    const effect = relic.triggers?.[triggerEvent];\n    if (!effect) continue;\n\n    // === handle DRINK_POTION effects ===\n    if (triggerEvent === TRIGGER_EVENTS.DRINK_POTION && context.potion) {\n      if (effect.healPlayer) {\n        updatedState = heal(updatedState, effect.healPlayer);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} healed you for ${effect.healPlayer} HP on potion use.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    // === Handle POTION_PICKUP effects ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.POTION_PICKUP &&\n      effect.upgradePotion &&\n      result\n    ) {\n      result = upgradePotion(result, 1);\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} upgraded a potion on pickup!`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    // === Handle CARD_PICKUP effects ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.CARD_PICKUP &&\n      effect.upgradeCard &&\n      result\n    ) {\n      result = upgradeCard(result, 1);\n      updatedState = {\n        ...updatedState,\n        log: [`${relic.name} upgraded a card on pickup!`, ...updatedState.log],\n      };\n    }\n\n    // === Handle RELIC_PICKUP effects ===\n    if (triggerEvent === TRIGGER_EVENTS.RELIC_PICKUP && context.relic) {\n      const campaign = { ...updatedState.campaign };\n      let newHealth = updatedState.health;\n      let newMaxHealth = updatedState.maxHealth;\n\n      if (effect.bonusPages) campaign.pages += effect.bonusPages;\n      if (effect.bonusInk) campaign.ink += effect.bonusInk;\n      if (effect.bonusBooks) campaign.books += effect.bonusBooks;\n      if (effect.bonusHealth) {\n        newHealth += effect.bonusHealth;\n        newMaxHealth += effect.bonusHealth;\n      }\n      if (effect.bonusGold) {\n        updatedState = gainGold(updatedState, effect.bonusGold);\n      }\n      if (effect.bonusBaseBunnies) {\n        updatedState = increaseBaseBunnies(\n          updatedState,\n          effect.bonusBaseBunnies\n        );\n      }\n\n      updatedState = {\n        ...updatedState,\n        campaign,\n        health: newHealth,\n        maxHealth: newMaxHealth,\n        log: [\n          `${relic.name} granted bonuses on relic pickup.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    // === Handle SHOP PRICE ADJUSTMENT ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.ASSIGN_SHOP_PRICES &&\n      effect.shopPriceMultiplier\n    ) {\n      updatedState = {\n        ...updatedState,\n        offerings: {\n          ...updatedState.offerings,\n          shopfront: updatedState.offerings.shopfront.map((entry) => {\n            const adjustedCost = Math.round(\n              entry.item.cost * effect.shopPriceMultiplier\n            );\n            return {\n              ...entry,\n              item: {\n                ...entry.item,\n                cost: adjustedCost,\n              },\n            };\n          }),\n        },\n        log: [\n          `Applied shop price multiplier (${effect.shopPriceMultiplier})`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    // === Handle REST effects ===\n    if (triggerEvent === TRIGGER_EVENTS.REST) {\n      if (effect.healPlayer) {\n        updatedState = heal(updatedState, effect.healPlayer);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} healed you for ${effect.healPlayer} HP while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.goldAdd) {\n        updatedState = gainGold(updatedState, effect.goldAdd);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} gave you ${effect.goldAdd} gold while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.permanentlyUpgradeRandomCardsInDeck > 0) {\n        const { deck } = updatedState.campaign;\n        const numToUpgrade = Math.min(\n          effect.permanentlyUpgradeRandomCardsInDeck,\n          deck.length\n        );\n\n        const upgradedDeck = permanentlyUpgradeRandomCardsInDeck(\n          deck,\n          numToUpgrade\n        );\n\n        updatedState = {\n          ...updatedState,\n          campaign: {\n            ...updatedState.campaign,\n            deck: upgradedDeck,\n          },\n          log: [\n            `${relic.name} permanently upgraded ${numToUpgrade} card(s) while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    // === Handle POPULATE PATH effects ===\n\n    if (\n      event === TRIGGER_EVENTS.POPULATE_PATHS &&\n      triggerData.revealAnonymousPaths\n    ) {\n      const updatedPaths = state.offerings.paths.map((path) =>\n        path.anonymousNameDisplay\n          ? { ...path, anonymousNameDisplay: false }\n          : path\n      );\n\n      state = {\n        ...state,\n        offerings: {\n          ...state.offerings,\n          paths: updatedPaths,\n        },\n        log: [`${relic.name} revealed a hidden path.`, ...state.log],\n      };\n    }\n\n    // === Handle COMBAT_START effects ===\n    if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n      if (effect.weakenEnemyHpPercent && updatedState.combat?.enemyHp) {\n        const reduction = Math.floor(\n          updatedState.combat.enemyHp * effect.weakenEnemyHpPercent\n        );\n        updatedState = {\n          ...updatedState,\n          combat: {\n            ...updatedState.combat,\n            enemyHp: updatedState.combat.enemyHp - reduction,\n          },\n          log: [\n            `${relic.name} weakened the enemy by ${reduction} HP at combat start.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n  }\n\n  return {\n    ...updatedState,\n    result,\n  };\n}\n\nfunction checkEnemyTriggers(state, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  const enemy = updatedState.combat?.enemy;\n  if (!enemy) return updatedState;\n\n  const abilities = enemy.abilities || {};\n  const logMessages = [];\n\n  if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n    // Ink Drink effect\n    if (abilities[ENEMY_ABILITIES.INK_DRINK]) {\n      const amount = abilities[ENEMY_ABILITIES.INK_DRINK];\n      updatedState = modifyCombatInk(updatedState, -amount);\n      logMessages.push(\n        `${enemy.name} drained ${amount} ink at the start of combat!`\n      );\n    }\n\n    // Double Health effect\n    if (abilities[ENEMY_ABILITIES.DOUBLE_HEALTH]) {\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          enemyHp: updatedState.combat.enemyHp * 2,\n          enemy: {\n            ...updatedState.combat.enemy,\n            hp: updatedState.combat.enemy.hp * 2,\n          },\n        },\n      };\n      logMessages.push(`${enemy.name} doubles its health!`);\n    }\n\n    // Hand Size Reduction\n    if (abilities[ENEMY_ABILITIES.HAND_SIZE_REDUCTION]) {\n      const amount = abilities[ENEMY_ABILITIES.HAND_SIZE_REDUCTION];\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          handSize: Math.max(1, updatedState.combat.handSize - amount),\n        },\n      };\n      logMessages.push(`${enemy.name} reduces your hand size by ${amount}!`);\n    }\n\n    // === Add curses at combat start ===\n    if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n      const abilities = enemy.abilities || {};\n\n      if (abilities[ENEMY_ABILITIES.ADD_ONE_PEBBLE]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_ONE_PEBBLE];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Sisyphus' Pebble\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Sisyphus' Pebble to your deck!`\n        );\n      }\n\n      if (abilities[ENEMY_ABILITIES.ADD_TWO_MERCURY]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_TWO_MERCURY];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Mercury Droplet\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Mercury Droplet(s) to your deck!`\n        );\n      }\n\n      if (abilities[ENEMY_ABILITIES.ADD_THREE_CLUTTER]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_THREE_CLUTTER];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Clutter\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Clutter card(s) to your deck!`\n        );\n      }\n    }\n  }\n\n  if (logMessages.length > 0) {\n    updatedState = {\n      ...updatedState,\n      log: [`⚠️ Enemy ability activated!`, ...logMessages, ...updatedState.log],\n    };\n  }\n\n  return updatedState;\n}\n\nfunction modifyCombatInk(state, amount) {\n  const current = state.combat?.ink ?? 0;\n  const max = state.combat?.maxInk ?? 0;\n\n  const newInk = Math.max(0, Math.min(current + amount, max));\n  const actualChange = newInk - current;\n\n  let changeMessage =\n    actualChange === 0\n      ? `Ink unchanged.`\n      : actualChange > 0\n      ? `Gained ${actualChange} ink.`\n      : `Lost ${Math.abs(actualChange)} ink.`;\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      ink: newInk,\n    },\n    log: [changeMessage, ...state.log],\n  };\n}\n\nfunction heal(state, amount) {\n  const current = state.health || 0;\n  const max = state.maxHealth || 0;\n  const newHealth = Math.min(current + amount, max);\n  const healedAmount = newHealth - current;\n\n  return {\n    ...state,\n    health: newHealth,\n    log: [`Healed ${healedAmount} HP.`, ...state.log],\n  };\n}\nfunction transmuteCard(card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to transmuteCard:\", card);\n    return null;\n  }\n\n  const alternatives = cardList.filter(\n    (c) => c.name !== card.name && !c.unchoosableByTransmute\n  );\n\n  if (alternatives.length === 0) {\n    console.warn(\n      `No valid alternatives found to transmute ${card.name}. Returning original.`\n    );\n    return { ...card };\n  }\n\n  const newBase = alternatives[Math.floor(Math.random() * alternatives.length)];\n  return createCardInstance(newBase.name, null, card.upgrades, card.gem);\n}\nfunction purgeCard(state, card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to purgeCard:\", card);\n    return state;\n  }\n\n  const updatedDeck = state.campaign.deck.filter((c) => c !== card);\n  const updatedTrash = [...(state.trashPile || []), card];\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n      trashPile: updatedTrash,\n    },\n    log: [`Purged card: ${card.name}`, ...state.log],\n  };\n}\n\nfunction initializeCombatPhase(state, path) {\n  const enemy = generateEnemy(state, path); // assumes generateEnemy returns { name, hp, etc. }\n\n  const newCombat = {\n    enemy,\n    enemyHp: enemy.hp,\n    deck: JSON.parse(JSON.stringify(state.campaign.deck)), // deep copy\n    hand: [],\n    discard: [],\n    exile: [],\n    ink: state.ink,\n    maxInk: state.ink,\n    books: state.books,\n    maxBooks: state.books,\n    pages: state.pages,\n    maxPages: state.pages,\n    handSize: state.handSize,\n    baseBunnies: state.baseBunnies ?? 0,\n  };\n\n  let newState = {\n    ...state,\n    combat: newCombat,\n    log: [`⚔️ Combat begins against ${enemy.name}!`, ...state.log],\n  };\n\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.COMBAT_START);\n  newState = checkEnemyTriggers(newState, TRIGGER_EVENTS.COMBAT_START);\n\n  return newState;\n}\n\nfunction generateEnemy(state, path) {\n  const difficulty = pathMap[path?.path]?.difficulty;\n  console.log(\"Path:\", path?.path, \"| Difficulty:\", difficulty);\n\n  const level = state.level ?? 1;\n  const multiplier = state.enemyHealthMultiplier ?? 1;\n  const isBoss = difficulty === \"boss\";\n\n  // === Health Calculation ===\n  const baseHealthMap = {\n    easy: 10,\n    medium: 15,\n    hard: 20,\n    boss: 30,\n  };\n\n  const perLevelIncrement = {\n    easy: 3,\n    medium: 4,\n    hard: 5,\n    boss: 10,\n  };\n\n  let base = baseHealthMap[difficulty] ?? 10;\n  let increment = perLevelIncrement[difficulty] ?? 3;\n  let health = (base + level * increment) * multiplier;\n\n  // === Ability Assignment ===\n  const allAbilities = Object.keys(enemyAbilityDataMap);\n  const selectedAbilities = new Set();\n\n  let numAbilities = 0;\n  if (difficulty === \"hard\") numAbilities = 1;\n  if (isBoss) numAbilities = 2;\n\n  if (state.difficulty === DIFFICULTIES.HARD) {\n    const bonusChance = Math.max(0, 0.5 - (state.luck ?? 0));\n    if (Math.random() < bonusChance) numAbilities += 1;\n  }\n\n  numAbilities = Math.min(numAbilities, 3);\n\n  while (selectedAbilities.size < numAbilities) {\n    const ability =\n      allAbilities[Math.floor(Math.random() * allAbilities.length)];\n    selectedAbilities.add(ability);\n  }\n\n  // === Build abilities object ===\n  const abilities = {};\n  for (const key of selectedAbilities) {\n    abilities[key] = enemyAbilityDataMap[key].value;\n  }\n\n  // === Name Generation ===\n  let name;\n  const smallMonsters = [\n    \"goblin\",\n    \"kobold\",\n    \"rat\",\n    \"spider\",\n    \"imp\",\n    \"gremlin\",\n    \"bat\",\n    \"quasit\",\n    \"skeleton\",\n    \"zombie\",\n  ];\n\n  const mediumMonsters = [\n    \"orc\",\n    \"ogre\",\n    \"gnoll\",\n    \"troll\",\n    \"hobgoblin\",\n    \"ghoul\",\n    \"harpy\",\n    \"lizardfolk\",\n    \"wight\",\n    \"mimic\",\n  ];\n\n  const largeMonsters = [\n    \"dragon\",\n    \"manticore\",\n    \"hydra\",\n    \"wyvern\",\n    \"beholder\",\n    \"medusa\",\n    \"chimera\",\n    \"giant\",\n    \"basilisk\",\n    \"banshee\",\n  ];\n  const vegetables = [\n    \"carrot\",\n    \"broccoli\",\n    \"spinach\",\n    \"kale\",\n    \"zucchini\",\n    \"eggplant\",\n    \"cauliflower\",\n    \"cabbage\",\n    \"lettuce\",\n    \"beet\",\n    \"radish\",\n    \"turnip\",\n    \"bokchoi\",\n    \"chilli\",\n    \"nopal\",\n    \"durian\",\n    \"bean\",\n    \"yam\",\n    \"tomato\",\n    \"asparagus\",\n    \"potato\",\n    \"pumpkin\",\n    \"bellpepper\",\n    \"celery\",\n    \"onion\",\n  ];\n  const bossNames = [\"Avatar of the Weasel\", \"Fox Spirit\", \"Beaglesoul\"];\n\n  if (isBoss) {\n    name = bossNames[Math.floor(Math.random() * bossNames.length)];\n  } else {\n    // Base monster type\n    let monsterList;\n    if (level < 15) {\n      monsterList = smallMonsters;\n    } else if (level < 30) {\n      monsterList = mediumMonsters;\n    } else {\n      monsterList = largeMonsters;\n    }\n\n    const vegetable = vegetables[Math.floor(Math.random() * vegetables.length)];\n    const monster = monsterList[Math.floor(Math.random() * monsterList.length)];\n\n    // Prefixes based on abilities\n    const prefixes = Object.keys(abilities)\n      .map((ability) => enemyAbilityDataMap[ability]?.prefix)\n      .filter(Boolean);\n\n    name = [...prefixes, capitalize(vegetable), capitalize(monster)].join(\" \");\n  }\n\n  // === Loot Generation ===\n  const loot = generateEnemyLoot(state, difficulty, numAbilities, isBoss);\n\n  return {\n    name,\n    hp: Math.round(health),\n    abilities,\n    loot,\n  };\n}\n\nfunction generateEnemyLoot(state, difficulty, numAbilities, isBoss) {\n  const luck = state.luck ?? 0;\n  const level = state.level ?? 1;\n  const deck = state.campaign?.deck ?? [];\n  const allGemmedOrUnsocketable =\n    deck.length > 0 && deck.every((card) => card.gem || card.unsocketable);\n  const weights = {\n    gold: 30,\n    potion: 30,\n    card: 60,\n    relic: 1 + luck + numAbilities * 2,\n    gem: allGemmedOrUnsocketable ? 0 : 5 + luck + numAbilities * 2,\n  };\n\n  let drops = isBoss ? 3 : 1;\n  if (!isBoss) {\n    const chanceTwo = 40 + luck + numAbilities * 10;\n    if (Math.random() * 100 < chanceTwo) {\n      drops++;\n      const chanceThree = 15 + luck + numAbilities * 7;\n      if (Math.random() * 100 < chanceThree) {\n        drops++;\n      }\n    }\n  }\n\n  const usedTypes = new Set();\n  const loot = [];\n\n  if (isBoss) {\n    loot.push({ type: \"relic\", value: generateRandomRelic(state) });\n    usedTypes.add(\"relic\");\n    drops--;\n  }\n\n  while (loot.length < drops) {\n    const available = Object.entries(weights).filter(\n      ([type, weight]) => weight > 0 && !usedTypes.has(type)\n    );\n\n    if (available.length === 0) break;\n\n    const totalWeight = available.reduce((sum, [_, w]) => sum + w, 0);\n    let roll = Math.random() * totalWeight;\n\n    let selected;\n    for (const [type, weight] of available) {\n      if (roll < weight) {\n        selected = type;\n        break;\n      }\n      roll -= weight;\n    }\n\n    usedTypes.add(selected);\n\n    if (selected === \"gold\") {\n      const base = { easy: 2, medium: 4, hard: 6 }[difficulty] ?? 2;\n      const amount =\n        (base + level + luck + numAbilities * 2) * (0.5 + Math.random());\n      loot.push({ type: \"gold\", value: Math.max(1, Math.round(amount)) });\n    } else if (selected === \"card\") {\n      loot.push({ type: \"card\", value: generateRandomCard(state) });\n    } else if (selected === \"potion\") {\n      loot.push({ type: \"potion\", value: generateRandomPotion(state) });\n    } else if (selected === \"relic\") {\n      loot.push({ type: \"relic\", value: generateRandomRelic(state) });\n    } else if (selected === \"gem\") {\n      loot.push({ type: \"gem\", value: generateRandomGem(state) });\n    }\n  }\n\n  return loot;\n}\nfunction permanentlyUpgradeRandomCardsInDeck(deck, numUpgrades = 1) {\n  const upgradableCards = deck.filter((card) => !card.unupgradable);\n  const shuffled = [...upgradableCards].sort(() => Math.random() - 0.5);\n  const toUpgrade = shuffled.slice(0, numUpgrades);\n  const upgradedCards = toUpgrade.map((card) => upgradeCard(card, 1));\n\n  return deck.map((card) => {\n    const index = toUpgrade.indexOf(card);\n    return index !== -1 ? upgradedCards[index] : card;\n  });\n}\n\nfunction addCardToCombatDeck(state, cardName) {\n  const base = cardList.find((c) => c.name === cardName);\n  if (!base) {\n    console.warn(`Could not find card \"${cardName}\"`);\n    return state;\n  }\n\n  const newCard = createCardInstance(cardName);\n  const combatDeck = Array.isArray(state.combat?.deck) ? state.combat.deck : [];\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      deck: [...combatDeck, newCard],\n    },\n  };\n}\n\n//#endregion\n//#region game reducer\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.NEW_GAME:\n      return {\n        ...createInitialState(),\n        log: [\"New game started.\"],\n      };\n\n    case ACTIONS.SET_DIFFICULTY: {\n      if (state.difficulty === action.payload) {\n        console.log(\"Difficulty already set to\", action.payload);\n        return state;\n      }\n      console.log(`Difficulty set to ${action.payload}`);\n      return {\n        ...state,\n        difficulty: action.payload, // ✅ store at root\n        log: [`Difficulty set to ${action.payload}.`, ...state.log],\n      };\n    }\n\n    case ACTIONS.GENERATE_STARTER_DECK:\n      return generateStarterDeck(state);\n\n    case ACTIONS.APPLY_DIFFICULTY_MODIFIERS:\n      return applyDifficultyModifiers(state);\n\n    case ACTIONS.ADVANCE_PHASE:\n      const newState = advancePhaseTo(state, action.payload);\n      return handlePhaseTransitions(newState);\n\n    case ACTIONS.CREATE_CARD_INSTANCE: {\n      const newCard = createCardInstance(\n        action.payload.cardName,\n        action.payload.rarity,\n        action.payload.upgrades,\n        action.payload.gem\n      );\n      return {\n        ...state,\n        campaign: {\n          ...state.campaign,\n          deck: [...state.campaign.deck, newCard],\n        },\n        log: [`Created card: ${newCard.name}`, ...state.log],\n      };\n    }\n\n    case ACTIONS.POPULATE_RELIC_OFFERINGS:\n      return populateRelicOfferings(state, action.payload?.rarity);\n\n    case ACTIONS.PICK_RELIC:\n      return pickRelic(state, action.payload);\n\n    case ACTIONS.POPULATE_PATH_OFFERINGS:\n      return populatePathOfferings(state);\n\n    case ACTIONS.PICK_PATH:\n      return pickPath(state, action.payload);\n\n    case ACTIONS.POPULATE_CARD_OFFERINGS:\n      return populateCardOfferings(state);\n\n    case ACTIONS.PICK_CARD:\n      return pickCard(state, action.payload);\n\n    case ACTIONS.POPULATE_POTION_OFFERINGS:\n      return populatePotionOfferings(state);\n\n    case ACTIONS.PICK_POTION:\n      return pickPotion(state, action.payload);\n\n    case ACTIONS.DRINK_POTION: {\n      const potionIndex = action.payload;\n      const potionToDrink = state.potionBelt[potionIndex];\n      if (!potionToDrink) {\n        console.error(\"Invalid potion index:\", potionIndex);\n        return state;\n      }\n      return drinkPotion(state, potionToDrink);\n    }\n\n    case ACTIONS.POPULATE_GEM_OFFERINGS:\n      return populateGemOfferings(state);\n\n    case ACTIONS.OPEN_MOD_SCREEN:\n      return openModScreen(state, action.payload.mod, action.payload.origin);\n\n    case ACTIONS.APPLY_CARD_MOD:\n      return applyModToCard(state, action.payload); // payload = selected card\n\n    case ACTIONS.SCREEN_CHANGE:\n      return {\n        ...state,\n        previousScreen: state.currentScreen,\n        currentScreen: action.payload,\n      };\n\n    case ACTIONS.POPULATE_SHOPFRONT:\n      return populateShopfront(state);\n\n    case ACTIONS.INCREASE_BASE_BUNNIES:\n      return increaseBaseBunnies(state, action.payload);\n\n    case ACTIONS.GAIN_GOLD:\n      return gainGold(state, action.payload);\n\n    case ACTIONS.PRACTICE_WANDWORK:\n      return practiceWandwork(state);\n\n    case ACTIONS.LOOT_HOARD:\n      return lootHoard(state);\n\n    case ACTIONS.REST:\n      return rest(state);\n\n    case ACTIONS.LOG_MESSAGE:\n      return {\n        ...state,\n        log: [action.payload, ...state.log],\n      };\n\n    default:\n      console.warn(\"Unknown action type:\", action.type);\n      return state;\n  }\n}\n//#endregion\n//#region render function\nfunction render(state, dispatch) {\n  // Get or create output div\n  let output = document.getElementById(\"output\");\n  if (!output) {\n    output = document.createElement(\"div\");\n    output.id = \"output\";\n    document.body.appendChild(output);\n  }\n  output.innerHTML = \"\"; // Clear previous contents\n\n  function renderCardList(title, cards) {\n    const section = document.createElement(\"div\");\n    section.innerHTML = `<h3>${title}</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    cards.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    section.appendChild(ul);\n    output.appendChild(section);\n  }\n\n  // render utility function\n  function renderModPhaseEntry(phase, label, modKey) {\n    if (state.currentPhase === phase && state.currentScreen !== SCREENS.MOD) {\n      const modBtn = document.createElement(\"button\");\n      modBtn.textContent = label;\n      modBtn.style.fontSize = \"1.5rem\";\n      modBtn.style.padding = \"1rem 2rem\";\n      modBtn.onclick = () => {\n        modBtn.disabled = true; // prevent double click\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { [modKey]: true },\n            origin: phase,\n          },\n        });\n      };\n      output.appendChild(modBtn);\n    }\n  }\n\n  // === Game Info ===\n  const info = document.createElement(\"div\");\n  info.innerHTML = `\n  <h2>Game Info</h2>\n  <p><strong>Current Screen:</strong> ${state.currentScreen}</p>\n  <p><strong>Phase:</strong> ${\n    state.currentPhase\n  } &nbsp;&nbsp; <strong>Level:</strong> ${state.level ?? 0}</p>\n  <p><strong>Gold:</strong> ${state.gold}</p>\n  <p><strong>Health:</strong> ${state.health}/${state.maxHealth}</p>\n  <p><strong>Deck Size:</strong> ${state.campaign.deck.length}</p>\n  <p><strong>Relics:</strong> ${\n    state.relicBelt.map((r) => r.name).join(\", \") || \"None\"\n  }</p>\n`;\n  output.appendChild(info);\n\n  // === Combat Display ===\n  const isCombatInspectScreen = [\n    SCREENS.COMBAT_DECK,\n    SCREENS.GRAVEYARD,\n    SCREENS.EXILE,\n  ].includes(state.currentScreen);\n\n  if (state.currentPhase === PHASES.COMBAT && state.combat) {\n    const combatSection = document.createElement(\"div\");\n    combatSection.style.border = \"2px solid black\";\n    combatSection.style.padding = \"1rem\";\n    combatSection.style.margin = \"1rem 0\";\n    combatSection.innerHTML = `<h3>Combat</h3>`;\n\n    // === Main Combat UI (skip if inspecting)\n    if (!isCombatInspectScreen) {\n      // Enemy Name + HP (on same line)\n      const enemyBox = document.createElement(\"div\");\n      enemyBox.style.display = \"flex\";\n      enemyBox.style.justifyContent = \"space-between\";\n      enemyBox.style.alignItems = \"center\";\n      enemyBox.style.fontSize = \"1.5rem\";\n      enemyBox.style.fontWeight = \"bold\";\n      enemyBox.style.border = \"1px solid red\";\n      enemyBox.style.padding = \"1rem\";\n      enemyBox.style.marginBottom = \"1rem\";\n\n      // Enemy name\n      const nameSpan = document.createElement(\"span\");\n      nameSpan.textContent = state.combat.enemy.name;\n\n      // Enemy HP\n      const hpSpan = document.createElement(\"span\");\n      hpSpan.textContent = `HP: ${state.combat.enemyHp}`;\n\n      enemyBox.appendChild(nameSpan);\n      enemyBox.appendChild(hpSpan);\n      combatSection.appendChild(enemyBox);\n\n      // Spellbook Pages\n      const spellbook = document.createElement(\"div\");\n      spellbook.style.display = \"flex\";\n      spellbook.style.gap = \"0.5rem\";\n      spellbook.style.marginBottom = \"1rem\";\n      for (let i = 0; i < state.combat.pages; i++) {\n        const page = document.createElement(\"div\");\n        page.style.width = \"30px\";\n        page.style.height = \"30px\";\n        page.style.backgroundColor = \"grey\";\n        spellbook.appendChild(page);\n      }\n      combatSection.appendChild(spellbook);\n\n      // Cast + Bunny Count\n      const castRow = document.createElement(\"div\");\n      castRow.style.display = \"flex\";\n      castRow.style.alignItems = \"center\";\n      castRow.style.gap = \"1rem\";\n      castRow.style.marginBottom = \"1rem\";\n\n      const castButton = document.createElement(\"button\");\n      castButton.textContent = \"Cast Spellbook\";\n      castButton.onclick = () => castSpellbook(state, dispatch);\n\n      const bunnyDisplay = document.createElement(\"span\");\n      bunnyDisplay.textContent = `BUNNIES: ${state.bunnies || 0}`;\n\n      castRow.appendChild(castButton);\n      castRow.appendChild(bunnyDisplay);\n      combatSection.appendChild(castRow);\n\n      // Hand\n      const handRow = document.createElement(\"div\");\n      handRow.style.display = \"flex\";\n      handRow.style.gap = \"0.5rem\";\n      handRow.style.flexWrap = \"wrap\";\n\n      if (state.hand && state.hand.length > 0) {\n        state.hand.forEach((card, index) => {\n          const cardBtn = document.createElement(\"button\");\n          cardBtn.textContent = card.name;\n          cardBtn.onclick = () => playCard(state, index, dispatch);\n          handRow.appendChild(cardBtn);\n        });\n      } else {\n        const empty = document.createElement(\"p\");\n        empty.textContent = \"Your hand is empty.\";\n        handRow.appendChild(empty);\n      }\n\n      combatSection.appendChild(handRow);\n    }\n\n    // === Inspect Buttons (always shown in combat)\n    const inspectRow = document.createElement(\"div\");\n    inspectRow.style.marginTop = \"1rem\";\n    inspectRow.style.display = \"flex\";\n    inspectRow.style.gap = \"0.5rem\";\n\n    [\n      { label: \"Combat Deck\", screen: SCREENS.COMBAT_DECK },\n      { label: \"Graveyard\", screen: SCREENS.GRAVEYARD },\n      { label: \"Exile\", screen: SCREENS.EXILE },\n    ].forEach(({ label, screen }) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent =\n        state.currentScreen === screen ? \"Return\" : `Inspect ${label}`;\n      btn.onclick = () => {\n        if (state.currentScreen === screen) {\n          returnToMain(dispatch);\n        } else {\n          changeScreen(dispatch, screen);\n        }\n      };\n      inspectRow.appendChild(btn);\n    });\n\n    combatSection.appendChild(inspectRow);\n    output.appendChild(combatSection);\n  }\n\n  if (state.currentScreen === SCREENS.COMBAT_DECK) {\n    renderCardList(\"Combat Deck\", state.combat?.deck || []);\n  }\n  if (state.currentScreen === SCREENS.GRAVEYARD) {\n    renderCardList(\"Graveyard\", state.combat?.graveyard || []);\n  }\n  if (state.currentScreen === SCREENS.EXILE) {\n    renderCardList(\"Exile\", state.combat?.exile || []);\n  }\n\n  // === Log ===\n  const log = document.createElement(\"div\");\n  log.innerHTML = `<h3>Log</h3><ul>${state.log\n    .slice(0, 5)\n    .map((msg) => `<li>${msg}</li>`)\n    .join(\"\")}</ul>`;\n  output.appendChild(log);\n\n  // === Main Menu ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.MAIN_MENU\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = \"New Game\";\n    button.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.DIFFICULTY_SELECTION,\n      });\n    };\n    output.appendChild(button);\n  }\n\n  // === Difficulty Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.DIFFICULTY_SELECTION\n  ) {\n    const difficulties = [\n      DIFFICULTIES.EASY,\n      DIFFICULTIES.MEDIUM,\n      DIFFICULTIES.HARD,\n    ];\n    difficulties.forEach((difficulty) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `Start ${difficulty} Game`;\n      btn.onclick = () => selectDifficultyAndBeginGame(dispatch, difficulty);\n      output.appendChild(btn);\n    });\n  }\n\n  // === Relic Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.relics &&\n    state.offerings.relics.length > 0\n  ) {\n    const relicSection = document.createElement(\"div\");\n    relicSection.innerHTML = `<h3>Relic Offerings</h3>`;\n    state.offerings.relics.forEach((relic, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${relic.name} (${relic.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n      relicSection.appendChild(btn);\n    });\n    output.appendChild(relicSection);\n  }\n  // === Path Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.paths &&\n    state.offerings.paths.length > 0\n  ) {\n    const pathSection = document.createElement(\"div\");\n    pathSection.innerHTML = `<h3>Choose a Path</h3>`;\n\n    state.offerings.paths.forEach((path, index) => {\n      const btn = document.createElement(\"button\");\n\n      // === Conditionally render based on anonymity ===\n      if (path.anonymousNameDisplay) {\n        btn.textContent = `???`;\n      } else {\n        btn.textContent = `${path.path} (${path.rarity})${\n          path.isFight ? \" [FIGHT]\" : \"\"\n        }`;\n      }\n\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_PATH, payload: index });\n\n      pathSection.appendChild(btn);\n    });\n\n    output.appendChild(pathSection);\n  }\n\n  // === Card Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.cards &&\n    state.offerings.cards.length > 0\n  ) {\n    const cardSection = document.createElement(\"div\");\n    cardSection.innerHTML = `<h3>Choose a Card</h3>`;\n\n    state.offerings.cards.forEach((card, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.cost})${\n        card.upgrades ? ` +${card.upgrades}` : \"\"\n      }${card.gem ? ` [Gem: ${card.gem.name}]` : \"\"}`;\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n      cardSection.appendChild(btn);\n    });\n\n    output.appendChild(cardSection);\n  }\n\n  // === Potion Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.POTION_OFFERING &&\n    state.offerings.potions &&\n    state.offerings.potions.length > 0\n  ) {\n    const potionSection = document.createElement(\"div\");\n    potionSection.innerHTML = `<h3>Choose a Potion</h3>`;\n\n    state.offerings.potions.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${potion.name} (${potion.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n      potionSection.appendChild(btn);\n    });\n\n    output.appendChild(potionSection);\n  }\n\n  // ==== Gem Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentScreen === SCREENS.MAIN &&\n    state.currentPhase === PHASES.GEM_OFFERING &&\n    state.offerings.gems &&\n    state.offerings.gems.length > 0\n  ) {\n    const gemSection = document.createElement(\"div\");\n    gemSection.innerHTML = `<h3>Choose a Gem</h3>`;\n\n    state.offerings.gems.forEach((gem, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${gem.name} (${gem.rarity})`;\n\n      btn.onclick = () =>\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { gem },\n            origin: PHASES.GEM_OFFERING,\n          },\n        });\n\n      gemSection.appendChild(btn);\n    });\n\n    output.appendChild(gemSection);\n  }\n  // === Shopfront Display ===\n\n  if (\n    state.currentPhase === PHASES.SHOP &&\n    state.currentScreen !== SCREENS.MOD &&\n    state.offerings.shopfront.length > 0\n  ) {\n    const shopSection = document.createElement(\"div\");\n    shopSection.innerHTML = `<h3>Shop Inventory</h3>`;\n\n    const list = document.createElement(\"ul\");\n    state.offerings.shopfront.forEach((entry, index) => {\n      if (!entry || !entry.item || !entry.item.name) return;\n\n      const li = document.createElement(\"li\");\n\n      const btn = document.createElement(\"button\");\n      const cost = entry.item?.cost ?? 0;\n      const playerGold = state.gold ?? 0;\n      const disabled = cost > playerGold;\n\n      btn.textContent = `${entry.type.toUpperCase()}: ${\n        entry.item.name\n      } (${cost}g)`;\n      if (disabled) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      // Bind correct function based on type\n      btn.onclick = () => {\n        switch (entry.type) {\n          case \"card\":\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n            break;\n          case \"potion\":\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n            break;\n          case \"gem\":\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: entry.item },\n                origin: PHASES.SHOP,\n              },\n            });\n          case \"relic\":\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n            break;\n          default:\n            console.warn(\"Unknown shop item type:\", entry.type);\n        }\n      };\n\n      li.appendChild(btn);\n      list.appendChild(li);\n    });\n\n    // Exit Shop Button (for future logic)\n    const exitBtn = document.createElement(\"button\");\n    exitBtn.textContent = \"Exit Shop\";\n    exitBtn.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.PATH_SELECTION,\n      });\n    };\n    shopSection.appendChild(list);\n    shopSection.appendChild(exitBtn);\n    output.appendChild(shopSection);\n  }\n\n  // === Mod Screen ===\n  if (state.currentScreen === SCREENS.MOD && state.modData?.mod) {\n    const modSection = document.createElement(\"div\");\n    modSection.innerHTML = `<h3>Choose a card to modify</h3>`;\n\n    const mod = state.modData.mod;\n    const isGemMod = !!mod.gem;\n\n    state.campaign.deck.forEach((card) => {\n      // === Filter based on mod type ===\n      if (isGemMod && (card.gem || card.unsocketable)) return;\n      if (mod.upgrade && card.unupgradable) return;\n\n      const btn = document.createElement(\"button\");\n      btn.textContent =\n        `${card.name} (Cost: ${card.cost})` +\n        (card.upgrades ? ` +${card.upgrades}` : \"\") +\n        (card.gem ? ` [Gem: ${card.gem.name}]` : \"\");\n\n      btn.onclick = () => {\n        dispatch({ type: ACTIONS.APPLY_CARD_MOD, payload: card });\n      };\n\n      modSection.appendChild(btn);\n    });\n\n    output.appendChild(modSection);\n  }\n\n  // ======= render purge, transmute, and enchant phases (AKA mod phases) ======\n\n  renderModPhaseEntry(PHASES.PURGE, \"Lethian Font\", \"purge\");\n  renderModPhaseEntry(PHASES.TRANSMUTE, \"Metamorphosis\", \"transmute\");\n  renderModPhaseEntry(PHASES.ENCHANT, \"Enchanted Dolmen\", \"upgrade\");\n\n  // ====== render hoard phase= ======\n  if (state.currentPhase === PHASES.HOARD) {\n    const btn = document.createElement(\"button\");\n    btn.textContent = \"Loot Hoard\";\n    btn.style.fontSize = \"1.5rem\";\n    btn.style.padding = \"1rem 2rem\";\n    btn.onclick = () => {\n      // Placeholder until lootHoard is implemented\n      dispatch({ type: \"LOOT_HOARD\" }); // or just console.log(\"Loot Hoard\")\n    };\n    output.appendChild(btn);\n  }\n  // ====== rest phase rendering ======\n  if (state.currentPhase === PHASES.REST) {\n    const restBtn = document.createElement(\"button\");\n    restBtn.textContent = \"Fireside Rest\";\n    restBtn.style.fontSize = \"1.5rem\";\n    restBtn.style.padding = \"1rem 2rem\";\n    restBtn.onclick = () => {\n      dispatch({ type: \"REST\" }); // Placeholder\n    };\n\n    const practiceBtn = document.createElement(\"button\");\n    practiceBtn.textContent = \"Practice Wandwork\";\n    practiceBtn.style.fontSize = \"1.5rem\";\n    practiceBtn.style.padding = \"1rem 2rem\";\n    practiceBtn.onclick = () => {\n      dispatch({ type: \"PRACTICE_WANDWORK\" }); // Placeholder\n    };\n\n    output.appendChild(restBtn);\n    output.appendChild(practiceBtn);\n  }\n\n  // === Deck Inspect / Return Button ===\n  //deck inspect button\n  if (\n    (state.currentScreen === SCREENS.MAIN ||\n      state.currentScreen === SCREENS.DECK) &&\n    state.campaign.deck.length > 0\n  ) {\n    const deckBtn = document.createElement(\"button\");\n    deckBtn.textContent =\n      state.currentScreen === SCREENS.MAIN ? \"Inspect Deck\" : \"Return\";\n    deckBtn.onclick = () => {\n      const nextScreen =\n        state.currentScreen === SCREENS.MAIN ? SCREENS.DECK : SCREENS.MAIN;\n      dispatch({\n        type: ACTIONS.SCREEN_CHANGE,\n        payload: nextScreen,\n      });\n    };\n    output.appendChild(deckBtn);\n  }\n  // deck inspect screen\n  if (state.currentScreen === SCREENS.DECK) {\n    const deckView = document.createElement(\"div\");\n    deckView.innerHTML = `<h3>Campaign Deck</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    state.campaign.deck.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    deckView.appendChild(ul);\n    output.appendChild(deckView);\n  }\n\n  // === Always-Visible Potion Belt ===\n  if (state.potionBelt && state.potionBelt.length > 0) {\n    const beltSection = document.createElement(\"div\");\n    beltSection.innerHTML = `<h3>Your Potions</h3>`;\n\n    state.potionBelt.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = potion.name;\n      btn.onclick = () => {\n        dispatch({ type: ACTIONS.DRINK_POTION, payload: index });\n      };\n      beltSection.appendChild(btn);\n    });\n\n    output.appendChild(beltSection);\n  }\n}\n// #endregion\n\n// Initialize the game app\nwindow.onload = () => {\n  createGameApp(createInitialState(), gameReducer, render);\n};\n\n//hotkeys\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Escape\") {\n    dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: SCREENS.MAIN });\n  }\n});\n\n//#region WIP\n// //------------------------------------------------WIP functions for MVP ------------------------------------------------\n\n// function startTurn(state)  {\n//   // opens a new empty book, with the combat.pages blank pages.\n//   // combat.books = combat.books -1.\n//   // calls 'newHand' function to draw a new hand of cards.\n//   // calls 'refillInkpot' to refresh the player's ink.\n// }\n\n// function newHand(state) {\n//   // draws a hand of cards based on the player's combat.handSize.\n// checks drawHand triggers\n// calls drawCard once for each card in the hand size.\n// }\n\n// function drawCard(state) {\n//   // draws a card from the player's deck into their hand.\n//  checks drawCard triggers.\n// }\n\n// function checkDrawCardTriggers(state, card) {\n//   // Checks if the drawn card has any triggers that need to be applied\n// }\n\n// function refillInkpot(state) {\n//   // refreshes the player's ink to the maximum ink amount.\n// }\n\n// function playCard(state, card) {\n//   // triggered by clicking on a card in hand.\n//   // plays a card from the player's hand, applying its effects.\n//   // deducts the card's ink cost from ink.\n//   // determines where the card moves to: spellbook, graveyard, exile, or into the deck.\n//   // checks for any play card triggers.\n//   // calls \"resolveCardEffects\" to apply the card's effects.\n//   // note: If there's no space in the spellbook or the player has insufficient ink, the card cannot be played and will be displayed as grey and unselectable.\n// }\n\n// function checkPlayCardTriggers(state, card) {\n//   // Checks if the played card has any triggers that need to be applied\n//   // This could include effects that trigger on play, such as drawing cards, gaining gold, etc.\n// }\n\n// function castSpellbook(state) {\n//   // called when the player clicks the \"cast spellbook\" button, or when the spellbook is full.\n//   // casts the spellbook, sequentially casting each of the cards in the spellbook.\n//   // checks for any spellbook triggers.\n//   // checks to see if combat has ended.\n//   // clears the spellbook after casting, moving all its cards to the graveyard.\n//   // discards the player's hand to the graveyard.\n//   // calls the 'new book' function if combat hasn't ended.\n// }\n\n// function checkCastSpellbookTriggers(state) {\n//   // Checks if there are any triggers that need to be applied when casting the spellbook.\n// }\n\n// function discardCard(state, card) {\n//   // discards a card from the player's hand to the graveyard.\n// }\n\n// function checkDiscardCardTriggers(state, card) {\n//   // Checks if the discarded card has any triggers that need to be applied\n// }\n\n// function castSpell(state, spell) {\n//   // applies the effects of a spell card from the spellbook.\n//   // checks for any spell triggers.\n//   // moves the spell card to the appropriate zone after casting.\n// }\n\n// function checkCastSpellTriggers(state, spell) {\n//   // Checks if the spell has any triggers that need to be applied when a specific spell is cast.\n// }\n\n// function checkCombatEnd(state) {\n//   // checks if combat has ended.\n// }\n\n// function combatEnd(state) {\n//   // Handles the end phase after combat, such as displaying the end screen, player losing HP, allowing the player to choose rewards, or advancing to the next path.\n//   // also cleans up the battle state, such as clearing the spellbook, hand, and graveyard.\n// }\n\n// function checkCombatEndTriggers(state) {\n//   // handles combat end triggers\n// }\n\n// function openCombatEndScreen(state) {\n//   // opens the combat end screen, showing results, rewards, etc.\n// }\n\n// function populateCombatRewards(state) {\n//   // populates the combat rewards based on the combat results.\n//   // generates a list of rewards, such as cards, relics, potions, etc.\n//   // ensures that the rewards are appropriate for the difficulty and type of combat.\n//   // returns the populated rewards list.\n// }\n\n// function checkPopulateCombatRewardsTriggers(state) {\n//   // Checks if there are any triggers that modify the combat rewards, such as relics or cards.\n// }\n\n// function pickCombatReward(state, reward) {\n//   // handles the selection of a reward after combat.\n//   // triggered by the player clicking on a reward in the combat end screen.\n// }\n\n// function closeCombatEndScreen(state) {\n//   // closes the combat end screen and advances the game phase to the next phase.\n// }\n\n// //@@@@@@@@@@@@ death and victory functions @@@@@@@@@@@@\n// function checkDeath(state) {\n//   //checks if the player has died, and if so, advances to the death phase.\n// }\n// function death(state) {\n//   // Handles the death phase, such as displaying a death screen, allowing the player to restart or return to the main menu.\n// }\n// function victory(state) {\n//   // Handles the victory phase, such as displaying a victory screen, allowing the player to continue to the next phase or return to the main menu.\n// }\n"]}