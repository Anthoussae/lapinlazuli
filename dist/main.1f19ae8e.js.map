{"version":3,"sources":["main.js","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["_Object$freeze3","_toArray","r","_arrayWithHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableRest","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","e","t","Array","isArray","length","_n","F","s","n","done","value","f","TypeError","a","u","call","next","return","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_slicedToArray","_iterableToArrayLimit","l","i","_toConsumableArray","_arrayWithoutHoles","_nonIterableSpread","_arrayLikeToArray","toString","slice","name","from","test","_toPropertyKey","configurable","writable","_toPrimitive","toPrimitive","String","Number","ENEMY_ABILITIES","freeze","INK_DRINK","INCREASE_HEALTH","HAND_SIZE_REDUCTION","ADD_PEBBLES","ADD_MERCURY","ADD_CLUTTER","DOWNGRADE_CARDS","DAMAGE_TYPES","BUNNY","FIRE","LIGHTNING","POISON","SPECIAL_CARD_SUBTYPES","CURSE","UNIQUE","STATUS","DIFFICULTIES","EASY","MEDIUM","HARD","TRIGGER_EVENTS","CARD_PICKUP","RELIC_PICKUP","POTION_PICKUP","DRINK_POTION","ASSIGN_SHOP_PRICES","REST","COMBAT_START","POPULATE_PATHS","SHUFFLE_GRAVEYARD_INTO_DECK","PLAY_CARD","CAST_SPELLBOOK","COMBAT_END","DEAL_DAMAGE","PATHS","EASY_FIGHT","MEDIUM_FIGHT","HARD_FIGHT","BOSS_FIGHT","SHOP","RELIC_OFFERING","GEM_OFFERING","CARD_OFFERING","ENCHANT","POTION_OFFERING","HOARD","PURGE","TRANSMUTE","SCREENS","MAIN","DECK","SETTINGS","MOD","COMBAT_DECK","GRAVEYARD","EXILE","RARITIES","BASIC_POLY","BASIC_MONO","COMMON","UNCOMMON","RARE","MYTHIC","LEGENDARY","PHASES","MAIN_MENU","DIFFICULTY_SELECTION","MYTHIC_RELIC_OFFERING","SOCKET_GEM","PATH_SELECTION","COMBAT","GAME_OVER","ACTIONS","NEW_GAME","SET_DIFFICULTY","GENERATE_STARTER_DECK","APPLY_DIFFICULTY_MODIFIERS","ADVANCE_PHASE","LOG_MESSAGE","CREATE_CARD_INSTANCE","POPULATE_RELIC_OFFERINGS","PICK_RELIC","POPULATE_PATH_OFFERINGS","PICK_PATH","POPULATE_CARD_OFFERINGS","PICK_CARD","POPULATE_POTION_OFFERINGS","PICK_POTION","POPULATE_GEM_OFFERINGS","OPEN_MOD_SCREEN","APPLY_CARD_MOD","SCREEN_CHANGE","POPULATE_SHOPFRONT","INCREASE_BASE_BUNNIES","GAIN_GOLD","PRACTICE_WANDWORK","LOOT_HOARD","START_TURN","DRAW_CARD","CARD_TYPES","INSTANT","SPELL","REST_OPTIONS","HEAL","PRACTICE","difficultyModifiersMap","maxHealthModifier","goldModifier","basicCardCountModifier","luckModifier","shopPriceMultiplierModifier","restHealthRestoreModifier","enemyHealthMultiplierModifier","pathMap","rarity","isFight","leadsTo","difficulty","SPECIAL","enemyAbilityDataMap","baseValue","description","prefix","cardList","cardType","inkCost","bunnyAdd","bunnyMult","goldAdd","permanentlyUpgradeRandomCardsInDeck","cardDraw","exileOnCast","inkAdd","permanentlyUpgradeRandomCardsInHand","damage","inkCostIncreasePerLevel","damageMultiplierPerLevel","damageTypes","upgradesOnCast","damageRoll","dice","sides","flatBonus","unupgradable","unsocketable","uncastable","specialSubtype","triggers","onDraw","exile","gemList","relicList","bonusPages","bonusBaseBunnies","bonusGold","bonusHealth","bonusBooks","bonusInk","upgradeCard","upgradePotion","healPlayer","shopPriceMultiplier","revealAnonymousPaths","weakenEnemyHpPercent","bossOnly","damageTypeTrigger","multiplyDamage","ifLightningDrawCards","reduceInkCostOfFireCardsInDeck","reduceInkCostIfFire","bonusHandSize","potionList","healthRestore","drinkableOutOfCombat","increaseMaxHp","upgradeCardsInHand","capitalize","word","charAt","toUpperCase","shuffleArray","originalArray","array","j","Math","floor","random","_ref","weightedRandomChoice","weightedMap","entries","totalWeight","reduce","sum","_ref2","_ref3","_","weight","cumulative","_i","_entries","_entries$_i","key","changeScreen","dispatch","screen","type","payload","inspectDeck","inspectCombatDeck","inspectGraveyard","inspectExile","returnToMain","assignShopPrices","state","globalMultiplier","basePrices","card","potion","gem","relic","rarityMultipliers","common","uncommon","rare","mythic","legendary","updatedShopfront","offerings","shopfront","map","entry","_item$rarity","_item$rarity$toLowerC","item","console","warn","basePrice","upgrades","upgradeCost","includes","toLowerCase","rarityMultiplier","price","round","log","concat","anonymizeObject","obj","anonymousNameDisplay","generateStarterDeck","error","modifiers","deck","basicMonoCards","_iterator","_step","createCardInstance","err","basicPolyCards","_iterator2","_step2","generateRandomCard","shuffledDeck","campaign","applyDifficultyModifiers","gold","basicCardCount","luck","restHealthRestore","maxHealth","health","enemyHealthMultiplier","advancePhaseTo","phaseAdvancedTo","values","currentPhase","handlePhaseTransitions","phase","populatePathOfferings","populateCardOfferings","populateRelicOfferings","populatePotionOfferings","populateGemOfferings","populateShopfront","initializeCombatPhase","currentPath","pickPath","index","_state$level","paths","chosenPath","pathKey","path","pathData","level","newCards","_loop","some","existing","_ret","cards","selectedPotions","usedNames","Set","attempts","generateRandomPotion","has","add","potions","undefined","selected","maxRelics","_loop2","generateRandomRelic","relics","selectedGems","generateRandomGem","gems","_state$campaign$deck","_state$campaign$deck2","misery","bossPath","fightWeights","fightPathKey","fightPath","allPaths","_ref4","_ref5","_ref6","_ref7","data","bossLevels","isBossLevel","allCardsSocketed","every","allCardsUnupgradable","filteredPaths","pathObj","ENCHANT_OFFERING","rarityWeights","getLuckAdjustedRarityWeights","chosenRarities","chosenPaths","usedPaths","_loop3","_chosenRarities","_i3","candidates","p","pick","remainingPool","idx","splice","firstTwoAreFights","finalPaths","newMisery","thirdOptions","nonFights","fights","weightedPool","allFights","anonChance","max","anonIndex","triggerResult","checkRelicTriggers","POPULATE_PATH","updatedPaths","result","updatedState","pickCard","sourceArrayName","combatRewards","sourceArray","pickedCard","_entry$item","charged","chargeGoldPrice","updatedCampaign","updatedOfferings","newState","trashed","trashPile","pickRelic","pickedRelic","relicPrice","chargedState","relicBelt","isOfferingPhase","updatedTrashPile","triggeredState","pickPotion","_offerings$combatRewa","pickedPotion","_entry$item$price","_entry$item2","triggeredPotion","updatedPotionBelt","potionBelt","drinkPotion","heal","combat","ink","maxInk","amount","hand","upgradable","numToUpgrade","min","shuffled","sort","toUpgrade","newHand","drawCard","addBunnies","multiplyBunnies","belt","findIndex","newPotionBelt","newTrash","triggered","openModScreen","mod","_state$offerings$gems","originPhase","validKeys","chosenGemName","discardedGems","g","updatedRewards","reward","_mod$gem$price","_mod$gem","currentScreen","modData","origin","increaseBaseBunnies","newAmount","baseBunnies","applyModToCard","_state$modData","_state$modData2","updatedDeck","cardIndex","c","modifiedCard","upgrade","socketCardWithGem","purge","transmute","transmuteCard","nextPhase","shopfrontTypes","previousItems","discardedItems","updatedTrash","typeCounts","_i4","_Object$entries","_Object$entries$_i","count","generatedItems","usedKeys","_i5","_shopfrontTypes","attempt","gainGold","newGold","practiceWandwork","lootHoard","_state$defeatedEnemie","baseGold","levelBonus","enemiesDefeated","defeatedEnemies","enemyBonus","luckBonus","totalGold","hoardsLooted","rest","amountToHeal","currentHealth","healedAmount","msg","startsWith","toggleDeckInspect","isInspectingDeck","returnTo","previousScreen","createInitialState","books","pages","handSize","graveyard","spellbook","combatEnded","maxBooks","bunnies","maxPages","enemy","difficulties","restOptions","selectDifficultyAndBeginGame","createGameApp","initialState","reducer","renderFn","action","cardName","found","find","createRelicInstance","relicName","createPotionInstance","potionName","createGemInstance","gemName","getRandomBossRelic","bossRelics","chosen","_ref8","_ref8$rarity","ownedRelics","GOLD_BAG","filtered","_state$level2","_state$defeatedEnemie2","_ref9","_ref9$rarity","_ref9$upgrades","_ref9$gem","finalRarity","totalFortune","upgradeWeights","finalUpgrades","defeatedCount","maxUpgrades","cappedUpgrades","_state$level3","_ref0","_ref0$rarity","_ref0$upgrades","basePotion","_ref1","_ref1$rarity","fallbackGem","chosenGem","upgradedCard","healthCost","pow","baseName","replace","_upgradedCard$damageR","_upgradedCard$damageR2","_upgradedCard$damageR3","downgradeCard","undowngradable","downgradedCard","originalLevel","newLevel","levelDiff","applyHalvedBase","upgradedPotion","socketedCard","upgradeLevel","applyEffect","baseAmount","perUpgrade","damageType","_iterator3","_step3","dmgType","_socketedCard$damageR","_socketedCard$damageR2","_socketedCard$damageR3","gemRoll","baseDice","baseSides","baseBonus","nameSuffix","_socketedCard$damageR4","ceil","context","triggerEvent","_iterator4","_step4","_loop4","_relic$triggers","effect","bonusDamage","dealDamage","isBonus","newHealth","newMaxHealth","modifiedCount","upgradedDeck","adjustedPrice","_updatedState$combat","enemyHp","reduction","_ret2","checkEnemyTriggers","_updatedState$combat2","abilities","logMessages","newMaxInk","newInk","multiplier","hp","downgradable","toDowngrade","addCardToCombatDeck","modifyCombatInk","_state$combat$ink","_state$combat","_state$combat$maxInk","_state$combat2","current","actualChange","excludedSubtypes","alternatives","unchoosableByTransmute","newBase","purgeCard","_state$level4","_state$baseBunnies","modifyEnemyAbilityPower","_ref11","currentValue","generateEnemy","deepDeckCopy","JSON","parse","stringify","newCombat","startTurn","_pathMap$path$path","_state$level5","_state$enemyHealthMul","_baseHealthMap$diffic","_perLevelIncrement$di","isBoss","baseHealthMap","easy","medium","hard","boss","perLevelIncrement","base","increment","allAbilities","selectedAbilities","numAbilities","_state$luck","bonusChance","size","ability","_iterator5","_step5","_data$baseValue","_data$value","override","enemyLevel","smallMonsters","mediumMonsters","largeMonsters","vegetables","bossNames","monsterList","vegetable","monster","prefixes","_enemyAbilityDataMap$","Boolean","join","loot","generateEnemyLoot","_state$luck2","_state$level6","_state$campaign$deck3","_state$campaign","allGemmedOrUnsocketable","weights","drops","chanceTwo","chanceThree","usedTypes","available","_ref12","_ref13","_ref14","_ref15","w","roll","_iterator6","_step6","_step6$value","_easy$medium$hard$dif","numUpgrades","upgradableCards","upgradedCards","indexOf","_state$combat3","newCard","combatDeck","gameReducer","_action$payload","potionIndex","potionToDrink","CLOSE_COMBAT_REWARDS","closeCombatRewards","CLAIM_GOLD_REWARD","_action$payload2","newRewards","playCard","castSpellbook","EXIT_SHOP","exitShop","render","_state$campaign$deck4","_state$level7","_state$modData3","output","document","getElementById","createElement","id","body","appendChild","innerHTML","renderCardList","title","section","ul","li","textContent","renderModPhaseEntry","label","modKey","modBtn","style","fontSize","padding","onclick","disabled","info","acc","_ref16","_ref17","isCombatInspectScreen","combatSection","border","margin","_state$combat4","enemyBox","display","justifyContent","alignItems","fontWeight","marginBottom","nameSpan","hpSpan","gap","page","pageDiv","width","height","backgroundColor","spellbookLabel","castRow","allPagesBlank","castButton","bunnyDisplay","resourcesRow","inkDisplay","booksDisplay","handRow","flexWrap","_card$inkCost","cardBtn","cardCost","canAfford","isUncastable","costText","opacity","cursor","empty","handLabel","inspectRow","marginTop","_ref18","btn","inspectZoneLabel","_state$combat5","_state$combat6","_state$combat7","button","relicSection","pathSection","cardSection","potionSection","gemSection","shopSection","list","_entry$item$price2","_entry$item3","_state$gold","playerGold","isGem","exitBtn","modSection","isGemMod","restBtn","practiceBtn","_state$offerings","combatEndSection","hasUnclaimedLoot","rewardSection","shouldDisable","gameOverSection","classList","banner","summary","newGameBtn","deckBtn","nextScreen","deckView","beltSection","isCombatPhase","isDrinkableNow","window","onload","addEventListener","_state$combat$baseBun","newBook","fill","refillInkpot","shuffleGraveyardIntoDeck","_state$combat$graveya","_state$combat8","_state$combat$deck","_state$combat9","combinedDeck","checkCombatEndViaDeath","_state$combat$maxInk2","_state$combat0","_state$combat1","playerDead","enemyDead","combatEnd","currentCombat","takeDamage","skipDeathCheck","_currentCombat$deck","drawnCard","remainingDeck","checkCardTriggers","_card$triggers","_state$combat$bunnies","_state$combat$bunnies2","dmg","_options$skipDeathChe","options","trace","_options$isBonus","newEnemyHp","_iterator7","_step7","checkGameOver","_card$inkCost2","resolveSpell","firstBlank","_updatedState$combat3","_iterator8","_step8","releaseBunnies","_state$combat$bunnies3","bunnyDamage","endTurn","remainingHand","updatedGraveyard","effects","upgradedHand","types","_card$damageRoll","_card$damageRoll$flat","rollDice","typeList","upgradeSpecificCardInCampaignDeck","destination","updatedSpellbook","trashpile","_context$result","_updatedState$combat4","victory","_updatedState$combat$","_enemy$loot","_updatedState$defeate","rewards","bossRelic","_updatedState$combat$2","_updatedState$combat5","remainingEnemyHp","gameOverResult","_enemy$name","_enemy$name2","cleanedCombat","finalState","_state$offerings2","logEntry","pathState","defeatedBosses","gameOver","gameResult","cleanedState","numDice","sidesPerDie","total","_state$campaign2","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","message","stack","overlay","createErrorOverlay","remove","stackTrace","innerText","getParents","modules","parents","k","d","dep","Function","deps","cached","cache","cb"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAY;;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAA,eAAA;AAAA,SAAAC,SAAAC,CAAA,WAAAC,eAAA,CAAAD,CAAA,KAAAE,gBAAA,CAAAF,CAAA,KAAAG,2BAAA,CAAAH,CAAA,KAAAI,gBAAA;AAAA,SAAAC,QAAAC,CAAA,sCAAAD,OAAA,wBAAAE,MAAA,uBAAAA,MAAA,CAAAC,QAAA,aAAAF,CAAA,kBAAAA,CAAA,gBAAAA,CAAA,WAAAA,CAAA,yBAAAC,MAAA,IAAAD,CAAA,CAAAG,WAAA,KAAAF,MAAA,IAAAD,CAAA,KAAAC,MAAA,CAAAG,SAAA,qBAAAJ,CAAA,KAAAD,OAAA,CAAAC,CAAA;AAAA,SAAAK,2BAAAX,CAAA,EAAAY,CAAA,QAAAC,CAAA,yBAAAN,MAAA,IAAAP,CAAA,CAAAO,MAAA,CAAAC,QAAA,KAAAR,CAAA,qBAAAa,CAAA,QAAAC,KAAA,CAAAC,OAAA,CAAAf,CAAA,MAAAa,CAAA,GAAAV,2BAAA,CAAAH,CAAA,MAAAY,CAAA,IAAAZ,CAAA,uBAAAA,CAAA,CAAAgB,MAAA,IAAAH,CAAA,KAAAb,CAAA,GAAAa,CAAA,OAAAI,EAAA,MAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,WAAAH,EAAA,IAAAjB,CAAA,CAAAgB,MAAA,KAAAK,IAAA,WAAAA,IAAA,MAAAC,KAAA,EAAAtB,CAAA,CAAAiB,EAAA,UAAAL,CAAA,WAAAA,EAAAZ,CAAA,UAAAA,CAAA,KAAAuB,CAAA,EAAAL,CAAA,gBAAAM,SAAA,iJAAAlB,CAAA,EAAAmB,CAAA,OAAAC,CAAA,gBAAAP,CAAA,WAAAA,EAAA,IAAAN,CAAA,GAAAA,CAAA,CAAAc,IAAA,CAAA3B,CAAA,MAAAoB,CAAA,WAAAA,EAAA,QAAApB,CAAA,GAAAa,CAAA,CAAAe,IAAA,WAAAH,CAAA,GAAAzB,CAAA,CAAAqB,IAAA,EAAArB,CAAA,KAAAY,CAAA,WAAAA,EAAAZ,CAAA,IAAA0B,CAAA,OAAApB,CAAA,GAAAN,CAAA,KAAAuB,CAAA,WAAAA,EAAA,UAAAE,CAAA,YAAAZ,CAAA,CAAAgB,MAAA,IAAAhB,CAAA,CAAAgB,MAAA,oBAAAH,CAAA,QAAApB,CAAA;AAAA,SAAAwB,QAAAlB,CAAA,EAAAZ,CAAA,QAAAa,CAAA,GAAAkB,MAAA,CAAAC,IAAA,CAAApB,CAAA,OAAAmB,MAAA,CAAAE,qBAAA,QAAA3B,CAAA,GAAAyB,MAAA,CAAAE,qBAAA,CAAArB,CAAA,GAAAZ,CAAA,KAAAM,CAAA,GAAAA,CAAA,CAAA4B,MAAA,WAAAlC,CAAA,WAAA+B,MAAA,CAAAI,wBAAA,CAAAvB,CAAA,EAAAZ,CAAA,EAAAoC,UAAA,OAAAvB,CAAA,CAAAwB,IAAA,CAAAC,KAAA,CAAAzB,CAAA,EAAAP,CAAA,YAAAO,CAAA;AAAA,SAAA0B,cAAA3B,CAAA,aAAAZ,CAAA,MAAAA,CAAA,GAAAwC,SAAA,CAAAxB,MAAA,EAAAhB,CAAA,UAAAa,CAAA,WAAA2B,SAAA,CAAAxC,CAAA,IAAAwC,SAAA,CAAAxC,CAAA,QAAAA,CAAA,OAAA8B,OAAA,CAAAC,MAAA,CAAAlB,CAAA,OAAA4B,OAAA,WAAAzC,CAAA,IAAA0C,eAAA,CAAA9B,CAAA,EAAAZ,CAAA,EAAAa,CAAA,CAAAb,CAAA,SAAA+B,MAAA,CAAAY,yBAAA,GAAAZ,MAAA,CAAAa,gBAAA,CAAAhC,CAAA,EAAAmB,MAAA,CAAAY,yBAAA,CAAA9B,CAAA,KAAAiB,OAAA,CAAAC,MAAA,CAAAlB,CAAA,GAAA4B,OAAA,WAAAzC,CAAA,IAAA+B,MAAA,CAAAc,cAAA,CAAAjC,CAAA,EAAAZ,CAAA,EAAA+B,MAAA,CAAAI,wBAAA,CAAAtB,CAAA,EAAAb,CAAA,iBAAAY,CAAA;AAAA,SAAAkC,eAAA9C,CAAA,EAAAY,CAAA,WAAAX,eAAA,CAAAD,CAAA,KAAA+C,qBAAA,CAAA/C,CAAA,EAAAY,CAAA,KAAAT,2BAAA,CAAAH,CAAA,EAAAY,CAAA,KAAAR,gBAAA;AAAA,SAAAA,iBAAA,cAAAoB,SAAA;AAAA,SAAAuB,sBAAA/C,CAAA,EAAAgD,CAAA,QAAAnC,CAAA,WAAAb,CAAA,gCAAAO,MAAA,IAAAP,CAAA,CAAAO,MAAA,CAAAC,QAAA,KAAAR,CAAA,4BAAAa,CAAA,QAAAD,CAAA,EAAAQ,CAAA,EAAA6B,CAAA,EAAAvB,CAAA,EAAAD,CAAA,OAAAF,CAAA,OAAAjB,CAAA,iBAAA2C,CAAA,IAAApC,CAAA,GAAAA,CAAA,CAAAc,IAAA,CAAA3B,CAAA,GAAA4B,IAAA,QAAAoB,CAAA,QAAAjB,MAAA,CAAAlB,CAAA,MAAAA,CAAA,UAAAU,CAAA,uBAAAA,CAAA,IAAAX,CAAA,GAAAqC,CAAA,CAAAtB,IAAA,CAAAd,CAAA,GAAAQ,IAAA,MAAAI,CAAA,CAAAY,IAAA,CAAAzB,CAAA,CAAAU,KAAA,GAAAG,CAAA,CAAAT,MAAA,KAAAgC,CAAA,GAAAzB,CAAA,iBAAAvB,CAAA,IAAAM,CAAA,OAAAc,CAAA,GAAApB,CAAA,yBAAAuB,CAAA,YAAAV,CAAA,CAAAgB,MAAA,KAAAH,CAAA,GAAAb,CAAA,CAAAgB,MAAA,IAAAE,MAAA,CAAAL,CAAA,MAAAA,CAAA,2BAAApB,CAAA,QAAAc,CAAA,aAAAK,CAAA;AAAA,SAAAxB,gBAAAD,CAAA,QAAAc,KAAA,CAAAC,OAAA,CAAAf,CAAA,UAAAA,CAAA;AAAA,SAAAkD,mBAAAlD,CAAA,WAAAmD,kBAAA,CAAAnD,CAAA,KAAAE,gBAAA,CAAAF,CAAA,KAAAG,2BAAA,CAAAH,CAAA,KAAAoD,kBAAA;AAAA,SAAAA,mBAAA,cAAA5B,SAAA;AAAA,SAAArB,4BAAAH,CAAA,EAAAyB,CAAA,QAAAzB,CAAA,2BAAAA,CAAA,SAAAqD,iBAAA,CAAArD,CAAA,EAAAyB,CAAA,OAAAZ,CAAA,MAAAyC,QAAA,CAAA3B,IAAA,CAAA3B,CAAA,EAAAuD,KAAA,6BAAA1C,CAAA,IAAAb,CAAA,CAAAS,WAAA,KAAAI,CAAA,GAAAb,CAAA,CAAAS,WAAA,CAAA+C,IAAA,aAAA3C,CAAA,cAAAA,CAAA,GAAAC,KAAA,CAAA2C,IAAA,CAAAzD,CAAA,oBAAAa,CAAA,+CAAA6C,IAAA,CAAA7C,CAAA,IAAAwC,iBAAA,CAAArD,CAAA,EAAAyB,CAAA;AAAA,SAAAvB,iBAAAF,CAAA,8BAAAO,MAAA,YAAAP,CAAA,CAAAO,MAAA,CAAAC,QAAA,aAAAR,CAAA,uBAAAc,KAAA,CAAA2C,IAAA,CAAAzD,CAAA;AAAA,SAAAmD,mBAAAnD,CAAA,QAAAc,KAAA,CAAAC,OAAA,CAAAf,CAAA,UAAAqD,iBAAA,CAAArD,CAAA;AAAA,SAAAqD,kBAAArD,CAAA,EAAAyB,CAAA,aAAAA,CAAA,IAAAA,CAAA,GAAAzB,CAAA,CAAAgB,MAAA,MAAAS,CAAA,GAAAzB,CAAA,CAAAgB,MAAA,YAAAJ,CAAA,MAAAQ,CAAA,GAAAN,KAAA,CAAAW,CAAA,GAAAb,CAAA,GAAAa,CAAA,EAAAb,CAAA,IAAAQ,CAAA,CAAAR,CAAA,IAAAZ,CAAA,CAAAY,CAAA,UAAAQ,CAAA;AAAA,SAAAsB,gBAAA9B,CAAA,EAAAZ,CAAA,EAAAa,CAAA,YAAAb,CAAA,GAAA2D,cAAA,CAAA3D,CAAA,MAAAY,CAAA,GAAAmB,MAAA,CAAAc,cAAA,CAAAjC,CAAA,EAAAZ,CAAA,IAAAsB,KAAA,EAAAT,CAAA,EAAAuB,UAAA,MAAAwB,YAAA,MAAAC,QAAA,UAAAjD,CAAA,CAAAZ,CAAA,IAAAa,CAAA,EAAAD,CAAA;AAAA,SAAA+C,eAAA9C,CAAA,QAAAoC,CAAA,GAAAa,YAAA,CAAAjD,CAAA,gCAAAR,OAAA,CAAA4C,CAAA,IAAAA,CAAA,GAAAA,CAAA;AAAA,SAAAa,aAAAjD,CAAA,EAAAb,CAAA,oBAAAK,OAAA,CAAAQ,CAAA,MAAAA,CAAA,SAAAA,CAAA,MAAAD,CAAA,GAAAC,CAAA,CAAAN,MAAA,CAAAwD,WAAA,kBAAAnD,CAAA,QAAAqC,CAAA,GAAArC,CAAA,CAAAe,IAAA,CAAAd,CAAA,EAAAb,CAAA,gCAAAK,OAAA,CAAA4C,CAAA,UAAAA,CAAA,YAAAzB,SAAA,yEAAAxB,CAAA,GAAAgE,MAAA,GAAAC,MAAA,EAAApD,CAAA;AACA,IAAMqD,eAAe,GAAGnC,MAAM,CAACoC,MAAM,CAAC;EACpCC,SAAS,EAAE,UAAU;EACrBC,eAAe,EAAE,gBAAgB;EACjCC,mBAAmB,EAAE,mBAAmB;EACxCC,WAAW,EAAE,cAAc;EAC3BC,WAAW,EAAE,eAAe;EAC5BC,WAAW,EAAE,iBAAiB;EAC9BC,eAAe,EAAE;AACnB,CAAC,CAAC;AACF,IAAMC,YAAY,GAAG5C,MAAM,CAACoC,MAAM,CAAC;EACjCS,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAE,WAAW;EACtBC,MAAM,EAAE;AACV,CAAC,CAAC;AACF,IAAMC,qBAAqB,GAAGjD,MAAM,CAACoC,MAAM,CAAC;EAC1Cc,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE;AACV,CAAC,CAAC;AACF,IAAMC,YAAY,GAAGrD,MAAM,CAACoC,MAAM,CAAC;EACjCkB,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE;AACR,CAAC,CAAC;AACF,IAAMC,cAAc,GAAGzD,MAAM,CAACoC,MAAM,CAAC;EACnCsB,WAAW,EAAE,aAAa;EAC1BC,YAAY,EAAE,cAAc;EAC5BC,aAAa,EAAE,eAAe;EAC9BC,YAAY,EAAE,cAAc;EAC5BC,kBAAkB,EAAE,oBAAoB;EACxCC,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE,cAAc;EAC5BC,cAAc,EAAE,gBAAgB;EAChCC,2BAA2B,EAAE,6BAA6B;EAC1DC,SAAS,EAAE,WAAW;EACtBC,cAAc,EAAE,gBAAgB;EAChCC,UAAU,EAAE,YAAY;EACxBC,WAAW,EAAE;AACf,CAAC,CAAC;AACF,IAAMC,KAAK,GAAGvE,MAAM,CAACoC,MAAM,CAAC;EAC1BoC,UAAU,EAAE,YAAY;EACxBC,YAAY,EAAE,cAAc;EAC5BC,UAAU,EAAE,YAAY;EACxBC,UAAU,EAAE,YAAY;EACxBZ,IAAI,EAAE,MAAM;EACZa,IAAI,EAAE,MAAM;EACZC,cAAc,EAAE,gBAAgB;EAChCC,YAAY,EAAE,cAAc;EAC5BC,aAAa,EAAE,eAAe;EAC9BC,OAAO,EAAE,SAAS;EAClBC,eAAe,EAAE,iBAAiB;EAClCC,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE,OAAO;EACdC,SAAS,EAAE;AACb,CAAC,CAAC;AACF,IAAMC,OAAO,GAAGrF,MAAM,CAACoC,MAAM,CAAC;EAC5BkD,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,cAAc;EACpBC,QAAQ,EAAE,UAAU;EACpBC,GAAG,EAAE,WAAW;EAChBC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE,WAAW;EACtBC,KAAK,EAAE;AACT,CAAC,CAAC;AACF,IAAMC,QAAQ,GAAG7F,MAAM,CAACoC,MAAM,CAAC;EAC7B0D,UAAU,EAAE,YAAY;EAAE;EAC1BC,UAAU,EAAE,YAAY;EAAE;EAC1BC,MAAM,EAAE,QAAQ;EAChBC,QAAQ,EAAE,UAAU;EACpBC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE,QAAQ;EAChBC,SAAS,EAAE;AACb,CAAC,CAAC;AACF,IAAMC,MAAM,GAAGrG,MAAM,CAACoC,MAAM,CAAC;EAC3BkE,SAAS,EAAE,WAAW;EACtBC,oBAAoB,EAAE,sBAAsB;EAC5CC,qBAAqB,EAAE,uBAAuB;EAC9C3B,cAAc,EAAE,gBAAgB;EAChCE,aAAa,EAAE,eAAe;EAC9BD,YAAY,EAAE,cAAc;EAC5BG,eAAe,EAAE,iBAAiB;EAClCZ,UAAU,EAAE,YAAY;EACxBoC,UAAU,EAAE,YAAY;EACxB7B,IAAI,EAAE,MAAM;EACZ8B,cAAc,EAAE,gBAAgB;EAChC3C,IAAI,EAAE,MAAM;EACZiB,OAAO,EAAE,SAAS;EAClBI,SAAS,EAAE,WAAW;EACtBuB,MAAM,EAAE,QAAQ;EAChBC,SAAS,EAAE,WAAW;EACtBzB,KAAK,EAAE,OAAO;EACdD,KAAK,EAAE;AACT,CAAC,CAAC;AACF,IAAM2B,OAAO,GAAG7G,MAAM,CAACoC,MAAM,CAAAzB,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA;EAC3BmG,QAAQ,EAAE,UAAU;EACpBC,cAAc,EAAE,gBAAgB;EAChCC,qBAAqB,EAAE,uBAAuB;EAC9CC,0BAA0B,EAAE,4BAA4B;EACxDC,aAAa,EAAE,eAAe;EAC9BC,WAAW,EAAE,aAAa;EAC1BC,oBAAoB,EAAE,sBAAsB;EAC5CC,wBAAwB,EAAE,0BAA0B;EACpDC,UAAU,EAAE,YAAY;EACxBC,uBAAuB,EAAE,yBAAyB;EAClDC,SAAS,EAAE,WAAW;EACtBC,uBAAuB,EAAE,yBAAyB;EAClDC,SAAS,EAAE,WAAW;EACtBC,yBAAyB,EAAE,2BAA2B;EACtDC,WAAW,EAAE,aAAa;EAC1B/D,YAAY,EAAE,cAAc;EAC5BgE,sBAAsB,EAAE,wBAAwB;EAChDC,eAAe,EAAE,iBAAiB;EAClCC,cAAc,EAAE,gBAAgB;EAChCC,aAAa,EAAE,eAAe;EAC9BC,kBAAkB,EAAE,oBAAoB;EACxCC,qBAAqB,EAAE,uBAAuB;EAC9CC,SAAS,EAAE,WAAW;EACtBC,iBAAiB,EAAE,mBAAmB;EACtCC,UAAU,EAAE,YAAY;EACxBtE,IAAI,EAAE,MAAM;EACZuE,UAAU,EAAE,YAAY;EACxBC,SAAS,EAAE;AAAW,gBACX,WAAW,2BACA,sBAAsB,wBACzB,mBAAmB,gBAC3B,WAAW,qBACN,gBAAgB,gBACrB,WAAW,CACvB,CAAC;AACF,IAAMC,UAAU,GAAGxI,MAAM,CAACoC,MAAM,CAAC;EAC/BqG,OAAO,EAAE,SAAS;EAAE;EACpBC,KAAK,EAAE,OAAO;EAAE;EAChBxF,KAAK,EAAE,OAAO;EAAE;EAChBE,MAAM,EAAE,QAAQ,CAAE;AACpB,CAAC,CAAC;AACF,IAAMuF,YAAY,GAAG3I,MAAM,CAACoC,MAAM,CAAC;EACjCwG,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,UAAU;EACpB7D,OAAO,EAAE;AACX,CAAC,CAAC;AACF;AACA;AACA,IAAM8D,sBAAsB,GAAG9I,MAAM,CAACoC,MAAM,CAAAzB,eAAA,CAAAA,eAAA,CAAAA,eAAA,KACzC0C,YAAY,CAACC,IAAI,EAAG;EACnByF,iBAAiB,EAAE,GAAG;EACtBC,YAAY,EAAE,EAAE;EAChBC,sBAAsB,EAAE,CAAC;EACzBC,YAAY,EAAE,CAAC;EACfC,2BAA2B,EAAE,CAAC,GAAG;EAAE;EACnCC,yBAAyB,EAAE,EAAE;EAAE;EAC/BC,6BAA6B,EAAE,CAAC,GAAG,CAAE;AACvC,CAAC,GACAhG,YAAY,CAACE,MAAM,EAAG;EACrBwF,iBAAiB,EAAE,EAAE;EACrBC,YAAY,EAAE,EAAE;EAChBC,sBAAsB,EAAE,CAAC;EACzBC,YAAY,EAAE,CAAC;EACfC,2BAA2B,EAAE,CAAC;EAAE;EAChCC,yBAAyB,EAAE,EAAE;EAAE;EAC/BC,6BAA6B,EAAE;AACjC,CAAC,GACAhG,YAAY,CAACG,IAAI,EAAG;EACnBuF,iBAAiB,EAAE,EAAE;EACrBC,YAAY,EAAE,CAAC;EACfC,sBAAsB,EAAE,EAAE;EAC1BC,YAAY,EAAE,CAAC;EACfC,2BAA2B,EAAE,GAAG;EAAE;EAClCC,yBAAyB,EAAE,EAAE;EAAE;EAC/BC,6BAA6B,EAAE,GAAG,CAAE;AACtC,CAAC,CACF,CAAC;AACF,IAAMC,OAAO,GAAGtJ,MAAM,CAACoC,MAAM,EAAArE,eAAA,OAAA4C,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAA5C,eAAA,EAC1BwG,KAAK,CAACC,UAAU,EAAG;EAClB+E,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBwD,OAAO,EAAE,IAAI;EACbC,OAAO,EAAEpD,MAAM,CAACM,MAAM;EACtB+C,UAAU,EAAErG,YAAY,CAACC;AAC3B,CAAC,GACAiB,KAAK,CAACE,YAAY,EAAG;EACpB8E,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBwD,OAAO,EAAE,IAAI;EACbC,OAAO,EAAEpD,MAAM,CAACM,MAAM;EACtB+C,UAAU,EAAErG,YAAY,CAACE;AAC3B,CAAC,GACAgB,KAAK,CAACG,UAAU,EAAG;EAClB6E,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBwD,OAAO,EAAE,IAAI;EACbC,OAAO,EAAEpD,MAAM,CAACM,MAAM;EACtB+C,UAAU,EAAErG,YAAY,CAACG;AAC3B,CAAC,GACAe,KAAK,CAACI,UAAU,EAAG;EAClB4E,MAAM,EAAE1D,QAAQ,CAAC8D,OAAO;EACxBH,OAAO,EAAE,IAAI;EACbC,OAAO,EAAEpD,MAAM,CAACM,MAAM;EACtB+C,UAAU,EAAE;AACd,CAAC,GACAnF,KAAK,CAACR,IAAI,EAAG;EAAEwF,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EAAEuD,OAAO,EAAEpD,MAAM,CAACtC;AAAK,CAAC,GAC5DQ,KAAK,CAACK,IAAI,EAAG;EAAE2E,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EAAEuD,OAAO,EAAEpD,MAAM,CAACzB;AAAK,CAAC,GAC5DL,KAAK,CAACM,cAAc,EAAG;EACtB0E,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvBsD,OAAO,EAAEpD,MAAM,CAACxB;AAClB,CAAC,GACAN,KAAK,CAACO,YAAY,EAAG;EAAEyE,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EAAEuD,OAAO,EAAEpD,MAAM,CAACvB;AAAa,CAAC,GAC5EP,KAAK,CAACQ,aAAa,EAAG;EACrBwE,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBwD,OAAO,EAAEpD,MAAM,CAACtB;AAClB,CAAC,GACAR,KAAK,CAACS,OAAO,EAAG;EAAEuE,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EAAEuD,OAAO,EAAEpD,MAAM,CAACrB;AAAQ,CAAC,GAAArE,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAA5C,eAAA,EAClEwG,KAAK,CAACU,eAAe,EAAG;EACvBsE,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBuD,OAAO,EAAEpD,MAAM,CAACpB;AAClB,CAAC,GACAV,KAAK,CAACW,KAAK,EAAG;EACbqE,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvBsD,OAAO,EAAEpD,MAAM,CAACnB;AAClB,CAAC,GACAX,KAAK,CAACY,KAAK,EAAG;EAAEoE,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EAAEwD,OAAO,EAAEpD,MAAM,CAAClB;AAAM,CAAC,GAClEZ,KAAK,CAACa,SAAS,EAAG;EAAEmE,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EAAEuD,OAAO,EAAEpD,MAAM,CAACjB;AAAU,CAAC,EACxE,CAAC;AACF,IAAMwE,mBAAmB,GAAAjJ,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,KACtBwB,eAAe,CAACE,SAAS,EAAG;EAC3BwH,SAAS,EAAE,CAAC;EACZC,WAAW,EAAE,sCAAsC;EACnDC,MAAM,EAAE;AACV,CAAC,GACA5H,eAAe,CAACG,eAAe,EAAG;EACjCuH,SAAS,EAAE,GAAG;EACdC,WAAW,EAAE,oBAAoB;EACjCC,MAAM,EAAE;AACV,CAAC,GACA5H,eAAe,CAACI,mBAAmB,EAAG;EACrCsH,SAAS,EAAE,CAAC;EACZC,WAAW,EAAE,4CAA4C;EACzDC,MAAM,EAAE;AACV,CAAC,GACA5H,eAAe,CAACK,WAAW,EAAG;EAC7BqH,SAAS,EAAE,CAAC;EACZC,WAAW,EAAE,oDAAoD;EACjEC,MAAM,EAAE;AACV,CAAC,GACA5H,eAAe,CAACM,WAAW,EAAG;EAC7BoH,SAAS,EAAE,CAAC;EACZC,WAAW,EAAE,oDAAoD;EACjEC,MAAM,EAAE;AACV,CAAC,GACA5H,eAAe,CAACO,WAAW,EAAG;EAC7BmH,SAAS,EAAE,CAAC;EACZC,WAAW,EAAE,iDAAiD;EAC9DC,MAAM,EAAE;AACV,CAAC,GACA5H,eAAe,CAACQ,eAAe,EAAG;EACjCkH,SAAS,EAAE,CAAC;EACZC,WAAW,EAAE,6DAA6D;EAC1EC,MAAM,EAAE;AACV,CAAC,CACF;;AAED;AACA;AACA,IAAMC,QAAQ,GAAG,CACf;EACEvI,IAAI,EAAE,YAAY;EAClBwI,QAAQ,EAAEzB,UAAU,CAACE,KAAK;EAC1Ba,MAAM,EAAE1D,QAAQ,CAACC,UAAU;EAC3BoE,OAAO,EAAE,CAAC;EACVC,QAAQ,EAAE;AACZ,CAAC,EACD;EACE1I,IAAI,EAAE,gBAAgB;EACtBwI,QAAQ,EAAEzB,UAAU,CAACE,KAAK;EAC1Ba,MAAM,EAAE1D,QAAQ,CAACC,UAAU;EAC3BoE,OAAO,EAAE,CAAC;EACVE,SAAS,EAAE;AACb,CAAC,EACD;EACE3I,IAAI,EAAE,YAAY;EAClBwI,QAAQ,EAAEzB,UAAU,CAACE,KAAK;EAC1Ba,MAAM,EAAE1D,QAAQ,CAACE,UAAU;EAC3BmE,OAAO,EAAE,CAAC;EACVG,OAAO,EAAE;AACX,CAAC,EACD;EACE5I,IAAI,EAAE,mBAAmB;EACzBwI,QAAQ,EAAEzB,UAAU,CAACE,KAAK;EAC1Ba,MAAM,EAAE1D,QAAQ,CAACE,UAAU;EAC3BmE,OAAO,EAAE,CAAC;EACVI,mCAAmC,EAAE;AACvC,CAAC,EACD;EACE7I,IAAI,EAAE,QAAQ;EACdwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBkE,OAAO,EAAE,CAAC;EACVK,QAAQ,EAAE,CAAC;EACXC,WAAW,EAAE;AACf,CAAC,EACD;EACE/I,IAAI,EAAE,UAAU;EAChBwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBiE,OAAO,EAAE,CAAC;EACVO,MAAM,EAAE,CAAC;EACTD,WAAW,EAAE;AACf,CAAC,EACD;EACE/I,IAAI,EAAE,wBAAwB;EAC9BwI,QAAQ,EAAEzB,UAAU,CAACE,KAAK;EAC1Ba,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBkE,OAAO,EAAE,CAAC;EACVC,QAAQ,EAAE;AACZ,CAAC,EACD;EACE1I,IAAI,EAAE,iBAAiB;EACvBwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBgE,OAAO,EAAE,CAAC;EACVC,QAAQ,EAAE;AACZ,CAAC,EACD;EACE1I,IAAI,EAAE,aAAa;EACnBwI,QAAQ,EAAEzB,UAAU,CAACE,KAAK;EAC1Ba,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBgE,OAAO,EAAE,CAAC;EACVG,OAAO,EAAE;AACX,CAAC,EACD;EACE5I,IAAI,EAAE,iBAAiB;EACvBwI,QAAQ,EAAEzB,UAAU,CAACE,KAAK;EAC1Ba,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBgE,OAAO,EAAE,CAAC;EACVI,mCAAmC,EAAE;AACvC,CAAC,EACD;EACE7I,IAAI,EAAE,YAAY;EAClBwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvB+D,OAAO,EAAE,CAAC;EACVO,MAAM,EAAE,CAAC;EACTD,WAAW,EAAE;AACf,CAAC,EACD;EACE/I,IAAI,EAAE,kBAAkB;EACxBwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBiE,OAAO,EAAE,CAAC;EACVG,OAAO,EAAE;AACX,CAAC,EACD;EACE5I,IAAI,EAAE,iBAAiB;EACvBwI,QAAQ,EAAEzB,UAAU,CAACE,KAAK;EAC1Ba,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBkE,OAAO,EAAE,CAAC;EACVC,QAAQ,EAAE;AACZ,CAAC,EACD;EACE1I,IAAI,EAAE,qBAAqB;EAC3BwI,QAAQ,EAAEzB,UAAU,CAACE,KAAK;EAC1Ba,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBkE,OAAO,EAAE,CAAC;EACVE,SAAS,EAAE;AACb,CAAC,EACD;EACE3I,IAAI,EAAE,oBAAoB;EAC1BwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBiE,OAAO,EAAE,CAAC;EACVQ,mCAAmC,EAAE;AACvC,CAAC,EACD;EACEjJ,IAAI,EAAE,eAAe;EACrBwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBgE,OAAO,EAAE,CAAC;EACVQ,mCAAmC,EAAE;AACvC,CAAC,EACD;EACEjJ,IAAI,EAAE,uBAAuB;EAC7BwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvB+D,OAAO,EAAE,CAAC;EACVK,QAAQ,EAAE,CAAC;EACXC,WAAW,EAAE;AACf,CAAC,EACD;EACE/I,IAAI,EAAE,eAAe;EACrBwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBkE,OAAO,EAAE,CAAC;EACVS,MAAM,EAAE,CAAC;EACTC,uBAAuB,EAAE,CAAC;EAC1BC,wBAAwB,EAAE,CAAC;EAC3BC,WAAW,EAAE,CAAClI,YAAY,CAACE,IAAI;AACjC,CAAC,EACD;EACErB,IAAI,EAAE,UAAU;EAChBwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBiE,OAAO,EAAE,CAAC;EACVS,MAAM,EAAE,EAAE;EACVC,uBAAuB,EAAE,CAAC;EAC1BC,wBAAwB,EAAE,CAAC;EAC3BC,WAAW,EAAE,CAAClI,YAAY,CAACE,IAAI;AACjC,CAAC,EACD;EACErB,IAAI,EAAE,oBAAoB;EAC1BwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBkE,OAAO,EAAE,CAAC;EACVa,cAAc,EAAE,CAAC;EACjBD,WAAW,EAAE,CAAClI,YAAY,CAACG,SAAS,CAAC;EACrCiI,UAAU,EAAE;IACVC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAE,CAAC;IACRC,SAAS,EAAE;EACb;AACF,CAAC,EACD;EACE1J,IAAI,EAAE,mBAAmB;EACzBwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5Bc,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBiE,OAAO,EAAE,CAAC;EACVa,cAAc,EAAE,CAAC;EACjBD,WAAW,EAAE,CAAClI,YAAY,CAACG,SAAS,CAAC;EACrCiI,UAAU,EAAE;IACVC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAE,CAAC;IACRC,SAAS,EAAE;EACb;AACF,CAAC;AACD;AACA;EACE1J,IAAI,EAAE,kBAAkB;EACxBwI,QAAQ,EAAEzB,UAAU,CAACtF,KAAK;EAC1BkI,YAAY,EAAE,IAAI;EAClBC,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,IAAI;EAChBC,cAAc,EAAEtI,qBAAqB,CAACC;EACtC;AACF,CAAC,EACD;EACEzB,IAAI,EAAE,SAAS;EACfwI,QAAQ,EAAEzB,UAAU,CAACtF,KAAK;EAC1BkI,YAAY,EAAE,IAAI;EAClBC,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,IAAI;EAChBC,cAAc,EAAEtI,qBAAqB,CAACC;EACtC;AACF,CAAC,EACD;EACEzB,IAAI,EAAE,QAAQ;EACdwI,QAAQ,EAAEzB,UAAU,CAACtF,KAAK;EAC1BkI,YAAY,EAAE,IAAI;EAClBC,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,IAAI;EAChBC,cAAc,EAAEtI,qBAAqB,CAACC,KAAK;EAC3CsI,QAAQ,EAAE;IACRC,MAAM,EAAE;MACNC,KAAK,EAAE,IAAI,CAAE;IACf;EACF;AACF,CAAC,EACD;EACEjK,IAAI,EAAE,iBAAiB;EACvBwI,QAAQ,EAAEzB,UAAU,CAACC,OAAO;EAC5ByB,OAAO,EAAE,CAAC;EACVkB,YAAY,EAAE,IAAI;EAClBC,YAAY,EAAE,IAAI;EAClBb,WAAW,EAAE,IAAI;EACjBe,cAAc,EAAEtI,qBAAqB,CAACC;AACxC,CAAC,CACF;AACD,IAAMyI,OAAO,GAAG,CACd;EACElK,IAAI,EAAE,UAAU;EAChB8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBmE,QAAQ,EAAE;AACZ,CAAC,EACD;EACE1I,IAAI,EAAE,cAAc;EACpB8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBoE,SAAS,EAAE;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;EACE3I,IAAI,EAAE,OAAO;EACb8H,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBmE,OAAO,EAAE;AACX,CAAC,EACD;EACE5I,IAAI,EAAE,KAAK;EACX8H,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvBmE,mCAAmC,EAAE;AACvC,CAAC,EACD;EACE7I,IAAI,EAAE,MAAM;EACZ8H,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrByE,MAAM,EAAE,CAAC;EACTG,WAAW,EAAE,CAAClI,YAAY,CAACE,IAAI,CAAC;EAChC8H,uBAAuB,EAAE,CAAC;EAC1BC,wBAAwB,EAAE;AAC5B,CAAC,EACD;EACEpJ,IAAI,EAAE,OAAO;EACb8H,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrB8E,UAAU,EAAE;IACVC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAE,CAAC;IACRC,SAAS,EAAE;EACb,CAAC;EACDJ,cAAc,EAAE,CAAC;EACjBD,WAAW,EAAE,CAAClI,YAAY,CAACG,SAAS;AACtC,CAAC,CACF;AACD,IAAM6I,SAAS,GAAG,CAChB;EACEnK,IAAI,EAAE,cAAc;EACpB8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBwF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7BkI,UAAU,EAAE;EACd,CAAC;AAEL,CAAC,EACD;EACEpK,IAAI,EAAE,YAAY;EAClB8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBwF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7BmI,gBAAgB,EAAE;EACpB,CAAC;AAEL,CAAC,EACD;EACErK,IAAI,EAAE,aAAa;EACnB8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBwF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7BoI,SAAS,EAAE;EACb,CAAC;AAEL,CAAC,EACD;EACEtK,IAAI,EAAE,YAAY;EAClB8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBwF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7BqI,WAAW,EAAE;EACf,CAAC;AAEL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEvK,IAAI,EAAE,oBAAoB;EAC1B8H,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvBqF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7BsI,UAAU,EAAE;EACd,CAAC;AAEL,CAAC,EACD;EACExK,IAAI,EAAE,cAAc;EACpB8H,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvBqF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7BuI,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEzK,IAAI,EAAE,uBAAuB;EAC7B8H,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvBqF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7B2G,mCAAmC,EAAE;EACvC,CAAC;AAEL,CAAC,EACD;EACE7I,IAAI,EAAE,aAAa;EACnB8H,MAAM,EAAE1D,QAAQ,CAACO,SAAS;EAC1BoF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7BuI,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEzK,IAAI,EAAE,UAAU;EAChB8H,MAAM,EAAE1D,QAAQ,CAACC,UAAU;EAC3B0F,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7BoI,SAAS,EAAE;EACb,CAAC;AAEL,CAAC,EACD;EACEtK,IAAI,EAAE,WAAW;EACjB8H,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBuF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACC,WAAW,EAAG;IAC5ByI,WAAW,EAAE;EACf,CAAC;AAEL,CAAC,EACD;EACE1K,IAAI,EAAE,kBAAkB;EACxB8H,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBuF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACG,aAAa,EAAG;IAC9BwI,aAAa,EAAE;EACjB,CAAC;AAEL,CAAC,EACD;EACE3K,IAAI,EAAE,cAAc;EACpB8H,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBuF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACI,YAAY,EAAG;IAC7BwI,UAAU,EAAE;EACd,CAAC;AAEL,CAAC,EACD;EACE5K,IAAI,EAAE,kBAAkB;EACxB8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBwF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACK,kBAAkB,EAAG;IACnCwI,mBAAmB,EAAE,GAAG,CAAE;EAC5B,CAAC;AAEL,CAAC,EACD;EACE7K,IAAI,EAAE,cAAc;EACpB8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBwF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACM,IAAI,EAAG;IACrBsI,UAAU,EAAE;EACd,CAAC;AAEL,CAAC,EACD;EACE5K,IAAI,EAAE,oBAAoB;EAC1B8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBwF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACM,IAAI,EAAG;IACrBsG,OAAO,EAAE;EACX,CAAC;AAEL,CAAC,EACD;EACE5I,IAAI,EAAE,oBAAoB;EAC1B8H,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBuF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACM,IAAI,EAAG;IACrBuG,mCAAmC,EAAE,CAAC,CAAE;EAC1C,CAAC;AAEL,CAAC,EACD;EACE7I,IAAI,EAAE,aAAa;EACnB8H,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBsF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACQ,cAAc,EAAG;IAC/BsI,oBAAoB,EAAE;EACxB,CAAC;AAEL,CAAC,EACD;EACE;EACA9K,IAAI,EAAE,iBAAiB;EACvB8H,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBsF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACO,YAAY,EAAG;IAC7BwI,oBAAoB,EAAE,GAAG,CAAE;EAC7B,CAAC;AAEL,CAAC,EACD;EACE/K,IAAI,EAAE,YAAY;EAClB8H,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBsF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACS,2BAA2B,EAAG;IAC5CmI,UAAU,EAAE;EACd,CAAC;AAEL,CAAC,EACD;EACE5K,IAAI,EAAE,cAAc;EACpB8H,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvBqF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAAC8E,SAAS,EAAG;IAC1B4B,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACE1I,IAAI,EAAE,cAAc;EACpB8H,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBsF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACU,SAAS,EAAG;IAC1BgG,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACE1I,IAAI,EAAE,eAAe;EACrB8H,MAAM,EAAE1D,QAAQ,CAACO,SAAS;EAC1BqG,QAAQ,EAAE,IAAI;EACdjB,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7BsI,UAAU,EAAE,CAAC;IACbJ,UAAU,EAAE,CAAC;IACbK,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEzK,IAAI,EAAE,oBAAoB;EAC1B8H,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBsF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACW,cAAc,EAAG;IAC/BiI,UAAU,EAAE;EACd,CAAC;AAEL,CAAC,EACD;EACE5K,IAAI,EAAE,gBAAgB;EACtB8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBwF,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACY,UAAU,EAAG;IAC3BgG,OAAO,EAAE;EACX,CAAC;AAEL,CAAC,EACD;EACE5I,IAAI,EAAE,cAAc;EACpB8H,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvB2D,WAAW,EAAE,oCAAoC;EACjD0B,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACa,WAAW,EAAG;IAC5BoI,iBAAiB,EAAE9J,YAAY,CAACC,KAAK;IACrC8J,cAAc,EAAE;EAClB,CAAC;AAEL,CAAC,EACD;EACElL,IAAI,EAAE,eAAe;EACrB8H,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvB2D,WAAW,EAAE,oDAAoD;EACjE0B,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACU,SAAS,EAAG;IAC1ByI,oBAAoB,EAAE;EACxB,CAAC;AAEL,CAAC,EACD;EACEnL,IAAI,EAAE,gBAAgB;EACtB8H,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvB2D,WAAW,EAAE,iCAAiC;EAC9C0B,QAAQ,EAAA7K,eAAA,CAAAA,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7BkJ,8BAA8B,EAAE;EAClC,CAAC,GACApJ,cAAc,CAACC,WAAW,EAAG;IAC5BoJ,mBAAmB,EAAE;EACvB,CAAC;AAEL,CAAC,EACD;EACErL,IAAI,EAAE,cAAc;EACpB8H,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvB2D,WAAW,EAAE,+CAA+C;EAC5D0B,QAAQ,EAAA7K,eAAA,KACL8C,cAAc,CAACE,YAAY,EAAG;IAC7BoJ,aAAa,EAAE;EACjB,CAAC;AAEL,CAAC,CACF;AACD,IAAMC,UAAU,GAAG,CACjB;EACEvL,IAAI,EAAE,uBAAuB;EAC7B8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBiH,aAAa,EAAE;AACjB,CAAC,EACD;EACExL,IAAI,EAAE,gBAAgB;EACtB8H,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBgH,aAAa,EAAE;AACjB,CAAC,EACD;EACExL,IAAI,EAAE,wBAAwB;EAC9B8H,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrB+G,aAAa,EAAE;AACjB,CAAC,EACD;EACExL,IAAI,EAAE,gBAAgB;EACtB8H,MAAM,EAAE1D,QAAQ,CAACM,MAAM;EACvB8G,aAAa,EAAE;AACjB,CAAC,EACD;EACExL,IAAI,EAAE,YAAY;EAClB8H,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBiG,QAAQ,EAAE,CAAC;EACXgB,oBAAoB,EAAE;AACxB,CAAC,EACD;EACEzL,IAAI,EAAE,aAAa;EACnB8H,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBiH,aAAa,EAAE;AACjB,CAAC,EACD;EACE1L,IAAI,EAAE,oBAAoB;EAC1B8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBoH,kBAAkB,EAAE,CAAC;EACrBF,oBAAoB,EAAE;AACxB,CAAC,EACD;EACEzL,IAAI,EAAE,kBAAkB;EACxB8H,MAAM,EAAE1D,QAAQ,CAACI,QAAQ;EACzBsE,QAAQ,EAAE,CAAC;EACX2C,oBAAoB,EAAE;AACxB,CAAC,EACD;EACEzL,IAAI,EAAE,YAAY;EAClB8H,MAAM,EAAE1D,QAAQ,CAACG,MAAM;EACvBmE,QAAQ,EAAE,CAAC;EACX+C,oBAAoB,EAAE;AACxB,CAAC,EACD;EACEzL,IAAI,EAAE,eAAe;EACrB8H,MAAM,EAAE1D,QAAQ,CAACK,IAAI;EACrBkE,SAAS,EAAE,CAAC;EACZ8C,oBAAoB,EAAE;AACxB,CAAC,CACF;AACD;AACA;AACA,SAASG,UAAUA,CAACC,IAAI,EAAE;EACxB,OAAOA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,IAAI,CAAC9L,KAAK,CAAC,CAAC,CAAC;AACrD;AACA,SAASiM,YAAYA,CAACC,aAAa,EAAE;EACnC,IAAMC,KAAK,GAAAxM,kBAAA,CAAOuM,aAAa,CAAC,CAAC,CAAC;EAClC,KAAK,IAAIxM,CAAC,GAAGyM,KAAK,CAAC1O,MAAM,GAAG,CAAC,EAAEiC,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACzC,IAAM0M,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAI7M,CAAC,GAAG,CAAC,CAAC,CAAC;IAAC,IAAA8M,IAAA,GACvB,CAACL,KAAK,CAACC,CAAC,CAAC,EAAED,KAAK,CAACzM,CAAC,CAAC,CAAC;IAA1CyM,KAAK,CAACzM,CAAC,CAAC,GAAA8M,IAAA;IAAEL,KAAK,CAACC,CAAC,CAAC,GAAAI,IAAA;EACrB;EACA,OAAOL,KAAK;AACd;AACA,SAASM,oBAAoBA,CAACC,WAAW,EAAE;EACzC,IAAMC,OAAO,GAAGnO,MAAM,CAACmO,OAAO,CAACD,WAAW,CAAC;EAC3C,IAAME,WAAW,GAAGD,OAAO,CAACE,MAAM,CAAC,UAACC,GAAG,EAAAC,KAAA;IAAA,IAAAC,KAAA,GAAAzN,cAAA,CAAAwN,KAAA;MAAGE,CAAC,GAAAD,KAAA;MAAEE,MAAM,GAAAF,KAAA;IAAA,OAAMF,GAAG,GAAGI,MAAM;EAAA,GAAE,CAAC,CAAC;EACzE,IAAMzQ,CAAC,GAAG4P,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGK,WAAW;EACrC,IAAIO,UAAU,GAAG,CAAC;EAElB,SAAAC,EAAA,MAAAC,QAAA,GAA4BV,OAAO,EAAAS,EAAA,GAAAC,QAAA,CAAA5P,MAAA,EAAA2P,EAAA,IAAE;IAAhC,IAAAE,WAAA,GAAA/N,cAAA,CAAA8N,QAAA,CAAAD,EAAA;MAAOG,GAAG,GAAAD,WAAA;MAAEJ,MAAM,GAAAI,WAAA;IACrBH,UAAU,IAAID,MAAM;IACpB,IAAIzQ,CAAC,IAAI0Q,UAAU,EAAE,OAAOI,GAAG;EACjC;AACF;AACA,SAASC,YAAYA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EACtCD,QAAQ,CAAC;IAAEE,IAAI,EAAEtI,OAAO,CAACmB,aAAa;IAAEoH,OAAO,EAAEF;EAAO,CAAC,CAAC;AAC5D;AACA,SAASG,WAAWA,CAACJ,QAAQ,EAAE;EAC7BD,YAAY,CAACC,QAAQ,EAAE5J,OAAO,CAACE,IAAI,CAAC;AACtC;AACA,SAAS+J,iBAAiBA,CAACL,QAAQ,EAAE;EACnCD,YAAY,CAACC,QAAQ,EAAE5J,OAAO,CAACK,WAAW,CAAC;AAC7C;AACA,SAAS6J,gBAAgBA,CAACN,QAAQ,EAAE;EAClCD,YAAY,CAACC,QAAQ,EAAE5J,OAAO,CAACM,SAAS,CAAC;AAC3C;AACA,SAAS6J,YAAYA,CAACP,QAAQ,EAAE;EAC9BD,YAAY,CAACC,QAAQ,EAAE5J,OAAO,CAACO,KAAK,CAAC;AACvC;AACA,SAAS6J,YAAYA,CAACR,QAAQ,EAAE;EAC9BD,YAAY,CAACC,QAAQ,EAAE5J,OAAO,CAACC,IAAI,CAAC;AACtC;AAEA,SAASoK,gBAAgBA,CAACC,KAAK,EAAE;EAC/B,IAAMC,gBAAgB,GAAGD,KAAK,CAACrD,mBAAmB,IAAI,CAAC;EAEvD,IAAMuD,UAAU,GAAG;IACjBC,IAAI,EAAE,EAAE;IACRC,MAAM,EAAE,EAAE;IACVC,GAAG,EAAE,EAAE;IACPC,KAAK,EAAE;EACT,CAAC;EAED,IAAMC,iBAAiB,GAAG;IACxBC,MAAM,EAAE,CAAC;IACTC,QAAQ,EAAE,GAAG;IACbC,IAAI,EAAE,GAAG;IACTC,MAAM,EAAE,GAAG;IACXC,SAAS,EAAE;EACb,CAAC;EAED,IAAMC,gBAAgB,GAAGb,KAAK,CAACc,SAAS,CAACC,SAAS,CAACC,GAAG,CAAC,UAACC,KAAK,EAAK;IAAA,IAAAC,YAAA,EAAAC,qBAAA;IAChE,IAAQ3B,IAAI,GAAWyB,KAAK,CAApBzB,IAAI;MAAE4B,IAAI,GAAKH,KAAK,CAAdG,IAAI;IAElB,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACtP,IAAI,EAAE;MACvBuP,OAAO,CAACC,IAAI,CAAC,4CAA4C,EAAEL,KAAK,CAAC;MACjE,OAAOA,KAAK;IACd;IAEA,IAAMM,SAAS,GAAGrB,UAAU,CAACV,IAAI,CAAC,IAAI,CAAC;IACvC,IAAMgC,QAAQ,GAAGJ,IAAI,CAACI,QAAQ,IAAI,CAAC;IACnC,IAAMC,WAAW,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAAClC,IAAI,CAAC,GAAGgC,QAAQ,GAAG,CAAC,GAAG,CAAC;IAExE,IAAM5H,MAAM,GAAG,EAAAsH,YAAA,GAAAE,IAAI,CAACxH,MAAM,cAAAsH,YAAA,gBAAAC,qBAAA,GAAXD,YAAA,CAAaS,WAAW,cAAAR,qBAAA,uBAAxBA,qBAAA,CAAAlR,IAAA,CAAAiR,YAA2B,CAAC,KAAI,QAAQ;IACvD,IAAMU,gBAAgB,GAAGrB,iBAAiB,CAAC3G,MAAM,CAAC,IAAI,CAAC;IAEvD,IAAMiI,KAAK,GAAG3D,IAAI,CAAC4D,KAAK,CACtB,CAACP,SAAS,GAAGE,WAAW,IAAIG,gBAAgB,GAAG3B,gBACjD,CAAC;IAED,OAAApP,aAAA,CAAAA,aAAA,KACKoQ,KAAK;MACRG,IAAI,EAAAvQ,aAAA,CAAAA,aAAA,KACCuQ,IAAI;QACPS,KAAK,EAALA;MAAK;IACN;EAEL,CAAC,CAAC;EAEF,OAAAhR,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRc,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;MAClBC,SAAS,EAAEF;IAAgB,EAC5B;IACDkB,GAAG,qCAAAC,MAAA,CAAAxQ,kBAAA,CAAwCwO,KAAK,CAAC+B,GAAG;EAAC;AAEzD;AACA,SAASE,eAAeA,CAACC,GAAG,EAAE;EAC5B,OAAArR,aAAA,CAAAA,aAAA,KACKqR,GAAG;IACNC,oBAAoB,EAAE;EAAI;AAE9B;;AAEA;AACA;AACA,SAASC,mBAAmBA,CAACpC,KAAK,EAAE;EAClC,IAAMjG,UAAU,GAAGiG,KAAK,CAACjG,UAAU;EAEnC,IAAI,CAACA,UAAU,IAAI,CAACZ,sBAAsB,CAACY,UAAU,CAAC,EAAE;IACtDsH,OAAO,CAACgB,KAAK,CACX,mDAAmD,EACnDtI,UACF,CAAC;IACD,OAAOiG,KAAK;EACd;EAEA,IAAMsC,SAAS,GAAGnJ,sBAAsB,CAACY,UAAU,CAAC;EACpD,IAAMwI,IAAI,GAAG,EAAE;;EAEf;EACA,IAAMC,cAAc,GAAGnI,QAAQ,CAAC7J,MAAM,CACpC,UAAC2P,IAAI;IAAA,OAAKA,IAAI,CAACvG,MAAM,KAAK1D,QAAQ,CAACE,UAAU;EAAA,CAC/C,CAAC;EAAC,IAAAqM,SAAA,GAAAxT,0BAAA,CACiBuT,cAAc;IAAAE,KAAA;EAAA;IAAjC,KAAAD,SAAA,CAAAhT,CAAA,MAAAiT,KAAA,GAAAD,SAAA,CAAA/S,CAAA,IAAAC,IAAA,GAAmC;MAAA,IAAxBwQ,KAAI,GAAAuC,KAAA,CAAA9S,KAAA;MACb2S,IAAI,CAAC5R,IAAI,CAACgS,kBAAkB,CAACxC,KAAI,CAACrO,IAAI,CAAC,CAAC;IAC1C;;IAEA;EAAA,SAAA8Q,GAAA;IAAAH,SAAA,CAAAvT,CAAA,CAAA0T,GAAA;EAAA;IAAAH,SAAA,CAAA5S,CAAA;EAAA;EACA,IAAMgT,cAAc,GAAGxI,QAAQ,CAAC7J,MAAM,CACpC,UAAC2P,IAAI;IAAA,OAAKA,IAAI,CAACvG,MAAM,KAAK1D,QAAQ,CAACC,UAAU;EAAA,CAC/C,CAAC;EAAC,IAAA2M,UAAA,GAAA7T,0BAAA,CACiB4T,cAAc;IAAAE,MAAA;EAAA;IAAjC,KAAAD,UAAA,CAAArT,CAAA,MAAAsT,MAAA,GAAAD,UAAA,CAAApT,CAAA,IAAAC,IAAA,GAAmC;MAAA,IAAxBwQ,MAAI,GAAA4C,MAAA,CAAAnT,KAAA;MACb,KAAK,IAAI2B,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,CAAC,EAAEA,GAAC,EAAE,EAAE;QAC1BgR,IAAI,CAAC5R,IAAI,CAACgS,kBAAkB,CAACxC,MAAI,CAACrO,IAAI,CAAC,CAAC;MAC1C;IACF;;IAEA;EAAA,SAAA8Q,GAAA;IAAAE,UAAA,CAAA5T,CAAA,CAAA0T,GAAA;EAAA;IAAAE,UAAA,CAAAjT,CAAA;EAAA;EACA,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+Q,SAAS,CAAChJ,sBAAsB,EAAE/H,CAAC,EAAE,EAAE;IACzD,IAAM4O,IAAI,GAAG6C,kBAAkB,CAAChD,KAAK,EAAE;MAAEpG,MAAM,EAAE1D,QAAQ,CAACC;IAAW,CAAC,CAAC;IACvE,IAAIgK,IAAI,EAAEoC,IAAI,CAAC5R,IAAI,CAACwP,IAAI,CAAC;EAC3B;;EAEA;EACA,IAAM8C,YAAY,GAAGnF,YAAY,CAACyE,IAAI,CAAC;;EAEvC;EACA,OAAA1R,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRkD,QAAQ,EAAArS,aAAA,CAAAA,aAAA,KACHmP,KAAK,CAACkD,QAAQ;MACjBX,IAAI,EAAEU;IAAY,EACnB;IACDlB,GAAG,EAAAvQ,kBAAA,CAAMwO,KAAK,CAAC+B,GAAG;EAAC;AAEvB;AAEA,SAASoB,wBAAwBA,CAACnD,KAAK,EAAE;EACvC,IAAMjG,UAAU,GAAGiG,KAAK,CAACjG,UAAU;EAEnC,IAAI,CAACA,UAAU,IAAI,CAACZ,sBAAsB,CAACY,UAAU,CAAC,EAAE;IACtDsH,OAAO,CAACgB,KAAK,CAAC,gCAAgC,EAAEtI,UAAU,CAAC;IAC3D,OAAOiG,KAAK;EACd;EAEA,IAAMsC,SAAS,GAAGnJ,sBAAsB,CAACY,UAAU,CAAC;EAEpD,OAAAlJ,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRoD,IAAI,EAAEpD,KAAK,CAACoD,IAAI,GAAGd,SAAS,CAACjJ,YAAY;IACzCgK,cAAc,EAAErD,KAAK,CAACqD,cAAc,GAAGf,SAAS,CAAChJ,sBAAsB;IACvEgK,IAAI,EAAE,CAACtD,KAAK,CAACsD,IAAI,IAAI,CAAC,KAAKhB,SAAS,CAAC/I,YAAY,IAAI,CAAC,CAAC;IACvDoD,mBAAmB,EACjB,CAACqD,KAAK,CAACrD,mBAAmB,IAAI,CAAC,KAC9B2F,SAAS,CAAC9I,2BAA2B,IAAI,CAAC,CAAC;IAC9C+J,iBAAiB,EACf,CAACvD,KAAK,CAACuD,iBAAiB,IAAI,CAAC,KAC5BjB,SAAS,CAAC7I,yBAAyB,IAAI,CAAC,CAAC;IAC5C+J,SAAS,EAAExD,KAAK,CAACwD,SAAS,GAAGlB,SAAS,CAAClJ,iBAAiB;IACxDqK,MAAM,EAAEzD,KAAK,CAACyD,MAAM,GAAGnB,SAAS,CAAClJ,iBAAiB;IAClDsK,qBAAqB,EACnB,CAAC1D,KAAK,CAAC0D,qBAAqB,IAAI,CAAC,KAChCpB,SAAS,CAAC5I,6BAA6B,IAAI,CAAC;EAAC;AAEpD;AAEA,SAASiK,cAAcA,CAAC3D,KAAK,EAAE4D,eAAe,EAAE;EAC9CvC,OAAO,CAACU,GAAG,CAAC,yBAAyB,EAAE6B,eAAe,CAAC;EAEvD,IAAI,CAACvT,MAAM,CAACwT,MAAM,CAACnN,MAAM,CAAC,CAACgL,QAAQ,CAACkC,eAAe,CAAC,EAAE;IACpDvC,OAAO,CAACgB,KAAK,CAAC,yCAAyC,EAAEuB,eAAe,CAAC;IACzE,OAAO5D,KAAK;EACd;EAEA,OAAAnP,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACR8D,YAAY,EAAEF;EAAe;AAEjC;AACA,SAASG,sBAAsBA,CAAC/D,KAAK,EAAE;EACrC,IAAMgE,KAAK,GAAGhE,KAAK,CAAC8D,YAAY;EAEhC,QAAQE,KAAK;IACX,KAAKtN,MAAM,CAACE,oBAAoB;MAC9B,OAAA/F,aAAA,CAAAA,aAAA,KACKmP,KAAK;QACR+B,GAAG,GAAG,yBAAyB,EAAAC,MAAA,CAAAxQ,kBAAA,CAAKwO,KAAK,CAAC+B,GAAG;MAAC;IAGlD,KAAKrL,MAAM,CAACK,cAAc;MACxBsK,OAAO,CAACU,GAAG,CAAC,mCAAmC,CAAC;MAChD,OAAOkC,qBAAqB,CAACjE,KAAK,CAAC;IAErC,KAAKtJ,MAAM,CAACtB,aAAa;MACvBiM,OAAO,CAACU,GAAG,CAAC,kCAAkC,CAAC;MAC/C,OAAOmC,qBAAqB,CAAClE,KAAK,CAAC;IAErC,KAAKtJ,MAAM,CAACG,qBAAqB;MAC/BwK,OAAO,CAACU,GAAG,CAAC,4CAA4C,CAAC;MACzD,OAAOoC,sBAAsB,CAACnE,KAAK,EAAE9J,QAAQ,CAACM,MAAM,CAAC;IAEvD,KAAKE,MAAM,CAACxB,cAAc;MACxBmM,OAAO,CAACU,GAAG,CAAC,oCAAoC,CAAC;MACjD,OAAOoC,sBAAsB,CAACnE,KAAK,CAAC;IAEtC,KAAKtJ,MAAM,CAACpB,eAAe;MACzB+L,OAAO,CAACU,GAAG,CAAC,oCAAoC,CAAC;MACjD,OAAOqC,uBAAuB,CAACpE,KAAK,CAAC;IAEvC,KAAKtJ,MAAM,CAACvB,YAAY;MACtBkM,OAAO,CAACU,GAAG,CAAC,iCAAiC,CAAC;MAC9C,OAAOsC,oBAAoB,CAACrE,KAAK,CAAC;IAEpC,KAAKtJ,MAAM,CAACzB,IAAI;MACd,OAAOqP,iBAAiB,CAACtE,KAAK,CAAC;IAEjC,KAAKtJ,MAAM,CAACM,MAAM;MAChB,OAAOuN,qBAAqB,CAACvE,KAAK,EAAEA,KAAK,CAACwE,WAAW,CAAC;IAExD;MACE,OAAOxE,KAAK;EAChB;AACF;AACA,SAASyE,QAAQA,CAACzE,KAAK,EAAE0E,KAAK,EAAE;EAAA,IAAAC,YAAA;EAC9B,IAAMC,KAAK,GAAG5E,KAAK,CAACc,SAAS,CAAC8D,KAAK;EAEnC,IAAI,CAACA,KAAK,IAAIF,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAIE,KAAK,CAACtV,MAAM,EAAE;IAChD+R,OAAO,CAACgB,KAAK,CAAC,qBAAqB,EAAEqC,KAAK,CAAC;IAC3C,OAAO1E,KAAK;EACd;EAEA,IAAM6E,UAAU,GAAGD,KAAK,CAACF,KAAK,CAAC;EAC/B,IAAMI,OAAO,GAAGD,UAAU,CAACE,IAAI;EAC/B,IAAMC,QAAQ,GAAGrL,OAAO,CAACmL,OAAO,CAAC;EAEjC,IAAI,CAACE,QAAQ,IAAI,CAACA,QAAQ,CAAClL,OAAO,EAAE;IAClCuH,OAAO,CAACgB,KAAK,CAAC,gCAAgC,EAAEyC,OAAO,CAAC;IACxD,OAAO9E,KAAK;EACd;EAEA,OAAO+D,sBAAsB,CAAAlT,aAAA,CAAAA,aAAA,KACxBmP,KAAK;IACRiF,KAAK,EAAE,EAAAN,YAAA,GAAC3E,KAAK,CAACiF,KAAK,cAAAN,YAAA,cAAAA,YAAA,GAAI,CAAC,IAAI,CAAC;IAC7BH,WAAW,EAAEK,UAAU;IAAE;IACzBf,YAAY,EAAEkB,QAAQ,CAAClL,OAAO;IAC9BiI,GAAG,kBAAAC,MAAA,CAAkB8C,OAAO,GAAA9C,MAAA,CAAAxQ,kBAAA,CAAOwO,KAAK,CAAC+B,GAAG,EAAC;IAC7CjB,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;MAClB8D,KAAK,EAAE;IAAE;EACV,EACF,CAAC;AACJ;AACA,SAASV,qBAAqBA,CAAClE,KAAK,EAAE;EACpC,IAAMkF,QAAQ,GAAG,EAAE;EAAC,IAAAC,KAAA,YAAAA,MAAA,EAEQ;MAC1B,IAAMhF,IAAI,GAAG6C,kBAAkB,CAAChD,KAAK,CAAC;MACtC,IAAI,CAACG,IAAI;MACT,IAAI+E,QAAQ,CAACE,IAAI,CAAC,UAACC,QAAQ;QAAA,OAAKA,QAAQ,CAACvT,IAAI,KAAKqO,IAAI,CAACrO,IAAI;MAAA,EAAC;MAC5DoT,QAAQ,CAACvU,IAAI,CAACwP,IAAI,CAAC;IACrB,CAAC;IAAAmF,IAAA;EALD,OAAOJ,QAAQ,CAAC5V,MAAM,GAAG,CAAC;IAAAgW,IAAA,GAAAH,KAAA;IAAA,IAAAG,IAAA,QAEb;EAAS;EAKtB,OAAAzU,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRc,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;MAClByE,KAAK,EAAEL;IAAQ;EAChB;AAEL;AACA,SAASd,uBAAuBA,CAACpE,KAAK,EAAE;EACtC,IAAMwF,eAAe,GAAG,EAAE;EAC1B,IAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC3B,IAAIC,QAAQ,GAAG,CAAC;EAEhB,OAAOH,eAAe,CAAClW,MAAM,GAAG,CAAC,IAAIqW,QAAQ,GAAG,EAAE,EAAE;IAClDA,QAAQ,EAAE;IAEV,IAAMvF,MAAM,GAAGwF,oBAAoB,CAAC5F,KAAK,CAAC;IAC1C,IAAI,CAACI,MAAM,EAAE;IAEb,IAAIqF,SAAS,CAACI,GAAG,CAACzF,MAAM,CAACtO,IAAI,CAAC,EAAE;IAEhC0T,eAAe,CAAC7U,IAAI,CAACyP,MAAM,CAAC;IAC5BqF,SAAS,CAACK,GAAG,CAAC1F,MAAM,CAACtO,IAAI,CAAC;EAC5B;EAEA,IAAI0T,eAAe,CAAClW,MAAM,GAAG,CAAC,EAAE;IAC9B+R,OAAO,CAACC,IAAI,CAAC,sDAAsD,CAAC;EACtE;EAEA,OAAAzQ,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRc,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;MAClBiF,OAAO,EAAEP;IAAe;EACzB;AAEL;AACA,SAASrB,sBAAsBA,CAACnE,KAAK,EAAiB;EAAA,IAAfpG,MAAM,GAAA9I,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,IAAI;EAClD,IAAMmV,QAAQ,GAAG,EAAE;EACnB,IAAMC,SAAS,GAAG,CAAC;EAAC,IAAAC,MAAA,YAAAA,OAAA,EAEgB;IAClC,IAAM7F,KAAK,GAAG8F,mBAAmB,CAACpG,KAAK,EAAE;MAAEpG,MAAM,EAANA;IAAO,CAAC,CAAC;;IAEpD;IACA,IAAIqM,QAAQ,CAACb,IAAI,CAAC,UAAC9W,CAAC;MAAA,OAAKA,CAAC,CAACwD,IAAI,KAAKwO,KAAK,CAACxO,IAAI;IAAA,EAAC;IAE/CmU,QAAQ,CAACtV,IAAI,CAAC2P,KAAK,CAAC;EACtB,CAAC;EAPD,OAAO2F,QAAQ,CAAC3W,MAAM,GAAG4W,SAAS;IAAA,IAAAC,MAAA,IAIiB;EAAS;EAK5D9E,OAAO,CAACU,GAAG,CAAC,2BAA2B,EAAEkE,QAAQ,CAAC;EAElD,OAAApV,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRc,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;MAClBuF,MAAM,EAAEJ;IAAQ;EACjB;AAEL;AACA,SAAS5B,oBAAoBA,CAACrE,KAAK,EAAE;EACnC,IAAMsG,YAAY,GAAG,EAAE;EACvB,IAAMb,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC3B,IAAIC,QAAQ,GAAG,CAAC;EAEhB,OAAOW,YAAY,CAAChX,MAAM,GAAG,CAAC,IAAIqW,QAAQ,GAAG,EAAE,EAAE;IAC/CA,QAAQ,EAAE;IAEV,IAAMtF,GAAG,GAAGkG,iBAAiB,CAACvG,KAAK,CAAC;IACpC,IAAI,CAACK,GAAG,EAAE;IAEV,IAAIoF,SAAS,CAACI,GAAG,CAACxF,GAAG,CAACvO,IAAI,CAAC,EAAE;IAE7BwU,YAAY,CAAC3V,IAAI,CAAC0P,GAAG,CAAC;IACtBoF,SAAS,CAACK,GAAG,CAACzF,GAAG,CAACvO,IAAI,CAAC;EACzB;EAEA,IAAIwU,YAAY,CAAChX,MAAM,GAAG,CAAC,EAAE;IAC3B+R,OAAO,CAACC,IAAI,CAAC,mDAAmD,CAAC;EACnE;EAEA,OAAAzQ,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRc,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;MAClB0F,IAAI,EAAEF;IAAY;EACnB;AAEL;AACA,SAASrC,qBAAqBA,CAACjE,KAAK,EAAE;EAAA,IAAAyG,oBAAA,EAAAC,qBAAA;EACpC,IAAMpD,IAAI,GAAGtD,KAAK,CAACsD,IAAI,IAAI,CAAC;EAC5B,IAAMqD,MAAM,GAAG3G,KAAK,CAAC2G,MAAM,IAAI,CAAC;EAChC,IAAM1B,KAAK,GAAGjF,KAAK,CAACiF,KAAK,IAAI,CAAC;;EAE9B;EACA,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAACvD,QAAQ,CAACuD,KAAK,CAAC,EAAE;IAChC,IAAM2B,QAAQ,GAAA/V,aAAA;MACZkU,IAAI,EAAEnQ,KAAK,CAACI;IAAU,GACnB2E,OAAO,CAAC/E,KAAK,CAACI,UAAU,CAAC,CAC7B;IACD,OAAAnE,aAAA,CAAAA,aAAA,KACKmP,KAAK;MACRc,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;QAClB8D,KAAK,EAAE,CAACgC,QAAQ,EAAEA,QAAQ,EAAEA,QAAQ;MAAC,EACtC;MACD7E,GAAG,kDAAAC,MAAA,CAAAxQ,kBAAA,CAAqDwO,KAAK,CAAC+B,GAAG;IAAC;EAEtE;;EAEA;EACA,IAAM8E,YAAY,GAAA7V,eAAA,CAAAA,eAAA,CAAAA,eAAA,KACf4D,KAAK,CAACC,UAAU,EAAG,CAAC,GACpBD,KAAK,CAACE,YAAY,EAAG,CAAC,GACtBF,KAAK,CAACG,UAAU,EAAG,CAAC,CACtB;EACD,IAAM+R,YAAY,GAAGxI,oBAAoB,CAACuI,YAAY,CAAC;EACvD,IAAME,SAAS,GAAAlW,aAAA;IACbkU,IAAI,EAAE+B;EAAY,GACfnN,OAAO,CAACmN,YAAY,CAAC,CACzB;;EAED;EACA,IAAME,QAAQ,GAAG3W,MAAM,CAACmO,OAAO,CAAC7E,OAAO,CAAC,CACrCnJ,MAAM,CAAC,UAAAyW,KAAA;IAAA,IAAAC,KAAA,GAAA9V,cAAA,CAAA6V,KAAA;MAAE7H,GAAG,GAAA8H,KAAA;IAAA,OAAM9H,GAAG,KAAK0H,YAAY;EAAA,EAAC,CACvC9F,GAAG,CAAC,UAAAmG,KAAA;IAAA,IAAAC,KAAA,GAAAhW,cAAA,CAAA+V,KAAA;MAAEpC,IAAI,GAAAqC,KAAA;MAAEC,IAAI,GAAAD,KAAA;IAAA,OAAAvW,aAAA;MAASkU,IAAI,EAAJA;IAAI,GAAKsC,IAAI;EAAA,CAAG,CAAC;;EAE7C;EACA,IAAMC,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAC/B,IAAMC,WAAW,GAAGD,UAAU,CAAC5F,QAAQ,CAACuD,KAAK,CAAC;;EAE9C;EACA,IAAMuC,gBAAgB,GACpB,EAAAf,oBAAA,GAAAzG,KAAK,CAACkD,QAAQ,CAACX,IAAI,cAAAkE,oBAAA,uBAAnBA,oBAAA,CAAqBnX,MAAM,IAAG,CAAC,IAC/B0Q,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAACkF,KAAK,CAAC,UAACtH,IAAI;IAAA,OAAKA,IAAI,CAACE,GAAG,IAAI,IAAI,IAAIF,IAAI,CAACzE,YAAY;EAAA,EAAC;EAE5E,IAAMgM,oBAAoB,GACxB,EAAAhB,qBAAA,GAAA1G,KAAK,CAACkD,QAAQ,CAACX,IAAI,cAAAmE,qBAAA,uBAAnBA,qBAAA,CAAqBpX,MAAM,IAAG,CAAC,IAC/B0Q,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAACkF,KAAK,CAAC,UAACtH,IAAI;IAAA,OAAKA,IAAI,CAAC1E,YAAY;EAAA,EAAC;EAExD,IAAMkM,aAAa,GAAGX,QAAQ,CAACxW,MAAM,CAAC,UAACoX,OAAO,EAAK;IACjD;IACA,IAAIA,OAAO,CAAC7C,IAAI,KAAKnQ,KAAK,CAACI,UAAU,IAAI,CAACuS,WAAW,EAAE,OAAO,KAAK;;IAEnE;IACA,IAAIK,OAAO,CAAC7C,IAAI,KAAKnQ,KAAK,CAACO,YAAY,IAAIqS,gBAAgB,EAAE,OAAO,KAAK;;IAEzE;IACA,IAAII,OAAO,CAAC7C,IAAI,KAAKnQ,KAAK,CAACiT,gBAAgB,IAAIH,oBAAoB,EACjE,OAAO,KAAK;IAEd,OAAO,IAAI;EACb,CAAC,CAAC;;EAEF;EACA,IAAMI,aAAa,GAAGC,4BAA4B,CAACzE,IAAI,CAAC;EACxD,IAAM0E,cAAc,GAAG,CACrB1J,oBAAoB,CAACwJ,aAAa,CAAC,EACnCxJ,oBAAoB,CAACwJ,aAAa,CAAC,CACpC;EAED,IAAMG,WAAW,GAAG,EAAE;EACtB,IAAMC,SAAS,GAAG,IAAIxC,GAAG,CAAC,CAACoB,YAAY,CAAC,CAAC;EAAC,IAAAqB,MAAA,YAAAA,OAAA,EAEL;IAAhC,IAAMvO,MAAM,GAAAwO,eAAA,CAAAC,GAAA;IACf,IAAMC,UAAU,GAAGX,aAAa,CAACnX,MAAM,CACrC,UAAC+X,CAAC;MAAA,OAAKA,CAAC,CAAC3O,MAAM,KAAKA,MAAM,IAAI,CAACsO,SAAS,CAACrC,GAAG,CAAC0C,CAAC,CAACxD,IAAI,CAAC;IAAA,CACtD,CAAC;IACD,IAAIuD,UAAU,CAAChZ,MAAM,GAAG,CAAC,EAAE;MACzB,IAAMkZ,IAAI,GAAGF,UAAU,CAACpK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGkK,UAAU,CAAChZ,MAAM,CAAC,CAAC;MACtE4Y,SAAS,CAACpC,GAAG,CAAC0C,IAAI,CAACzD,IAAI,CAAC;MACxBkD,WAAW,CAACtX,IAAI,CAAC6X,IAAI,CAAC;IACxB;EACF,CAAC;EATD,SAAAH,GAAA,MAAAD,eAAA,GAAqBJ,cAAc,EAAAK,GAAA,GAAAD,eAAA,CAAA9Y,MAAA,EAAA+Y,GAAA;IAAAF,MAAA;EAAA;;EAWnC;EACA,IAAMM,aAAa,GAAGd,aAAa,CAACnX,MAAM,CAAC,UAAC+X,CAAC;IAAA,OAAK,CAACL,SAAS,CAACrC,GAAG,CAAC0C,CAAC,CAACxD,IAAI,CAAC;EAAA,EAAC;EACzE,OAAOkD,WAAW,CAAC3Y,MAAM,GAAG,CAAC,IAAImZ,aAAa,CAACnZ,MAAM,GAAG,CAAC,EAAE;IACzD,IAAMoZ,GAAG,GAAGxK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGqK,aAAa,CAACnZ,MAAM,CAAC;IAC5D,IAAMkZ,IAAI,GAAGC,aAAa,CAACE,MAAM,CAACD,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5CR,SAAS,CAACpC,GAAG,CAAC0C,IAAI,CAACzD,IAAI,CAAC;IACxBkD,WAAW,CAACtX,IAAI,CAAC6X,IAAI,CAAC;EACxB;;EAEA;EACA,IAAMI,iBAAiB,GAAGX,WAAW,CAACR,KAAK,CAAC,UAACc,CAAC;IAAA,OAAKA,CAAC,CAAC1O,OAAO;EAAA,EAAC;EAC7D,IAAIgP,UAAU,IAAI9B,SAAS,EAAA/E,MAAA,CAAKiG,WAAW,CAAC;EAC5C,IAAIa,SAAS,GAAGnC,MAAM;EAEtB,IAAIiC,iBAAiB,IAAIjC,MAAM,GAAG,CAAC,IAAI8B,aAAa,CAACnZ,MAAM,GAAG,CAAC,EAAE;IAC/D,IAAMyZ,YAAY,GAAGN,aAAa,CAACjY,MAAM,CAAC,UAAC+X,CAAC;MAAA,OAAK,CAACL,SAAS,CAACrC,GAAG,CAAC0C,CAAC,CAACxD,IAAI,CAAC;IAAA,EAAC;IACxE,IAAIgE,YAAY,CAACzZ,MAAM,GAAG,CAAC,EAAE;MAC3B,IAAM0Z,SAAS,GAAGD,YAAY,CAACvY,MAAM,CAAC,UAAC+X,CAAC;QAAA,OAAK,CAACA,CAAC,CAAC1O,OAAO;MAAA,EAAC;MACxD,IAAMoP,MAAM,GAAGF,YAAY,CAACvY,MAAM,CAAC,UAAC+X,CAAC;QAAA,OAAKA,CAAC,CAAC1O,OAAO;MAAA,EAAC;MAEpD,IAAMqP,YAAY,GAAG,EAAE;MACvBF,SAAS,CAACjY,OAAO,CAAC,UAACwX,CAAC,EAAK;QACvB,KAAK,IAAIhX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoV,MAAM,GAAGrD,IAAI,EAAE/R,CAAC,EAAE,EAAE2X,YAAY,CAACvY,IAAI,CAAC4X,CAAC,CAAC;MAC9D,CAAC,CAAC;MACFU,MAAM,CAAClY,OAAO,CAAC,UAACwX,CAAC,EAAK;QACpBW,YAAY,CAACvY,IAAI,CAAC4X,CAAC,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC;MAEF,IAAIW,YAAY,CAAC5Z,MAAM,GAAG,CAAC,EAAE;QAC3B,IAAMkZ,KAAI,GACRU,YAAY,CAAChL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG8K,YAAY,CAAC5Z,MAAM,CAAC,CAAC;QAC/D4Y,SAAS,CAACpC,GAAG,CAAC0C,KAAI,CAACzD,IAAI,CAAC;QACxB8D,UAAU,CAAC,CAAC,CAAC,GAAGL,KAAI;QACpB,IAAI,CAACA,KAAI,CAAC3O,OAAO,EAAEiP,SAAS,GAAGnC,MAAM,GAAG,CAAC;MAC3C;IACF;EACF;;EAEA;EACA,IAAMwC,SAAS,GAAGN,UAAU,CAACpB,KAAK,CAAC,UAACc,CAAC;IAAA,OAAKA,CAAC,CAAC1O,OAAO;EAAA,EAAC;EACpD,IAAIsP,SAAS,EAAEL,SAAS,EAAE;EAE1BzH,OAAO,CAACU,GAAG,CAAC,yBAAyB,EAAE8G,UAAU,CAAC;;EAElD;EACA,IAAMO,UAAU,GAAGlL,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,CAACrJ,KAAK,CAACsD,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;EAChE,IAAMgG,SAAS,GAAGpL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGyK,UAAU,CAACvZ,MAAM,CAAC;EAE/D,IAAI4O,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGgL,UAAU,EAAE;IAC9BP,UAAU,CAACS,SAAS,CAAC,GAAGrH,eAAe,CAAC4G,UAAU,CAACS,SAAS,CAAC,CAAC;EAChE;;EAEA;EACA,IAAMC,aAAa,GAAGC,kBAAkB,CACtCxJ,KAAK,EACLlM,cAAc,CAAC2V,aAAa,EAC5B;IACEhK,OAAO,EAAEoJ;EACX,CACF,CAAC;EACD,IAAMa,YAAY,GAAGH,aAAa,CAACI,MAAM,IAAId,UAAU;EACvD,IAAMe,YAAY,GAAA/Y,aAAA,KAAQ0Y,aAAa,CAAE;EACzClI,OAAO,CAACU,GAAG,CAAC,oCAAoC,EAAE8G,UAAU,CAAC;EAC7D,OAAAhY,aAAA,CAAAA,aAAA,KACK+Y,YAAY;IACfjD,MAAM,EAAEmC,SAAS;IACjBhI,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJ+Y,YAAY,CAAC9I,SAAS;MACzB8D,KAAK,EAAE8E;IAAY;EACpB;AAEL;AAEA,SAASG,QAAQA,CAAC7J,KAAK,EAAE0E,KAAK,EAAE;EAC9B,IAAMV,KAAK,GAAGhE,KAAK,CAAC8D,YAAY;EAChC,IAAMhD,SAAS,GAAAjQ,aAAA,KAAQmP,KAAK,CAACc,SAAS,CAAE;EAExC,IAAIgJ,eAAe,GAAG,IAAI;EAE1B,IAAIhJ,SAAS,CAACyE,KAAK,IAAIb,KAAK,GAAG5D,SAAS,CAACyE,KAAK,CAACjW,MAAM,EAAE;IACrDwa,eAAe,GAAG,OAAO;EAC3B,CAAC,MAAM,IAAIhJ,SAAS,CAACC,SAAS,IAAI2D,KAAK,GAAG5D,SAAS,CAACC,SAAS,CAACzR,MAAM,EAAE;IACpEwa,eAAe,GAAG,WAAW;EAC/B,CAAC,MAAM,IACLhJ,SAAS,CAACiJ,aAAa,IACvBrF,KAAK,GAAG5D,SAAS,CAACiJ,aAAa,CAACza,MAAM,EACtC;IACAwa,eAAe,GAAG,eAAe;EACnC,CAAC,MAAM;IACLzI,OAAO,CAACgB,KAAK,CAAC,qBAAqB,EAAEqC,KAAK,CAAC;IAC3C,OAAO1E,KAAK;EACd;EAEA,IAAMgK,WAAW,GAAGlJ,SAAS,CAACgJ,eAAe,CAAC;EAC9C,IAAM7I,KAAK,GAAG+I,WAAW,CAACtF,KAAK,CAAC;;EAEhC;EACA,IAAMuF,UAAU,GACdH,eAAe,KAAK,WAAW,GAC3B7I,KAAK,CAACG,IAAI,GACV0I,eAAe,KAAK,eAAe,GACnC7I,KAAK,CAACrR,KAAK,GACXqR,KAAK;EAEX,IAAI,CAACgJ,UAAU,IAAI,CAACA,UAAU,CAACnY,IAAI,EAAE;IACnCuP,OAAO,CAACC,IAAI,CAAC,4BAA4B,EAAE2I,UAAU,CAAC;EACxD;EAEA,IAAI,CAACA,UAAU,EAAE;IACf5I,OAAO,CAACgB,KAAK,CAAC,yBAAyB,EAAEqC,KAAK,CAAC;IAC/C,OAAO1E,KAAK;EACd;;EAEA;EACA,IAAI4J,YAAY,GAAG5J,KAAK;EACxB,IAAIgE,KAAK,KAAKtN,MAAM,CAACzB,IAAI,EAAE;IAAA,IAAAiV,WAAA;IACzB,IAAMrI,KAAK,GAAG,EAAAqI,WAAA,GAAAjJ,KAAK,CAACG,IAAI,cAAA8I,WAAA,uBAAVA,WAAA,CAAYrI,KAAK,MAAKmE,SAAS,GAAG/E,KAAK,CAACG,IAAI,CAACS,KAAK,GAAG,EAAE;IACrER,OAAO,CAACU,GAAG,6BAAAC,MAAA,CACmBiI,UAAU,CAACnY,IAAI,eAAAkQ,MAAA,CAAYH,KAAK,sBAAAG,MAAA,CAAmBhC,KAAK,CAACoD,IAAI,CAC3F,CAAC;IACD,IAAM+G,OAAO,GAAGC,eAAe,CAACpK,KAAK,EAAE6B,KAAK,EAAE,MAAM,CAAC;IACrD,IAAIsI,OAAO,KAAKnK,KAAK,EAAE;MACrBqB,OAAO,CAACC,IAAI,CAAC,kCAAkC,CAAC;MAChD,OAAOtB,KAAK;IACd;IACA4J,YAAY,GAAGO,OAAO;EACxB;;EAEA;EACA,IAAME,eAAe,GAAAxZ,aAAA,CAAAA,aAAA,KAChB+Y,YAAY,CAAC1G,QAAQ;IACxBX,IAAI,KAAAP,MAAA,CAAAxQ,kBAAA,CAAMoY,YAAY,CAAC1G,QAAQ,CAACX,IAAI,IAAE0H,UAAU;EAAC,EAClD;;EAED;EACA,IAAMK,gBAAgB,GAAAzZ,aAAA,CAAAA,aAAA,KACjB+Y,YAAY,CAAC9I,SAAS,OAAA9P,eAAA,KACxB8Y,eAAe,EAAGE,WAAW,CAACxZ,MAAM,CAAC,UAACsO,CAAC,EAAEvN,CAAC;IAAA,OAAKA,CAAC,KAAKmT,KAAK;EAAA,EAAC,EAC7D;;EAED;EACA,IAAI6F,QAAQ,GAAA1Z,aAAA,CAAAA,aAAA,KACP+Y,YAAY;IACf1G,QAAQ,EAAEmH,eAAe;IACzBvJ,SAAS,EAAEwJ,gBAAgB;IAC3BvI,GAAG,mBAAAC,MAAA,CAAmBiI,UAAU,CAACnY,IAAI,GAAAkQ,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAAC7H,GAAG;EAAC,EAC9D;EAEDwI,QAAQ,GAAGf,kBAAkB,CAACe,QAAQ,EAAEzW,cAAc,CAACC,WAAW,EAAE;IAClE0L,OAAO,EAAEwK;EACX,CAAC,CAAC;;EAEF;EACA,IAAIjG,KAAK,KAAKtN,MAAM,CAACtB,aAAa,EAAE;IAClC,IAAMoV,OAAO,GAAGR,WAAW,CAACxZ,MAAM,CAAC,UAACsO,CAAC,EAAEvN,CAAC;MAAA,OAAKA,CAAC,KAAKmT,KAAK;IAAA,EAAC;IAEzD6F,QAAQ,GAAA1Z,aAAA,CAAAA,aAAA,KACH0Z,QAAQ;MACXE,SAAS,KAAAzI,MAAA,CAAAxQ,kBAAA,CAAO+Y,QAAQ,CAACE,SAAS,IAAI,EAAE,GAAAjZ,kBAAA,CAAMgZ,OAAO,EAAC;MACtD1J,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJ0Z,QAAQ,CAACzJ,SAAS,OAAA9P,eAAA,KACpB8Y,eAAe,EAAG,EAAE;IACtB,EACF;;IAED;IACAzI,OAAO,CAACU,GAAG,8BAAAC,MAAA,CAAoBiI,UAAU,CAACnY,IAAI,aAAAkQ,MAAA,CAAU8H,eAAe,MAAG,CAAC;IAE3ES,QAAQ,GAAGxG,sBAAsB,CAC/BJ,cAAc,CAAC4G,QAAQ,EAAE7T,MAAM,CAACK,cAAc,CAChD,CAAC;EACH;EAEA,OAAOwT,QAAQ;AACjB;AACA,SAASG,SAASA,CAAC1K,KAAK,EAAE0E,KAAK,EAAE;EAC/B,IAAMV,KAAK,GAAGhE,KAAK,CAAC8D,YAAY;EAChC,IAAMhD,SAAS,GAAAjQ,aAAA,KAAQmP,KAAK,CAACc,SAAS,CAAE;;EAExC;EACA,IAAIgJ,eAAe,GAAG,IAAI;EAC1B,IAAIhJ,SAAS,CAACuF,MAAM,IAAI3B,KAAK,GAAG5D,SAAS,CAACuF,MAAM,CAAC/W,MAAM,EAAE;IACvDwa,eAAe,GAAG,QAAQ;EAC5B,CAAC,MAAM,IAAIhJ,SAAS,CAACC,SAAS,IAAI2D,KAAK,GAAG5D,SAAS,CAACC,SAAS,CAACzR,MAAM,EAAE;IACpEwa,eAAe,GAAG,WAAW;EAC/B,CAAC,MAAM,IACLhJ,SAAS,CAACiJ,aAAa,IACvBrF,KAAK,GAAG5D,SAAS,CAACiJ,aAAa,CAACza,MAAM,EACtC;IACAwa,eAAe,GAAG,eAAe;EACnC,CAAC,MAAM;IACLzI,OAAO,CAACgB,KAAK,CAAC,sBAAsB,EAAEqC,KAAK,CAAC;IAC5C,OAAO1E,KAAK;EACd;EAEA,IAAMgK,WAAW,GAAGlJ,SAAS,CAACgJ,eAAe,CAAC;EAC9C,IAAM7I,KAAK,GAAG+I,WAAW,CAACtF,KAAK,CAAC;;EAEhC;EACA,IAAMiG,WAAW,GACfb,eAAe,KAAK,WAAW,GAC3B7I,KAAK,CAACG,IAAI,GACV0I,eAAe,KAAK,eAAe,GACnC7I,KAAK,CAACrR,KAAK,GACXqR,KAAK;EACX,IAAI,CAAC0J,WAAW,EAAE;IAChBtJ,OAAO,CAACgB,KAAK,CAAC,0BAA0B,EAAEqC,KAAK,CAAC;IAChD,OAAO1E,KAAK;EACd;;EAEA;EACA,IAAI4J,YAAY,GAAG5J,KAAK;EACxB,IAAIgE,KAAK,KAAKtN,MAAM,CAACzB,IAAI,EAAE;IACzB,IAAM2V,UAAU,GAAG3J,KAAK,CAACY,KAAK,IAAI,EAAE;IACpC,IAAMgJ,YAAY,GAAGT,eAAe,CAACpK,KAAK,EAAE4K,UAAU,EAAE,OAAO,CAAC;IAChE,IAAIC,YAAY,KAAK7K,KAAK,EAAE,OAAOA,KAAK,CAAC,CAAC;IAC1C4J,YAAY,GAAGiB,YAAY;EAC7B;;EAEA;EACAjB,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;IACfkB,SAAS,KAAA9I,MAAA,CAAAxQ,kBAAA,CAAMoY,YAAY,CAACkB,SAAS,IAAEH,WAAW;EAAC,EACpD;;EAED;EACA7J,SAAS,CAACgJ,eAAe,CAAC,GAAGE,WAAW,CAACxZ,MAAM,CAAC,UAACsO,CAAC,EAAEvN,CAAC;IAAA,OAAKA,CAAC,KAAKmT,KAAK;EAAA,EAAC;;EAEtE;EACA,IAAMqG,eAAe,GAAG,CACtBrU,MAAM,CAACG,qBAAqB,EAC5BH,MAAM,CAACxB,cAAc,CACtB,CAACwM,QAAQ,CAACsC,KAAK,CAAC;EAEjB,IAAIgH,gBAAgB,GAAGpB,YAAY,CAACa,SAAS;EAC7C,IAAIM,eAAe,EAAE;IACnBC,gBAAgB,MAAAhJ,MAAA,CAAAxQ,kBAAA,CACVwZ,gBAAgB,IAAI,EAAE,GAAAxZ,kBAAA,CACvBsP,SAAS,CAACuF,MAAM,CAAC7V,MAAM,CAAC,UAACsO,CAAC,EAAEvN,CAAC;MAAA,OAAKA,CAAC,KAAKmT,KAAK;IAAA,EAAC,EAClD;IACD5D,SAAS,CAACuF,MAAM,GAAG,EAAE;EACvB;;EAEA;EACA,IAAMkE,QAAQ,GAAA1Z,aAAA,CAAAA,aAAA,KACT+Y,YAAY;IACfa,SAAS,EAAEO,gBAAgB;IAAE;IAC7BlK,SAAS,EAATA,SAAS;IACTiB,GAAG,oBAAAC,MAAA,CAAoB2I,WAAW,CAAC7Y,IAAI,GAAAkQ,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAAC7H,GAAG;EAAC,EAChE;;EAED;EACA,IAAMkJ,cAAc,GAAGzB,kBAAkB,CACvCe,QAAQ,EACRzW,cAAc,CAACE,YAAY,EAC3B;IAAEsM,KAAK,EAAEqK;EAAY,CACvB,CAAC;;EAED;EACA,IAAII,eAAe,EAAE;IACnB,OAAOhH,sBAAsB,CAC3BJ,cAAc,CAACsH,cAAc,EAAEvU,MAAM,CAACK,cAAc,CACtD,CAAC;EACH;EAEA,OAAOkU,cAAc;AACvB;AAEA,SAASC,UAAUA,CAAClL,KAAK,EAAE0E,KAAK,EAAE;EAAA,IAAAyG,qBAAA;EAChC,IAAMnH,KAAK,GAAGhE,KAAK,CAAC8D,YAAY;EAChC,IAAMhD,SAAS,GAAAjQ,aAAA,KAAQmP,KAAK,CAACc,SAAS,CAAE;;EAExC;EACA,IAAIgJ,eAAe,GAAG,IAAI;EAC1B,IAAIE,WAAW,GAAG,IAAI;EAEtB,IAAIlJ,SAAS,CAACiF,OAAO,IAAIrB,KAAK,GAAG5D,SAAS,CAACiF,OAAO,CAACzW,MAAM,EAAE;IACzDwa,eAAe,GAAG,SAAS;IAC3BE,WAAW,GAAGlJ,SAAS,CAACiF,OAAO;EACjC,CAAC,MAAM,IAAIjF,SAAS,CAACC,SAAS,IAAI2D,KAAK,GAAG5D,SAAS,CAACC,SAAS,CAACzR,MAAM,EAAE;IACpEwa,eAAe,GAAG,WAAW;IAC7BE,WAAW,GAAGlJ,SAAS,CAACC,SAAS;EACnC,CAAC,MAAM,IACLiD,KAAK,KAAKtN,MAAM,CAAChC,UAAU,IAC3BoM,SAAS,CAACiJ,aAAa,IACvB,EAAAoB,qBAAA,GAAArK,SAAS,CAACiJ,aAAa,CAACrF,KAAK,CAAC,cAAAyG,qBAAA,uBAA9BA,qBAAA,CAAgC3L,IAAI,MAAK,QAAQ,EACjD;IACAsK,eAAe,GAAG,eAAe;IACjCE,WAAW,GAAGlJ,SAAS,CAACiJ,aAAa;EACvC,CAAC,MAAM;IACL1I,OAAO,CAACgB,KAAK,CAAC,uBAAuB,EAAEqC,KAAK,CAAC;IAC7C,OAAO1E,KAAK;EACd;EAEA,IAAMiB,KAAK,GAAG+I,WAAW,CAACtF,KAAK,CAAC;;EAEhC;EACA,IAAI0G,YAAY;EAChB,IAAItB,eAAe,KAAK,WAAW,EAAE;IACnCsB,YAAY,GAAGnK,KAAK,CAACG,IAAI;EAC3B,CAAC,MAAM,IAAI0I,eAAe,KAAK,eAAe,EAAE;IAC9CsB,YAAY,GAAGnK,KAAK,CAACrR,KAAK;EAC5B,CAAC,MAAM;IACLwb,YAAY,GAAGnK,KAAK;EACtB;EAEA,IAAI,CAACmK,YAAY,EAAE;IACjB/J,OAAO,CAACgB,KAAK,CAAC,2BAA2B,EAAEqC,KAAK,CAAC;IACjD,OAAO1E,KAAK;EACd;;EAEA;EACA,IAAI4J,YAAY,GAAG5J,KAAK;EACxB,IAAIgE,KAAK,KAAKtN,MAAM,CAACzB,IAAI,EAAE;IAAA,IAAAoW,iBAAA,EAAAC,YAAA;IACzB,IAAMzJ,KAAK,IAAAwJ,iBAAA,IAAAC,YAAA,GAAGrK,KAAK,CAACG,IAAI,cAAAkK,YAAA,uBAAVA,YAAA,CAAYzJ,KAAK,cAAAwJ,iBAAA,cAAAA,iBAAA,GAAI,EAAE;IACrC,IAAMlB,OAAO,GAAGC,eAAe,CAACpK,KAAK,EAAE6B,KAAK,EAAE,QAAQ,CAAC;IACvD,IAAIsI,OAAO,KAAKnK,KAAK,EAAE,OAAOA,KAAK,CAAC,CAAC;IACrC4J,YAAY,GAAGO,OAAO;EACxB;;EAEA;EACA,IAAMZ,aAAa,GAAGC,kBAAkB,CACtCI,YAAY,EACZ9V,cAAc,CAACG,aAAa,EAC5B;IAAEwL,OAAO,EAAE2L;EAAa,CAC1B,CAAC;EACD,IAAMG,eAAe,GAAGhC,aAAa,CAACI,MAAM;EAC5CC,YAAY,GAAA/Y,aAAA,KAAQ0Y,aAAa,CAAE,CAAC,CAAC;;EAErC;EACA,IAAMiC,iBAAiB,MAAAxJ,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAAC6B,UAAU,IAAEF,eAAe,EAAC;;EAEvE;EACAzK,SAAS,CAACgJ,eAAe,CAAC,GAAGE,WAAW,CAACxZ,MAAM,CAAC,UAACsO,CAAC,EAAEvN,CAAC;IAAA,OAAKA,CAAC,KAAKmT,KAAK;EAAA,EAAC;;EAEtE;EACA,IAAIsG,gBAAgB,GAAGpB,YAAY,CAACa,SAAS;EAC7C,IAAIzG,KAAK,KAAKtN,MAAM,CAACpB,eAAe,IAAIwU,eAAe,KAAK,SAAS,EAAE;IACrEkB,gBAAgB,MAAAhJ,MAAA,CAAAxQ,kBAAA,CACVwZ,gBAAgB,IAAI,EAAE,GAAAxZ,kBAAA,CACvBsP,SAAS,CAACiF,OAAO,CAACvV,MAAM,CAAC,UAACsO,CAAC,EAAEvN,CAAC;MAAA,OAAKA,CAAC,KAAKmT,KAAK;IAAA,EAAC,EACnD;IACD5D,SAAS,CAACiF,OAAO,GAAG,EAAE;EACxB;;EAEA;EACA,IAAMwE,QAAQ,GAAA1Z,aAAA,CAAAA,aAAA,KACT+Y,YAAY;IACf6B,UAAU,EAAED,iBAAiB;IAC7Bf,SAAS,EAAEO,gBAAgB;IAC3BlK,SAAS,EAATA,SAAS;IACTiB,GAAG,qBAAAC,MAAA,CAAqBoJ,YAAY,CAACtZ,IAAI,GAAAkQ,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAAC7H,GAAG;EAAC,EAClE;;EAED;EACA,IAAIiC,KAAK,KAAKtN,MAAM,CAACpB,eAAe,EAAE;IACpC,OAAOyO,sBAAsB,CAC3BJ,cAAc,CAAC4G,QAAQ,EAAE7T,MAAM,CAACK,cAAc,CAChD,CAAC;EACH;EAEA,OAAOwT,QAAQ;AACjB;AAEA,SAASmB,WAAWA,CAAC1L,KAAK,EAAEI,MAAM,EAAE;EAClC,IAAI,CAACA,MAAM,EAAE;IACXiB,OAAO,CAACgB,KAAK,CAAC,iCAAiC,CAAC;IAChD,OAAOrC,KAAK;EACd;EAEAqB,OAAO,CAACU,GAAG,CAAC,qBAAqB,EAAE3B,MAAM,CAAC;EAE1C,IAAIwJ,YAAY,GAAA/Y,aAAA,KAAQmP,KAAK,CAAE;;EAE/B;EACA,IAAII,MAAM,CAAC9C,aAAa,EAAE;IACxBsM,YAAY,GAAG+B,IAAI,CAAC/B,YAAY,EAAExJ,MAAM,CAAC9C,aAAa,CAAC;EACzD;EAEA,IAAI8C,MAAM,CAAC7D,QAAQ,IAAIyD,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACM,MAAM,EAAE;IAC3D4S,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;MACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM;QACtBC,GAAG,EAAEjC,YAAY,CAACgC,MAAM,CAACC,GAAG,GAAGzL,MAAM,CAAC7D,QAAQ;QAC9CuP,MAAM,EAAElC,YAAY,CAACgC,MAAM,CAACE,MAAM,GAAG1L,MAAM,CAAC7D;MAAQ,EACrD;MACDwF,GAAG,aAAAC,MAAA,CACS5B,MAAM,CAAC7D,QAAQ,sBAAAyF,MAAA,CAAmB5B,MAAM,CAACtO,IAAI,GAAAkQ,MAAA,CAAAxQ,kBAAA,CACpDoY,YAAY,CAAC7H,GAAG;IACpB,EACF;EACH;EAEA,IAAI3B,MAAM,CAAC5C,aAAa,EAAE;IACxB,IAAMuO,MAAM,GAAG3L,MAAM,CAAC5C,aAAa;IACnCoM,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;MACfpG,SAAS,EAAEoG,YAAY,CAACpG,SAAS,GAAGuI,MAAM;MAC1CtI,MAAM,EAAEmG,YAAY,CAACnG,MAAM,GAAGsI,MAAM;MACpChK,GAAG,sCAAAC,MAAA,CACkC+J,MAAM,YAAA/J,MAAA,CAAS5B,MAAM,CAACtO,IAAI,GAAAkQ,MAAA,CAAAxQ,kBAAA,CAC1DoY,YAAY,CAAC7H,GAAG;IACpB,EACF;EACH;EAEA,IACE3B,MAAM,CAAC3C,kBAAkB,IACzBuC,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACM,MAAM,IACpC4S,YAAY,CAACgC,MAAM,CAACI,IAAI,EACxB;IACA,IAAMA,IAAI,GAAAxa,kBAAA,CAAOoY,YAAY,CAACgC,MAAM,CAACI,IAAI,CAAC;IAC1C,IAAMC,UAAU,GAAGD,IAAI,CAACxb,MAAM,CAC5B,UAAC2P,IAAI;MAAA,OAAK,CAACA,IAAI,CAAC1E,YAAY,IAAI,OAAO0E,IAAI,CAACqB,QAAQ,KAAK,QAAQ;IAAA,CACnE,CAAC;IACD,IAAM0K,YAAY,GAAGhO,IAAI,CAACiO,GAAG,CAAC/L,MAAM,CAAC3C,kBAAkB,EAAEwO,UAAU,CAAC3c,MAAM,CAAC;;IAE3E;IACA,IAAM8c,QAAQ,GAAG5a,kBAAA,CAAIya,UAAU,EAAEI,IAAI,CAAC;MAAA,OAAMnO,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG;IAAA,EAAC;IAChE,IAAMkO,SAAS,GAAGF,QAAQ,CAACva,KAAK,CAAC,CAAC,EAAEqa,YAAY,CAAC;IAEjD,IAAMK,QAAO,GAAGP,IAAI,CAAChL,GAAG,CAAC,UAACb,IAAI,EAAK;MACjC,IAAImM,SAAS,CAAC5K,QAAQ,CAACvB,IAAI,CAAC,EAAE;QAC5B,OAAAtP,aAAA,CAAAA,aAAA,KAAYsP,IAAI;UAAEqB,QAAQ,EAAErB,IAAI,CAACqB,QAAQ,GAAG;QAAC;MAC/C;MACA,OAAOrB,IAAI;IACb,CAAC,CAAC;IAEF,IAAIC,MAAM,CAACxF,QAAQ,EAAE;MACnB,KAAK,IAAIrJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6O,MAAM,CAACxF,QAAQ,EAAErJ,CAAC,EAAE,EAAE;QACxCqY,YAAY,GAAG4C,QAAQ,CAAC5C,YAAY,CAAC;MACvC;IACF;IAEA,IAAIxJ,MAAM,CAAC5F,QAAQ,EAAE;MACnBoP,YAAY,GAAG6C,UAAU,CAAC7C,YAAY,EAAExJ,MAAM,CAAC5F,QAAQ,CAAC;IAC1D;IAEA,IAAI4F,MAAM,CAAC3F,SAAS,EAAE;MACpBmP,YAAY,GAAG8C,eAAe,CAAC9C,YAAY,EAAExJ,MAAM,CAAC3F,SAAS,CAAC;IAChE;IAEAmP,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;MACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM;QACtBI,IAAI,EAAEO;MAAO,EACd;MACDxK,GAAG,eAAAC,MAAA,CACWsK,SAAS,CAAChd,MAAM,4BAAA0S,MAAA,CAAyB5B,MAAM,CAACtO,IAAI,GAAAkQ,MAAA,CAAAxQ,kBAAA,CAC7DoY,YAAY,CAAC7H,GAAG;IACpB,EACF;EACH;;EAEA;EACA,IAAM4K,IAAI,GAAG/C,YAAY,CAAC6B,UAAU,IAAI,EAAE;EAC1C,IAAM/G,KAAK,GAAGiI,IAAI,CAACC,SAAS,CAAC,UAACrE,CAAC;IAAA,OAAKA,CAAC,CAACzW,IAAI,KAAKsO,MAAM,CAACtO,IAAI;EAAA,EAAC;EAC3D,IAAM+a,aAAa,GACjBnI,KAAK,IAAI,CAAC,MAAA1C,MAAA,CAAAxQ,kBAAA,CAAOmb,IAAI,CAAC9a,KAAK,CAAC,CAAC,EAAE6S,KAAK,CAAC,GAAAlT,kBAAA,CAAKmb,IAAI,CAAC9a,KAAK,CAAC6S,KAAK,GAAG,CAAC,CAAC,KAAIiI,IAAI;EACzE,IAAMG,QAAQ,MAAA9K,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAACa,SAAS,IAAErK,MAAM,EAAC;EAEpDwJ,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;IACf6B,UAAU,EAAEoB,aAAa;IACzBpC,SAAS,EAAEqC;EAAQ,EACpB;;EAED;EACA,IAAMC,SAAS,GAAGvD,kBAAkB,CAClCI,YAAY,EACZ9V,cAAc,CAACI,YAAY,EAC3B;IAAEkM,MAAM,EAANA;EAAO,CACX,CAAC;EAED,OAAAvP,aAAA,CAAAA,aAAA,KACKkc,SAAS;IACZhL,GAAG,EAAEgL,SAAS,CAAChL,GAAG,IAAI6H,YAAY,CAAC7H;EAAG;AAE1C;AAEA,SAASiL,aAAaA,CAAChN,KAAK,EAAEiN,GAAG,EAAsB;EAAA,IAAAC,qBAAA;EAAA,IAApBC,WAAW,GAAArc,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,IAAI;EACnD,IAAMsc,SAAS,GAAG,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,WAAW,CAAC;EAC1D,IAAM9c,IAAI,GAAGD,MAAM,CAACC,IAAI,CAAC2c,GAAG,IAAI,CAAC,CAAC,CAAC;EACnC,IAAI3c,IAAI,CAAChB,MAAM,KAAK,CAAC,IAAI,CAAC8d,SAAS,CAAC1L,QAAQ,CAACpR,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IACrD+Q,OAAO,CAACgB,KAAK,CAAC,sCAAsC,EAAE4K,GAAG,CAAC;IAC1D,OAAOjN,KAAK;EACd;;EAEA;EACA,IAAIiN,GAAG,CAAC5M,GAAG,IAAI,CAAC,EAAA6M,qBAAA,GAAAlN,KAAK,CAACc,SAAS,CAAC0F,IAAI,cAAA0G,qBAAA,uBAApBA,qBAAA,CAAsB5d,MAAM,KAAI,CAAC,IAAI,CAAC,EAAE;IACtD,IAAM+d,aAAa,GAAGJ,GAAG,CAAC5M,GAAG,CAACvO,IAAI;IAElC,IAAMwb,aAAa,GAAGtN,KAAK,CAACc,SAAS,CAAC0F,IAAI,CAAChW,MAAM,CAC/C,UAAC+c,CAAC;MAAA,OAAKA,CAAC,CAACzb,IAAI,KAAKub,aAAa;IAAA,CACjC,CAAC;IAEDrN,KAAK,GAAAnP,aAAA,CAAAA,aAAA,KACAmP,KAAK;MACRkD,QAAQ,EAAArS,aAAA,CAAAA,aAAA,KACHmP,KAAK,CAACkD,QAAQ;QACjBuH,SAAS,KAAAzI,MAAA,CAAAxQ,kBAAA,CAAMwO,KAAK,CAACyK,SAAS,GAAAjZ,kBAAA,CAAK8b,aAAa;MAAC,EAClD;MACDxM,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;QAClB0F,IAAI,EAAE,EAAE,CAAE;MAAA,EACX;MACDzE,GAAG,gBAAAC,MAAA,CAAgBsL,aAAa,CAAChe,MAAM,wBAAA0S,MAAA,CAAAxQ,kBAAA,CAAwBwO,KAAK,CAAC+B,GAAG;IAAC,EAC1E;EACH;;EAEA;EACA,IACEkL,GAAG,CAAC5M,GAAG,IACPL,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAAChC,UAAU,IACxCtF,KAAK,CAACC,OAAO,CAAC2Q,KAAK,CAACc,SAAS,CAACiJ,aAAa,CAAC,EAC5C;IACA,IAAMyD,cAAc,GAAGxN,KAAK,CAACc,SAAS,CAACiJ,aAAa,CAACvZ,MAAM,CACzD,UAACid,MAAM;MAAA,OAAKA,MAAM,CAACjO,IAAI,KAAK,KAAK,IAAIiO,MAAM,CAAC7d,KAAK,CAACkC,IAAI,KAAKmb,GAAG,CAAC5M,GAAG,CAACvO,IAAI;IAAA,CACzE,CAAC;IAEDkO,KAAK,GAAAnP,aAAA,CAAAA,aAAA,KACAmP,KAAK;MACRc,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;QAClBiJ,aAAa,EAAEyD;MAAc,EAC9B;MACDzL,GAAG,kBAAAC,MAAA,CAAkBiL,GAAG,CAAC5M,GAAG,CAACvO,IAAI,GAAAkQ,MAAA,CAAAxQ,kBAAA,CAAOwO,KAAK,CAAC+B,GAAG;IAAC,EACnD;EACH;;EAEA;EACA,IAAI/B,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACzB,IAAI,EAAE;IAAA,IAAAyY,cAAA,EAAAC,QAAA;IACtC,IAAM9L,KAAK,IAAA6L,cAAA,GAAGT,GAAG,aAAHA,GAAG,gBAAAU,QAAA,GAAHV,GAAG,CAAE5M,GAAG,cAAAsN,QAAA,uBAARA,QAAA,CAAU9L,KAAK,cAAA6L,cAAA,cAAAA,cAAA,GAAI,EAAE;IAEnC,IAAMvD,OAAO,GAAGC,eAAe,CAACpK,KAAK,EAAE6B,KAAK,EAAE,mBAAmB,CAAC;IAClE,IAAIsI,OAAO,KAAKnK,KAAK,EAAE,OAAOA,KAAK,CAAC,CAAC;IACrCA,KAAK,GAAGmK,OAAO;EACjB;EAEA,OAAAtZ,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACR4N,aAAa,EAAElY,OAAO,CAACI,GAAG;IAC1B+X,OAAO,EAAE;MACPZ,GAAG,EAAHA,GAAG;MACHa,MAAM,EAAEX,WAAW,IAAInN,KAAK,CAAC8D;IAC/B,CAAC;IACD/B,GAAG,yBAAAC,MAAA,CAAyB1R,IAAI,CAAC,CAAC,CAAC,SAAA0R,MAAA,CAAAxQ,kBAAA,CAASwO,KAAK,CAAC+B,GAAG;EAAC;AAE1D;AAEA,SAASgM,mBAAmBA,CAAC/N,KAAK,EAAE+L,MAAM,EAAE;EAC1C,IAAMiC,SAAS,GAAG9P,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAE,CAACrJ,KAAK,CAACiO,WAAW,IAAI,CAAC,IAAIlC,MAAM,CAAC;EAEhE,OAAAlb,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRiO,WAAW,EAAED,SAAS;IACtBjM,GAAG,gCAAAC,MAAA,CAAgC+J,MAAM,QAAA/J,MAAA,CAAAxQ,kBAAA,CAAQwO,KAAK,CAAC+B,GAAG;EAAC;AAE/D;AACA,SAASmM,cAAcA,CAAClO,KAAK,EAAEG,IAAI,EAAE;EAAA,IAAAgO,cAAA,EAAAC,eAAA;EACnC,IAAMnB,GAAG,IAAAkB,cAAA,GAAGnO,KAAK,CAAC6N,OAAO,cAAAM,cAAA,uBAAbA,cAAA,CAAelB,GAAG;EAC9B,IAAMa,MAAM,IAAAM,eAAA,GAAGpO,KAAK,CAAC6N,OAAO,cAAAO,eAAA,uBAAbA,eAAA,CAAeN,MAAM;EAEpC,IAAI,CAACb,GAAG,IAAI,CAAC9M,IAAI,EAAE;IACjBkB,OAAO,CAACC,IAAI,CAAC,oDAAoD,CAAC;IAClE,OAAOtB,KAAK;EACd;EAEA,IAAIqO,WAAW,GAAA7c,kBAAA,CAAOwO,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAAC;EAC1C,IAAM+L,SAAS,GAAGD,WAAW,CAACzB,SAAS,CAAC,UAAC2B,CAAC;IAAA,OAAKA,CAAC,KAAKpO,IAAI;EAAA,EAAC;EAE1D,IAAImO,SAAS,KAAK,CAAC,CAAC,EAAE;IACpBjN,OAAO,CAACC,IAAI,CAAC,kCAAkC,CAAC;IAChD,OAAOtB,KAAK;EACd;;EAEA;EACA,IAAIwO,YAAY,GAAA3d,aAAA,KAAQsP,IAAI,CAAE;EAC9B,IAAI8M,GAAG,CAACwB,OAAO,EAAE;IACfD,YAAY,GAAGhS,WAAW,CAACgS,YAAY,EAAEvB,GAAG,CAACwB,OAAO,CAAC;EACvD,CAAC,MAAM,IAAIxB,GAAG,CAAC5M,GAAG,EAAE;IAClBmO,YAAY,GAAGE,iBAAiB,CAACF,YAAY,EAAEvB,GAAG,CAAC5M,GAAG,CAAC;EACzD,CAAC,MAAM,IAAI4M,GAAG,CAAC0B,KAAK,EAAE;IACpBN,WAAW,CAAC1F,MAAM,CAAC2F,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;EACpC,CAAC,MAAM,IAAIrB,GAAG,CAAC2B,SAAS,EAAE;IACxBJ,YAAY,GAAGK,aAAa,CAACL,YAAY,CAAC;EAC5C;;EAEA;EACA,IAAI,CAACvB,GAAG,CAAC0B,KAAK,EAAE;IACdN,WAAW,CAACC,SAAS,CAAC,GAAGE,YAAY;EACvC;;EAEA;EACA,IAAMM,SAAS,GACbhB,MAAM,KAAKpX,MAAM,CAACzB,IAAI,IAAI6Y,MAAM,KAAKpX,MAAM,CAAChC,UAAU,GAClDoZ,MAAM,GACNpX,MAAM,CAACK,cAAc;EAE3B,IAAM6S,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACbmP,KAAK;IACRkD,QAAQ,EAAArS,aAAA,CAAAA,aAAA,KACHmP,KAAK,CAACkD,QAAQ;MACjBX,IAAI,EAAE8L;IAAW,EAClB;IACDR,OAAO,EAAE,IAAI;IACbD,aAAa,EAAElY,OAAO,CAACC,IAAI;IAC3BmO,YAAY,EAAEgL,SAAS;IACvB/M,GAAG,qBAAAC,MAAA,CAAqB7B,IAAI,CAACrO,IAAI,QAAAkQ,MAAA,CAAAxQ,kBAAA,CAAQwO,KAAK,CAAC+B,GAAG;EAAC,EACpD;;EAED;EACA,OAAO+M,SAAS,KAAKpY,MAAM,CAACK,cAAc,GACtCgN,sBAAsB,CAAC6F,YAAY,CAAC,GACpCA,YAAY;AAClB;AACA,SAAStF,iBAAiBA,CAACtE,KAAK,EAAE;EAChC,IAAM+O,cAAc,GAAG,EAAE;EACzB;EACA,IAAMC,aAAa,GAAGhP,KAAK,CAACc,SAAS,CAACC,SAAS,IAAI,EAAE;EACrD,IAAMkO,cAAc,GAAGD,aAAa,CAAChO,GAAG,CAAC,UAACC,KAAK;IAAA,OAAKA,KAAK,CAACG,IAAI;EAAA,EAAC;EAC/D,IAAM8N,YAAY,MAAAlN,MAAA,CAAAxQ,kBAAA,CAAQwO,KAAK,CAACyK,SAAS,IAAI,EAAE,GAAAjZ,kBAAA,CAAMyd,cAAc,EAAC;EACpE;EACA,IAAME,UAAU,GAAG;IACjBhP,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE,CAAC;IACTC,GAAG,EAAE,CAAC;IACNC,KAAK,EAAE;EACT,CAAC;EAED,SAAA8O,GAAA,MAAAC,eAAA,GAA4Bhf,MAAM,CAACmO,OAAO,CAAC2Q,UAAU,CAAC,EAAAC,GAAA,GAAAC,eAAA,CAAA/f,MAAA,EAAA8f,GAAA,IAAE;IAAnD,IAAAE,kBAAA,GAAAle,cAAA,CAAAie,eAAA,CAAAD,GAAA;MAAO5P,IAAI,GAAA8P,kBAAA;MAAEC,KAAK,GAAAD,kBAAA;IACrB,KAAK,IAAI/d,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGge,KAAK,EAAEhe,CAAC,EAAE,EAAE;MAC9Bwd,cAAc,CAACpe,IAAI,CAAC6O,IAAI,CAAC;IAC3B;EACF;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,IAAMgQ,cAAc,GAAG,EAAE;EACzB,IAAMC,QAAQ,GAAG,IAAI/J,GAAG,CAAC,CAAC;EAE1B,SAAAgK,GAAA,MAAAC,eAAA,GAAiBZ,cAAc,EAAAW,GAAA,GAAAC,eAAA,CAAArgB,MAAA,EAAAogB,GAAA,IAAE;IAA5B,IAAIlQ,KAAI,GAAAmQ,eAAA,CAAAD,GAAA;IACX,IAAItO,IAAI,GAAG,IAAI;IACf,IAAIwO,OAAO,GAAG,CAAC;IAEf,OAAOA,OAAO,GAAG,EAAE,EAAE;MACnBA,OAAO,EAAE;MACT,IAAI;QACF,QAAQpQ,KAAI;UACV,KAAK,MAAM;YACT4B,IAAI,GAAG4B,kBAAkB,CAAChD,KAAK,CAAC;YAChC;UACF,KAAK,QAAQ;YACXoB,IAAI,GAAGwE,oBAAoB,CAAC5F,KAAK,CAAC;YAClC;UACF,KAAK,KAAK;YACRoB,IAAI,GAAGmF,iBAAiB,CAACvG,KAAK,CAAC;YAC/B;UACF,KAAK,OAAO;YACVoB,IAAI,GAAGgF,mBAAmB,CAACpG,KAAK,CAAC;YACjC;UACF;YACEoB,IAAI,GAAG,IAAI;QACf;QAEA,IAAI,CAACA,IAAI,EAAE;QAEX,IAAMhC,GAAG,MAAA4C,MAAA,CAAMxC,KAAI,OAAAwC,MAAA,CAAIZ,IAAI,CAACtP,IAAI,CAAE;QAClC,IAAI2d,QAAQ,CAAC5J,GAAG,CAACzG,GAAG,CAAC,EAAE;QAEvBqQ,QAAQ,CAAC3J,GAAG,CAAC1G,GAAG,CAAC;QACjBoQ,cAAc,CAAC7e,IAAI,CAAC;UAAE6O,IAAI,EAAJA,KAAI;UAAE4B,IAAI,EAAJA;QAAK,CAAC,CAAC;QACnC,MAAM,CAAC;MACT,CAAC,CAAC,OAAOlS,CAAC,EAAE;QACVmS,OAAO,CAACC,IAAI,CAAC,8BAA8B,EAAE9B,KAAI,EAAEtQ,CAAC,CAAC;MACvD;IACF;EACF;;EAEA;EACA,IAAI0a,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACXmP,KAAK;IACRkD,QAAQ,EAAArS,aAAA,CAAAA,aAAA,KACHmP,KAAK,CAACkD,QAAQ;MACjBuH,SAAS,EAAEyE;IAAY,EACxB;IACDpO,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;MAClBC,SAAS,EAAEyO;IAAc;EAC1B,EACF;EAED5F,YAAY,GAAG7J,gBAAgB,CAAC6J,YAAY,CAAC;EAC7CA,YAAY,GAAGJ,kBAAkB,CAC/BI,YAAY,EACZ9V,cAAc,CAACK,kBACjB,CAAC;EAED,OAAAtD,aAAA,CAAAA,aAAA,KACK+Y,YAAY;IACf7H,GAAG,EAAAvQ,kBAAA,CAAMoY,YAAY,CAAC7H,GAAG;EAAC;AAE9B;AACA,SAAS8N,QAAQA,CAAC7P,KAAK,EAAE+L,MAAM,EAAE;EAC/B,IAAM+D,OAAO,GAAG,CAAC9P,KAAK,CAACoD,IAAI,IAAI,CAAC,IAAI2I,MAAM;EAE1C,OAAAlb,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRoD,IAAI,EAAE0M,OAAO;IACb/N,GAAG,aAAAC,MAAA,CAAa+J,MAAM,aAAA/J,MAAA,CAAAxQ,kBAAA,CAAawO,KAAK,CAAC+B,GAAG;EAAC;AAEjD;AACA,SAASgO,gBAAgBA,CAAC/P,KAAK,EAAE;EAC/B;EACA,IAAIuK,QAAQ,GAAGwD,mBAAmB,CAAC/N,KAAK,EAAE,CAAC,CAAC;;EAE5C;EACAuK,QAAQ,GAAG5G,cAAc,CAAC4G,QAAQ,EAAE7T,MAAM,CAACK,cAAc,CAAC;;EAE1D;EACAwT,QAAQ,GAAGxG,sBAAsB,CAACwG,QAAQ,CAAC;EAE3C,OAAOA,QAAQ;AACjB;AACA,SAASyF,SAASA,CAAChQ,KAAK,EAAE;EAAA,IAAAiQ,qBAAA;EACxB,IAAMC,QAAQ,GAAG,EAAE;EACnB,IAAMC,UAAU,GAAGnQ,KAAK,CAACiF,KAAK,IAAI,CAAC;EACnC,IAAMmL,eAAe,GAAG,EAAAH,qBAAA,GAAAjQ,KAAK,CAACqQ,eAAe,cAAAJ,qBAAA,uBAArBA,qBAAA,CAAuB3gB,MAAM,KAAI,CAAC;EAC1D,IAAMgU,IAAI,GAAGtD,KAAK,CAACsD,IAAI,IAAI,CAAC;EAE5B,IAAMgN,UAAU,GAAGF,eAAe,GAAG,CAAC;EACtC,IAAMG,SAAS,GAAGjN,IAAI,GAAG,CAAC;EAE1B,IAAMkN,SAAS,GAAGN,QAAQ,GAAGC,UAAU,GAAGG,UAAU,GAAGC,SAAS;;EAEhE;EACA,IAAIhG,QAAQ,GAAGsF,QAAQ,CAAC7P,KAAK,EAAEwQ,SAAS,CAAC;;EAEzC;EACA,IAAMC,YAAY,GAAG,CAAClG,QAAQ,CAACkG,YAAY,IAAI,CAAC,IAAI,CAAC;EACrDlG,QAAQ,GAAA1Z,aAAA,CAAAA,aAAA,KACH0Z,QAAQ;IACXkG,YAAY,EAAZA,YAAY;IACZ1O,GAAG,uBAAAC,MAAA,CAAuBwO,SAAS,SAAAxO,MAAA,CAAAxQ,kBAAA,CAAS+Y,QAAQ,CAACxI,GAAG;EAAC,EAC1D;;EAED;EACAwI,QAAQ,GAAG5G,cAAc,CAAC4G,QAAQ,EAAE7T,MAAM,CAACK,cAAc,CAAC;EAC1DwT,QAAQ,GAAGxG,sBAAsB,CAACwG,QAAQ,CAAC;EAE3C,OAAOA,QAAQ;AACjB;AAEA,SAASmG,IAAIA,CAAC1Q,KAAK,EAAE;EACnB,IAAM2Q,YAAY,GAAG3Q,KAAK,CAACuD,iBAAiB,IAAI,CAAC;EACjD,IAAMqN,aAAa,GAAG5Q,KAAK,CAACyD,MAAM,IAAI,CAAC;;EAEvC;EACA,IAAI8G,QAAQ,GAAGoB,IAAI,CAAC3L,KAAK,EAAE2Q,YAAY,CAAC;EACxC,IAAME,YAAY,GAAGtG,QAAQ,CAAC9G,MAAM,GAAGmN,aAAa;;EAEpD;EACArG,QAAQ,GAAGf,kBAAkB,CAACe,QAAQ,EAAEzW,cAAc,CAACM,IAAI,CAAC;;EAE5D;EACAmW,QAAQ,GAAA1Z,aAAA,CAAAA,aAAA,KACH0Z,QAAQ;IACXxI,GAAG,uCAAAC,MAAA,CACmC6O,YAAY,WAAA7O,MAAA,CAAAxQ,kBAAA,CAC7C+Y,QAAQ,CAACxI,GAAG,CAACvR,MAAM,CAAC,UAACsgB,GAAG;MAAA,OAAK,CAACA,GAAG,CAACC,UAAU,CAAC,QAAQ,CAAC;IAAA,EAAC;EAC3D,EACF;;EAED;EACAxG,QAAQ,GAAG5G,cAAc,CAAC4G,QAAQ,EAAE7T,MAAM,CAACK,cAAc,CAAC;;EAE1D;EACAwT,QAAQ,GAAGxG,sBAAsB,CAACwG,QAAQ,CAAC;EAE3C,OAAOA,QAAQ;AACjB;AAEA,SAASyG,iBAAiBA,CAAChR,KAAK,EAAEV,QAAQ,EAAE;EAC1C,IAAM2R,gBAAgB,GAAGjR,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACE,IAAI;EAC7D,IAAMsb,QAAQ,GAAGlR,KAAK,CAACmR,cAAc,IAAIzb,OAAO,CAACC,IAAI;EAErD2J,QAAQ,CAAC;IACPE,IAAI,EAAEtI,OAAO,CAACmB,aAAa;IAC3BoH,OAAO,EAAEwR,gBAAgB,GAAGC,QAAQ,GAAGxb,OAAO,CAACE;EACjD,CAAC,CAAC;AACJ;;AAEA;AACA;AACA,SAASwb,kBAAkBA,CAAA,EAAG;EAC5B,OAAO;IACLrP,GAAG,EAAE,EAAE;IACP6L,aAAa,EAAElY,OAAO,CAACC,IAAI;IAC3Bwb,cAAc,EAAE,IAAI;IACpBrN,YAAY,EAAEpN,MAAM,CAACC,SAAS;IAC9B6N,WAAW,EAAE,IAAI;IAEjBnB,cAAc,EAAE,CAAC;IACjBE,iBAAiB,EAAE,EAAE;IACrB5G,mBAAmB,EAAE,CAAC;IACtB+G,qBAAqB,EAAE,CAAC;IACxB3J,UAAU,EAAE,IAAI;IAEhByJ,SAAS,EAAE,CAAC;IACZC,MAAM,EAAE,CAAC;IACTwK,WAAW,EAAE,CAAC;IAEd7K,IAAI,EAAE,GAAG;IAETE,IAAI,EAAE,CAAC;IACP2B,KAAK,EAAE,CAAC;IACR0B,MAAM,EAAE,CAAC;IAET8J,YAAY,EAAE,CAAC;IACfJ,eAAe,EAAE,EAAE;IACnB5F,SAAS,EAAE,EAAE;IAEbK,SAAS,EAAE,EAAE;IACbW,UAAU,EAAE,EAAE;IAEdvI,QAAQ,EAAE;MACRX,IAAI,EAAE,EAAE;MACRsJ,GAAG,EAAE,CAAC;MACNwF,KAAK,EAAE,CAAC;MACRC,KAAK,EAAE,CAAC;MACRC,QAAQ,EAAE;IACZ,CAAC;IACD3F,MAAM,EAAE;MACNrJ,IAAI,EAAE,EAAE;MACRyJ,IAAI,EAAE,EAAE;MACRwF,SAAS,EAAE,EAAE;MACbzV,KAAK,EAAE,EAAE;MACT0V,SAAS,EAAE,EAAE;MAEbC,WAAW,EAAE,IAAI;MAEjBzD,WAAW,EAAE,CAAC;MACdpC,GAAG,EAAE,CAAC;MACNC,MAAM,EAAE,CAAC;MACTuF,KAAK,EAAE,CAAC;MACRM,QAAQ,EAAE,CAAC;MACXL,KAAK,EAAE,CAAC;MACRM,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE,CAAC;MACXN,QAAQ,EAAE,CAAC;MAEXO,KAAK,EAAE;IACT,CAAC;IACDhR,SAAS,EAAE;MACTiR,YAAY,EAAE,EAAE;MAChBhR,SAAS,EAAE,EAAE;MACbwE,KAAK,EAAE,EAAE;MACTQ,OAAO,EAAE,EAAE;MACXS,IAAI,EAAE,EAAE;MACRH,MAAM,EAAE,EAAE;MACVzB,KAAK,EAAE,EAAE;MACTmF,aAAa,EAAE,EAAE;MACjBiI,WAAW,EAAE;IACf;EACF,CAAC;AACH;AACA,SAASC,4BAA4BA,CAAC3S,QAAQ,EAAEvF,UAAU,EAAE;EAC1DuF,QAAQ,CAAC;IAAEE,IAAI,EAAEtI,OAAO,CAACE,cAAc;IAAEqI,OAAO,EAAE1F;EAAW,CAAC,CAAC;EAC/DuF,QAAQ,CAAC;IAAEE,IAAI,EAAEtI,OAAO,CAACG;EAAsB,CAAC,CAAC;EACjDiI,QAAQ,CAAC;IAAEE,IAAI,EAAEtI,OAAO,CAACI;EAA2B,CAAC,CAAC;EACtDgI,QAAQ,CAAC;IACPE,IAAI,EAAEtI,OAAO,CAACK,aAAa;IAC3BkI,OAAO,EAAE/I,MAAM,CAACG;EAClB,CAAC,CAAC;AACJ;AACA,SAASqb,aAAaA,CAACC,YAAY,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACtD,IAAIrS,KAAK,GAAGmS,YAAY;EACxB,SAAS7S,QAAQA,CAACgT,MAAM,EAAE;IACxBtS,KAAK,GAAGoS,OAAO,CAACpS,KAAK,EAAEsS,MAAM,CAAC;IAC9BD,QAAQ,CAACrS,KAAK,EAAEV,QAAQ,CAAC,CAAC,CAAC;EAC7B;EACA;EACAA,QAAQ,CAAC;IAAEE,IAAI,EAAEtI,OAAO,CAACC;EAAS,CAAC,CAAC;EACpC,OAAO;IAAEmI,QAAQ,EAARA;EAAS,CAAC;AACrB;;AAEA;AACA;AACA,SAASqD,kBAAkBA,CAAA,EAKzB;EAAA,IAJA4P,QAAQ,GAAAzhB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,IAAI;EAAA,IACf8I,MAAM,GAAA9I,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,IAAI;EAAA,IACb0Q,QAAQ,GAAA1Q,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC;EAAA,IACZuP,GAAG,GAAAvP,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,IAAI;EAEV,IAAIqP,IAAI;EACR,IAAIvG,MAAM,EAAE;IACVyH,OAAO,CAACU,GAAG,CAAC,mCAAmC,EAAEnI,MAAM,CAAC;EAC1D;EACA,IAAI2Y,QAAQ,EAAE;IACZ,IAAMC,KAAK,GAAGnY,QAAQ,CAACoY,IAAI,CAAC,UAAClE,CAAC;MAAA,OAAKA,CAAC,CAACzc,IAAI,KAAKygB,QAAQ;IAAA,EAAC;IACvD,IAAI,CAACC,KAAK,EAAE;MACVnR,OAAO,CAACgB,KAAK,oBAAAL,MAAA,CAAoBuQ,QAAQ,CAAE,CAAC;MAC5C,OAAO,IAAI;IACb;IACApS,IAAI,GAAAtP,aAAA,KAAQ2hB,KAAK,CAAE;EACrB,CAAC,MAAM,IAAI5Y,MAAM,EAAE;IACjB,IAAM0O,UAAU,GAAGjO,QAAQ,CAAC7J,MAAM,CAChC,UAAC+d,CAAC;MAAA,OACAA,CAAC,CAAC3U,MAAM,KAAKA,MAAM,IACnB,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC8H,QAAQ,CAAC6M,CAAC,CAAC3S,cAAc,CAAC;IAAA,CAC7D,CAAC;IACD,IAAI0M,UAAU,CAAChZ,MAAM,KAAK,CAAC,EAAE;MAC3B+R,OAAO,CAACgB,KAAK,gCAAAL,MAAA,CAAgCpI,MAAM,CAAE,CAAC;MACtD,OAAO,IAAI;IACb;IACAuG,IAAI,GAAAtP,aAAA,KAAQyX,UAAU,CAACpK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGkK,UAAU,CAAChZ,MAAM,CAAC,CAAC,CAAE;EACzE,CAAC,MAAM;IACL+R,OAAO,CAACgB,KAAK,CAAC,4DAA4D,CAAC;IAC3E,OAAO,IAAI;EACb;;EAEA;EACA,IAAIb,QAAQ,GAAG,CAAC,EAAE;IAChBrB,IAAI,GAAG3D,WAAW,CAAC2D,IAAI,EAAEqB,QAAQ,CAAC,CAAC,CAAC;EACtC;;EAEA;EACA,IAAInB,GAAG,EAAE;IACPF,IAAI,GAAGuO,iBAAiB,CAACvO,IAAI,EAAEE,GAAG,CAAC;EACrC;EAEA,OAAOF,IAAI;AACb;AAEA,SAASuS,mBAAmBA,CAACC,SAAS,EAAE;EACtC,IAAMH,KAAK,GAAGvW,SAAS,CAACwW,IAAI,CAAC,UAACnkB,CAAC;IAAA,OAAKA,CAAC,CAACwD,IAAI,KAAK6gB,SAAS;EAAA,EAAC;EACzD,IAAI,CAACH,KAAK,EAAE;IACVnR,OAAO,CAACgB,KAAK,qBAAAL,MAAA,CAAqB2Q,SAAS,CAAE,CAAC;IAC9C,OAAO,IAAI;EACb;EACA,OAAA9hB,aAAA,KAAY2hB,KAAK;AACnB;AACA,SAASI,oBAAoBA,CAACC,UAAU,EAAgB;EAAA,IAAdrR,QAAQ,GAAA1Q,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC;EACpD,IAAM0hB,KAAK,GAAGnV,UAAU,CAACoV,IAAI,CAAC,UAAClK,CAAC;IAAA,OAAKA,CAAC,CAACzW,IAAI,KAAK+gB,UAAU;EAAA,EAAC;EAC3D,IAAI,CAACL,KAAK,EAAE;IACVnR,OAAO,CAACgB,KAAK,sBAAAL,MAAA,CAAsB6Q,UAAU,CAAE,CAAC;IAChD,OAAO,IAAI;EACb;EAEA,IAAIzS,MAAM,GAAAvP,aAAA,KAAQ2hB,KAAK,CAAE;EAEzB,IAAIhR,QAAQ,GAAG,CAAC,EAAE;IAChBpB,MAAM,GAAG3D,aAAa,CAAC2D,MAAM,EAAEoB,QAAQ,CAAC;EAC1C;EAEA,OAAOpB,MAAM;AACf;AACA,SAAS0S,iBAAiBA,CAACC,OAAO,EAAE;EAClC,IAAMP,KAAK,GAAGxW,OAAO,CAACyW,IAAI,CAAC,UAAClF,CAAC;IAAA,OAAKA,CAAC,CAACzb,IAAI,KAAKihB,OAAO;EAAA,EAAC;EACrD,IAAI,CAACP,KAAK,EAAE;IACVnR,OAAO,CAACgB,KAAK,mBAAAL,MAAA,CAAmB+Q,OAAO,CAAE,CAAC;IAC1C,OAAO,IAAI;EACb;EACA,OAAAliB,aAAA,KAAY2hB,KAAK;AACnB;AACA,SAASQ,kBAAkBA,CAAA,EAAG;EAC5B,IAAMC,UAAU,GAAGhX,SAAS,CAACzL,MAAM,CAAC,UAAClC,CAAC;IAAA,OAAKA,CAAC,CAACwO,QAAQ;EAAA,EAAC;EACtD,IAAImW,UAAU,CAAC3jB,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;EACxC,IAAM4jB,MAAM,GAAGD,UAAU,CAAC/U,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG6U,UAAU,CAAC3jB,MAAM,CAAC,CAAC;EACxE,OAAAuB,aAAA,KAAYqiB,MAAM;AACpB;AAEA,SAAS9M,mBAAmBA,CAACpG,KAAK,EAA0B;EAAA,IAAAmT,KAAA,GAAAriB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAJ,CAAC,CAAC;IAAAsiB,YAAA,GAAAD,KAAA,CAApBvZ,MAAM;IAANA,MAAM,GAAAwZ,YAAA,cAAG,IAAI,GAAAA,YAAA;EACjD,IAAM9P,IAAI,GAAGtD,KAAK,CAACsD,IAAI,IAAI,CAAC;EAC5B,IAAM+P,WAAW,GAAG,IAAI3N,GAAG,IAAA1D,MAAA,CAAAxQ,kBAAA,CACtBwO,KAAK,CAAC8K,SAAS,CAAC9J,GAAG,CAAC,UAAC1S,CAAC;IAAA,OAAKA,CAAC,CAACwD,IAAI;EAAA,EAAC,GAAAN,kBAAA,CAClCwO,KAAK,CAACyK,SAAS,CAACzJ,GAAG,CAAC,UAAC1S,CAAC;IAAA,OAAKA,CAAC,CAACwD,IAAI;EAAA,EAAC,EACtC,CAAC;EAEF,IAAMwhB,QAAQ,GAAG,UAAU;;EAE3B;EACA,IAAIhL,UAAU,GAAGrM,SAAS,CAACzL,MAAM,CAAC,UAAClC,CAAC,EAAK;IACvC,IAAIA,CAAC,CAACwD,IAAI,KAAKwhB,QAAQ,EAAE,OAAO,KAAK;IACrC,IAAIhlB,CAAC,CAACwO,QAAQ,EAAE,OAAO,KAAK,CAAC,CAAC;IAC9B,IACE,CAACxO,CAAC,CAACsL,MAAM,KAAK1D,QAAQ,CAACM,MAAM,IAAIlI,CAAC,CAACsL,MAAM,KAAK1D,QAAQ,CAACO,SAAS,KAChE4c,WAAW,CAACxN,GAAG,CAACvX,CAAC,CAACwD,IAAI,CAAC,EACvB;MACA,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC,CAAC;EAEF,IAAI,CAAC8H,MAAM,EAAE;IACX,IAAMkO,aAAa,GAAGC,4BAA4B,CAACzE,IAAI,CAAC;IACxD1J,MAAM,GAAG0E,oBAAoB,CAACwJ,aAAa,CAAC;EAC9C;EAEA,IAAMyL,QAAQ,GAAGjL,UAAU,CAAC9X,MAAM,CAAC,UAAClC,CAAC;IAAA,OAAKA,CAAC,CAACsL,MAAM,KAAKA,MAAM;EAAA,EAAC;EAC9D,IAAI2Z,QAAQ,CAACjkB,MAAM,KAAK,CAAC,EAAE;IACzB+R,OAAO,CAACC,IAAI,gCAAAU,MAAA,CAAgCpI,MAAM,CAAE,CAAC;IACrD,OAAO8Y,mBAAmB,CAACY,QAAQ,CAAC;EACtC;EAEA,IAAMJ,MAAM,GAAGK,QAAQ,CAACrV,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGmV,QAAQ,CAACjkB,MAAM,CAAC,CAAC;EACpE,OAAAuB,aAAA,KAAYqiB,MAAM;AACpB;AACA,SAASlQ,kBAAkBA,CACzBhD,KAAK,EAEL;EAAA,IAAAwT,aAAA,EAAAC,sBAAA;EAAA,IAAAC,KAAA,GAAA5iB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MADsD,CAAC,CAAC;IAAA6iB,YAAA,GAAAD,KAAA,CAAtD9Z,MAAM;IAANA,MAAM,GAAA+Z,YAAA,cAAG,IAAI,GAAAA,YAAA;IAAAC,cAAA,GAAAF,KAAA,CAAElS,QAAQ;IAARA,QAAQ,GAAAoS,cAAA,cAAG5N,SAAS,GAAA4N,cAAA;IAAAC,SAAA,GAAAH,KAAA,CAAErT,GAAG;IAAHA,GAAG,GAAAwT,SAAA,cAAG,IAAI,GAAAA,SAAA;EAEjD,IAAMvQ,IAAI,GAAGtD,KAAK,CAACsD,IAAI,IAAI,CAAC;EAE5B,IAAMwQ,WAAW,GACfla,MAAM,IAAI0E,oBAAoB,CAACyJ,4BAA4B,CAACzE,IAAI,CAAC,CAAC;EAEpE,IAAM2B,KAAK,IAAAuO,aAAA,GAAGxT,KAAK,CAACiF,KAAK,cAAAuO,aAAA,cAAAA,aAAA,GAAI,CAAC;EAC9B,IAAMO,YAAY,GAAG,CAACzQ,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,CAAC,IAAI2B,KAAK;EAExC,IAAM+O,cAAc,GAAG;IACrB,CAAC,EAAE9V,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG0K,YAAY,CAAC;IACjC,CAAC,EAAE,CAAC,GAAGA,YAAY;IACnB,CAAC,EAAE,CAAC,GAAGA,YAAY;IACnB,CAAC,EAAE,CAAC,GAAGA,YAAY;IACnB,CAAC,EAAE,CAAC,GAAGA;EACT,CAAC;EAED,IAAME,aAAa,GACjBzS,QAAQ,KAAKwE,SAAS,GAClBxE,QAAQ,GACRjP,MAAM,CAAC+L,oBAAoB,CAAC0V,cAAc,CAAC,CAAC;EAElD,IAAME,aAAa,GAAG,EAAAT,sBAAA,GAAAzT,KAAK,CAACqQ,eAAe,cAAAoD,sBAAA,uBAArBA,sBAAA,CAAuBnkB,MAAM,KAAI,CAAC;EACxD,IAAM6kB,WAAW,GAAGjW,IAAI,CAACiO,GAAG,CAAC,CAAC,EAAEjO,IAAI,CAACC,KAAK,CAAC+V,aAAa,GAAG,CAAC,CAAC,CAAC;EAC9D,IAAME,cAAc,GAAGlW,IAAI,CAACiO,GAAG,CAAC8H,aAAa,EAAEE,WAAW,CAAC;EAE3D,OAAOxR,kBAAkB,CAACqD,SAAS,EAAE8N,WAAW,EAAEM,cAAc,EAAE/T,GAAG,CAAC;AACxE;AACA,SAASuF,oBAAoBA,CAAC5F,KAAK,EAA2C;EAAA,IAAAqU,aAAA;EAAA,IAAAC,KAAA,GAAAxjB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAJ,CAAC,CAAC;IAAAyjB,YAAA,GAAAD,KAAA,CAArC1a,MAAM;IAANA,MAAM,GAAA2a,YAAA,cAAG,IAAI,GAAAA,YAAA;IAAAC,cAAA,GAAAF,KAAA,CAAE9S,QAAQ;IAARA,QAAQ,GAAAgT,cAAA,cAAG,IAAI,GAAAA,cAAA;EACnE,IAAMlR,IAAI,GAAGtD,KAAK,CAACsD,IAAI,IAAI,CAAC;EAC5B,IAAMwE,aAAa,GAAGC,4BAA4B,CAACzE,IAAI,CAAC;EAExD,IAAM2B,KAAK,IAAAoP,aAAA,GAAGrU,KAAK,CAACiF,KAAK,cAAAoP,aAAA,cAAAA,aAAA,GAAI,CAAC;EAC9B,IAAMN,YAAY,GAAG,CAACzQ,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,CAAC,IAAI2B,KAAK;EAExC,IAAM+O,cAAc,GAAG;IACrB,CAAC,EAAE9V,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG0K,YAAY,CAAC;IACjC,CAAC,EAAE,CAAC,GAAGA,YAAY;IACnB,CAAC,EAAE,CAAC,GAAGA,YAAY;IACnB,CAAC,EAAE,CAAC,GAAGA,YAAY;IACnB,CAAC,EAAE,CAAC,GAAGA;EACT,CAAC;;EAED;EACA,IAAI,CAACna,MAAM,EAAE;IACXA,MAAM,GAAG0E,oBAAoB,CAACwJ,aAAa,CAAC;EAC9C;;EAEA;EACA,IAAMQ,UAAU,GAAGjL,UAAU,CAAC7M,MAAM,CAAC,UAAC+X,CAAC;IAAA,OAAKA,CAAC,CAAC3O,MAAM,KAAKA,MAAM;EAAA,EAAC;EAChE,IAAI6a,UAAU;EACd,IAAInM,UAAU,CAAChZ,MAAM,KAAK,CAAC,EAAE;IAC3B+R,OAAO,CAACC,IAAI,iCAAAU,MAAA,CACsBpI,MAAM,6CACxC,CAAC;IACD6a,UAAU,GAAGpX,UAAU,CAACoV,IAAI,CAAC,UAAClK,CAAC;MAAA,OAAKA,CAAC,CAACzW,IAAI,KAAK,uBAAuB;IAAA,EAAC;IACvE,IAAI,CAAC2iB,UAAU,EAAE;MACfpT,OAAO,CAACgB,KAAK,CACX,kEACF,CAAC;MACD,OAAO,IAAI;IACb;IACAb,QAAQ,GAAG,CAAC,CAAC,CAAC;EAChB,CAAC,MAAM;IACLiT,UAAU,GAAGnM,UAAU,CAACpK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGkK,UAAU,CAAChZ,MAAM,CAAC,CAAC;;IAEtE;IACA,IAAIkS,QAAQ,KAAK,IAAI,EAAE;MACrBA,QAAQ,GAAGjP,MAAM,CAAC+L,oBAAoB,CAAC0V,cAAc,CAAC,CAAC;IACzD;IACAxS,QAAQ,GAAGtD,IAAI,CAACiO,GAAG,CAAC3K,QAAQ,EAAE,CAAC,CAAC;EAClC;EAEA,OAAOoR,oBAAoB,CAAC6B,UAAU,CAAC3iB,IAAI,EAAE0P,QAAQ,CAAC;AACxD;AACA,SAAS+E,iBAAiBA,CAACvG,KAAK,EAA0B;EAAA,IAAA0U,KAAA,GAAA5jB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAJ,CAAC,CAAC;IAAA6jB,YAAA,GAAAD,KAAA,CAApB9a,MAAM;IAANA,MAAM,GAAA+a,YAAA,cAAG,IAAI,GAAAA,YAAA;EAC/C,IAAMrR,IAAI,GAAGtD,KAAK,CAACsD,IAAI,IAAI,CAAC;EAC5B,IAAMsR,WAAW,GAAG9B,iBAAiB,CAAC,UAAU,CAAC;;EAEjD;EACA,IAAI,CAAClZ,MAAM,EAAE;IACX,IAAMkO,aAAa,GAAGC,4BAA4B,CAACzE,IAAI,CAAC;IACxD1J,MAAM,GAAG0E,oBAAoB,CAACwJ,aAAa,CAAC;EAC9C;;EAEA;EACA,IAAMQ,UAAU,GAAGtM,OAAO,CAACxL,MAAM,CAAC,UAAC6P,GAAG;IAAA,OAAKA,GAAG,CAACzG,MAAM,KAAKA,MAAM;EAAA,EAAC;EAEjE,IAAI0O,UAAU,CAAChZ,MAAM,KAAK,CAAC,EAAE;IAC3B+R,OAAO,CAACC,IAAI,8BAAAU,MAAA,CACmBpI,MAAM,8BACrC,CAAC;IACD,OAAOgb,WAAW;EACpB;EAEA,IAAMC,SAAS,GAAGvM,UAAU,CAACpK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGkK,UAAU,CAAChZ,MAAM,CAAC,CAAC;EAC3E,OAAAuB,aAAA,KAAYgkB,SAAS;AACvB;AACA,SAASrY,WAAWA,CAAC2D,IAAI,EAAa;EAAA,IAAX8E,KAAK,GAAAnU,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC;EAClC,IAAI,CAACqP,IAAI,IAAIxR,OAAA,CAAOwR,IAAI,MAAK,QAAQ,EAAE;IACrCkB,OAAO,CAACgB,KAAK,CAAC,qCAAqC,EAAElC,IAAI,CAAC;IAC1D,OAAOA,IAAI;EACb;EAEA,IAAIA,IAAI,CAAC1E,YAAY,EAAE;IACrB4F,OAAO,CAACC,IAAI,SAAAU,MAAA,CAAS7B,IAAI,CAACrO,IAAI,6BAA0B,CAAC;IACzD,OAAOqO,IAAI;EACb;EAEA,IAAM2U,YAAY,GAAAjkB,aAAA,KAAQsP,IAAI,CAAE;EAChC,IAAI8L,UAAU,GAAG,KAAK;EAEtB,IAAI,UAAU,IAAI6I,YAAY,EAAE;IAC9BA,YAAY,CAACta,QAAQ,IAAI,CAAC,GAAGyK,KAAK;IAClCgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,WAAW,IAAI6I,YAAY,EAAE;IAC/BA,YAAY,CAACra,SAAS,IAAI,GAAG,GAAGwK,KAAK;IACrCgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,SAAS,IAAI6I,YAAY,EAAE;IAC7BA,YAAY,CAACpa,OAAO,IAAI,CAAC,GAAGuK,KAAK;IACjCgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,qCAAqC,IAAI6I,YAAY,EAAE;IACzDA,YAAY,CAACna,mCAAmC,IAAIsK,KAAK;IACzDgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,qCAAqC,IAAI6I,YAAY,EAAE;IACzDA,YAAY,CAAC/Z,mCAAmC,IAAIkK,KAAK;IACzDgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,UAAU,IAAI6I,YAAY,EAAE;IAC9BA,YAAY,CAACla,QAAQ,IAAI,CAAC,GAAGqK,KAAK;IAClCgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,QAAQ,IAAI6I,YAAY,EAAE;IAC5BA,YAAY,CAACha,MAAM,IAAI,CAAC,GAAGmK,KAAK;IAChCgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,YAAY,IAAI6I,YAAY,EAAE;IAChCA,YAAY,CAACC,UAAU,IAAI,CAAC,GAAG9P,KAAK;IACpCgH,UAAU,GAAG,IAAI;EACnB;;EAEA;EACA,IAAI6I,YAAY,CAACzZ,UAAU,EAAE;IAC3ByZ,YAAY,CAACzZ,UAAU,GAAAxK,aAAA,CAAAA,aAAA,KAClBikB,YAAY,CAACzZ,UAAU;MAC1BC,IAAI,EAAEwZ,YAAY,CAACzZ,UAAU,CAACC,IAAI,GAAG2J,KAAK;MAC1C1J,KAAK,EAAEuZ,YAAY,CAACzZ,UAAU,CAACE,KAAK,GAAG0J,KAAK;MAC5CzJ,SAAS,EAAEsZ,YAAY,CAACzZ,UAAU,CAACG,SAAS,GAAGyJ;IAAK,EACrD;IACDgH,UAAU,GAAG,IAAI;EACnB;;EAEA;EACA,IACE,yBAAyB,IAAI6I,YAAY,IACzC,OAAOA,YAAY,CAACva,OAAO,KAAK,QAAQ,EACxC;IACAua,YAAY,CAACva,OAAO,IAAIua,YAAY,CAAC7Z,uBAAuB,GAAGgK,KAAK;IACpEgH,UAAU,GAAG,IAAI;EACnB;;EAEA;EACA,IACE,0BAA0B,IAAI6I,YAAY,IAC1C,OAAOA,YAAY,CAAC9Z,MAAM,KAAK,QAAQ,EACvC;IACA8Z,YAAY,CAAC9Z,MAAM,IAAIkD,IAAI,CAAC8W,GAAG,CAC7BF,YAAY,CAAC5Z,wBAAwB,EACrC+J,KACF,CAAC;IACDgH,UAAU,GAAG,IAAI;EACnB;;EAEA;EACA6I,YAAY,CAACtT,QAAQ,GAAG,CAACsT,YAAY,CAACtT,QAAQ,IAAI,CAAC,IAAIyD,KAAK;;EAE5D;EACA,IAAMgQ,QAAQ,GAAG9U,IAAI,CAACrO,IAAI,CACvBojB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;EAAA,CACxBA,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC,CAAC;;EAEzC,IAAIJ,YAAY,CAACzZ,UAAU,EAAE;IAC3B,IAAA8Z,qBAAA,GAA2CL,YAAY,CAACzZ,UAAU;MAAA+Z,sBAAA,GAAAD,qBAAA,CAA1D7Z,IAAI;MAAJA,IAAI,GAAA8Z,sBAAA,cAAG,CAAC,GAAAA,sBAAA;MAAE7Z,KAAK,GAAA4Z,qBAAA,CAAL5Z,KAAK;MAAA8Z,sBAAA,GAAAF,qBAAA,CAAE3Z,SAAS;MAATA,SAAS,GAAA6Z,sBAAA,cAAG,CAAC,GAAAA,sBAAA;IACtCP,YAAY,CAAChjB,IAAI,MAAAkQ,MAAA,CAAMiT,QAAQ,OAAAjT,MAAA,CAAI1G,IAAI,OAAA0G,MAAA,CAAIzG,KAAK,EAAAyG,MAAA,CAC9CxG,SAAS,GAAG,CAAC,OAAAwG,MAAA,CAAOxG,SAAS,IAAK,EAAE,CACpC;EACJ,CAAC,MAAM;IACLsZ,YAAY,CAAChjB,IAAI,MAAAkQ,MAAA,CAAMiT,QAAQ,QAAAjT,MAAA,CAAK8S,YAAY,CAACtT,QAAQ,CAAE;EAC7D;EAEA,OAAOsT,YAAY;AACrB;AAEA,SAASQ,aAAaA,CAACnV,IAAI,EAAa;EAAA,IAAX8E,KAAK,GAAAnU,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC;EACpC,IAAI,CAACqP,IAAI,IAAIxR,OAAA,CAAOwR,IAAI,MAAK,QAAQ,EAAE;IACrCkB,OAAO,CAACgB,KAAK,CAAC,uCAAuC,EAAElC,IAAI,CAAC;IAC5D,OAAOA,IAAI;EACb;EAEA,IAAIA,IAAI,CAACoV,cAAc,EAAE;IACvBlU,OAAO,CAACC,IAAI,SAAAU,MAAA,CAAS7B,IAAI,CAACrO,IAAI,+BAA4B,CAAC;IAC3D,OAAOqO,IAAI;EACb;EAEA,IAAMqV,cAAc,GAAA3kB,aAAA,KAAQsP,IAAI,CAAE;EAClC,IAAMsV,aAAa,GAAGD,cAAc,CAAChU,QAAQ,IAAI,CAAC;EAClD,IAAMkU,QAAQ,GAAGxX,IAAI,CAACmL,GAAG,CAACoM,aAAa,GAAGxQ,KAAK,EAAE,CAAC,CAAC,CAAC;EACpD,IAAM0Q,SAAS,GAAGF,aAAa,GAAGC,QAAQ;;EAE1C;EACA,IAAME,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAS;IAC5B,IAAI,UAAU,IAAIzV,IAAI,EACpBqV,cAAc,CAAChb,QAAQ,GAAG0D,IAAI,CAACC,KAAK,CAACgC,IAAI,CAAC3F,QAAQ,GAAG,CAAC,CAAC;IACzD,IAAI,WAAW,IAAI2F,IAAI,EACrBqV,cAAc,CAAC/a,SAAS,GAAGyD,IAAI,CAACC,KAAK,CAACgC,IAAI,CAAC1F,SAAS,GAAG,CAAC,CAAC;IAC3D,IAAI,SAAS,IAAI0F,IAAI,EACnBqV,cAAc,CAAC9a,OAAO,GAAGwD,IAAI,CAACC,KAAK,CAACgC,IAAI,CAACzF,OAAO,GAAG,CAAC,CAAC;IACvD,IAAI,qCAAqC,IAAIyF,IAAI,EAC/CqV,cAAc,CAAC7a,mCAAmC,GAAGuD,IAAI,CAACC,KAAK,CAC7DgC,IAAI,CAACxF,mCAAmC,GAAG,CAC7C,CAAC;IACH,IAAI,qCAAqC,IAAIwF,IAAI,EAC/CqV,cAAc,CAACza,mCAAmC,GAAGmD,IAAI,CAACC,KAAK,CAC7DgC,IAAI,CAACpF,mCAAmC,GAAG,CAC7C,CAAC;IACH,IAAI,UAAU,IAAIoF,IAAI,EACpBqV,cAAc,CAAC5a,QAAQ,GAAGsD,IAAI,CAACC,KAAK,CAACgC,IAAI,CAACvF,QAAQ,GAAG,CAAC,CAAC;IACzD,IAAI,QAAQ,IAAIuF,IAAI,EAAEqV,cAAc,CAAC1a,MAAM,GAAGoD,IAAI,CAACC,KAAK,CAACgC,IAAI,CAACrF,MAAM,GAAG,CAAC,CAAC;IACzE,IAAI,YAAY,IAAIqF,IAAI,EACtBqV,cAAc,CAACT,UAAU,GAAG7W,IAAI,CAACC,KAAK,CAACgC,IAAI,CAAC4U,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC;EACnE,CAAC;EAED,IAAIW,QAAQ,KAAK,CAAC,CAAC,EAAE;IACnBE,eAAe,CAAC,CAAC;EACnB,CAAC,MAAM;IACL;IACA,IAAI,UAAU,IAAIJ,cAAc,EAAEA,cAAc,CAAChb,QAAQ,IAAI,CAAC,GAAGmb,SAAS;IAE1E,IAAI,WAAW,IAAIH,cAAc,EAC/BA,cAAc,CAAC/a,SAAS,IAAI,GAAG,GAAGkb,SAAS;IAE7C,IAAI,SAAS,IAAIH,cAAc,EAAEA,cAAc,CAAC9a,OAAO,IAAI,CAAC,GAAGib,SAAS;IAExE,IAAI,qCAAqC,IAAIH,cAAc,EACzDA,cAAc,CAAC7a,mCAAmC,IAAI,CAAC,GAAGgb,SAAS;IAErE,IAAI,qCAAqC,IAAIH,cAAc,EACzDA,cAAc,CAACza,mCAAmC,IAAI,CAAC,GAAG4a,SAAS;IAErE,IAAI,UAAU,IAAIH,cAAc,EAAEA,cAAc,CAAC5a,QAAQ,IAAI,CAAC,GAAG+a,SAAS;IAE1E,IAAI,QAAQ,IAAIH,cAAc,EAAEA,cAAc,CAAC1a,MAAM,IAAI,CAAC,GAAG6a,SAAS;IAEtE,IAAI,YAAY,IAAIH,cAAc,EAChCA,cAAc,CAACT,UAAU,IAAI,CAAC,GAAGY,SAAS;EAC9C;;EAEA;EACAH,cAAc,CAAChU,QAAQ,GAAGkU,QAAQ;;EAElC;EACA,IAAMT,QAAQ,GAAG9U,IAAI,CAACrO,IAAI,CAACojB,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;EACrD,IAAIQ,QAAQ,GAAG,CAAC,EAAE;IAChBF,cAAc,CAAC1jB,IAAI,MAAAkQ,MAAA,CAAMiT,QAAQ,QAAAjT,MAAA,CAAK0T,QAAQ,CAAE;EAClD,CAAC,MAAM,IAAIA,QAAQ,KAAK,CAAC,CAAC,EAAE;IAC1BF,cAAc,CAAC1jB,IAAI,MAAAkQ,MAAA,CAAMiT,QAAQ,QAAK;EACxC,CAAC,MAAM;IACLO,cAAc,CAAC1jB,IAAI,GAAGmjB,QAAQ;EAChC;EAEA,OAAOO,cAAc;AACvB;AAEA,SAAS/Y,aAAaA,CAAC2D,MAAM,EAAa;EAAA,IAAX6E,KAAK,GAAAnU,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC;EACtC,IAAI,CAACsP,MAAM,IAAIzR,OAAA,CAAOyR,MAAM,MAAK,QAAQ,EAAE;IACzCiB,OAAO,CAACgB,KAAK,CAAC,yCAAyC,EAAEjC,MAAM,CAAC;IAChE,OAAOA,MAAM;EACf;;EAEA;EACA,IAAMyV,cAAc,GAAAhlB,aAAA,KAAQuP,MAAM,CAAE;EAEpC,IAAI6L,UAAU,GAAG,KAAK;;EAEtB;EACA,IAAI,eAAe,IAAI4J,cAAc,EAAE;IACrCA,cAAc,CAACvY,aAAa,IAAI,CAAC,GAAG2H,KAAK;IACzCgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,UAAU,IAAI4J,cAAc,EAAE;IAChCA,cAAc,CAACtZ,QAAQ,IAAI0I,KAAK;IAChCgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,eAAe,IAAI4J,cAAc,EAAE;IACrCA,cAAc,CAACrY,aAAa,IAAIyH,KAAK,GAAG,CAAC;IACzCgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,oBAAoB,IAAI4J,cAAc,EAAE;IAC1CA,cAAc,CAACpY,kBAAkB,IAAIwH,KAAK;IAC1CgH,UAAU,GAAG,IAAI;EACnB;EACA,IAAI,UAAU,IAAI4J,cAAc,EAAE;IAChCA,cAAc,CAACjb,QAAQ,IAAIqK,KAAK;IAChCgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,UAAU,IAAI4J,cAAc,EAAE;IAChCA,cAAc,CAACrb,QAAQ,IAAI,CAAC,GAAGyK,KAAK;IACpCgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,WAAW,IAAI4J,cAAc,EAAE;IACjCA,cAAc,CAACpb,SAAS,IAAI,GAAG,GAAGwK,KAAK;IACvCgH,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,CAACA,UAAU,EAAE;IACf5K,OAAO,CAACgB,KAAK,+BAAAL,MAAA,CAA+B5B,MAAM,CAACtO,IAAI,CAAE,CAAC;IAC1D,OAAOsO,MAAM;EACf;;EAEA;EACAyV,cAAc,CAACrU,QAAQ,GAAG,CAACqU,cAAc,CAACrU,QAAQ,IAAI,CAAC,IAAIyD,KAAK;;EAEhE;EACA4Q,cAAc,CAAC/jB,IAAI,GACjBsO,MAAM,CAACtO,IAAI,CAACojB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,QAAAlT,MAAA,CAAQ6T,cAAc,CAACrU,QAAQ,CAAE;EAEtE,OAAOqU,cAAc;AACvB;AAEA,SAASnH,iBAAiBA,CAACvO,IAAI,EAAEE,GAAG,EAAE;EACpC,IAAI,CAACF,IAAI,IAAIxR,OAAA,CAAOwR,IAAI,MAAK,QAAQ,EAAE;IACrCkB,OAAO,CAACgB,KAAK,CAAC,2CAA2C,EAAElC,IAAI,CAAC;IAChE,OAAOA,IAAI;EACb;EAEA,IAAIA,IAAI,CAACzE,YAAY,EAAE;IACrB2F,OAAO,CAACC,IAAI,SAAAU,MAAA,CAAS7B,IAAI,CAACrO,IAAI,6BAA0B,CAAC;IACzD,OAAOqO,IAAI;EACb;EAEA,IAAI,CAACE,GAAG,IAAI1R,OAAA,CAAO0R,GAAG,MAAK,QAAQ,IAAI,CAACA,GAAG,CAACvO,IAAI,EAAE;IAChDuP,OAAO,CAACgB,KAAK,CAAC,0CAA0C,EAAEhC,GAAG,CAAC;IAC9D,OAAOF,IAAI;EACb;EAEA,IAAM2V,YAAY,GAAAjlB,aAAA,KAAQsP,IAAI,CAAE;EAChC,IAAM4V,YAAY,GAAGD,YAAY,CAACtU,QAAQ,IAAI,CAAC;EAE/C,IAAMwU,WAAW,GAAG,SAAdA,WAAWA,CAAI5W,GAAG,EAAE6W,UAAU,EAAEC,UAAU,EAAK;IACnDJ,YAAY,CAAC1W,GAAG,CAAC,GACf,CAAC0W,YAAY,CAAC1W,GAAG,CAAC,IAAI,CAAC,IAAI6W,UAAU,GAAGC,UAAU,GAAGH,YAAY;EACrE,CAAC;;EAED;;EAEA,IAAI,UAAU,IAAI1V,GAAG,EAAE2V,WAAW,CAAC,UAAU,EAAE3V,GAAG,CAAC7F,QAAQ,EAAE,CAAC,CAAC;EAC/D,IAAI,WAAW,IAAI6F,GAAG,EAAE2V,WAAW,CAAC,WAAW,EAAE3V,GAAG,CAAC5F,SAAS,EAAE,GAAG,CAAC;EACpE,IAAI,SAAS,IAAI4F,GAAG,EAAE2V,WAAW,CAAC,SAAS,EAAE3V,GAAG,CAAC3F,OAAO,EAAE,CAAC,CAAC;EAC5D,IAAI,qCAAqC,IAAI2F,GAAG,EAC9C2V,WAAW,CACT,qCAAqC,EACrC3V,GAAG,CAAC1F,mCAAmC,EACvC,CACF,CAAC;EACH,IAAI,qCAAqC,IAAI0F,GAAG,EAC9C2V,WAAW,CACT,qCAAqC,EACrC3V,GAAG,CAACtF,mCAAmC,EACvC,CACF,CAAC;EACH,IAAI,QAAQ,IAAIsF,GAAG,EAAE2V,WAAW,CAAC,QAAQ,EAAE3V,GAAG,CAACrF,MAAM,EAAE,CAAC,CAAC;EACzD,IAAI,YAAY,IAAIqF,GAAG,EAAEyV,YAAY,CAACK,UAAU,GAAG9V,GAAG,CAAC8V,UAAU;EACjE,IAAI,UAAU,IAAI9V,GAAG,EAAE2V,WAAW,CAAC,UAAU,EAAE3V,GAAG,CAACzF,QAAQ,EAAE,CAAC,CAAC;EAC/D,IAAI,QAAQ,IAAIyF,GAAG,EAAE2V,WAAW,CAAC,QAAQ,EAAE3V,GAAG,CAACvF,MAAM,EAAE,CAAC,CAAC;EACzD,IAAI,YAAY,IAAIuF,GAAG,EAAE2V,WAAW,CAAC,YAAY,EAAE3V,GAAG,CAAC0U,UAAU,EAAE,CAAC,CAAC,CAAC;;EAEtE;EACA,IAAI,gBAAgB,IAAI1U,GAAG,EAAE;IAC3ByV,YAAY,CAAC1a,cAAc,GACzB,CAAC0a,YAAY,CAAC1a,cAAc,IAAI,CAAC,IAAIiF,GAAG,CAACjF,cAAc;EAC3D;EACA;EACA,IAAI,yBAAyB,IAAIiF,GAAG,EAAE;IACpCyV,YAAY,CAAC7a,uBAAuB,GAAGoF,GAAG,CAACpF,uBAAuB;IAClE;IACA,IAAI,OAAO6a,YAAY,CAACvb,OAAO,KAAK,QAAQ,EAAE;MAC5Cub,YAAY,CAACvb,OAAO,IAAI8F,GAAG,CAACpF,uBAAuB,GAAG8a,YAAY;IACpE;EACF;;EAEA;EACA,IAAI,0BAA0B,IAAI1V,GAAG,EAAE;IACrCyV,YAAY,CAAC5a,wBAAwB,GAAGmF,GAAG,CAACnF,wBAAwB;IACpE;IACA,IAAI,OAAO4a,YAAY,CAAC9a,MAAM,KAAK,QAAQ,EAAE;MAC3C8a,YAAY,CAAC9a,MAAM,IAAIkD,IAAI,CAAC8W,GAAG,CAC7B3U,GAAG,CAACnF,wBAAwB,EAC5B6a,YACF,CAAC;IACH;EACF;;EAEA;EACA,IAAI3mB,KAAK,CAACC,OAAO,CAACgR,GAAG,CAAClF,WAAW,CAAC,EAAE;IAClC2a,YAAY,CAAC3a,WAAW,GAAG/L,KAAK,CAACC,OAAO,CAACymB,YAAY,CAAC3a,WAAW,CAAC,GAAA3J,kBAAA,CAC1DskB,YAAY,CAAC3a,WAAW,IAC5B,EAAE;IAAC,IAAAib,UAAA,GAAAnnB,0BAAA,CAEeoR,GAAG,CAAClF,WAAW;MAAAkb,MAAA;IAAA;MAArC,KAAAD,UAAA,CAAA3mB,CAAA,MAAA4mB,MAAA,GAAAD,UAAA,CAAA1mB,CAAA,IAAAC,IAAA,GAAuC;QAAA,IAA5B2mB,OAAO,GAAAD,MAAA,CAAAzmB,KAAA;QAChB,IAAI,CAACkmB,YAAY,CAAC3a,WAAW,CAACuG,QAAQ,CAAC4U,OAAO,CAAC,EAAE;UAC/CR,YAAY,CAAC3a,WAAW,CAACxK,IAAI,CAAC2lB,OAAO,CAAC;QACxC;MACF;IAAC,SAAA1T,GAAA;MAAAwT,UAAA,CAAAlnB,CAAA,CAAA0T,GAAA;IAAA;MAAAwT,UAAA,CAAAvmB,CAAA;IAAA;EACH;;EAEA;;EAEA,IAAI,YAAY,IAAIwQ,GAAG,IAAI1R,OAAA,CAAO0R,GAAG,CAAChF,UAAU,MAAK,QAAQ,EAAE;IAAA,IAAAkb,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IAC7D,IAAMC,OAAO,GAAGrW,GAAG,CAAChF,UAAU;IAC9B,IAAMsb,QAAQ,GAAGD,OAAO,CAACpb,IAAI,IAAI,CAAC;IAClC,IAAMsb,SAAS,GAAGF,OAAO,CAACnb,KAAK,IAAI,CAAC;IACpC,IAAMsb,SAAS,GAAGH,OAAO,CAAClb,SAAS,IAAI,CAAC;IAExCsa,YAAY,CAACza,UAAU,GAAG;MACxBC,IAAI,EAAE,CAAC,EAAAib,qBAAA,GAAAT,YAAY,CAACza,UAAU,cAAAkb,qBAAA,uBAAvBA,qBAAA,CAAyBjb,IAAI,KAAI,CAAC,IAAIqb,QAAQ,GAAGZ,YAAY;MACpExa,KAAK,EAAE,CAAC,EAAAib,sBAAA,GAAAV,YAAY,CAACza,UAAU,cAAAmb,sBAAA,uBAAvBA,sBAAA,CAAyBjb,KAAK,KAAI,CAAC,IAAIqb,SAAS,GAAGb,YAAY;MACvEva,SAAS,EACP,CAAC,EAAAib,sBAAA,GAAAX,YAAY,CAACza,UAAU,cAAAob,sBAAA,uBAAvBA,sBAAA,CAAyBjb,SAAS,KAAI,CAAC,IAAIqb,SAAS,GAAGd;IAC5D,CAAC;EACH;;EAEA;;EAEAD,YAAY,CAACzV,GAAG,GAAGA,GAAG;;EAEtB;EACA,IAAIyW,UAAU,GAAG,EAAE;EACnB,IACEhB,YAAY,CAACza,UAAU,IACvB,OAAOya,YAAY,CAACza,UAAU,CAACC,IAAI,KAAK,QAAQ,IAChD,OAAOwa,YAAY,CAACza,UAAU,CAACE,KAAK,KAAK,QAAQ,EACjD;IACA,IAAAwb,sBAAA,GAAmCjB,YAAY,CAACza,UAAU;MAAlDC,IAAI,GAAAyb,sBAAA,CAAJzb,IAAI;MAAEC,KAAK,GAAAwb,sBAAA,CAALxb,KAAK;MAAEC,SAAS,GAAAub,sBAAA,CAATvb,SAAS;IAC9Bsb,UAAU,OAAA9U,MAAA,CAAO1G,IAAI,OAAA0G,MAAA,CAAIzG,KAAK,EAAAyG,MAAA,CAAGxG,SAAS,OAAAwG,MAAA,CAAOxG,SAAS,IAAK,EAAE,CAAE;EACrE;;EAEA;EACAsa,YAAY,CAAChkB,IAAI,MAAAkQ,MAAA,CAAM3B,GAAG,CAACvO,IAAI,OAAAkQ,MAAA,CAAI7B,IAAI,CAACrO,IAAI,CAACojB,OAAO,CAClD,oBAAoB,EACpB,EACF,CAAC,EAAAlT,MAAA,CAAG8U,UAAU,CAAE;EAEhB,OAAOhB,YAAY;AACrB;AAEA,SAAS/N,4BAA4BA,CAAA,EAAW;EAAA,IAAVzE,IAAI,GAAAxS,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC;EAC5C,OAAAE,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,CAAAA,eAAA,KACGkF,QAAQ,CAACG,MAAM,EAAG6H,IAAI,CAACmL,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG/F,IAAI,GAAG,CAAC,CAAC,GAC7CpN,QAAQ,CAACI,QAAQ,EAAG4H,IAAI,CAACmL,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG/F,IAAI,CAAC,GAC3CpN,QAAQ,CAACK,IAAI,EAAG2H,IAAI,CAACiO,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG7I,IAAI,CAAC,GACtCpN,QAAQ,CAACM,MAAM,EAAG0H,IAAI,CAACiO,GAAG,CAAC,EAAE,EAAE,CAAC,GAAGjO,IAAI,CAAC8Y,IAAI,CAAC1T,IAAI,GAAG,CAAC,CAAC,CAAC,GACvDpN,QAAQ,CAACO,SAAS,EAAGyH,IAAI,CAACiO,GAAG,CAAC,CAAC,EAAE,CAAC,GAAGjO,IAAI,CAAC8Y,IAAI,CAAC1T,IAAI,GAAG,CAAC,CAAC,CAAC;AAE9D;AACA,SAAS8G,eAAeA,CAACpK,KAAK,EAAE6B,KAAK,EAAwB;EAAA,IAAtBoV,OAAO,GAAAnmB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,UAAU;EACzD,IAAIkP,KAAK,CAACoD,IAAI,GAAGvB,KAAK,EAAE;IACtBR,OAAO,CAACC,IAAI,wBAAAU,MAAA,CAAwBiV,OAAO,MAAG,CAAC;IAC/C,OAAOjX,KAAK,CAAC,CAAC;EAChB;EAEA,OAAAnP,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRoD,IAAI,EAAEpD,KAAK,CAACoD,IAAI,GAAGvB,KAAK;IAAE;IAC1BE,GAAG,YAAAC,MAAA,CAAYH,KAAK,eAAAG,MAAA,CAAYiV,OAAO,QAAAjV,MAAA,CAAAxQ,kBAAA,CAAQwO,KAAK,CAAC+B,GAAG;EAAC;AAE7D;AACA,SAASyH,kBAAkBA,CACzBxJ,KAAK,EACLkX,YAAY,EAEZ;EAAA,IADAD,OAAO,GAAAnmB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG;IAAEqlB,UAAU,EAAE;EAAK,CAAC;EAE9B,IAAIvM,YAAY,GAAA/Y,aAAA,KAAQmP,KAAK,CAAE;EAC/B,IAAI2J,MAAM,GAAGsN,OAAO,CAACxX,OAAO,IAAI,IAAI;EAAC,IAAA0X,UAAA,GAAAloB,0BAAA,CAEjB2a,YAAY,CAACkB,SAAS;IAAAsM,MAAA;EAAA;IAAA,IAAAC,MAAA,YAAAA,OAAA,EAAE;QAAA,IAAAC,eAAA;QAAA,IAAjChX,KAAK,GAAA8W,MAAA,CAAAxnB,KAAA;QACd,IAAM2nB,MAAM,IAAAD,eAAA,GAAGhX,KAAK,CAACzE,QAAQ,cAAAyb,eAAA,uBAAdA,eAAA,CAAiBJ,YAAY,CAAC;QAC7C,IAAI,CAACK,MAAM;QAEX,IAAIL,YAAY,KAAKpjB,cAAc,CAACI,YAAY,IAAI+iB,OAAO,CAAC7W,MAAM,EAAE;UAClE,IAAImX,MAAM,CAAC7a,UAAU,EAAE;YACrBkN,YAAY,GAAG+B,IAAI,CAAC/B,YAAY,EAAE2N,MAAM,CAAC7a,UAAU,CAAC;YACpDkN,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,sBAAAkQ,MAAA,CAAmBuV,MAAM,CAAC7a,UAAU,mCAAAsF,MAAA,CAAAxQ,kBAAA,CAC9CoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;QACF;QAEA,IACEmV,YAAY,KAAKpjB,cAAc,CAACa,WAAW,IAC3C,OAAOsiB,OAAO,CAAClL,MAAM,KAAK,QAAQ,IAClC,OAAOkL,OAAO,CAACd,UAAU,KAAK,QAAQ,IACtCoB,MAAM,CAACva,cAAc,IACrBua,MAAM,CAACxa,iBAAiB,KAAKka,OAAO,CAACd,UAAU,EAC/C;UACA,IAAMqB,WAAW,GAAGP,OAAO,CAAClL,MAAM,IAAIwL,MAAM,CAACva,cAAc,GAAG,CAAC,CAAC;UAEhE4M,YAAY,GAAG6N,UAAU,CACvB7N,YAAY,EACZ4N,WAAW,EACX,CAACP,OAAO,CAACd,UAAU,CAAC,EACpB;YACEuB,OAAO,EAAE;UACX,CACF,CAAC;UAED9N,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;YACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,sBAAAkQ,MAAA,CAAmBiV,OAAO,CAACd,UAAU,kBAAAnU,MAAA,CAAewV,WAAW,QAAAxV,MAAA,CAAAxQ,kBAAA,CACzEoY,YAAY,CAAC7H,GAAG;UACpB,EACF;QACH;QAEA,IACEmV,YAAY,KAAKpjB,cAAc,CAACG,aAAa,IAC7CsjB,MAAM,CAAC9a,aAAa,IACpBkN,MAAM,EACN;UACAA,MAAM,GAAGlN,aAAa,CAACkN,MAAM,EAAE,CAAC,CAAC;UACjCC,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;YACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,gDAAAkQ,MAAA,CAAAxQ,kBAAA,CACVoY,YAAY,CAAC7H,GAAG;UACpB,EACF;QACH;QAEA,IACEmV,YAAY,KAAKpjB,cAAc,CAACC,WAAW,IAC3CwjB,MAAM,CAAC/a,WAAW,IAClBmN,MAAM,EACN;UACAA,MAAM,GAAGnN,WAAW,CAACmN,MAAM,EAAE,CAAC,CAAC;UAC/BC,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;YACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,8CAAAkQ,MAAA,CAAAxQ,kBAAA,CACVoY,YAAY,CAAC7H,GAAG;UACpB,EACF;QACH;QAEA,IACEmV,YAAY,KAAKpjB,cAAc,CAACC,WAAW,IAC3CwjB,MAAM,CAACpa,mBAAmB,IAC1BwM,MAAM,IACNva,KAAK,CAACC,OAAO,CAACsa,MAAM,CAACxO,WAAW,CAAC,IACjCwO,MAAM,CAACxO,WAAW,CAACuG,QAAQ,CAACzO,YAAY,CAACE,IAAI,CAAC,EAC9C;UACAwW,MAAM,GAAA9Y,aAAA,CAAAA,aAAA,KACD8Y,MAAM;YACTpP,OAAO,EAAE2D,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAEM,MAAM,CAACpP,OAAO,GAAGgd,MAAM,CAACpa,mBAAmB;UAAC,EAClE;UAEDyM,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;YACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,mDAAAkQ,MAAA,CAAAxQ,kBAAA,CACVoY,YAAY,CAAC7H,GAAG;UACpB,EACF;QACH;QAEA,IAAImV,YAAY,KAAKpjB,cAAc,CAACE,YAAY,IAAIijB,OAAO,CAAC3W,KAAK,EAAE;UACjE,IAAM4C,QAAQ,GAAArS,aAAA,KAAQ+Y,YAAY,CAAC1G,QAAQ,CAAE;UAC7C,IAAIyU,SAAS,GAAG/N,YAAY,CAACnG,MAAM;UACnC,IAAImU,YAAY,GAAGhO,YAAY,CAACpG,SAAS;UAEzC,IAAI+T,MAAM,CAACra,8BAA8B,GAAG,CAAC,EAAE;YAC7C,IAAI2a,aAAa,GAAG,CAAC;YAErB3U,QAAQ,CAACX,IAAI,GAAGW,QAAQ,CAACX,IAAI,CAACvB,GAAG,CAAC,UAACb,IAAI,EAAK;cAC1C,IACE/Q,KAAK,CAACC,OAAO,CAAC8Q,IAAI,CAAChF,WAAW,CAAC,IAC/BgF,IAAI,CAAChF,WAAW,CAACuG,QAAQ,CAACzO,YAAY,CAACE,IAAI,CAAC,IAC5C,OAAOgN,IAAI,CAAC5F,OAAO,KAAK,QAAQ,EAChC;gBACAsd,aAAa,EAAE;gBACf,OAAAhnB,aAAA,CAAAA,aAAA,KACKsP,IAAI;kBACP5F,OAAO,EAAE2D,IAAI,CAACmL,GAAG,CACf,CAAC,EACDlJ,IAAI,CAAC5F,OAAO,GAAGgd,MAAM,CAACra,8BACxB;gBAAC;cAEL;cACA,OAAOiD,IAAI;YACb,CAAC,CAAC;YAEF,IAAI0X,aAAa,GAAG,CAAC,EAAE;cACrBjO,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;gBACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,+BAAAkQ,MAAA,CAA4B6V,aAAa,kCAAA7V,MAAA,CAAAxQ,kBAAA,CACnDoY,YAAY,CAAC7H,GAAG;cACpB,EACF;YACH;UACF;UAEA,IAAIwV,MAAM,CAACrb,UAAU,EAAE;YACrBgH,QAAQ,CAACoO,KAAK,IAAIiG,MAAM,CAACrb,UAAU;YACnC0N,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,iBAAAkQ,MAAA,CAAcuV,MAAM,CAACrb,UAAU,kBAAA8F,MAAA,CAAAxQ,kBAAA,CACzCoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;UAEA,IAAIwV,MAAM,CAAChb,QAAQ,EAAE;YACnB2G,QAAQ,CAAC2I,GAAG,IAAI0L,MAAM,CAAChb,QAAQ;YAC/BqN,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,iBAAAkQ,MAAA,CAAcuV,MAAM,CAAChb,QAAQ,gBAAAyF,MAAA,CAAAxQ,kBAAA,CACvCoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;UAEA,IAAIwV,MAAM,CAACjb,UAAU,EAAE;YACrB4G,QAAQ,CAACmO,KAAK,IAAIkG,MAAM,CAACjb,UAAU;YACnCsN,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,iBAAAkQ,MAAA,CAAcuV,MAAM,CAACjb,UAAU,kBAAA0F,MAAA,CAAAxQ,kBAAA,CACzCoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;UAEA,IAAIwV,MAAM,CAACna,aAAa,EAAE;YACxB8F,QAAQ,CAACqO,QAAQ,IAAIgG,MAAM,CAACna,aAAa;YACzCwM,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,mCAAAkQ,MAAA,CAAgCuV,MAAM,CAACna,aAAa,QAAA4E,MAAA,CAAAxQ,kBAAA,CAC9DoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;UAEA,IAAIwV,MAAM,CAAClb,WAAW,EAAE;YACtBsb,SAAS,IAAIJ,MAAM,CAAClb,WAAW;YAC/Bub,YAAY,IAAIL,MAAM,CAAClb,WAAW;YAClCuN,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,oCAAAkQ,MAAA,CAAiCuV,MAAM,CAAClb,WAAW,WAAA2F,MAAA,CAAAxQ,kBAAA,CAC7DoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;UAEA,IAAIwV,MAAM,CAACnb,SAAS,EAAE;YACpBwN,YAAY,GAAGiG,QAAQ,CAACjG,YAAY,EAAE2N,MAAM,CAACnb,SAAS,CAAC;YACvDwN,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,gBAAAkQ,MAAA,CAAauV,MAAM,CAACnb,SAAS,aAAA4F,MAAA,CAAAxQ,kBAAA,CACvCoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;UAEA,IAAIwV,MAAM,CAACpb,gBAAgB,EAAE;YAC3ByN,YAAY,GAAGmE,mBAAmB,CAChCnE,YAAY,EACZ2N,MAAM,CAACpb,gBACT,CAAC;YACDyN,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,aAAAkQ,MAAA,CAAUuV,MAAM,CAACpb,gBAAgB,qBAAA6F,MAAA,CAAAxQ,kBAAA,CAC3CoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;UAEA,IAAIwV,MAAM,CAAC5c,mCAAmC,GAAG,CAAC,EAAE;YAClD,IAAQ4H,IAAI,GAAKW,QAAQ,CAAjBX,IAAI;YACZ,IAAM2J,YAAY,GAAGhO,IAAI,CAACiO,GAAG,CAC3BoL,MAAM,CAAC5c,mCAAmC,EAC1C4H,IAAI,CAACjT,MACP,CAAC;YAED,IAAMwoB,YAAY,GAAGnd,mCAAmC,CACtD4H,IAAI,EACJ2J,YACF,CAAC;YAEDhJ,QAAQ,CAACX,IAAI,GAAGuV,YAAY;YAE5BlO,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,4BAAAkQ,MAAA,CAAyBkK,YAAY,6BAAAlK,MAAA,CAAAxQ,kBAAA,CAC/CoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;UAEA6H,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;YACf1G,QAAQ,EAARA,QAAQ;YACRO,MAAM,EAAEkU,SAAS;YACjBnU,SAAS,EAAEoU;UAAY,EACxB;QACH;QAEA,IACEV,YAAY,KAAKpjB,cAAc,CAACK,kBAAkB,IAClDojB,MAAM,CAAC5a,mBAAmB,EAC1B;UACAiN,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;YACf9I,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJ+Y,YAAY,CAAC9I,SAAS;cACzBC,SAAS,EAAE6I,YAAY,CAAC9I,SAAS,CAACC,SAAS,CAACC,GAAG,CAAC,UAACC,KAAK,EAAK;gBACzD,IAAM8W,aAAa,GAAG7Z,IAAI,CAAC4D,KAAK,CAC9Bb,KAAK,CAACG,IAAI,CAACS,KAAK,GAAG0V,MAAM,CAAC5a,mBAC5B,CAAC;gBACD,OAAA9L,aAAA,CAAAA,aAAA,KACKoQ,KAAK;kBACRG,IAAI,EAAAvQ,aAAA,CAAAA,aAAA,KACCoQ,KAAK,CAACG,IAAI;oBACbS,KAAK,EAAEkW;kBAAa;gBACrB;cAEL,CAAC;YAAC,EACH;YACDhW,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,8BAAAkQ,MAAA,CAA2B9D,IAAI,CAAC4D,KAAK,CAChD,CAAC,CAAC,GAAGyV,MAAM,CAAC5a,mBAAmB,IAAI,GACrC,CAAC,SAAAqF,MAAA,CAAAxQ,kBAAA,CACEoY,YAAY,CAAC7H,GAAG;UACpB,EACF;QACH;QAEA,IAAImV,YAAY,KAAKpjB,cAAc,CAACM,IAAI,EAAE;UACxC,IAAImjB,MAAM,CAAC7a,UAAU,EAAE;YACrBkN,YAAY,GAAG+B,IAAI,CAAC/B,YAAY,EAAE2N,MAAM,CAAC7a,UAAU,CAAC;YACpDkN,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,sBAAAkQ,MAAA,CAAmBuV,MAAM,CAAC7a,UAAU,yBAAAsF,MAAA,CAAAxQ,kBAAA,CAC9CoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;UAEA,IAAIwV,MAAM,CAAC7c,OAAO,EAAE;YAClBkP,YAAY,GAAGiG,QAAQ,CAACjG,YAAY,EAAE2N,MAAM,CAAC7c,OAAO,CAAC;YACrDkP,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,gBAAAkQ,MAAA,CAAauV,MAAM,CAAC7c,OAAO,2BAAAsH,MAAA,CAAAxQ,kBAAA,CACrCoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;UAEA,IAAIwV,MAAM,CAAC5c,mCAAmC,GAAG,CAAC,EAAE;YAClD,IAAQ4H,KAAI,GAAKqH,YAAY,CAAC1G,QAAQ,CAA9BX,IAAI;YACZ,IAAM2J,aAAY,GAAGhO,IAAI,CAACiO,GAAG,CAC3BoL,MAAM,CAAC5c,mCAAmC,EAC1C4H,KAAI,CAACjT,MACP,CAAC;YAED,IAAMwoB,aAAY,GAAGnd,mCAAmC,CACtD4H,KAAI,EACJ2J,aACF,CAAC;YAEDtC,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf1G,QAAQ,EAAArS,aAAA,CAAAA,aAAA,KACH+Y,YAAY,CAAC1G,QAAQ;gBACxBX,IAAI,EAAEuV;cAAY,EACnB;cACD/V,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,4BAAAkQ,MAAA,CAAyBkK,aAAY,8BAAAlK,MAAA,CAAAxQ,kBAAA,CAC/CoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;QACF;QAEA,IACEmV,YAAY,KAAKpjB,cAAc,CAACQ,cAAc,IAC9CijB,MAAM,CAAC3a,oBAAoB,EAC3B;UACA,IAAM8M,YAAY,GAAGE,YAAY,CAAC9I,SAAS,CAAC8D,KAAK,CAAC5D,GAAG,CAAC,UAAC+D,IAAI;YAAA,OACzDA,IAAI,CAAC5C,oBAAoB,GAAAtR,aAAA,CAAAA,aAAA,KAChBkU,IAAI;cAAE5C,oBAAoB,EAAE;YAAK,KACtC4C,IAAI;UAAA,CACV,CAAC;UAED6E,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;YACf9I,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJ+Y,YAAY,CAAC9I,SAAS;cACzB8D,KAAK,EAAE8E;YAAY,EACpB;YACD3H,GAAG,MAAAC,MAAA,CAAM1B,KAAK,CAACxO,IAAI,kCAAAkQ,MAAA,CAAAxQ,kBAAA,CAAkCoY,YAAY,CAAC7H,GAAG;UAAC,EACvE;QACH;QAEA,IAAImV,YAAY,KAAKpjB,cAAc,CAACO,YAAY,EAAE;UAAA,IAAA2jB,oBAAA;UAChD,IAAIT,MAAM,CAAC1a,oBAAoB,KAAAmb,oBAAA,GAAIpO,YAAY,CAACgC,MAAM,cAAAoM,oBAAA,eAAnBA,oBAAA,CAAqBC,OAAO,EAAE;YAC/D,IAAMC,SAAS,GAAGha,IAAI,CAACC,KAAK,CAC1ByL,YAAY,CAACgC,MAAM,CAACqM,OAAO,GAAGV,MAAM,CAAC1a,oBACvC,CAAC;YACD+M,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM;gBACtBqM,OAAO,EAAErO,YAAY,CAACgC,MAAM,CAACqM,OAAO,GAAGC;cAAS,EACjD;cACDnW,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,6BAAAkQ,MAAA,CAA0BkW,SAAS,kCAAAlW,MAAA,CAAAxQ,kBAAA,CAC7CoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;QACF;QAEA,IACEmV,YAAY,KAAKpjB,cAAc,CAACU,SAAS,IACzC+iB,MAAM,CAACta,oBAAoB,IAC3B0M,MAAM;QAAI;QACVva,KAAK,CAACC,OAAO,CAACsa,MAAM,CAACxO,WAAW,CAAC,IACjCwO,MAAM,CAACxO,WAAW,CAACuG,QAAQ,CAACzO,YAAY,CAACG,SAAS,CAAC,EACnD;UACA,KAAK,IAAI7B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgmB,MAAM,CAACta,oBAAoB,EAAE1L,CAAC,EAAE,EAAE;YACpDqY,YAAY,GAAG4C,QAAQ,CAAC5C,YAAY,CAAC;UACvC;UAEAA,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;YACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,0BAAAkQ,MAAA,CACXuV,MAAM,CAACta,oBAAoB,WAAA+E,MAAA,CAE3BuV,MAAM,CAACta,oBAAoB,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,uCAAA+E,MAAA,CAAAxQ,kBAAA,CAEzCoY,YAAY,CAAC7H,GAAG;UACpB,EACF;QACH;QAEA,IAAImV,YAAY,KAAKpjB,cAAc,CAAC8E,SAAS,EAAE;UAC7C,IAAI,CAACgR,YAAY,CAACgC,MAAM,IAAIhC,YAAY,CAAC9F,YAAY,KAAKpN,MAAM,CAACM,MAAM;UAGvE,IAAIugB,MAAM,CAAC/c,QAAQ,EAAE;YACnBoP,YAAY,GAAG6C,UAAU,CAAC7C,YAAY,EAAE2N,MAAM,CAAC/c,QAAQ,CAAC;YACxDoP,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,aAAAkQ,MAAA,CAAUuV,MAAM,CAAC/c,QAAQ,WAAAwH,MAAA,CACpCuV,MAAM,CAAC/c,QAAQ,KAAK,CAAC,GAAG,GAAG,GAAG,KAAK,6BAAAwH,MAAA,CAAAxQ,kBAAA,CAElCoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;QACF;QAEA,IAAImV,YAAY,KAAKpjB,cAAc,CAACU,SAAS,EAAE;UAC7C,IAAI+iB,MAAM,CAAC/c,QAAQ,EAAE;YACnBoP,YAAY,GAAG6C,UAAU,CAAC7C,YAAY,EAAE2N,MAAM,CAAC/c,QAAQ,CAAC;YACxDoP,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,aAAAkQ,MAAA,CAAUuV,MAAM,CAAC/c,QAAQ,WAAAwH,MAAA,CACpCuV,MAAM,CAAC/c,QAAQ,KAAK,CAAC,GAAG,GAAG,GAAG,KAAK,+BAAAwH,MAAA,CAAAxQ,kBAAA,CAElCoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;QACF;QAEA,IAAImV,YAAY,KAAKpjB,cAAc,CAACW,cAAc,EAAE;UAClD,IAAI8iB,MAAM,CAAC7a,UAAU,EAAE;YACrBkN,YAAY,GAAG+B,IAAI,CAAC/B,YAAY,EAAE2N,MAAM,CAAC7a,UAAU,CAAC;YACpDkN,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,sBAAAkQ,MAAA,CAAmBuV,MAAM,CAAC7a,UAAU,uCAAAsF,MAAA,CAAAxQ,kBAAA,CAC9CoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;QACF;QAEA,IAAImV,YAAY,KAAKpjB,cAAc,CAACS,2BAA2B,EAAE;UAC/D,IAAIgjB,MAAM,CAAC7a,UAAU,EAAE;YACrBkN,YAAY,GAAG+B,IAAI,CAAC/B,YAAY,EAAE2N,MAAM,CAAC7a,UAAU,CAAC;YACpDkN,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,sBAAAkQ,MAAA,CAAmBuV,MAAM,CAAC7a,UAAU,0CAAAsF,MAAA,CAAAxQ,kBAAA,CAC9CoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;QACF;QAEA,IAAImV,YAAY,KAAKpjB,cAAc,CAACY,UAAU,EAAE;UAC9C,IAAI6iB,MAAM,CAAC7c,OAAO,EAAE;YAClBkP,YAAY,GAAGiG,QAAQ,CAACjG,YAAY,EAAE2N,MAAM,CAAC7c,OAAO,CAAC;YACrDkP,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;cACf7H,GAAG,MAAAC,MAAA,CACE1B,KAAK,CAACxO,IAAI,gBAAAkQ,MAAA,CAAauV,MAAM,CAAC7c,OAAO,0BAAAsH,MAAA,CAAAxQ,kBAAA,CACrCoY,YAAY,CAAC7H,GAAG;YACpB,EACF;UACH;QACF;MACF,CAAC;MAAAoW,KAAA;IAzcD,KAAAhB,UAAA,CAAA1nB,CAAA,MAAA2nB,MAAA,GAAAD,UAAA,CAAAznB,CAAA,IAAAC,IAAA;MAAAwoB,KAAA,GAAAd,MAAA;MAAA,IAAAc,KAAA,QAEe;IAAS;EAucvB,SAAAvV,GAAA;IAAAuU,UAAA,CAAAjoB,CAAA,CAAA0T,GAAA;EAAA;IAAAuU,UAAA,CAAAtnB,CAAA;EAAA;EAED,OAAAgB,aAAA,CAAAA,aAAA,KACK+Y,YAAY;IACfD,MAAM,EAANA;EAAM;AAEV;AAEA,SAASyO,kBAAkBA,CAACpY,KAAK,EAAEkX,YAAY,EAAgB;EAAA,IAAAmB,qBAAA;EAAA,IAAdpB,OAAO,GAAAnmB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC,CAAC;EAC3D,IAAI8Y,YAAY,GAAA/Y,aAAA,KAAQmP,KAAK,CAAE;EAC/B,IAAM8R,KAAK,IAAAuG,qBAAA,GAAGzO,YAAY,CAACgC,MAAM,cAAAyM,qBAAA,uBAAnBA,qBAAA,CAAqBvG,KAAK;EACxC,IAAI,CAACA,KAAK,EAAE,OAAOlI,YAAY;EAE/B,IAAM0O,SAAS,GAAGxG,KAAK,CAACwG,SAAS,IAAI,CAAC,CAAC;EACvC,IAAMC,WAAW,GAAG,EAAE;EAEtB,IAAIrB,YAAY,KAAKpjB,cAAc,CAACO,YAAY,EAAE;IAChD;IACA,IAAIikB,SAAS,CAAC9lB,eAAe,CAACE,SAAS,CAAC,EAAE;MACxC,IAAMqZ,MAAM,GAAGuM,SAAS,CAAC9lB,eAAe,CAACE,SAAS,CAAC;MAEnD,IAAM8lB,SAAS,GAAGta,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAEO,YAAY,CAACgC,MAAM,CAACE,MAAM,GAAGC,MAAM,CAAC;MAClE,IAAM0M,MAAM,GAAGva,IAAI,CAACiO,GAAG,CAACvC,YAAY,CAACgC,MAAM,CAACC,GAAG,EAAE2M,SAAS,CAAC,CAAC,CAAC;;MAE7D5O,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;QACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM;UACtBE,MAAM,EAAE0M,SAAS;UACjB3M,GAAG,EAAE4M;QAAM;MACZ,EACF;MAEDF,WAAW,CAAC5nB,IAAI,IAAAqR,MAAA,CACX8P,KAAK,CAAChgB,IAAI,eAAAkQ,MAAA,CAAY+J,MAAM,qCACjC,CAAC;IACH;;IAEA;IACA,IAAIuM,SAAS,CAAC9lB,eAAe,CAACG,eAAe,CAAC,EAAE;MAC9C,IAAM+lB,UAAU,GAAGJ,SAAS,CAAC9lB,eAAe,CAACG,eAAe,CAAC,CAAC,CAAC;;MAE/DiX,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;QACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM;UACtBqM,OAAO,EAAE/Z,IAAI,CAACC,KAAK,CAACyL,YAAY,CAACgC,MAAM,CAACqM,OAAO,GAAGS,UAAU,CAAC;UAC7D5G,KAAK,EAAAjhB,aAAA,CAAAA,aAAA,KACA+Y,YAAY,CAACgC,MAAM,CAACkG,KAAK;YAC5B6G,EAAE,EAAEza,IAAI,CAACC,KAAK,CAACyL,YAAY,CAACgC,MAAM,CAACkG,KAAK,CAAC6G,EAAE,GAAGD,UAAU;UAAC;QAC1D;MACF,EACF;MAEDH,WAAW,CAAC5nB,IAAI,IAAAqR,MAAA,CACX8P,KAAK,CAAChgB,IAAI,+BAAAkQ,MAAA,CAA4B9D,IAAI,CAAC4D,KAAK,CACjD,CAAC4W,UAAU,GAAG,CAAC,IAAI,GACrB,CAAC,OACH,CAAC;IACH;;IAEA;IACA,IAAIJ,SAAS,CAAC9lB,eAAe,CAACQ,eAAe,CAAC,EAAE;MAC9C,IAAM+Y,OAAM,GAAGuM,SAAS,CAAC9lB,eAAe,CAACQ,eAAe,CAAC;MACzD,IAAMuP,IAAI,GAAA/Q,kBAAA,CAAOoY,YAAY,CAACgC,MAAM,CAACrJ,IAAI,CAAC;MAC1C,IAAMqW,YAAY,GAAGrW,IAAI,CAAC/R,MAAM,CAAC,UAAC2P,IAAI;QAAA,OAAK,CAACA,IAAI,CAACoV,cAAc;MAAA,EAAC;MAEhE,IAAMnJ,QAAQ,GAAG5a,kBAAA,CAAIonB,YAAY,EAAEvM,IAAI,CAAC;QAAA,OAAMnO,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG;MAAA,EAAC;MAClE,IAAMya,WAAW,GAAGzM,QAAQ,CAACva,KAAK,CAAC,CAAC,EAAEka,OAAM,CAAC;MAE7C,IAAMsC,WAAW,GAAG9L,IAAI,CAACvB,GAAG,CAAC,UAACb,IAAI;QAAA,OAChC0Y,WAAW,CAACnX,QAAQ,CAACvB,IAAI,CAAC,GAAGmV,aAAa,CAACnV,IAAI,EAAE,CAAC,CAAC,GAAGA,IAAI;MAAA,CAC5D,CAAC;MAEDyJ,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;QACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM;UACtBrJ,IAAI,EAAE8L;QAAW;MAClB,EACF;MAEDkK,WAAW,CAAC5nB,IAAI,IAAAqR,MAAA,CACX8P,KAAK,CAAChgB,IAAI,kBAAAkQ,MAAA,CAAe6W,WAAW,CAACvpB,MAAM,2BAChD,CAAC;IACH;;IAEA;IACA,IAAIgpB,SAAS,CAAC9lB,eAAe,CAACI,mBAAmB,CAAC,EAAE;MAClD,IAAMmZ,QAAM,GAAGuM,SAAS,CAAC9lB,eAAe,CAACI,mBAAmB,CAAC;MAC7DgX,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;QACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM;UACtB2F,QAAQ,EAAErT,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAEO,YAAY,CAACgC,MAAM,CAAC2F,QAAQ,GAAGxF,QAAM;QAAC;MAC7D,EACF;MACDwM,WAAW,CAAC5nB,IAAI,IAAAqR,MAAA,CAAI8P,KAAK,CAAChgB,IAAI,iCAAAkQ,MAAA,CAA8B+J,QAAM,MAAG,CAAC;IACxE;;IAEA;IACA,IAAImL,YAAY,KAAKpjB,cAAc,CAACO,YAAY,EAAE;MAChD,IAAMikB,UAAS,GAAGxG,KAAK,CAACwG,SAAS,IAAI,CAAC,CAAC;MAEvC,IAAIA,UAAS,CAAC9lB,eAAe,CAACK,WAAW,CAAC,EAAE;QAC1C,IAAMkZ,QAAM,GAAGuM,UAAS,CAAC9lB,eAAe,CAACK,WAAW,CAAC;QACrD,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwa,QAAM,EAAExa,CAAC,EAAE,EAAE;UAC/BqY,YAAY,GAAGkP,mBAAmB,CAAClP,YAAY,EAAE,kBAAkB,CAAC;QACtE;QACA2O,WAAW,CAAC5nB,IAAI,IAAAqR,MAAA,CACX8P,KAAK,CAAChgB,IAAI,aAAAkQ,MAAA,CAAU+J,QAAM,oCAC/B,CAAC;MACH;MAEA,IAAIuM,UAAS,CAAC9lB,eAAe,CAACM,WAAW,CAAC,EAAE;QAC1C,IAAMiZ,QAAM,GAAGuM,UAAS,CAAC9lB,eAAe,CAACM,WAAW,CAAC;QACrD,KAAK,IAAIvB,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGwa,QAAM,EAAExa,GAAC,EAAE,EAAE;UAC/BqY,YAAY,GAAGkP,mBAAmB,CAAClP,YAAY,EAAE,iBAAiB,CAAC;QACrE;QACA2O,WAAW,CAAC5nB,IAAI,IAAAqR,MAAA,CACX8P,KAAK,CAAChgB,IAAI,aAAAkQ,MAAA,CAAU+J,QAAM,sCAC/B,CAAC;MACH;MAEA,IAAIuM,UAAS,CAAC9lB,eAAe,CAACO,WAAW,CAAC,EAAE;QAC1C,IAAMgZ,QAAM,GAAGuM,UAAS,CAAC9lB,eAAe,CAACO,WAAW,CAAC;QACrD,KAAK,IAAIxB,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGwa,QAAM,EAAExa,GAAC,EAAE,EAAE;UAC/BqY,YAAY,GAAGkP,mBAAmB,CAAClP,YAAY,EAAE,SAAS,CAAC;QAC7D;QACA2O,WAAW,CAAC5nB,IAAI,IAAAqR,MAAA,CACX8P,KAAK,CAAChgB,IAAI,aAAAkQ,MAAA,CAAU+J,QAAM,mCAC/B,CAAC;MACH;IACF;EACF;EAEA,IAAIwM,WAAW,CAACjpB,MAAM,GAAG,CAAC,EAAE;IAC1Bsa,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;MACf7H,GAAG,4CAAAC,MAAA,CAAqCuW,WAAW,EAAA/mB,kBAAA,CAAKoY,YAAY,CAAC7H,GAAG;IAAC,EAC1E;EACH;EAEA,OAAO6H,YAAY;AACrB;AAEA,SAASmP,eAAeA,CAAC/Y,KAAK,EAAE+L,MAAM,EAAE;EAAA,IAAAiN,iBAAA,EAAAC,aAAA,EAAAC,oBAAA,EAAAC,cAAA;EACtC,IAAMC,OAAO,IAAAJ,iBAAA,IAAAC,aAAA,GAAGjZ,KAAK,CAAC4L,MAAM,cAAAqN,aAAA,uBAAZA,aAAA,CAAcpN,GAAG,cAAAmN,iBAAA,cAAAA,iBAAA,GAAI,CAAC;EACtC,IAAM3P,GAAG,IAAA6P,oBAAA,IAAAC,cAAA,GAAGnZ,KAAK,CAAC4L,MAAM,cAAAuN,cAAA,uBAAZA,cAAA,CAAcrN,MAAM,cAAAoN,oBAAA,cAAAA,oBAAA,GAAI,CAAC;EAErC,IAAMT,MAAM,GAAGva,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAEnL,IAAI,CAACiO,GAAG,CAACiN,OAAO,GAAGrN,MAAM,EAAE1C,GAAG,CAAC,CAAC;EAC3D,IAAMgQ,YAAY,GAAGZ,MAAM,GAAGW,OAAO;;EAErC;EACA;EACA;EACA;EACA;EACA;;EAEA,OAAAvoB,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACR4L,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDmP,KAAK,CAAC4L,MAAM;MACfC,GAAG,EAAE4M;IAAM;IAEb;EAAA;AAEJ;AAEA,SAAS9M,IAAIA,CAAC3L,KAAK,EAAE+L,MAAM,EAAE;EAC3B,IAAMqN,OAAO,GAAGpZ,KAAK,CAACyD,MAAM,IAAI,CAAC;EACjC,IAAM4F,GAAG,GAAGrJ,KAAK,CAACwD,SAAS,IAAI,CAAC;EAChC,IAAMmU,SAAS,GAAGzZ,IAAI,CAACiO,GAAG,CAACiN,OAAO,GAAGrN,MAAM,EAAE1C,GAAG,CAAC;EACjD,IAAMwH,YAAY,GAAG8G,SAAS,GAAGyB,OAAO;EAExC,OAAAvoB,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRyD,MAAM,EAAEkU,SAAS;IACjB5V,GAAG,aAAAC,MAAA,CAAa6O,YAAY,WAAA7O,MAAA,CAAAxQ,kBAAA,CAAWwO,KAAK,CAAC+B,GAAG;EAAC;AAErD;AACA,SAAS8M,aAAaA,CAAC1O,IAAI,EAAE;EAC3B,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACrO,IAAI,EAAE;IACvBuP,OAAO,CAACgB,KAAK,CAAC,uCAAuC,EAAElC,IAAI,CAAC;IAC5D,OAAO,IAAI;EACb;;EAEA;EACA,IAAMmZ,gBAAgB,GAAG,IAAI5T,GAAG,CAAC,CAC/BpS,qBAAqB,CAACC;EACtB;EAAA,CACD,CAAC;EAEF,IAAMgmB,YAAY,GAAGlf,QAAQ,CAAC7J,MAAM,CAClC,UAAC+d,CAAC;IAAA,OACAA,CAAC,CAACzc,IAAI,KAAKqO,IAAI,CAACrO,IAAI,IACpB,CAACyc,CAAC,CAACiL,sBAAsB,KACxB,CAACjL,CAAC,CAAC3S,cAAc,IAAI,CAAC0d,gBAAgB,CAACzT,GAAG,CAAC0I,CAAC,CAAC3S,cAAc,CAAC,CAAC;EAAA,CAClE,CAAC;EAED,IAAI2d,YAAY,CAACjqB,MAAM,KAAK,CAAC,EAAE;IAC7B+R,OAAO,CAACC,IAAI,6CAAAU,MAAA,CACkC7B,IAAI,CAACrO,IAAI,0BACvD,CAAC;IACD,OAAAjB,aAAA,KAAYsP,IAAI;EAClB;EAEA,IAAMsZ,OAAO,GAAGF,YAAY,CAACrb,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGmb,YAAY,CAACjqB,MAAM,CAAC,CAAC;EAC7E,OAAOqT,kBAAkB,CAAC8W,OAAO,CAAC3nB,IAAI,EAAE,IAAI,EAAEqO,IAAI,CAACqB,QAAQ,EAAErB,IAAI,CAACE,GAAG,CAAC;AACxE;AAEA,SAASqZ,SAASA,CAAC1Z,KAAK,EAAEG,IAAI,EAAE;EAC9B,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACrO,IAAI,EAAE;IACvBuP,OAAO,CAACgB,KAAK,CAAC,mCAAmC,EAAElC,IAAI,CAAC;IACxD,OAAOH,KAAK;EACd;EAEA,IAAMqO,WAAW,GAAGrO,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAAC/R,MAAM,CAAC,UAAC+d,CAAC;IAAA,OAAKA,CAAC,KAAKpO,IAAI;EAAA,EAAC;EACjE,IAAM+O,YAAY,MAAAlN,MAAA,CAAAxQ,kBAAA,CAAQwO,KAAK,CAACyK,SAAS,IAAI,EAAE,IAAGtK,IAAI,EAAC;EAEvD,OAAAtP,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRkD,QAAQ,EAAArS,aAAA,CAAAA,aAAA,KACHmP,KAAK,CAACkD,QAAQ;MACjBX,IAAI,EAAE8L,WAAW;MACjB5D,SAAS,EAAEyE;IAAY,EACxB;IACDnN,GAAG,mBAAAC,MAAA,CAAmB7B,IAAI,CAACrO,IAAI,GAAAkQ,MAAA,CAAAxQ,kBAAA,CAAOwO,KAAK,CAAC+B,GAAG;EAAC;AAEpD;AAEA,SAASwC,qBAAqBA,CAACvE,KAAK,EAAE+E,IAAI,EAAE;EAAA,IAAA4U,aAAA,EAAAC,kBAAA;EAC1C,IAAM3U,KAAK,IAAA0U,aAAA,GAAG3Z,KAAK,CAACiF,KAAK,cAAA0U,aAAA,cAAAA,aAAA,GAAI,CAAC;;EAE9B;EACA,IAAME,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAAC,MAAA,EAAyB;IAAA,IAAnBC,YAAY,GAAAD,MAAA,CAAZC,YAAY;IAC7C,IAAI9U,KAAK,GAAG,EAAE,EAAE,OAAO8U,YAAY,GAAG,CAAC;IACvC,IAAI9U,KAAK,GAAG,EAAE,EAAE,OAAO8U,YAAY,GAAG,CAAC;IACvC,OAAOA,YAAY;EACrB,CAAC;EAED,IAAMjI,KAAK,GAAGkI,aAAa,CAACha,KAAK,EAAE+E,IAAI,EAAE8U,uBAAuB,CAAC;;EAEjE;EACA,IAAMI,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACpa,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAAC,CAAC;EACpE,IAAMU,YAAY,GAAGnF,YAAY,CAACmc,YAAY,CAAC;EAE/C,IAAMI,SAAS,GAAG;IAChBvI,KAAK,EAALA,KAAK;IACLmG,OAAO,EAAEnG,KAAK,CAAC6G,EAAE;IACjBpW,IAAI,EAAEU,YAAY;IAClB+I,IAAI,EAAE,EAAE;IACRwF,SAAS,EAAE,EAAE;IAAE;IACfzV,KAAK,EAAE,EAAE;IACT8P,GAAG,EAAE7L,KAAK,CAACkD,QAAQ,CAAC2I,GAAG;IACvBC,MAAM,EAAE9L,KAAK,CAACkD,QAAQ,CAAC2I,GAAG;IAC1BwF,KAAK,EAAErR,KAAK,CAACkD,QAAQ,CAACmO,KAAK;IAC3BM,QAAQ,EAAE3R,KAAK,CAACkD,QAAQ,CAACmO,KAAK;IAC9BC,KAAK,EAAEtR,KAAK,CAACkD,QAAQ,CAACoO,KAAK;IAC3BO,QAAQ,EAAE7R,KAAK,CAACkD,QAAQ,CAACoO,KAAK;IAC9BC,QAAQ,EAAEvR,KAAK,CAACkD,QAAQ,CAACqO,QAAQ;IACjCtD,WAAW,GAAA2L,kBAAA,GAAE5Z,KAAK,CAACiO,WAAW,cAAA2L,kBAAA,cAAAA,kBAAA,GAAI,CAAC;IACnChI,OAAO,EAAE,CAAC;IACVF,WAAW,EAAE;EACf,CAAC;EAED,IAAInH,QAAQ,GAAA1Z,aAAA,CAAAA,aAAA,KACPmP,KAAK;IACR4L,MAAM,EAAEyO,SAAS;IACjBtY,GAAG,yCAAAC,MAAA,CAA+B8P,KAAK,CAAChgB,IAAI,QAAAkQ,MAAA,CAAAxQ,kBAAA,CAAQwO,KAAK,CAAC+B,GAAG;EAAC,EAC/D;EAEDwI,QAAQ,GAAGf,kBAAkB,CAACe,QAAQ,EAAEzW,cAAc,CAACO,YAAY,CAAC;EACpEkW,QAAQ,GAAG6N,kBAAkB,CAAC7N,QAAQ,EAAEzW,cAAc,CAACO,YAAY,CAAC;EACpEgN,OAAO,CAACU,GAAG,CAAC,wCAAwC,EAAEsY,SAAS,CAACpM,WAAW,CAAC;;EAE5E;EACA1D,QAAQ,GAAG+P,SAAS,CAAC/P,QAAQ,CAAC;EAE9B,OAAOA,QAAQ;AACjB;AAEA,SAASyP,aAAaA,CAACha,KAAK,EAAE+E,IAAI,EAAkC;EAAA,IAAAwV,kBAAA,EAAAC,aAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;EAAA,IAAhCd,uBAAuB,GAAA/oB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,IAAI;EAChE,IAAMiJ,UAAU,IAAAwgB,kBAAA,GAAG5gB,OAAO,CAACoL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEA,IAAI,CAAC,cAAAwV,kBAAA,uBAAnBA,kBAAA,CAAqBxgB,UAAU;EAClDsH,OAAO,CAACU,GAAG,CAAC,OAAO,EAAEgD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEA,IAAI,EAAE,eAAe,EAAEhL,UAAU,CAAC;EAE7D,IAAMkL,KAAK,IAAAuV,aAAA,GAAGxa,KAAK,CAACiF,KAAK,cAAAuV,aAAA,cAAAA,aAAA,GAAI,CAAC;EAC9B,IAAM9B,UAAU,IAAA+B,qBAAA,GAAGza,KAAK,CAAC0D,qBAAqB,cAAA+W,qBAAA,cAAAA,qBAAA,GAAI,CAAC;EACnD,IAAMG,MAAM,GAAG7gB,UAAU,KAAK,MAAM;;EAEpC;EACA,IAAM8gB,aAAa,GAAG;IACpBC,IAAI,EAAE,EAAE;IACRC,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE;EACR,CAAC;EAED,IAAMC,iBAAiB,GAAG;IACxBJ,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE,CAAC;IACTC,IAAI,EAAE,CAAC;IACPC,IAAI,EAAE;EACR,CAAC;EAED,IAAIE,IAAI,IAAAT,qBAAA,GAAGG,aAAa,CAAC9gB,UAAU,CAAC,cAAA2gB,qBAAA,cAAAA,qBAAA,GAAI,EAAE;EAC1C,IAAIU,SAAS,IAAAT,qBAAA,GAAGO,iBAAiB,CAACnhB,UAAU,CAAC,cAAA4gB,qBAAA,cAAAA,qBAAA,GAAI,CAAC;EAClD,IAAIlX,MAAM,GAAG,CAAC0X,IAAI,GAAGlW,KAAK,GAAGmW,SAAS,IAAI1C,UAAU;;EAEpD;EACA,IAAM2C,YAAY,GAAGhrB,MAAM,CAACC,IAAI,CAAC2J,mBAAmB,CAAC;EACrD,IAAMqhB,iBAAiB,GAAG,IAAI5V,GAAG,CAAC,CAAC;EAEnC,IAAI6V,YAAY,GAAG,CAAC;EACpB,IAAIxhB,UAAU,KAAK,MAAM,EAAEwhB,YAAY,GAAG,CAAC;EAC3C,IAAIX,MAAM,EAAEW,YAAY,GAAG,CAAC;EAE5B,IAAIvb,KAAK,CAACjG,UAAU,KAAKrG,YAAY,CAACG,IAAI,EAAE;IAAA,IAAA2nB,WAAA;IAC1C,IAAMC,WAAW,GAAGvd,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAE,GAAG,KAAAmS,WAAA,GAAIxb,KAAK,CAACsD,IAAI,cAAAkY,WAAA,cAAAA,WAAA,GAAI,CAAC,CAAC,CAAC;IACxD,IAAItd,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGqd,WAAW,EAAEF,YAAY,IAAI,CAAC;EACpD;EAEAA,YAAY,GAAGrd,IAAI,CAACiO,GAAG,CAACoP,YAAY,EAAE,CAAC,CAAC;EAExC,OAAOD,iBAAiB,CAACI,IAAI,GAAGH,YAAY,EAAE;IAC5C,IAAMI,OAAO,GACXN,YAAY,CAACnd,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGid,YAAY,CAAC/rB,MAAM,CAAC,CAAC;IAC/DgsB,iBAAiB,CAACxV,GAAG,CAAC6V,OAAO,CAAC;EAChC;;EAEA;EACA,IAAMrD,SAAS,GAAG,CAAC,CAAC;EAAC,IAAAsD,UAAA,GAAA3sB,0BAAA,CACHqsB,iBAAiB;IAAAO,MAAA;EAAA;IAAnC,KAAAD,UAAA,CAAAnsB,CAAA,MAAAosB,MAAA,GAAAD,UAAA,CAAAlsB,CAAA,IAAAC,IAAA,GAAqC;MAAA,IAAAmsB,eAAA,EAAAC,WAAA;MAAA,IAA1B3c,GAAG,GAAAyc,MAAA,CAAAjsB,KAAA;MACZ,IAAMyX,IAAI,GAAGpN,mBAAmB,CAACmF,GAAG,CAAC;MACrC,IAAMlF,SAAS,IAAA4hB,eAAA,GAAGzU,IAAI,CAACnN,SAAS,cAAA4hB,eAAA,cAAAA,eAAA,GAAI,CAAC;MACrC,IAAME,QAAQ,IAAAD,WAAA,GAAG1U,IAAI,CAACzX,KAAK,cAAAmsB,WAAA,cAAAA,WAAA,GAAI,CAAC;MAChC,IAAInsB,KAAK,GAAGsK,SAAS,GAAG8hB,QAAQ;MAEhC,IAAI,OAAOnC,uBAAuB,KAAK,UAAU,EAAE;QACjDjqB,KAAK,GAAGiqB,uBAAuB,CAAC;UAC9B8B,OAAO,EAAEvc,GAAG;UACZlF,SAAS,EAATA,SAAS;UACT6f,YAAY,EAAEnqB,KAAK;UACnBqsB,UAAU,EAAEhX,KAAK;UACjBlL,UAAU,EAAVA,UAAU;UACV6gB,MAAM,EAANA,MAAM;UACN5a,KAAK,EAALA;QACF,CAAC,CAAC;MACJ;MAEAsY,SAAS,CAAClZ,GAAG,CAAC,GAAGxP,KAAK;IACxB;IACA;EAAA,SAAAgT,GAAA;IAAAgZ,UAAA,CAAA1sB,CAAA,CAAA0T,GAAA;EAAA;IAAAgZ,UAAA,CAAA/rB,CAAA;EAAA;EACA,IAAIiC,IAAI;EACR,IAAMoqB,aAAa,GAAG,CACpB,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,KAAK,EACL,SAAS,EACT,KAAK,EACL,QAAQ,EACR,UAAU,EACV,QAAQ,CACT;EAED,IAAMC,cAAc,GAAG,CACrB,KAAK,EACL,MAAM,EACN,OAAO,EACP,OAAO,EACP,WAAW,EACX,OAAO,EACP,OAAO,EACP,YAAY,EACZ,OAAO,EACP,OAAO,CACR;EAED,IAAMC,aAAa,GAAG,CACpB,QAAQ,EACR,WAAW,EACX,OAAO,EACP,QAAQ,EACR,UAAU,EACV,QAAQ,EACR,SAAS,EACT,OAAO,EACP,UAAU,EACV,SAAS,CACV;EACD,IAAMC,UAAU,GAAG,CACjB,QAAQ,EACR,UAAU,EACV,SAAS,EACT,MAAM,EACN,UAAU,EACV,UAAU,EACV,aAAa,EACb,SAAS,EACT,SAAS,EACT,MAAM,EACN,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,MAAM,EACN,KAAK,EACL,QAAQ,EACR,WAAW,EACX,QAAQ,EACR,SAAS,EACT,YAAY,EACZ,QAAQ,EACR,OAAO,CACR;EACD,IAAMC,SAAS,GAAG,CAAC,sBAAsB,EAAE,YAAY,EAAE,YAAY,CAAC;EAEtE,IAAI1B,MAAM,EAAE;IACV9oB,IAAI,GAAGwqB,SAAS,CAACpe,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGke,SAAS,CAAChtB,MAAM,CAAC,CAAC;EAChE,CAAC,MAAM;IACL;IACA,IAAIitB,WAAW;IACf,IAAItX,KAAK,GAAG,EAAE,EAAE;MACdsX,WAAW,GAAGL,aAAa;IAC7B,CAAC,MAAM,IAAIjX,KAAK,GAAG,EAAE,EAAE;MACrBsX,WAAW,GAAGJ,cAAc;IAC9B,CAAC,MAAM;MACLI,WAAW,GAAGH,aAAa;IAC7B;IAEA,IAAMI,SAAS,GAAGH,UAAU,CAACne,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGie,UAAU,CAAC/sB,MAAM,CAAC,CAAC;IAC3E,IAAMmtB,OAAO,GAAGF,WAAW,CAACre,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGme,WAAW,CAACjtB,MAAM,CAAC,CAAC;;IAE3E;IACA,IAAMotB,QAAQ,GAAGrsB,MAAM,CAACC,IAAI,CAACgoB,SAAS,CAAC,CACpCtX,GAAG,CAAC,UAAC2a,OAAO;MAAA,IAAAgB,qBAAA;MAAA,QAAAA,qBAAA,GAAK1iB,mBAAmB,CAAC0hB,OAAO,CAAC,cAAAgB,qBAAA,uBAA5BA,qBAAA,CAA8BviB,MAAM;IAAA,EAAC,CACtD5J,MAAM,CAACosB,OAAO,CAAC;IAElB9qB,IAAI,GAAG,GAAAkQ,MAAA,CAAAxQ,kBAAA,CAAIkrB,QAAQ,IAAEhf,UAAU,CAAC8e,SAAS,CAAC,EAAE9e,UAAU,CAAC+e,OAAO,CAAC,GAAEI,IAAI,CAAC,GAAG,CAAC;EAC5E;;EAEA;EACA,IAAMC,IAAI,GAAGC,iBAAiB,CAAC/c,KAAK,EAAEjG,UAAU,EAAEwhB,YAAY,EAAEX,MAAM,CAAC;EAEvE,OAAO;IACL9oB,IAAI,EAAJA,IAAI;IACJ6mB,EAAE,EAAEza,IAAI,CAAC4D,KAAK,CAAC2B,MAAM,CAAC;IACtB6U,SAAS,EAATA,SAAS;IACTwE,IAAI,EAAJA;EACF,CAAC;AACH;AAEA,SAASC,iBAAiBA,CAAC/c,KAAK,EAAEjG,UAAU,EAAEwhB,YAAY,EAAEX,MAAM,EAAE;EAAA,IAAAoC,YAAA,EAAAC,aAAA,EAAAC,qBAAA,EAAAC,eAAA;EAClE,IAAM7Z,IAAI,IAAA0Z,YAAA,GAAGhd,KAAK,CAACsD,IAAI,cAAA0Z,YAAA,cAAAA,YAAA,GAAI,CAAC;EAC5B,IAAM/X,KAAK,IAAAgY,aAAA,GAAGjd,KAAK,CAACiF,KAAK,cAAAgY,aAAA,cAAAA,aAAA,GAAI,CAAC;EAC9B,IAAM1a,IAAI,IAAA2a,qBAAA,IAAAC,eAAA,GAAGnd,KAAK,CAACkD,QAAQ,cAAAia,eAAA,uBAAdA,eAAA,CAAgB5a,IAAI,cAAA2a,qBAAA,cAAAA,qBAAA,GAAI,EAAE;EACvC,IAAME,uBAAuB,GAC3B7a,IAAI,CAACjT,MAAM,GAAG,CAAC,IAAIiT,IAAI,CAACkF,KAAK,CAAC,UAACtH,IAAI;IAAA,OAAKA,IAAI,CAACE,GAAG,IAAIF,IAAI,CAACzE,YAAY;EAAA,EAAC;EACxE,IAAM2hB,OAAO,GAAG;IACdja,IAAI,EAAE,EAAE;IACRhD,MAAM,EAAE,EAAE;IACVD,IAAI,EAAE,EAAE;IACRG,KAAK,EAAE,CAAC,GAAGgD,IAAI,GAAGiY,YAAY,GAAG,CAAC;IAClClb,GAAG,EAAE+c,uBAAuB,GAAG,CAAC,GAAG,CAAC,GAAG9Z,IAAI,GAAGiY,YAAY,GAAG;EAC/D,CAAC;EAED,IAAI+B,KAAK,GAAG1C,MAAM,GAAG,CAAC,GAAG,CAAC;EAC1B,IAAI,CAACA,MAAM,EAAE;IACX,IAAM2C,SAAS,GAAG,EAAE,GAAGja,IAAI,GAAGiY,YAAY,GAAG,EAAE;IAC/C,IAAIrd,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,GAAGmf,SAAS,EAAE;MACnCD,KAAK,EAAE;MACP,IAAME,WAAW,GAAG,EAAE,GAAGla,IAAI,GAAGiY,YAAY,GAAG,CAAC;MAChD,IAAIrd,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,GAAGof,WAAW,EAAE;QACrCF,KAAK,EAAE;MACT;IACF;EACF;EAEA,IAAMG,SAAS,GAAG,IAAI/X,GAAG,CAAC,CAAC;EAC3B,IAAMoX,IAAI,GAAG,EAAE;EAEf,IAAIlC,MAAM,EAAE;IACVkC,IAAI,CAACnsB,IAAI,CAAC;MAAE6O,IAAI,EAAE,OAAO;MAAE5P,KAAK,EAAEwW,mBAAmB,CAACpG,KAAK;IAAE,CAAC,CAAC;IAC/Dyd,SAAS,CAAC3X,GAAG,CAAC,OAAO,CAAC;IACtBwX,KAAK,EAAE;EACT;EAEA,OAAOR,IAAI,CAACxtB,MAAM,GAAGguB,KAAK,EAAE;IAC1B,IAAMI,SAAS,GAAGrtB,MAAM,CAACmO,OAAO,CAAC6e,OAAO,CAAC,CAAC7sB,MAAM,CAC9C,UAAAmtB,MAAA;MAAA,IAAAC,MAAA,GAAAxsB,cAAA,CAAAusB,MAAA;QAAEne,IAAI,GAAAoe,MAAA;QAAE7e,MAAM,GAAA6e,MAAA;MAAA,OAAM7e,MAAM,GAAG,CAAC,IAAI,CAAC0e,SAAS,CAAC5X,GAAG,CAACrG,IAAI,CAAC;IAAA,CACxD,CAAC;IAED,IAAIke,SAAS,CAACpuB,MAAM,KAAK,CAAC,EAAE;IAE5B,IAAMmP,WAAW,GAAGif,SAAS,CAAChf,MAAM,CAAC,UAACC,GAAG,EAAAkf,MAAA;MAAA,IAAAC,MAAA,GAAA1sB,cAAA,CAAAysB,MAAA;QAAG/e,CAAC,GAAAgf,MAAA;QAAEC,CAAC,GAAAD,MAAA;MAAA,OAAMnf,GAAG,GAAGof,CAAC;IAAA,GAAE,CAAC,CAAC;IACjE,IAAIC,IAAI,GAAG9f,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGK,WAAW;IAEtC,IAAIwH,QAAQ;IAAC,IAAAgY,UAAA,GAAAhvB,0BAAA,CACgByuB,SAAS;MAAAQ,MAAA;IAAA;MAAtC,KAAAD,UAAA,CAAAxuB,CAAA,MAAAyuB,MAAA,GAAAD,UAAA,CAAAvuB,CAAA,IAAAC,IAAA,GAAwC;QAAA,IAAAwuB,YAAA,GAAA/sB,cAAA,CAAA8sB,MAAA,CAAAtuB,KAAA;UAA5B4P,IAAI,GAAA2e,YAAA;UAAEpf,MAAM,GAAAof,YAAA;QACtB,IAAIH,IAAI,GAAGjf,MAAM,EAAE;UACjBkH,QAAQ,GAAGzG,IAAI;UACf;QACF;QACAwe,IAAI,IAAIjf,MAAM;MAChB;IAAC,SAAA6D,GAAA;MAAAqb,UAAA,CAAA/uB,CAAA,CAAA0T,GAAA;IAAA;MAAAqb,UAAA,CAAApuB,CAAA;IAAA;IAED4tB,SAAS,CAAC3X,GAAG,CAACG,QAAQ,CAAC;IAEvB,IAAIA,QAAQ,KAAK,MAAM,EAAE;MAAA,IAAAmY,qBAAA;MACvB,IAAMjD,IAAI,IAAAiD,qBAAA,GAAG;QAAEtD,IAAI,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAE,CAAC,CAACjhB,UAAU,CAAC,cAAAqkB,qBAAA,cAAAA,qBAAA,GAAI,CAAC;MAC7D,IAAMrS,MAAM,GACV,CAACoP,IAAI,GAAGlW,KAAK,GAAG3B,IAAI,GAAGiY,YAAY,GAAG,CAAC,KAAK,GAAG,GAAGrd,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;MAClE0e,IAAI,CAACnsB,IAAI,CAAC;QAAE6O,IAAI,EAAE,MAAM;QAAE5P,KAAK,EAAEsO,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAEnL,IAAI,CAAC4D,KAAK,CAACiK,MAAM,CAAC;MAAE,CAAC,CAAC;IACrE,CAAC,MAAM,IAAI9F,QAAQ,KAAK,MAAM,EAAE;MAC9B6W,IAAI,CAACnsB,IAAI,CAAC;QAAE6O,IAAI,EAAE,MAAM;QAAE5P,KAAK,EAAEoT,kBAAkB,CAAChD,KAAK;MAAE,CAAC,CAAC;IAC/D,CAAC,MAAM,IAAIiG,QAAQ,KAAK,QAAQ,EAAE;MAChC6W,IAAI,CAACnsB,IAAI,CAAC;QAAE6O,IAAI,EAAE,QAAQ;QAAE5P,KAAK,EAAEgW,oBAAoB,CAAC5F,KAAK;MAAE,CAAC,CAAC;IACnE,CAAC,MAAM,IAAIiG,QAAQ,KAAK,OAAO,EAAE;MAC/B6W,IAAI,CAACnsB,IAAI,CAAC;QAAE6O,IAAI,EAAE,OAAO;QAAE5P,KAAK,EAAEwW,mBAAmB,CAACpG,KAAK;MAAE,CAAC,CAAC;IACjE,CAAC,MAAM,IAAIiG,QAAQ,KAAK,KAAK,EAAE;MAC7B6W,IAAI,CAACnsB,IAAI,CAAC;QAAE6O,IAAI,EAAE,KAAK;QAAE5P,KAAK,EAAE2W,iBAAiB,CAACvG,KAAK;MAAE,CAAC,CAAC;IAC7D;EACF;EAEA,OAAO8c,IAAI;AACb;AACA,SAASniB,mCAAmCA,CAAC4H,IAAI,EAAmB;EAAA,IAAjB8b,WAAW,GAAAvtB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC;EAChE,IAAMwtB,eAAe,GAAG/b,IAAI,CAAC/R,MAAM,CAAC,UAAC2P,IAAI;IAAA,OAAK,CAACA,IAAI,CAAC1E,YAAY;EAAA,EAAC;EACjE,IAAM2Q,QAAQ,GAAG5a,kBAAA,CAAI8sB,eAAe,EAAEjS,IAAI,CAAC;IAAA,OAAMnO,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG;EAAA,EAAC;EACrE,IAAMkO,SAAS,GAAGF,QAAQ,CAACva,KAAK,CAAC,CAAC,EAAEwsB,WAAW,CAAC;EAChD,IAAME,aAAa,GAAGjS,SAAS,CAACtL,GAAG,CAAC,UAACb,IAAI;IAAA,OAAK3D,WAAW,CAAC2D,IAAI,EAAE,CAAC,CAAC;EAAA,EAAC;EAEnE,OAAOoC,IAAI,CAACvB,GAAG,CAAC,UAACb,IAAI,EAAK;IACxB,IAAMuE,KAAK,GAAG4H,SAAS,CAACkS,OAAO,CAACre,IAAI,CAAC;IACrC,OAAOuE,KAAK,KAAK,CAAC,CAAC,GAAG6Z,aAAa,CAAC7Z,KAAK,CAAC,GAAGvE,IAAI;EACnD,CAAC,CAAC;AACJ;AAEA,SAAS2Y,mBAAmBA,CAAC9Y,KAAK,EAAEuS,QAAQ,EAAE;EAAA,IAAAkM,cAAA;EAC5C,IAAMtD,IAAI,GAAG9gB,QAAQ,CAACoY,IAAI,CAAC,UAAClE,CAAC;IAAA,OAAKA,CAAC,CAACzc,IAAI,KAAKygB,QAAQ;EAAA,EAAC;EACtD,IAAI,CAAC4I,IAAI,EAAE;IACT9Z,OAAO,CAACC,IAAI,0BAAAU,MAAA,CAAyBuQ,QAAQ,OAAG,CAAC;IACjD,OAAOvS,KAAK;EACd;EAEA,IAAM0e,OAAO,GAAG/b,kBAAkB,CAAC4P,QAAQ,CAAC;EAC5C,IAAMoM,UAAU,GAAGvvB,KAAK,CAACC,OAAO,EAAAovB,cAAA,GAACze,KAAK,CAAC4L,MAAM,cAAA6S,cAAA,uBAAZA,cAAA,CAAclc,IAAI,CAAC,GAAGvC,KAAK,CAAC4L,MAAM,CAACrJ,IAAI,GAAG,EAAE;EAE7E,OAAA1R,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACR4L,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDmP,KAAK,CAAC4L,MAAM;MACfrJ,IAAI,KAAAP,MAAA,CAAAxQ,kBAAA,CAAMmtB,UAAU,IAAED,OAAO;IAAC;EAC/B;AAEL;;AAEA;AACA;AACA,SAASE,WAAWA,CAAC5e,KAAK,EAAEsS,MAAM,EAAE;EAAA,IAAAuM,eAAA;EAClC,QAAQvM,MAAM,CAAC9S,IAAI;IACjB,KAAKtI,OAAO,CAACC,QAAQ;MACnB,OAAAtG,aAAA,CAAAA,aAAA,KACKugB,kBAAkB,CAAC,CAAC;QACvBrP,GAAG,EAAE,CAAC,mBAAmB;MAAC;IAG9B,KAAK7K,OAAO,CAACE,cAAc;MAAE;QAC3B,IAAI4I,KAAK,CAACjG,UAAU,KAAKuY,MAAM,CAAC7S,OAAO,EAAE;UACvC4B,OAAO,CAACU,GAAG,CAAC,2BAA2B,EAAEuQ,MAAM,CAAC7S,OAAO,CAAC;UACxD,OAAOO,KAAK;QACd;QACAqB,OAAO,CAACU,GAAG,sBAAAC,MAAA,CAAsBsQ,MAAM,CAAC7S,OAAO,CAAE,CAAC;QAClD,OAAA5O,aAAA,CAAAA,aAAA,KACKmP,KAAK;UACRjG,UAAU,EAAEuY,MAAM,CAAC7S,OAAO;UAAE;UAC5BsC,GAAG,wBAAAC,MAAA,CAAwBsQ,MAAM,CAAC7S,OAAO,QAAAuC,MAAA,CAAAxQ,kBAAA,CAAQwO,KAAK,CAAC+B,GAAG;QAAC;MAE/D;IAEA,KAAK7K,OAAO,CAACG,qBAAqB;MAChC,OAAO+K,mBAAmB,CAACpC,KAAK,CAAC;IAEnC,KAAK9I,OAAO,CAACI,0BAA0B;MACrC,OAAO6L,wBAAwB,CAACnD,KAAK,CAAC;IAExC,KAAK9I,OAAO,CAACK,aAAa;MACxB,IAAMgT,QAAQ,GAAG5G,cAAc,CAAC3D,KAAK,EAAEsS,MAAM,CAAC7S,OAAO,CAAC;MACtD,OAAOsE,sBAAsB,CAACwG,QAAQ,CAAC;IAEzC,KAAKrT,OAAO,CAACO,oBAAoB;MAAE;QACjC,IAAMinB,OAAO,GAAG/b,kBAAkB,CAChC2P,MAAM,CAAC7S,OAAO,CAAC8S,QAAQ,EACvBD,MAAM,CAAC7S,OAAO,CAAC7F,MAAM,EACrB0Y,MAAM,CAAC7S,OAAO,CAAC+B,QAAQ,EACvB8Q,MAAM,CAAC7S,OAAO,CAACY,GACjB,CAAC;QACD,OAAAxP,aAAA,CAAAA,aAAA,KACKmP,KAAK;UACRkD,QAAQ,EAAArS,aAAA,CAAAA,aAAA,KACHmP,KAAK,CAACkD,QAAQ;YACjBX,IAAI,KAAAP,MAAA,CAAAxQ,kBAAA,CAAMwO,KAAK,CAACkD,QAAQ,CAACX,IAAI,IAAEmc,OAAO;UAAC,EACxC;UACD3c,GAAG,oBAAAC,MAAA,CAAoB0c,OAAO,CAAC5sB,IAAI,GAAAkQ,MAAA,CAAAxQ,kBAAA,CAAOwO,KAAK,CAAC+B,GAAG;QAAC;MAExD;IAEA,KAAK7K,OAAO,CAACQ,wBAAwB;MACnC,OAAOyM,sBAAsB,CAACnE,KAAK,GAAA6e,eAAA,GAAEvM,MAAM,CAAC7S,OAAO,cAAAof,eAAA,uBAAdA,eAAA,CAAgBjlB,MAAM,CAAC;IAE9D,KAAK1C,OAAO,CAACS,UAAU;MACrB,OAAO+S,SAAS,CAAC1K,KAAK,EAAEsS,MAAM,CAAC7S,OAAO,CAAC;IAEzC,KAAKvI,OAAO,CAACU,uBAAuB;MAClC,OAAOqM,qBAAqB,CAACjE,KAAK,CAAC;IAErC,KAAK9I,OAAO,CAACW,SAAS;MACpB,OAAO4M,QAAQ,CAACzE,KAAK,EAAEsS,MAAM,CAAC7S,OAAO,CAAC;IAExC,KAAKvI,OAAO,CAACY,uBAAuB;MAClC,OAAOoM,qBAAqB,CAAClE,KAAK,CAAC;IAErC,KAAK9I,OAAO,CAACa,SAAS;MACpB,OAAO8R,QAAQ,CAAC7J,KAAK,EAAEsS,MAAM,CAAC7S,OAAO,CAAC;IAExC,KAAKvI,OAAO,CAACc,yBAAyB;MACpC,OAAOoM,uBAAuB,CAACpE,KAAK,CAAC;IAEvC,KAAK9I,OAAO,CAACe,WAAW;MACtB,OAAOiT,UAAU,CAAClL,KAAK,EAAEsS,MAAM,CAAC7S,OAAO,CAAC;IAE1C,KAAKvI,OAAO,CAAChD,YAAY;MAAE;QACzB,IAAM4qB,WAAW,GAAGxM,MAAM,CAAC7S,OAAO;QAClC,IAAMsf,aAAa,GAAG/e,KAAK,CAACyL,UAAU,CAACqT,WAAW,CAAC;QACnD,IAAI,CAACC,aAAa,EAAE;UAClB1d,OAAO,CAACgB,KAAK,CAAC,uBAAuB,EAAEyc,WAAW,CAAC;UACnD,OAAO9e,KAAK;QACd;QACA,OAAO0L,WAAW,CAAC1L,KAAK,EAAE+e,aAAa,CAAC;MAC1C;IAEA,KAAK7nB,OAAO,CAACgB,sBAAsB;MACjC,OAAOmM,oBAAoB,CAACrE,KAAK,CAAC;IAEpC,KAAK9I,OAAO,CAACiB,eAAe;MAC1B,OAAO6U,aAAa,CAAChN,KAAK,EAAEsS,MAAM,CAAC7S,OAAO,CAACwN,GAAG,EAAEqF,MAAM,CAAC7S,OAAO,CAACqO,MAAM,CAAC;IAExE,KAAK5W,OAAO,CAACkB,cAAc;MACzB,OAAO8V,cAAc,CAAClO,KAAK,EAAEsS,MAAM,CAAC7S,OAAO,CAAC;IAAE;;IAEhD,KAAKvI,OAAO,CAACmB,aAAa;MACxB,OAAAxH,aAAA,CAAAA,aAAA,KACKmP,KAAK;QACRmR,cAAc,EAAEnR,KAAK,CAAC4N,aAAa;QACnCA,aAAa,EAAE0E,MAAM,CAAC7S;MAAO;IAGjC,KAAKvI,OAAO,CAACoB,kBAAkB;MAC7B,OAAOgM,iBAAiB,CAACtE,KAAK,CAAC;IAEjC,KAAK9I,OAAO,CAACqB,qBAAqB;MAChC,OAAOwV,mBAAmB,CAAC/N,KAAK,EAAEsS,MAAM,CAAC7S,OAAO,CAAC;IAEnD,KAAKvI,OAAO,CAACsB,SAAS;MACpB,OAAOqX,QAAQ,CAAC7P,KAAK,EAAEsS,MAAM,CAAC7S,OAAO,CAAC;IAExC,KAAKvI,OAAO,CAACuB,iBAAiB;MAC5B,OAAOsX,gBAAgB,CAAC/P,KAAK,CAAC;IAEhC,KAAK9I,OAAO,CAACwB,UAAU;MACrB,OAAOsX,SAAS,CAAChQ,KAAK,CAAC;IAEzB,KAAK9I,OAAO,CAAC9C,IAAI;MACf,OAAOsc,IAAI,CAAC1Q,KAAK,CAAC;IAEpB,KAAK9I,OAAO,CAACyB,UAAU;MACrB,OAAO2hB,SAAS,CAACta,KAAK,EAAEsS,MAAM,CAAChT,QAAQ,CAAC;IAE1C,KAAKpI,OAAO,CAAC8nB,oBAAoB;MAC/B,OAAOC,kBAAkB,CAACjf,KAAK,CAAC;IAElC,KAAK9I,OAAO,CAACgoB,iBAAiB;MAAE;QAC9B,IAAAC,gBAAA,GAA0B7M,MAAM,CAAC7S,OAAO;UAAhCiF,KAAK,GAAAya,gBAAA,CAALza,KAAK;UAAEqH,MAAM,GAAAoT,gBAAA,CAANpT,MAAM;QACrB,IAAMqT,UAAU,GAAA5tB,kBAAA,CAAOwO,KAAK,CAACc,SAAS,CAACiJ,aAAa,CAAC;QACrDqV,UAAU,CAACzW,MAAM,CAACjE,KAAK,EAAE,CAAC,CAAC;QAE3B,OAAA7T,aAAA,CAAAA,aAAA,KACKgf,QAAQ,CAAC7P,KAAK,EAAE+L,MAAM,CAAC;UAC1BjL,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;YAClBiJ,aAAa,EAAEqV;UAAU;QAC1B;MAEL;IAEA,KAAKloB,OAAO,CAAC0B,SAAS;MACpB,OAAO4T,QAAQ,CAACxM,KAAK,CAAC;IAExB,KAAK9I,OAAO,CAAC1C,SAAS;MACpB,OAAO6qB,QAAQ,CAACrf,KAAK,EAAEsS,MAAM,CAAC7S,OAAO,CAAC;IAExC,KAAKvI,OAAO,CAACzC,cAAc;MACzB,OAAO6qB,aAAa,CAACtf,KAAK,CAAC;IAE7B,KAAK9I,OAAO,CAACqoB,SAAS;MACpB,OAAOC,QAAQ,CAACxf,KAAK,CAAC;IAExB,KAAK9I,OAAO,CAACM,WAAW;MACtB,OAAA3G,aAAA,CAAAA,aAAA,KACKmP,KAAK;QACR+B,GAAG,GAAGuQ,MAAM,CAAC7S,OAAO,EAAAuC,MAAA,CAAAxQ,kBAAA,CAAKwO,KAAK,CAAC+B,GAAG;MAAC;IAGvC;MACEV,OAAO,CAACC,IAAI,CAAC,sBAAsB,EAAEgR,MAAM,CAAC9S,IAAI,CAAC;MACjD,OAAOQ,KAAK;EAChB;AACF;AACA;AACA;AACA,SAASyf,MAAMA,CAACzf,KAAK,EAAEV,QAAQ,EAAE;EAAA,IAAAogB,qBAAA,EAAAC,aAAA,EAAAC,eAAA;EAC/B;EACA,IAAIC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;EAC9C,IAAI,CAACF,MAAM,EAAE;IACXA,MAAM,GAAGC,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IACtCH,MAAM,CAACI,EAAE,GAAG,QAAQ;IACpBH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,MAAM,CAAC;EACnC;EACAA,MAAM,CAACO,SAAS,GAAG,EAAE,CAAC,CAAC;EACvB;EACA,IAAM5Y,gBAAgB,GACpB,EAAAkY,qBAAA,GAAA1f,KAAK,CAACkD,QAAQ,CAACX,IAAI,cAAAmd,qBAAA,uBAAnBA,qBAAA,CAAqBpwB,MAAM,IAAG,CAAC,IAC/B0Q,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAACkF,KAAK,CAAC,UAACtH,IAAI;IAAA,OAAKA,IAAI,CAACE,GAAG,IAAI,IAAI,IAAIF,IAAI,CAACzE,YAAY;EAAA,EAAC;;EAE5E;EACA,SAAS2kB,cAAcA,CAACC,KAAK,EAAE/a,KAAK,EAAE;IACpC,IAAMgb,OAAO,GAAGT,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IAC7CO,OAAO,CAACH,SAAS,UAAApe,MAAA,CAAUse,KAAK,UAAO;IACvC,IAAME,EAAE,GAAGV,QAAQ,CAACE,aAAa,CAAC,IAAI,CAAC;IAEvCza,KAAK,CAACxU,OAAO,CAAC,UAACoP,IAAI,EAAK;MACtB,IAAMsgB,EAAE,GAAGX,QAAQ,CAACE,aAAa,CAAC,IAAI,CAAC;MACvCS,EAAE,CAACC,WAAW,GAAGvgB,IAAI,CAACrO,IAAI;MAC1B0uB,EAAE,CAACL,WAAW,CAACM,EAAE,CAAC;IACpB,CAAC,CAAC;IAEFF,OAAO,CAACJ,WAAW,CAACK,EAAE,CAAC;IACvBX,MAAM,CAACM,WAAW,CAACI,OAAO,CAAC;EAC7B;;EAEA;EACA,SAASI,mBAAmBA,CAAC3c,KAAK,EAAE4c,KAAK,EAAEC,MAAM,EAAE;IACjD,IAAI7gB,KAAK,CAAC8D,YAAY,KAAKE,KAAK,IAAIhE,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACI,GAAG,EAAE;MACvE,IAAMgrB,MAAM,GAAGhB,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MAC/Cc,MAAM,CAACJ,WAAW,GAAGE,KAAK;MAC1BE,MAAM,CAACC,KAAK,CAACC,QAAQ,GAAG,QAAQ;MAChCF,MAAM,CAACC,KAAK,CAACE,OAAO,GAAG,WAAW;MAClCH,MAAM,CAACI,OAAO,GAAG,YAAM;QACrBJ,MAAM,CAACK,QAAQ,GAAG,IAAI,CAAC,CAAC;QACxB7hB,QAAQ,CAAC;UACPE,IAAI,EAAEtI,OAAO,CAACiB,eAAe;UAC7BsH,OAAO,EAAE;YACPwN,GAAG,EAAAjc,eAAA,KAAK6vB,MAAM,EAAG,IAAI,CAAE;YACvB/S,MAAM,EAAE9J;UACV;QACF,CAAC,CAAC;MACJ,CAAC;MACD6b,MAAM,CAACM,WAAW,CAACW,MAAM,CAAC;IAC5B;EACF;;EAEA;EACA,IAAMM,IAAI,GAAGtB,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;EAC1CoB,IAAI,CAAChB,SAAS,oEAAApe,MAAA,CAEwBhC,KAAK,CAAC4N,aAAa,yCAAA5L,MAAA,CAEvDhC,KAAK,CAAC8D,YAAY,4CAAA9B,MAAA,EAAA2d,aAAA,GACqB3f,KAAK,CAACiF,KAAK,cAAA0a,aAAA,cAAAA,aAAA,GAAI,CAAC,wCAAA3d,MAAA,CAC7BhC,KAAK,CAACoD,IAAI,0CAAApB,MAAA,CACRhC,KAAK,CAACyD,MAAM,OAAAzB,MAAA,CAAIhC,KAAK,CAACwD,SAAS,6CAAAxB,MAAA,CAC5BhC,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAACjT,MAAM,0CAAA0S,MAAA,CAEzDhC,KAAK,CAAC8K,SAAS,CAACxb,MAAM,GAAG,CAAC,GACtBe,MAAM,CAACmO,OAAO,CACZwB,KAAK,CAAC8K,SAAS,CAACpM,MAAM,CAAC,UAAC2iB,GAAG,EAAE/gB,KAAK,EAAK;IACrC+gB,GAAG,CAAC/gB,KAAK,CAACxO,IAAI,CAAC,GAAG,CAACuvB,GAAG,CAAC/gB,KAAK,CAACxO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAC5C,OAAOuvB,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CACP,CAAC,CACErgB,GAAG,CAAC,UAAAsgB,MAAA;IAAA,IAAAC,MAAA,GAAAnwB,cAAA,CAAAkwB,MAAA;MAAExvB,IAAI,GAAAyvB,MAAA;MAAEhS,KAAK,GAAAgS,MAAA;IAAA,OAAOhS,KAAK,GAAG,CAAC,MAAAvN,MAAA,CAAMlQ,IAAI,QAAAkQ,MAAA,CAAKuN,KAAK,IAAKzd,IAAI;EAAA,CAAC,CAAC,CAChE+qB,IAAI,CAAC,IAAI,CAAC,GACb,MAAM,WAEb;EACCgD,MAAM,CAACM,WAAW,CAACiB,IAAI,CAAC;;EAExB;EACA,IAAMI,qBAAqB,GAAG,CAC5B9rB,OAAO,CAACK,WAAW,EACnBL,OAAO,CAACM,SAAS,EACjBN,OAAO,CAACO,KAAK,CACd,CAACyL,QAAQ,CAAC1B,KAAK,CAAC4N,aAAa,CAAC;EAE/B,IAAI5N,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACM,MAAM,IAAIgJ,KAAK,CAAC4L,MAAM,EAAE;IACxD,IAAM6V,aAAa,GAAG3B,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IACnDyB,aAAa,CAACV,KAAK,CAACW,MAAM,GAAG,iBAAiB;IAC9CD,aAAa,CAACV,KAAK,CAACE,OAAO,GAAG,MAAM;IACpCQ,aAAa,CAACV,KAAK,CAACY,MAAM,GAAG,QAAQ;IACrCF,aAAa,CAACrB,SAAS,oBAAoB;;IAE3C;IACA,IAAI,CAACoB,qBAAqB,EAAE;MAAA,IAAAI,cAAA;MAC1B;MACA,IAAMC,QAAQ,GAAG/B,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;MAC9C6B,QAAQ,CAACd,KAAK,CAACe,OAAO,GAAG,MAAM;MAC/BD,QAAQ,CAACd,KAAK,CAACgB,cAAc,GAAG,eAAe;MAC/CF,QAAQ,CAACd,KAAK,CAACiB,UAAU,GAAG,QAAQ;MACpCH,QAAQ,CAACd,KAAK,CAACC,QAAQ,GAAG,QAAQ;MAClCa,QAAQ,CAACd,KAAK,CAACkB,UAAU,GAAG,MAAM;MAClCJ,QAAQ,CAACd,KAAK,CAACW,MAAM,GAAG,eAAe;MACvCG,QAAQ,CAACd,KAAK,CAACE,OAAO,GAAG,MAAM;MAC/BY,QAAQ,CAACd,KAAK,CAACmB,YAAY,GAAG,MAAM;;MAEpC;MACA,IAAMC,QAAQ,GAAGrC,QAAQ,CAACE,aAAa,CAAC,MAAM,CAAC;MAC/CmC,QAAQ,CAACzB,WAAW,GAAG1gB,KAAK,CAAC4L,MAAM,CAACkG,KAAK,CAAChgB,IAAI;;MAE9C;MACA,IAAMswB,MAAM,GAAGtC,QAAQ,CAACE,aAAa,CAAC,MAAM,CAAC;MAC7CoC,MAAM,CAAC1B,WAAW,UAAA1e,MAAA,CAAUhC,KAAK,CAAC4L,MAAM,CAACqM,OAAO,CAAE;MAElD4J,QAAQ,CAAC1B,WAAW,CAACgC,QAAQ,CAAC;MAC9BN,QAAQ,CAAC1B,WAAW,CAACiC,MAAM,CAAC;MAC5BX,aAAa,CAACtB,WAAW,CAAC0B,QAAQ,CAAC;;MAEnC;MACA,IAAMpQ,SAAS,GAAGqO,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;MAC/CvO,SAAS,CAACsP,KAAK,CAACe,OAAO,GAAG,MAAM;MAChCrQ,SAAS,CAACsP,KAAK,CAACsB,GAAG,GAAG,QAAQ;MAC9B5Q,SAAS,CAACsP,KAAK,CAACmB,YAAY,GAAG,MAAM;MACrCliB,KAAK,CAAC4L,MAAM,CAAC6F,SAAS,CAAC1gB,OAAO,CAAC,UAACuxB,IAAI,EAAE5d,KAAK,EAAK;QAC9C,IAAM6d,OAAO,GAAGzC,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;QAC7CuC,OAAO,CAACxB,KAAK,CAACyB,KAAK,GAAG,MAAM;QAC5BD,OAAO,CAACxB,KAAK,CAAC0B,MAAM,GAAG,MAAM;QAC7BF,OAAO,CAACxB,KAAK,CAACW,MAAM,GAAG,gBAAgB;QACvCa,OAAO,CAACxB,KAAK,CAACe,OAAO,GAAG,MAAM;QAC9BS,OAAO,CAACxB,KAAK,CAACiB,UAAU,GAAG,QAAQ;QACnCO,OAAO,CAACxB,KAAK,CAACgB,cAAc,GAAG,QAAQ;QACvCQ,OAAO,CAACxB,KAAK,CAAC2B,eAAe,GAC3BJ,IAAI,KAAK,YAAY,GAAG,WAAW,GAAG,OAAO;QAC/CC,OAAO,CAAC7B,WAAW,GAAG4B,IAAI,KAAK,YAAY,GAAG,EAAE,GAAGA,IAAI,CAACxwB,IAAI;QAC5D2f,SAAS,CAAC0O,WAAW,CAACoC,OAAO,CAAC;MAChC,CAAC,CAAC;MAEF,IAAMI,cAAc,GAAG7C,QAAQ,CAACE,aAAa,CAAC,GAAG,CAAC;MAClD2C,cAAc,CAACjC,WAAW,GAAG,YAAY;MACzCiC,cAAc,CAAC5B,KAAK,CAACkB,UAAU,GAAG,MAAM;MACxCU,cAAc,CAAC5B,KAAK,CAACmB,YAAY,GAAG,SAAS;MAC7CT,aAAa,CAACtB,WAAW,CAACwC,cAAc,CAAC;MACzClB,aAAa,CAACtB,WAAW,CAAC1O,SAAS,CAAC;;MAEpC;MACA,IAAMmR,OAAO,GAAG9C,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;MAC7C4C,OAAO,CAAC7B,KAAK,CAACe,OAAO,GAAG,MAAM;MAC9Bc,OAAO,CAAC7B,KAAK,CAACiB,UAAU,GAAG,QAAQ;MACnCY,OAAO,CAAC7B,KAAK,CAACsB,GAAG,GAAG,MAAM;MAC1BO,OAAO,CAAC7B,KAAK,CAACmB,YAAY,GAAG,QAAQ;MAErC,IAAMW,aAAa,GACjB7iB,KAAK,CAAC4L,MAAM,CAAC6F,SAAS,CAACniB,MAAM,GAAG,CAAC,IACjC0Q,KAAK,CAAC4L,MAAM,CAAC6F,SAAS,CAAChK,KAAK,CAAC,UAAC6a,IAAI;QAAA,OAAKA,IAAI,KAAK,YAAY;MAAA,EAAC;MAE/D,IAAMQ,UAAU,GAAGhD,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MACnD,IAAI6C,aAAa,EAAE;QACjBC,UAAU,CAACpC,WAAW,GAAG,WAAW;QACpCoC,UAAU,CAAC/B,KAAK,CAAC2B,eAAe,GAAG,MAAM;MAC3C,CAAC,MAAM;QACLI,UAAU,CAACpC,WAAW,GAAG,gBAAgB;MAC3C;MACAoC,UAAU,CAAC5B,OAAO,GAAG;QAAA,OAAM5hB,QAAQ,CAAC;UAAEE,IAAI,EAAEtI,OAAO,CAACzC;QAAe,CAAC,CAAC;MAAA;MAErE,IAAMsuB,YAAY,GAAGjD,QAAQ,CAACE,aAAa,CAAC,MAAM,CAAC;MACnD+C,YAAY,CAACrC,WAAW,eAAA1e,MAAA,CAAe,EAAA4f,cAAA,GAAA5hB,KAAK,CAAC4L,MAAM,cAAAgW,cAAA,uBAAZA,cAAA,CAAchQ,OAAO,KAAI,CAAC,CAAE;MAEnEgR,OAAO,CAACzC,WAAW,CAAC2C,UAAU,CAAC;MAC/BF,OAAO,CAACzC,WAAW,CAAC4C,YAAY,CAAC;MACjCtB,aAAa,CAACtB,WAAW,CAACyC,OAAO,CAAC;;MAElC;MACA,IAAMI,YAAY,GAAGlD,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;MAClDgD,YAAY,CAACjC,KAAK,CAACe,OAAO,GAAG,MAAM;MACnCkB,YAAY,CAACjC,KAAK,CAACsB,GAAG,GAAG,MAAM;MAC/BW,YAAY,CAACjC,KAAK,CAACmB,YAAY,GAAG,MAAM;MAExC,IAAMe,UAAU,GAAGnD,QAAQ,CAACE,aAAa,CAAC,MAAM,CAAC;MACjDiD,UAAU,CAACvC,WAAW,WAAA1e,MAAA,CAAWhC,KAAK,CAAC4L,MAAM,CAACC,GAAG,OAAA7J,MAAA,CAAIhC,KAAK,CAAC4L,MAAM,CAACE,MAAM,CAAE;MAE1E,IAAMoX,YAAY,GAAGpD,QAAQ,CAACE,aAAa,CAAC,MAAM,CAAC;MACnDkD,YAAY,CAACxC,WAAW,aAAA1e,MAAA,CAAahC,KAAK,CAAC4L,MAAM,CAACyF,KAAK,CAAE;MAEzD2R,YAAY,CAAC7C,WAAW,CAAC8C,UAAU,CAAC;MACpCD,YAAY,CAAC7C,WAAW,CAAC+C,YAAY,CAAC;MACtCzB,aAAa,CAACtB,WAAW,CAAC6C,YAAY,CAAC;;MAEvC;MACA,IAAMG,OAAO,GAAGrD,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;MAC7CmD,OAAO,CAACpC,KAAK,CAACe,OAAO,GAAG,MAAM;MAC9BqB,OAAO,CAACpC,KAAK,CAACsB,GAAG,GAAG,QAAQ;MAC5Bc,OAAO,CAACpC,KAAK,CAACqC,QAAQ,GAAG,MAAM;MAE/B,IAAIpjB,KAAK,CAAC4L,MAAM,CAACI,IAAI,IAAIhM,KAAK,CAAC4L,MAAM,CAACI,IAAI,CAAC1c,MAAM,GAAG,CAAC,EAAE;QACrD0Q,KAAK,CAAC4L,MAAM,CAACI,IAAI,CAACjb,OAAO,CAAC,UAACoP,IAAI,EAAEuE,KAAK,EAAK;UAAA,IAAA2e,aAAA;UACzC,IAAMC,OAAO,GAAGxD,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;UAEhD,IAAMuD,QAAQ,IAAAF,aAAA,GAAGljB,IAAI,CAAC5F,OAAO,cAAA8oB,aAAA,cAAAA,aAAA,GAAI,CAAC;UAClC,IAAMG,SAAS,GAAGD,QAAQ,IAAIvjB,KAAK,CAAC4L,MAAM,CAACC,GAAG;UAC9C,IAAM4X,YAAY,GAAG,CAAC,CAACtjB,IAAI,CAACxE,UAAU;;UAEtC;UACA,IAAM+nB,QAAQ,GACZ,CAACD,YAAY,IAAItjB,IAAI,CAAC5F,OAAO,IAAI,IAAI,cAAAyH,MAAA,CACtB7B,IAAI,CAAC5F,OAAO,SACvB,EAAE;UACR+oB,OAAO,CAAC5C,WAAW,MAAA1e,MAAA,CAAM7B,IAAI,CAACrO,IAAI,EAAAkQ,MAAA,CAAG0hB,QAAQ,CAAE;;UAE/C;UACAJ,OAAO,CAACnC,QAAQ,GAAGsC,YAAY,IAAI,CAACD,SAAS;;UAE7C;UACA,IAAIF,OAAO,CAACnC,QAAQ,EAAE;YACpBmC,OAAO,CAACvC,KAAK,CAAC4C,OAAO,GAAG,KAAK;YAC7BL,OAAO,CAACvC,KAAK,CAAC6C,MAAM,GAAG,aAAa;UACtC;;UAEA;UACAN,OAAO,CAACpC,OAAO,GAAG,YAAM;YACtB,IAAI,CAACoC,OAAO,CAACnC,QAAQ,EAAE;cACrB7hB,QAAQ,CAAC;gBAAEE,IAAI,EAAEtI,OAAO,CAAC1C,SAAS;gBAAEiL,OAAO,EAAEiF;cAAM,CAAC,CAAC;YACvD;UACF,CAAC;UAEDye,OAAO,CAAChD,WAAW,CAACmD,OAAO,CAAC;QAC9B,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,IAAMO,KAAK,GAAG/D,QAAQ,CAACE,aAAa,CAAC,GAAG,CAAC;QACzC6D,KAAK,CAACnD,WAAW,GAAG,qBAAqB;QACzCyC,OAAO,CAAChD,WAAW,CAAC0D,KAAK,CAAC;MAC5B;;MAEA;MACA,IAAMC,SAAS,GAAGhE,QAAQ,CAACE,aAAa,CAAC,GAAG,CAAC;MAC7C8D,SAAS,CAACpD,WAAW,GAAG,OAAO;MAC/BoD,SAAS,CAAC/C,KAAK,CAACkB,UAAU,GAAG,MAAM;MACnC6B,SAAS,CAAC/C,KAAK,CAACmB,YAAY,GAAG,SAAS;MACxCT,aAAa,CAACtB,WAAW,CAAC2D,SAAS,CAAC;MAEpCrC,aAAa,CAACtB,WAAW,CAACgD,OAAO,CAAC;IACpC;;IAEA;IACA,IAAMY,UAAU,GAAGjE,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IAChD+D,UAAU,CAAChD,KAAK,CAACiD,SAAS,GAAG,MAAM;IACnCD,UAAU,CAAChD,KAAK,CAACe,OAAO,GAAG,MAAM;IACjCiC,UAAU,CAAChD,KAAK,CAACsB,GAAG,GAAG,QAAQ;IAE/B,CACE;MAAEzB,KAAK,EAAE,aAAa;MAAErhB,MAAM,EAAE7J,OAAO,CAACK;IAAY,CAAC,EACrD;MAAE6qB,KAAK,EAAE,WAAW;MAAErhB,MAAM,EAAE7J,OAAO,CAACM;IAAU,CAAC,EACjD;MAAE4qB,KAAK,EAAE,OAAO;MAAErhB,MAAM,EAAE7J,OAAO,CAACO;IAAM,CAAC,CAC1C,CAAClF,OAAO,CAAC,UAAAkzB,MAAA,EAAuB;MAAA,IAApBrD,KAAK,GAAAqD,MAAA,CAALrD,KAAK;QAAErhB,MAAM,GAAA0kB,MAAA,CAAN1kB,MAAM;MACxB,IAAM2kB,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MAC5CkE,GAAG,CAACxD,WAAW,GACb1gB,KAAK,CAAC4N,aAAa,KAAKrO,MAAM,GAAG,QAAQ,cAAAyC,MAAA,CAAc4e,KAAK,CAAE;MAChEsD,GAAG,CAAChD,OAAO,GAAG,YAAM;QAClB,IAAIlhB,KAAK,CAAC4N,aAAa,KAAKrO,MAAM,EAAE;UAClCO,YAAY,CAACR,QAAQ,CAAC;QACxB,CAAC,MAAM;UACLD,YAAY,CAACC,QAAQ,EAAEC,MAAM,CAAC;QAChC;MACF,CAAC;MACDwkB,UAAU,CAAC5D,WAAW,CAAC+D,GAAG,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACA,IAAMC,gBAAgB,GAAGrE,QAAQ,CAACE,aAAa,CAAC,GAAG,CAAC;IACpDmE,gBAAgB,CAACzD,WAAW,GAAG,gBAAgB;IAC/CyD,gBAAgB,CAACpD,KAAK,CAACkB,UAAU,GAAG,MAAM;IAC1CkC,gBAAgB,CAACpD,KAAK,CAACmB,YAAY,GAAG,SAAS;IAC/CT,aAAa,CAACtB,WAAW,CAACgE,gBAAgB,CAAC;IAC3C1C,aAAa,CAACtB,WAAW,CAAC4D,UAAU,CAAC;IACrClE,MAAM,CAACM,WAAW,CAACsB,aAAa,CAAC;EACnC;EAEA,IAAIzhB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACK,WAAW,EAAE;IAAA,IAAAquB,cAAA;IAC/C/D,cAAc,CAAC,aAAa,EAAE,EAAA+D,cAAA,GAAApkB,KAAK,CAAC4L,MAAM,cAAAwY,cAAA,uBAAZA,cAAA,CAAc7hB,IAAI,KAAI,EAAE,CAAC;EACzD;EACA,IAAIvC,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACM,SAAS,EAAE;IAAA,IAAAquB,cAAA;IAC7ChE,cAAc,CAAC,WAAW,EAAE,EAAAgE,cAAA,GAAArkB,KAAK,CAAC4L,MAAM,cAAAyY,cAAA,uBAAZA,cAAA,CAAc7S,SAAS,KAAI,EAAE,CAAC;EAC5D;EACA,IAAIxR,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACO,KAAK,EAAE;IAAA,IAAAquB,cAAA;IACzCjE,cAAc,CAAC,OAAO,EAAE,EAAAiE,cAAA,GAAAtkB,KAAK,CAAC4L,MAAM,cAAA0Y,cAAA,uBAAZA,cAAA,CAAcvoB,KAAK,KAAI,EAAE,CAAC;EACpD;;EAEA;EACA,IAAMgG,GAAG,GAAG+d,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;EACzCje,GAAG,CAACqe,SAAS,sBAAApe,MAAA,CAAsBhC,KAAK,CAAC+B,GAAG,CACzClQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXmP,GAAG,CAAC,UAAC8P,GAAG;IAAA,cAAA9O,MAAA,CAAY8O,GAAG;EAAA,CAAO,CAAC,CAC/B+L,IAAI,CAAC,EAAE,CAAC,UAAO;EAClBgD,MAAM,CAACM,WAAW,CAACpe,GAAG,CAAC;;EAEvB;EACA,IACE/B,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACE,IAAI,IACpCoK,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACC,SAAS,EACvC;IACA,IAAM4tB,MAAM,GAAGzE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;IAC/CuE,MAAM,CAAC7D,WAAW,GAAG,UAAU;IAC/B6D,MAAM,CAACrD,OAAO,GAAG,YAAM;MACrB5hB,QAAQ,CAAC;QACPE,IAAI,EAAEtI,OAAO,CAACK,aAAa;QAC3BkI,OAAO,EAAE/I,MAAM,CAACE;MAClB,CAAC,CAAC;IACJ,CAAC;IACDipB,MAAM,CAACM,WAAW,CAACoE,MAAM,CAAC;EAC5B;;EAEA;EACA,IACEvkB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACE,IAAI,IACpCoK,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACE,oBAAoB,EAClD;IACA,IAAMmb,YAAY,GAAG,CACnBre,YAAY,CAACC,IAAI,EACjBD,YAAY,CAACE,MAAM,EACnBF,YAAY,CAACG,IAAI,CAClB;IACDke,YAAY,CAAChhB,OAAO,CAAC,UAACgJ,UAAU,EAAK;MACnC,IAAMmqB,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MAC5CkE,GAAG,CAACxD,WAAW,YAAA1e,MAAA,CAAYjI,UAAU,UAAO;MAC5CmqB,GAAG,CAAChD,OAAO,GAAG;QAAA,OAAMjP,4BAA4B,CAAC3S,QAAQ,EAAEvF,UAAU,CAAC;MAAA;MACtE8lB,MAAM,CAACM,WAAW,CAAC+D,GAAG,CAAC;IACzB,CAAC,CAAC;EACJ;;EAEA;EACA,IACElkB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACE,IAAI,IACpCoK,KAAK,CAACc,SAAS,CAACuF,MAAM,IACtBrG,KAAK,CAACc,SAAS,CAACuF,MAAM,CAAC/W,MAAM,GAAG,CAAC,EACjC;IACA,IAAMk1B,YAAY,GAAG1E,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IAClDwE,YAAY,CAACpE,SAAS,6BAA6B;IACnDpgB,KAAK,CAACc,SAAS,CAACuF,MAAM,CAACtV,OAAO,CAAC,UAACuP,KAAK,EAAEoE,KAAK,EAAK;MAC/C,IAAMwf,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MAC5CkE,GAAG,CAACxD,WAAW,MAAA1e,MAAA,CAAM1B,KAAK,CAACxO,IAAI,CAAE;MACjCoyB,GAAG,CAAChD,OAAO,GAAG;QAAA,OACZ5hB,QAAQ,CAAC;UAAEE,IAAI,EAAEtI,OAAO,CAACS,UAAU;UAAE8H,OAAO,EAAEiF;QAAM,CAAC,CAAC;MAAA;MACxD8f,YAAY,CAACrE,WAAW,CAAC+D,GAAG,CAAC;IAC/B,CAAC,CAAC;IACFrE,MAAM,CAACM,WAAW,CAACqE,YAAY,CAAC;EAClC;EACA;EACA,IACExkB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACE,IAAI,IACpCoK,KAAK,CAACc,SAAS,CAAC8D,KAAK,IACrB5E,KAAK,CAACc,SAAS,CAAC8D,KAAK,CAACtV,MAAM,GAAG,CAAC,EAChC;IACA,IAAMm1B,WAAW,GAAG3E,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IACjDyE,WAAW,CAACrE,SAAS,2BAA2B;IAEhDpgB,KAAK,CAACc,SAAS,CAAC8D,KAAK,CAAC7T,OAAO,CAAC,UAACgU,IAAI,EAAEL,KAAK,EAAK;MAC7C,IAAMwf,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;;MAE5C;MACA,IAAIjb,IAAI,CAAC5C,oBAAoB,EAAE;QAC7B+hB,GAAG,CAACxD,WAAW,QAAQ;MACzB,CAAC,MAAM;QACLwD,GAAG,CAACxD,WAAW,MAAA1e,MAAA,CAAM+C,IAAI,CAACA,IAAI,CAAE;MAClC;MAEAmf,GAAG,CAAChD,OAAO,GAAG;QAAA,OAAM5hB,QAAQ,CAAC;UAAEE,IAAI,EAAEtI,OAAO,CAACW,SAAS;UAAE4H,OAAO,EAAEiF;QAAM,CAAC,CAAC;MAAA;MAEzE+f,WAAW,CAACtE,WAAW,CAAC+D,GAAG,CAAC;IAC9B,CAAC,CAAC;IAEFrE,MAAM,CAACM,WAAW,CAACsE,WAAW,CAAC;EACjC;;EAEA;EACA,IACEzkB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACE,IAAI,IACpCoK,KAAK,CAACc,SAAS,CAACyE,KAAK,IACrBvF,KAAK,CAACc,SAAS,CAACyE,KAAK,CAACjW,MAAM,GAAG,CAAC,EAChC;IACA,IAAMo1B,WAAW,GAAG5E,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IACjD0E,WAAW,CAACtE,SAAS,2BAA2B;IAEhDpgB,KAAK,CAACc,SAAS,CAACyE,KAAK,CAACxU,OAAO,CAAC,UAACoP,IAAI,EAAEuE,KAAK,EAAK;MAC7C,IAAMwf,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MAC5CkE,GAAG,CAACxD,WAAW,MAAA1e,MAAA,CAAM7B,IAAI,CAACrO,IAAI,cAAAkQ,MAAA,CAAW7B,IAAI,CAAC5F,OAAO,OAAAyH,MAAA,CACnD7B,IAAI,CAACqB,QAAQ,QAAAQ,MAAA,CAAQ7B,IAAI,CAACqB,QAAQ,IAAK,EAAE,EAAAQ,MAAA,CACxC7B,IAAI,CAACE,GAAG,aAAA2B,MAAA,CAAa7B,IAAI,CAACE,GAAG,CAACvO,IAAI,SAAM,EAAE,CAAE;MAC/CoyB,GAAG,CAAChD,OAAO,GAAG;QAAA,OAAM5hB,QAAQ,CAAC;UAAEE,IAAI,EAAEtI,OAAO,CAACa,SAAS;UAAE0H,OAAO,EAAEiF;QAAM,CAAC,CAAC;MAAA;MACzEggB,WAAW,CAACvE,WAAW,CAAC+D,GAAG,CAAC;IAC9B,CAAC,CAAC;IAEFrE,MAAM,CAACM,WAAW,CAACuE,WAAW,CAAC;EACjC;;EAEA;EACA,IACE1kB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACE,IAAI,IACpCoK,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACpB,eAAe,IAC7C0K,KAAK,CAACc,SAAS,CAACiF,OAAO,IACvB/F,KAAK,CAACc,SAAS,CAACiF,OAAO,CAACzW,MAAM,GAAG,CAAC,EAClC;IACA,IAAMq1B,aAAa,GAAG7E,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IACnD2E,aAAa,CAACvE,SAAS,6BAA6B;IAEpDpgB,KAAK,CAACc,SAAS,CAACiF,OAAO,CAAChV,OAAO,CAAC,UAACqP,MAAM,EAAEsE,KAAK,EAAK;MACjD,IAAMwf,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MAC5CkE,GAAG,CAACxD,WAAW,MAAA1e,MAAA,CAAM5B,MAAM,CAACtO,IAAI,QAAAkQ,MAAA,CAAK5B,MAAM,CAACxG,MAAM,MAAG;MACrDsqB,GAAG,CAAChD,OAAO,GAAG;QAAA,OACZ5hB,QAAQ,CAAC;UAAEE,IAAI,EAAEtI,OAAO,CAACe,WAAW;UAAEwH,OAAO,EAAEiF;QAAM,CAAC,CAAC;MAAA;MACzDigB,aAAa,CAACxE,WAAW,CAAC+D,GAAG,CAAC;IAChC,CAAC,CAAC;IAEFrE,MAAM,CAACM,WAAW,CAACwE,aAAa,CAAC;EACnC;;EAEA;EACA,IACE3kB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACE,IAAI,IACpCoK,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACC,IAAI,IACpCqK,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACvB,YAAY,IAC1C6K,KAAK,CAACc,SAAS,CAAC0F,IAAI,IACpBxG,KAAK,CAACc,SAAS,CAAC0F,IAAI,CAAClX,MAAM,GAAG,CAAC,EAC/B;IACA,IAAMs1B,UAAU,GAAG9E,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IAChD4E,UAAU,CAACxE,SAAS,0BAA0B;IAE9CpgB,KAAK,CAACc,SAAS,CAAC0F,IAAI,CAACzV,OAAO,CAAC,UAACsP,GAAG,EAAEqE,KAAK,EAAK;MAC3C,IAAMwf,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MAC5CkE,GAAG,CAACxD,WAAW,MAAA1e,MAAA,CAAM3B,GAAG,CAACvO,IAAI,QAAAkQ,MAAA,CAAK3B,GAAG,CAACzG,MAAM,MAAG;MAE/CsqB,GAAG,CAAChD,OAAO,GAAG;QAAA,OACZ5hB,QAAQ,CAAC;UACPE,IAAI,EAAEtI,OAAO,CAACiB,eAAe;UAC7BsH,OAAO,EAAE;YACPwN,GAAG,EAAE;cAAE5M,GAAG,EAAHA;YAAI,CAAC;YACZyN,MAAM,EAAEpX,MAAM,CAACvB;UACjB;QACF,CAAC,CAAC;MAAA;MAEJyvB,UAAU,CAACzE,WAAW,CAAC+D,GAAG,CAAC;IAC7B,CAAC,CAAC;IAEFrE,MAAM,CAACM,WAAW,CAACyE,UAAU,CAAC;EAChC;EACA;;EAEA,IACE5kB,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACzB,IAAI,IAClC+K,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACI,GAAG,IACnCkK,KAAK,CAACc,SAAS,CAACC,SAAS,CAACzR,MAAM,GAAG,CAAC,EACpC;IACA,IAAMu1B,WAAW,GAAG/E,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IACjD6E,WAAW,CAACzE,SAAS,4BAA4B;IAEjD,IAAM0E,IAAI,GAAGhF,QAAQ,CAACE,aAAa,CAAC,IAAI,CAAC;IACzChgB,KAAK,CAACc,SAAS,CAACC,SAAS,CAAChQ,OAAO,CAAC,UAACkQ,KAAK,EAAEyD,KAAK,EAAK;MAAA,IAAAqgB,kBAAA,EAAAC,YAAA,EAAAC,WAAA;MAClD,IAAI,CAAChkB,KAAK,IAAI,CAACA,KAAK,CAACG,IAAI,IAAI,CAACH,KAAK,CAACG,IAAI,CAACtP,IAAI,EAAE;MAE/C,IAAM2uB,EAAE,GAAGX,QAAQ,CAACE,aAAa,CAAC,IAAI,CAAC;MAEvC,IAAMkE,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MAC5C,IAAMne,KAAK,IAAAkjB,kBAAA,IAAAC,YAAA,GAAG/jB,KAAK,CAACG,IAAI,cAAA4jB,YAAA,uBAAVA,YAAA,CAAYnjB,KAAK,cAAAkjB,kBAAA,cAAAA,kBAAA,GAAI,CAAC;MACpC,IAAMG,UAAU,IAAAD,WAAA,GAAGjlB,KAAK,CAACoD,IAAI,cAAA6hB,WAAA,cAAAA,WAAA,GAAI,CAAC;MAClC,IAAME,KAAK,GAAGlkB,KAAK,CAACzB,IAAI,KAAK,KAAK;MAClC,IAAM2hB,QAAQ,GAAGtf,KAAK,GAAGqjB,UAAU,IAAKC,KAAK,IAAI3d,gBAAiB;MAClE0c,GAAG,CAACxD,WAAW,MAAA1e,MAAA,CAAMf,KAAK,CAACzB,IAAI,CAAC3B,WAAW,CAAC,CAAC,QAAAmE,MAAA,CAC3Cf,KAAK,CAACG,IAAI,CAACtP,IAAI,QAAAkQ,MAAA,CACZH,KAAK,OAAI;MACd,IAAIsf,QAAQ,EAAE;QACZ+C,GAAG,CAAC/C,QAAQ,GAAG,IAAI;QACnB+C,GAAG,CAACnD,KAAK,CAAC4C,OAAO,GAAG,GAAG;QACvBO,GAAG,CAACnD,KAAK,CAAC6C,MAAM,GAAG,aAAa;MAClC;;MAEA;MACAM,GAAG,CAAChD,OAAO,GAAG,YAAM;QAClB,QAAQjgB,KAAK,CAACzB,IAAI;UAChB,KAAK,MAAM;YACTF,QAAQ,CAAC;cAAEE,IAAI,EAAEtI,OAAO,CAACa,SAAS;cAAE0H,OAAO,EAAEiF;YAAM,CAAC,CAAC;YACrD;UACF,KAAK,QAAQ;YACXpF,QAAQ,CAAC;cAAEE,IAAI,EAAEtI,OAAO,CAACe,WAAW;cAAEwH,OAAO,EAAEiF;YAAM,CAAC,CAAC;YACvD;UACF,KAAK,KAAK;YACRpF,QAAQ,CAAC;cACPE,IAAI,EAAEtI,OAAO,CAACiB,eAAe;cAC7BsH,OAAO,EAAE;gBACPwN,GAAG,EAAE;kBAAE5M,GAAG,EAAEY,KAAK,CAACG;gBAAK,CAAC;gBACxB0M,MAAM,EAAEpX,MAAM,CAACzB;cACjB;YACF,CAAC,CAAC;YACF;UAEF,KAAK,OAAO;YACVqK,QAAQ,CAAC;cAAEE,IAAI,EAAEtI,OAAO,CAACS,UAAU;cAAE8H,OAAO,EAAEiF;YAAM,CAAC,CAAC;YACtD;UACF;YACErD,OAAO,CAACC,IAAI,CAAC,yBAAyB,EAAEL,KAAK,CAACzB,IAAI,CAAC;QACvD;MACF,CAAC;MAEDihB,EAAE,CAACN,WAAW,CAAC+D,GAAG,CAAC;MACnBY,IAAI,CAAC3E,WAAW,CAACM,EAAE,CAAC;IACtB,CAAC,CAAC;;IAEF;IACA,IAAM2E,OAAO,GAAGtF,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;IAChDoF,OAAO,CAAC1E,WAAW,GAAG,WAAW;IACjC0E,OAAO,CAAClE,OAAO,GAAG,YAAM;MACtB5hB,QAAQ,CAAC;QAAEE,IAAI,EAAEtI,OAAO,CAACqoB;MAAU,CAAC,CAAC;IACvC,CAAC;IACDsF,WAAW,CAAC1E,WAAW,CAAC2E,IAAI,CAAC;IAC7BD,WAAW,CAAC1E,WAAW,CAACiF,OAAO,CAAC;IAChCvF,MAAM,CAACM,WAAW,CAAC0E,WAAW,CAAC;EACjC;;EAEA;EACA,IAAI7kB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACI,GAAG,KAAA8pB,eAAA,GAAI5f,KAAK,CAAC6N,OAAO,cAAA+R,eAAA,eAAbA,eAAA,CAAe3S,GAAG,EAAE;IAC7D,IAAMoY,UAAU,GAAGvF,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IAChDqF,UAAU,CAACjF,SAAS,qCAAqC;IAEzD,IAAMnT,GAAG,GAAGjN,KAAK,CAAC6N,OAAO,CAACZ,GAAG;IAC7B,IAAMqY,QAAQ,GAAG,CAAC,CAACrY,GAAG,CAAC5M,GAAG;IAE1BL,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAACxR,OAAO,CAAC,UAACoP,IAAI,EAAK;MACpC;MACA,IAAImlB,QAAQ,KAAKnlB,IAAI,CAACE,GAAG,IAAIF,IAAI,CAACzE,YAAY,CAAC,EAAE;MACjD,IAAIuR,GAAG,CAACwB,OAAO,IAAItO,IAAI,CAAC1E,YAAY,EAAE;MAEtC,IAAMyoB,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MAC5CkE,GAAG,CAACxD,WAAW,MAAA1e,MAAA,CAAM7B,IAAI,CAACrO,IAAI,cAAAkQ,MAAA,CAAW7B,IAAI,CAAC5F,OAAO,MAAG;MAExD,IAAI4F,IAAI,CAACE,GAAG,EAAE;QACZ6jB,GAAG,CAACxD,WAAW,cAAA1e,MAAA,CAAc7B,IAAI,CAACE,GAAG,CAACvO,IAAI,MAAG;MAC/C;MAEAoyB,GAAG,CAAChD,OAAO,GAAG,YAAM;QAClB5hB,QAAQ,CAAC;UAAEE,IAAI,EAAEtI,OAAO,CAACkB,cAAc;UAAEqH,OAAO,EAAEU;QAAK,CAAC,CAAC;MAC3D,CAAC;MAEDklB,UAAU,CAAClF,WAAW,CAAC+D,GAAG,CAAC;IAC7B,CAAC,CAAC;IAEFrE,MAAM,CAACM,WAAW,CAACkF,UAAU,CAAC;EAChC;;EAEA;;EAEA1E,mBAAmB,CAACjqB,MAAM,CAAClB,KAAK,EAAE,cAAc,EAAE,OAAO,CAAC;EAC1DmrB,mBAAmB,CAACjqB,MAAM,CAACjB,SAAS,EAAE,eAAe,EAAE,WAAW,CAAC;EACnEkrB,mBAAmB,CAACjqB,MAAM,CAACrB,OAAO,EAAE,kBAAkB,EAAE,SAAS,CAAC;;EAElE;EACA,IAAI2K,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACnB,KAAK,EAAE;IACvC,IAAM2uB,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;IAC5CkE,GAAG,CAACxD,WAAW,GAAG,YAAY;IAC9BwD,GAAG,CAACnD,KAAK,CAACC,QAAQ,GAAG,QAAQ;IAC7BkD,GAAG,CAACnD,KAAK,CAACE,OAAO,GAAG,WAAW;IAC/BiD,GAAG,CAAChD,OAAO,GAAG,YAAM;MAClB;MACA5hB,QAAQ,CAAC;QAAEE,IAAI,EAAE;MAAa,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC;IACDqgB,MAAM,CAACM,WAAW,CAAC+D,GAAG,CAAC;EACzB;EACA;EACA,IAAIlkB,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACtC,IAAI,EAAE;IACtC,IAAMmxB,OAAO,GAAGzF,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;IAChDuF,OAAO,CAAC7E,WAAW,GAAG,eAAe;IACrC6E,OAAO,CAACxE,KAAK,CAACC,QAAQ,GAAG,QAAQ;IACjCuE,OAAO,CAACxE,KAAK,CAACE,OAAO,GAAG,WAAW;IACnCsE,OAAO,CAACrE,OAAO,GAAG,YAAM;MACtB5hB,QAAQ,CAAC;QAAEE,IAAI,EAAE;MAAO,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,IAAMgmB,WAAW,GAAG1F,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;IACpDwF,WAAW,CAAC9E,WAAW,GAAG,mBAAmB;IAC7C8E,WAAW,CAACzE,KAAK,CAACC,QAAQ,GAAG,QAAQ;IACrCwE,WAAW,CAACzE,KAAK,CAACE,OAAO,GAAG,WAAW;IACvCuE,WAAW,CAACtE,OAAO,GAAG,YAAM;MAC1B5hB,QAAQ,CAAC;QAAEE,IAAI,EAAE;MAAoB,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC;IAEDqgB,MAAM,CAACM,WAAW,CAACoF,OAAO,CAAC;IAC3B1F,MAAM,CAACM,WAAW,CAACqF,WAAW,CAAC;EACjC;;EAEA;EACA,IAAIxlB,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAAChC,UAAU,EAAE;IAAA,IAAA+wB,gBAAA;IAC5C,IAAMC,gBAAgB,GAAG5F,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IACtD0F,gBAAgB,CAACtF,SAAS,8BAA8B;IAExD,IAAMuF,gBAAgB,GACpB,EAAAF,gBAAA,GAAAzlB,KAAK,CAACc,SAAS,cAAA2kB,gBAAA,uBAAfA,gBAAA,CAAiB1b,aAAa,KAC9B/J,KAAK,CAACc,SAAS,CAACiJ,aAAa,CAACza,MAAM,GAAG,CAAC;IAE1C,IAAM40B,IAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;IAC5CkE,IAAG,CAACxD,WAAW,GAAGiF,gBAAgB,GAAG,WAAW,GAAG,UAAU;IAC7DzB,IAAG,CAAChD,OAAO,GAAG,YAAM;MAClB5hB,QAAQ,CAAC;QAAEE,IAAI,EAAEtI,OAAO,CAAC8nB;MAAqB,CAAC,CAAC;IAClD,CAAC;IAED0G,gBAAgB,CAACvF,WAAW,CAAC+D,IAAG,CAAC;IACjCrE,MAAM,CAACM,WAAW,CAACuF,gBAAgB,CAAC;EACtC;EACA,IACE1lB,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAAChC,UAAU,IACxCsL,KAAK,CAACc,SAAS,CAACiJ,aAAa,IAC7B/J,KAAK,CAACc,SAAS,CAACiJ,aAAa,CAACza,MAAM,GAAG,CAAC,EACxC;IACA,IAAMs2B,aAAa,GAAG9F,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IACnD4F,aAAa,CAACxF,SAAS,4BAA4B;IAEnDpgB,KAAK,CAACc,SAAS,CAACiJ,aAAa,CAAChZ,OAAO,CAAC,UAAC0c,MAAM,EAAE/I,KAAK,EAAK;MACvD,IAAMwf,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MAE5C,IAAIY,KAAK,GAAG,EAAE;MACd,QAAQnT,MAAM,CAACjO,IAAI;QACjB,KAAK,MAAM;UACTohB,KAAK,YAAA5e,MAAA,CAAYyL,MAAM,CAAC7d,KAAK,CAAE;UAC/B;QACF,KAAK,MAAM;UACTgxB,KAAK,YAAA5e,MAAA,CAAYyL,MAAM,CAAC7d,KAAK,CAACkC,IAAI,CAAE;UACpC;QACF,KAAK,OAAO;UACV8uB,KAAK,aAAA5e,MAAA,CAAayL,MAAM,CAAC7d,KAAK,CAACkC,IAAI,CAAE;UACrC;QACF,KAAK,QAAQ;UACX8uB,KAAK,cAAA5e,MAAA,CAAcyL,MAAM,CAAC7d,KAAK,CAACkC,IAAI,CAAE;UACtC;QACF,KAAK,KAAK;UACR8uB,KAAK,WAAA5e,MAAA,CAAWyL,MAAM,CAAC7d,KAAK,CAACkC,IAAI,CAAE;UACnC;QACF;UACE8uB,KAAK,GAAG,gBAAgB;MAC5B;MAEAsD,GAAG,CAACxD,WAAW,GAAGE,KAAK;MAEvB,IAAMuE,KAAK,GAAG1X,MAAM,CAACjO,IAAI,KAAK,KAAK;MACnC,IAAMqmB,aAAa,GAAGV,KAAK,IAAI3d,gBAAgB;MAE/C,IAAIqe,aAAa,EAAE;QACjB3B,GAAG,CAAC/C,QAAQ,GAAG,IAAI;QACnB+C,GAAG,CAACnD,KAAK,CAAC4C,OAAO,GAAG,GAAG;QACvBO,GAAG,CAACnD,KAAK,CAAC6C,MAAM,GAAG,aAAa;MAClC;MAEA,IAAI,CAACiC,aAAa,EAAE;QAClB3B,GAAG,CAAChD,OAAO,GAAG,YAAM;UAClB,IAAIzT,MAAM,CAACjO,IAAI,KAAK,MAAM,EAAE;YAC1BF,QAAQ,CAAC;cACPE,IAAI,EAAEtI,OAAO,CAACgoB,iBAAiB;cAC/Bzf,OAAO,EAAE;gBAAEiF,KAAK,EAALA,KAAK;gBAAEqH,MAAM,EAAE0B,MAAM,CAAC7d;cAAM;YACzC,CAAC,CAAC;UACJ,CAAC,MAAM,IAAI6d,MAAM,CAACjO,IAAI,KAAK,MAAM,EAAE;YACjCF,QAAQ,CAAC;cAAEE,IAAI,EAAEtI,OAAO,CAACa,SAAS;cAAE0H,OAAO,EAAEiF;YAAM,CAAC,CAAC;UACvD,CAAC,MAAM,IAAI+I,MAAM,CAACjO,IAAI,KAAK,OAAO,EAAE;YAClCF,QAAQ,CAAC;cAAEE,IAAI,EAAEtI,OAAO,CAACS,UAAU;cAAE8H,OAAO,EAAEiF;YAAM,CAAC,CAAC;UACxD,CAAC,MAAM,IAAI+I,MAAM,CAACjO,IAAI,KAAK,QAAQ,EAAE;YACnCF,QAAQ,CAAC;cAAEE,IAAI,EAAEtI,OAAO,CAACe,WAAW;cAAEwH,OAAO,EAAEiF;YAAM,CAAC,CAAC;UACzD,CAAC,MAAM,IAAI+I,MAAM,CAACjO,IAAI,KAAK,KAAK,EAAE;YAChCF,QAAQ,CAAC;cACPE,IAAI,EAAEtI,OAAO,CAACiB,eAAe;cAC7BsH,OAAO,EAAE;gBACPwN,GAAG,EAAE;kBAAE5M,GAAG,EAAEoN,MAAM,CAAC7d;gBAAM,CAAC;gBAC1Bke,MAAM,EAAEpX,MAAM,CAAChC;cACjB;YACF,CAAC,CAAC;UACJ;QACF,CAAC;MACH;MAEAkxB,aAAa,CAACzF,WAAW,CAAC+D,GAAG,CAAC;IAChC,CAAC,CAAC;IAEFrE,MAAM,CAACM,WAAW,CAACyF,aAAa,CAAC;EACnC;EACA;EACA,IAAI5lB,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACO,SAAS,EAAE;IAC3C,IAAM6uB,eAAe,GAAGhG,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IACrD8F,eAAe,CAACC,SAAS,CAACjgB,GAAG,CAAC,WAAW,CAAC;IAE1C,IAAMkgB,MAAM,GAAGlG,QAAQ,CAACE,aAAa,CAAC,IAAI,CAAC;IAC3CgG,MAAM,CAACtF,WAAW,GAChB1gB,KAAK,CAAC2J,MAAM,KAAK,SAAS,GAAG,aAAa,GAAG,YAAY;IAC3Dmc,eAAe,CAAC3F,WAAW,CAAC6F,MAAM,CAAC;IAEnC,IAAMC,OAAO,GAAGnG,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IAC7CiG,OAAO,CAAC7F,SAAS,sCAAApe,MAAA,CACWhC,KAAK,CAACiF,KAAK,0DAAAjD,MAAA,CAGjChC,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAClBvB,GAAG,CACF,UAACb,IAAI;MAAA,cAAA6B,MAAA,CACI7B,IAAI,CAACrO,IAAI;IAAA,CAEpB,CAAC,CACA+qB,IAAI,CAAC,EAAE,CAAC,iEAAA7a,MAAA,CAIThC,KAAK,CAAC8K,SAAS,CAAC9J,GAAG,CAAC,UAACV,KAAK;MAAA,cAAA0B,MAAA,CAAY1B,KAAK,CAACxO,IAAI;IAAA,CAAO,CAAC,CAAC+qB,IAAI,CAAC,EAAE,CAAC,wBAEtE;IACDiJ,eAAe,CAAC3F,WAAW,CAAC8F,OAAO,CAAC;IAEpC,IAAMC,UAAU,GAAGpG,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;IACnDkG,UAAU,CAACxF,WAAW,GAAG,qBAAqB;IAC9CwF,UAAU,CAAChF,OAAO,GAAG,YAAM;MACzB5hB,QAAQ,CAAC;QAAEE,IAAI,EAAEtI,OAAO,CAACC;MAAS,CAAC,CAAC;IACtC,CAAC;IAED2uB,eAAe,CAAC3F,WAAW,CAAC+F,UAAU,CAAC;IACvCrG,MAAM,CAACM,WAAW,CAAC2F,eAAe,CAAC;EACrC;;EAEA;EACA;EACA,IACE,CAAC9lB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACC,IAAI,IACnCqK,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACE,IAAI,KACtCoK,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAACjT,MAAM,GAAG,CAAC,EAC9B;IACA,IAAM62B,OAAO,GAAGrG,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;IAChDmG,OAAO,CAACzF,WAAW,GACjB1gB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACC,IAAI,GAAG,cAAc,GAAG,QAAQ;IAClEwwB,OAAO,CAACjF,OAAO,GAAG,YAAM;MACtB,IAAMkF,UAAU,GACdpmB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACC,IAAI,GAAGD,OAAO,CAACE,IAAI,GAAGF,OAAO,CAACC,IAAI;MACpE2J,QAAQ,CAAC;QACPE,IAAI,EAAEtI,OAAO,CAACmB,aAAa;QAC3BoH,OAAO,EAAE2mB;MACX,CAAC,CAAC;IACJ,CAAC;IACDvG,MAAM,CAACM,WAAW,CAACgG,OAAO,CAAC;EAC7B;EACA;EACA,IAAInmB,KAAK,CAAC4N,aAAa,KAAKlY,OAAO,CAACE,IAAI,EAAE;IACxC,IAAMywB,QAAQ,GAAGvG,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IAC9CqG,QAAQ,CAACjG,SAAS,2BAA2B;IAC7C,IAAMI,EAAE,GAAGV,QAAQ,CAACE,aAAa,CAAC,IAAI,CAAC;IAEvChgB,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAACxR,OAAO,CAAC,UAACoP,IAAI,EAAK;MACpC,IAAMsgB,EAAE,GAAGX,QAAQ,CAACE,aAAa,CAAC,IAAI,CAAC;MACvCS,EAAE,CAACC,WAAW,GAAGvgB,IAAI,CAACrO,IAAI;MAC1B0uB,EAAE,CAACL,WAAW,CAACM,EAAE,CAAC;IACpB,CAAC,CAAC;IAEF4F,QAAQ,CAAClG,WAAW,CAACK,EAAE,CAAC;IACxBX,MAAM,CAACM,WAAW,CAACkG,QAAQ,CAAC;EAC9B;;EAEA;EACA,IAAIrmB,KAAK,CAACyL,UAAU,IAAIzL,KAAK,CAACyL,UAAU,CAACnc,MAAM,GAAG,CAAC,EAAE;IACnD,IAAMg3B,WAAW,GAAGxG,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;IACjDsG,WAAW,CAAClG,SAAS,0BAA0B;IAE/CpgB,KAAK,CAACyL,UAAU,CAAC1a,OAAO,CAAC,UAACqP,MAAM,EAAEsE,KAAK,EAAK;MAC1C,IAAMwf,GAAG,GAAGpE,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;MAC5CkE,GAAG,CAACxD,WAAW,GAAGtgB,MAAM,CAACtO,IAAI;MAE7B,IAAMy0B,aAAa,GAAGvmB,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAACM,MAAM;MAC1D,IAAMwvB,cAAc,GAClBpmB,MAAM,CAAC7C,oBAAoB,KAAK,KAAK,IAAIgpB,aAAa;MAExD,IAAI,CAACC,cAAc,EAAE;QACnBtC,GAAG,CAAC/C,QAAQ,GAAG,IAAI;QACnB+C,GAAG,CAACnD,KAAK,CAAC4C,OAAO,GAAG,GAAG;QACvBO,GAAG,CAACnD,KAAK,CAAC6C,MAAM,GAAG,aAAa;MAClC;MAEAM,GAAG,CAAChD,OAAO,GAAG,YAAM;QAClB,IAAIsF,cAAc,EAAE;UAClBlnB,QAAQ,CAAC;YAAEE,IAAI,EAAEtI,OAAO,CAAChD,YAAY;YAAEuL,OAAO,EAAEiF;UAAM,CAAC,CAAC;QAC1D;MACF,CAAC;MAED4hB,WAAW,CAACnG,WAAW,CAAC+D,GAAG,CAAC;IAC9B,CAAC,CAAC;IAEFrE,MAAM,CAACM,WAAW,CAACmG,WAAW,CAAC;EACjC;AACF;AACA;;AAEA;AACAG,MAAM,CAACC,MAAM,GAAG,YAAM;EACpBxU,aAAa,CAACd,kBAAkB,CAAC,CAAC,EAAEwN,WAAW,EAAEa,MAAM,CAAC;AAC1D,CAAC;;AAED;AACAK,QAAQ,CAAC6G,gBAAgB,CAAC,SAAS,EAAE,UAACz3B,CAAC,EAAK;EAC1C,IAAIA,CAAC,CAACkQ,GAAG,KAAK,QAAQ,EAAE;IACtBE,QAAQ,CAAC;MAAEE,IAAI,EAAEtI,OAAO,CAACmB,aAAa;MAAEoH,OAAO,EAAE/J,OAAO,CAACC;IAAK,CAAC,CAAC;EAClE;AACF,CAAC,CAAC;;AAEF;AACA;AACA,SAAS2kB,SAASA,CAACta,KAAK,EAAE;EAAA,IAAA4mB,qBAAA;EACxBvlB,OAAO,CAACU,GAAG,CAAC,0CAA0C,EAAE/B,KAAK,CAAC4L,MAAM,CAACyF,KAAK,CAAC;EAE3E,IAAIrR,KAAK,CAAC4L,MAAM,CAACyF,KAAK,GAAG,CAAC,EAAE;IAC1B,OAAAxgB,aAAA,CAAAA,aAAA,KACKmP,KAAK;MACR4L,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDmP,KAAK,CAAC4L,MAAM;QACf8F,WAAW,EAAE;MAAI,EAClB;MACD3P,GAAG,GAAG,yCAAyC,EAAAC,MAAA,CAAAxQ,kBAAA,CAAKwO,KAAK,CAAC+B,GAAG;IAAC;EAElE;;EAEA;EACA,IAAM8kB,OAAO,GAAGz3B,KAAK,CAAC4Q,KAAK,CAAC4L,MAAM,CAAC0F,KAAK,CAAC,CAACwV,IAAI,CAAC,YAAY,CAAC;EAE5D,IAAM7Y,WAAW,IAAA2Y,qBAAA,GAAG5mB,KAAK,CAAC4L,MAAM,CAACqC,WAAW,cAAA2Y,qBAAA,cAAAA,qBAAA,GAAI,CAAC;;EAEjD;EACA,IAAIhd,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACXmP,KAAK;IACR4L,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDmP,KAAK,CAAC4L,MAAM;MACfyF,KAAK,EAAErR,KAAK,CAAC4L,MAAM,CAACyF,KAAK,GAAG,CAAC;MAC7BI,SAAS,EAAEoV,OAAO;MAClBjV,OAAO,EAAE3D,WAAW;MAAE;MACtByD,WAAW,EAAE;IAAK,EACnB;IACD3P,GAAG,0DAAAC,MAAA,CACkCiM,WAAW,gBAAAjM,MAAA,CAAAxQ,kBAAA,CAC3CwO,KAAK,CAAC+B,GAAG;EACb,EACF;EAED6H,YAAY,GAAG2C,OAAO,CAAC3C,YAAY,CAAC;EACpCA,YAAY,GAAGmd,YAAY,CAACnd,YAAY,CAAC;EAEzC,OAAOA,YAAY;AACrB;AAEA,SAASod,wBAAwBA,CAAChnB,KAAK,EAAE;EAAA,IAAAinB,qBAAA,EAAAC,cAAA,EAAAC,kBAAA,EAAAC,cAAA;EACvC,IAAM5V,SAAS,IAAAyV,qBAAA,IAAAC,cAAA,GAAGlnB,KAAK,CAAC4L,MAAM,cAAAsb,cAAA,uBAAZA,cAAA,CAAc1V,SAAS,cAAAyV,qBAAA,cAAAA,qBAAA,GAAI,EAAE;EAC/C,IAAM1kB,IAAI,IAAA4kB,kBAAA,IAAAC,cAAA,GAAGpnB,KAAK,CAAC4L,MAAM,cAAAwb,cAAA,uBAAZA,cAAA,CAAc7kB,IAAI,cAAA4kB,kBAAA,cAAAA,kBAAA,GAAI,EAAE;EAErC,IAAI3V,SAAS,CAACliB,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAAuB,aAAA,CAAAA,aAAA,KACKmP,KAAK;MACR+B,GAAG,GAAG,kCAAkC,EAAAC,MAAA,CAAAxQ,kBAAA,CAAKwO,KAAK,CAAC+B,GAAG;IAAC;EAE3D;;EAEA;EACA,IAAMslB,YAAY,MAAArlB,MAAA,CAAAxQ,kBAAA,CAAO+Q,IAAI,GAAA/Q,kBAAA,CAAKggB,SAAS,EAAC;EAC5C,IAAMvO,YAAY,GAAGnF,YAAY,CAACupB,YAAY,CAAC;EAE/C,IAAIzd,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACXmP,KAAK;IACR4L,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDmP,KAAK,CAAC4L,MAAM;MACfrJ,IAAI,EAAEU,YAAY;MAClBuO,SAAS,EAAE,EAAE,CAAE;IAAA,EAChB;IACDzP,GAAG,GAAG,6CAA6C,EAAAC,MAAA,CAAAxQ,kBAAA,CAAKwO,KAAK,CAAC+B,GAAG;EAAC,EACnE;;EAED;EACA6H,YAAY,GAAGJ,kBAAkB,CAC/BI,YAAY,EACZ9V,cAAc,CAACS,2BACjB,CAAC;;EAED;EACAqV,YAAY,GAAG0d,sBAAsB,CAAC1d,YAAY,CAAC;EAEnD,OAAOA,YAAY;AACrB;AAEA,SAASmd,YAAYA,CAAC/mB,KAAK,EAAE;EAAA,IAAAunB,qBAAA,EAAAC,cAAA;EAC3B,IAAM1b,MAAM,IAAAyb,qBAAA,IAAAC,cAAA,GAAGxnB,KAAK,CAAC4L,MAAM,cAAA4b,cAAA,uBAAZA,cAAA,CAAc1b,MAAM,cAAAyb,qBAAA,cAAAA,qBAAA,GAAI,CAAC;EAExC,OAAA12B,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACR4L,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDmP,KAAK,CAAC4L,MAAM;MACfC,GAAG,EAAEC;IAAM,EACZ;IACD/J,GAAG,sCAAAC,MAAA,CAA4B8J,MAAM,QAAA9J,MAAA,CAAAxQ,kBAAA,CAAQwO,KAAK,CAAC+B,GAAG;EAAC;AAE3D;AACA,SAASulB,sBAAsBA,CAACtnB,KAAK,EAAE;EAAA,IAAAynB,cAAA;EACrC,IAAMC,UAAU,GAAG1nB,KAAK,CAACyD,MAAM,IAAI,CAAC;EACpC,IAAMkkB,SAAS,GAAG,EAAAF,cAAA,GAAAznB,KAAK,CAAC4L,MAAM,cAAA6b,cAAA,uBAAZA,cAAA,CAAcxP,OAAO,KAAI,CAAC;EAE5C,IAAIyP,UAAU,EAAE;IACdrmB,OAAO,CAACU,GAAG,CAAC,oCAAoC,CAAC;IAEjD,OAAO6lB,SAAS,CAAC5nB,KAAK,EAAE;MAAE2J,MAAM,EAAE;IAAO,CAAC,CAAC;EAC7C;EAEA,IAAIge,SAAS,EAAE;IACbtmB,OAAO,CAACU,GAAG,CAAC,mCAAmC,CAAC;IAEhD,OAAO6lB,SAAS,CAAC5nB,KAAK,EAAE;MAAE2J,MAAM,EAAE;IAAM,CAAC,CAAC;EAC5C;;EAEA;EACA,OAAO3J,KAAK;AACd;AACA,SAASuM,OAAOA,CAACvM,KAAK,EAAE;EACtB,IAAI4J,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACXmP,KAAK;IACR4L,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDmP,KAAK,CAAC4L,MAAM;MACfI,IAAI,EAAE,EAAE,CAAE;IAAA;EACX,EACF;EAED,KAAK,IAAIza,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqY,YAAY,CAACgC,MAAM,CAAC2F,QAAQ,EAAEhgB,CAAC,EAAE,EAAE;IACrDqY,YAAY,GAAG4C,QAAQ,CAAC5C,YAAY,CAAC;EACvC;EAEA,OAAOA,YAAY;AACrB;AACA,SAAS4C,QAAQA,CAACxM,KAAK,EAAE;EACvB,IAAI4J,YAAY,GAAA/Y,aAAA,KAAQmP,KAAK,CAAE;;EAE/B;EACA,IAAI6nB,aAAa,GAAGje,YAAY,CAACgC,MAAM;;EAEvC;EACA,IAAIic,aAAa,CAACtlB,IAAI,CAACjT,MAAM,KAAK,CAAC,EAAE;IACnCsa,YAAY,GAAGod,wBAAwB,CAACpd,YAAY,CAAC;EACvD;;EAEA;EACAie,aAAa,GAAGje,YAAY,CAACgC,MAAM;;EAEnC;EACA,IAAIic,aAAa,CAACtlB,IAAI,CAACjT,MAAM,KAAK,CAAC,EAAE;IACnCsa,YAAY,GAAGke,UAAU,CAACle,YAAY,EAAE,CAAC,EAAE;MAAEme,cAAc,EAAE;IAAM,CAAC,CAAC;IACrEne,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;MACf7H,GAAG,GACD,mEAAmE,EAAAC,MAAA,CAAAxQ,kBAAA,CAChEoY,YAAY,CAAC7H,GAAG;IACpB,EACF;IACD,OAAO6H,YAAY;EACrB;;EAEA;EACA,IAAAoe,mBAAA,GAAA35B,QAAA,CAAsCw5B,aAAa,CAACtlB,IAAI;IAAjD0lB,SAAS,GAAAD,mBAAA;IAAKE,aAAa,GAAAF,mBAAA,CAAAn2B,KAAA;EAClC+X,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;IACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDg3B,aAAa;MAChBtlB,IAAI,EAAE2lB,aAAa;MACnBlc,IAAI,KAAAhK,MAAA,CAAAxQ,kBAAA,CAAMq2B,aAAa,CAAC7b,IAAI,IAAEic,SAAS;IAAC,EACzC;IACDlmB,GAAG,8BAAAC,MAAA,CAAoBimB,SAAS,CAACn2B,IAAI,GAAAkQ,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAAC7H,GAAG;EAAC,EAC9D;EAED6H,YAAY,GAAGJ,kBAAkB,CAACI,YAAY,EAAE9V,cAAc,CAAC8E,SAAS,CAAC;EACzEgR,YAAY,GAAGue,iBAAiB,CAC9Bve,YAAY,EACZqe,SAAS,EACTn0B,cAAc,CAAC8E,SACjB,CAAC;EAED,OAAOgR,YAAY;AACrB;AAEA,SAASue,iBAAiBA,CAACnoB,KAAK,EAAEG,IAAI,EAAE+W,YAAY,EAAgB;EAAA,IAAAkR,cAAA;EAAA,IAAdnR,OAAO,GAAAnmB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC,CAAC;EAChE,IAAI8Y,YAAY,GAAA/Y,aAAA,KAAQmP,KAAK,CAAE;EAC/B,IAAMuX,MAAM,IAAA6Q,cAAA,GAAGjoB,IAAI,CAACtE,QAAQ,cAAAusB,cAAA,uBAAbA,cAAA,CAAgBlR,YAAY,CAAC;EAC5C,IAAI,CAACK,MAAM,EAAE,OAAO3N,YAAY;EAChC;EACA,IAAIsN,YAAY,KAAKpjB,cAAc,CAAC8E,SAAS,EAAE;IAC7C;EAAA;EAEF;EACA,IAAIse,YAAY,KAAKpjB,cAAc,CAACiE,SAAS,EAAE;IAC7C;EAAA;EAEF,OAAO6R,YAAY;AACrB;AACA,SAAS6C,UAAUA,CAACzM,KAAK,EAAExF,QAAQ,EAAE;EAAA,IAAA6tB,qBAAA;EACnC,OAAAx3B,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACR4L,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDmP,KAAK,CAAC4L,MAAM;MACfgG,OAAO,EAAE,EAAAyW,qBAAA,GAACroB,KAAK,CAAC4L,MAAM,CAACgG,OAAO,cAAAyW,qBAAA,cAAAA,qBAAA,GAAI,CAAC,IAAI7tB;IAAQ;EAChD;AAEL;AACA,SAASkS,eAAeA,CAAC1M,KAAK,EAAEvF,SAAS,EAAE;EAAA,IAAA6tB,sBAAA;EACzC,OAAAz3B,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACR4L,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDmP,KAAK,CAAC4L,MAAM;MACfgG,OAAO,EAAE1T,IAAI,CAACC,KAAK,CAAC,EAAAmqB,sBAAA,GAACtoB,KAAK,CAAC4L,MAAM,CAACgG,OAAO,cAAA0W,sBAAA,cAAAA,sBAAA,GAAI,CAAC,IAAI7tB,SAAS;IAAC;EAC7D;AAEL;AACA,SAASqtB,UAAUA,CAAC9nB,KAAK,EAAEuoB,GAAG,EAAgB;EAAA,IAAAC,qBAAA;EAAA,IAAdC,OAAO,GAAA33B,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC,CAAC;EAC1CuQ,OAAO,CAACqnB,KAAK,CAAC,gBAAgB,EAAEH,GAAG,EAAE,UAAU,EAAEE,OAAO,CAAC;EACzD,IAAMV,cAAc,IAAAS,qBAAA,GAAGC,OAAO,CAACV,cAAc,cAAAS,qBAAA,cAAAA,qBAAA,GAAI,KAAK;EAEtD,IAAM5e,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACbmP,KAAK;IACRyD,MAAM,EAAEvF,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAErJ,KAAK,CAACyD,MAAM,GAAG8kB,GAAG,CAAC;IACvCxmB,GAAG,eAAAC,MAAA,CAAeumB,GAAG,eAAAvmB,MAAA,CAAAxQ,kBAAA,CAAewO,KAAK,CAAC+B,GAAG;EAAC,EAC/C;EAED,OAAOgmB,cAAc,GAAGne,YAAY,GAAG0d,sBAAsB,CAAC1d,YAAY,CAAC;AAC7E;AAEA,SAAS6N,UAAUA,CAACzX,KAAK,EAAEhF,MAAM,EAAkC;EAAA,IAAhCG,WAAW,GAAArK,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,EAAE;EAAA,IAAE23B,OAAO,GAAA33B,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC,CAAC;EAC/D,IAAA63B,gBAAA,GAA4BF,OAAO,CAA3B/Q,OAAO;IAAPA,OAAO,GAAAiR,gBAAA,cAAG,KAAK,GAAAA,gBAAA;EACvB,IAAMC,UAAU,GAAG1qB,IAAI,CAACmL,GAAG,CAAC,CAAC,EAAErJ,KAAK,CAAC4L,MAAM,CAACqM,OAAO,GAAGjd,MAAM,CAAC;EAE7DqG,OAAO,CAACU,GAAG,sCAAAC,MAAA,CAEPhC,KAAK,CAAC4L,MAAM,CAACqM,OAAO,iBAAAjW,MAAA,CACRhH,MAAM,cAAAgH,MAAA,CAAW4mB,UAAU,iBAAA5mB,MAAA,CAAc7G,WAAW,CAAC0hB,IAAI,CACrE,IACF,CAAC,mBAAA7a,MAAA,CAAgB0V,OAAO,CAC1B,CAAC;EAED,IAAI9N,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACXmP,KAAK;IACR4L,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDmP,KAAK,CAAC4L,MAAM;MACfqM,OAAO,EAAE2Q;IAAU,EACpB;IACD7mB,GAAG,GACD,0BAAAC,MAAA,CAAgBhH,MAAM,iBAAAgH,MAAA,CAAchC,KAAK,CAAC4L,MAAM,CAACkG,KAAK,CAAChgB,IAAI,KACxDqJ,WAAW,CAAC7L,MAAM,GAAG,CAAC,QAAA0S,MAAA,CAAQ7G,WAAW,CAAC0hB,IAAI,CAAC,IAAI,CAAC,SAAM,EAAE,CAAC,GAC9D,GAAG,EAAA7a,MAAA,CAAAxQ,kBAAA,CACFwO,KAAK,CAAC+B,GAAG;EACb,EACF;;EAED;EACA,IAAI,CAAC2V,OAAO,EAAE;IAAA,IAAAmR,UAAA,GAAA55B,0BAAA,CACakM,WAAW;MAAA2tB,MAAA;IAAA;MAApC,KAAAD,UAAA,CAAAp5B,CAAA,MAAAq5B,MAAA,GAAAD,UAAA,CAAAn5B,CAAA,IAAAC,IAAA,GAAsC;QAAA,IAA3BwmB,UAAU,GAAA2S,MAAA,CAAAl5B,KAAA;QACnBga,YAAY,GAAGJ,kBAAkB,CAC/BI,YAAY,EACZ9V,cAAc,CAACa,WAAW,EAC1B;UACEwhB,UAAU,EAAVA,UAAU;UACVpK,MAAM,EAAE/Q,MAAM;UACd8W,KAAK,EAAE9R,KAAK,CAAC4L,MAAM,CAACkG;QACtB,CACF,CAAC;MACH;IAAC,SAAAlP,GAAA;MAAAimB,UAAA,CAAA35B,CAAA,CAAA0T,GAAA;IAAA;MAAAimB,UAAA,CAAAh5B,CAAA;IAAA;EACH;EAEA+Z,YAAY,GAAG0d,sBAAsB,CAAC1d,YAAY,CAAC;EACnDA,YAAY,GAAGmf,aAAa,CAACnf,YAAY,CAAC;EAE1C,OAAOA,YAAY;AACrB;AAEA,SAASyV,QAAQA,CAACrf,KAAK,EAAE0E,KAAK,EAAE;EAAA,IAAAskB,cAAA;EAC9B,IAAMhd,IAAI,GAAAxa,kBAAA,CAAOwO,KAAK,CAAC4L,MAAM,CAACI,IAAI,CAAC;EACnC,IAAM7L,IAAI,GAAG6L,IAAI,CAACtH,KAAK,CAAC;;EAExB;EACA,IAAI,CAACvE,IAAI,IAAIA,IAAI,CAACxE,UAAU,EAAE,OAAOqE,KAAK;EAC1C,IAAI,EAAAgpB,cAAA,GAAC7oB,IAAI,CAAC5F,OAAO,cAAAyuB,cAAA,cAAAA,cAAA,GAAI,CAAC,IAAIhpB,KAAK,CAAC4L,MAAM,CAACC,GAAG,EAAE,OAAO7L,KAAK;;EAExD;EACA,IAAI4J,YAAY,GAAGmP,eAAe,CAAAloB,aAAA,KAAMmP,KAAK,GAAI,CAACG,IAAI,CAAC5F,OAAO,CAAC;;EAE/D;EACAyR,IAAI,CAACrD,MAAM,CAACjE,KAAK,EAAE,CAAC,CAAC;EACrBkF,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;IACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KAAO+Y,YAAY,CAACgC,MAAM;MAAEI,IAAI,EAAJA;IAAI;EAAE,EACzC;;EAED;EACApC,YAAY,GAAGJ,kBAAkB,CAACI,YAAY,EAAE9V,cAAc,CAACU,SAAS,EAAE;IACxE2L,IAAI,EAAJA;EACF,CAAC,CAAC;;EAEF;EACA,IAAIA,IAAI,CAAC7F,QAAQ,KAAKzB,UAAU,CAACC,OAAO,EAAE;IACxC;IACA8Q,YAAY,GAAGqf,YAAY,CAACrf,YAAY,EAAEzJ,IAAI,CAAC;IAC/CyJ,YAAY,GAAG0d,sBAAsB,CAAC1d,YAAY,CAAC;IACnDA,YAAY,GAAGmf,aAAa,CAACnf,YAAY,CAAC;IAC1C,OAAOA,YAAY;EACrB;;EAEA;EACA,IAAM6H,SAAS,GAAAjgB,kBAAA,CAAOoY,YAAY,CAACgC,MAAM,CAAC6F,SAAS,CAAC;EACpD,IAAMyX,UAAU,GAAGzX,SAAS,CAAC+M,OAAO,CAAC,YAAY,CAAC;EAClD,IAAI0K,UAAU,KAAK,CAAC,CAAC,EAAE,OAAOtf,YAAY,CAAC,CAAC;;EAE5C6H,SAAS,CAACyX,UAAU,CAAC,GAAG/oB,IAAI;EAC5ByJ,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;IACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KAAO+Y,YAAY,CAACgC,MAAM;MAAE6F,SAAS,EAATA;IAAS;EAAE,EAC9C;;EAED;EACA,IAAI,CAACA,SAAS,CAAC/P,QAAQ,CAAC,YAAY,CAAC,EAAE;IACrCkI,YAAY,GAAG0V,aAAa,CAAC1V,YAAY,CAAC;IAC1CA,YAAY,GAAG0d,sBAAsB,CAAC1d,YAAY,CAAC;IACnDA,YAAY,GAAGmf,aAAa,CAACnf,YAAY,CAAC;EAC5C;EAEA,OAAOA,YAAY;AACrB;AAEA,SAAS0V,aAAaA,CAACtf,KAAK,EAAE;EAAA,IAAAmpB,qBAAA;EAC5B,IAAIvf,YAAY,GAAA/Y,aAAA,KAAQmP,KAAK,CAAE;;EAE/B;EACA4J,YAAY,GAAGJ,kBAAkB,CAC/BI,YAAY,EACZ9V,cAAc,CAACW,cACjB,CAAC;;EAED;EAAA,IAAA20B,UAAA,GAAAn6B,0BAAA,CACmB2a,YAAY,CAACgC,MAAM,CAAC6F,SAAS;IAAA4X,MAAA;EAAA;IAAhD,KAAAD,UAAA,CAAA35B,CAAA,MAAA45B,MAAA,GAAAD,UAAA,CAAA15B,CAAA,IAAAC,IAAA,GAAkD;MAAA,IAAvCwQ,IAAI,GAAAkpB,MAAA,CAAAz5B,KAAA;MACb,IAAIjB,OAAA,CAAOwR,IAAI,MAAK,QAAQ,IAAIA,IAAI,CAACrO,IAAI,KAAK,YAAY,EAAE;MAC5D8X,YAAY,GAAGqf,YAAY,CAACrf,YAAY,EAAEzJ,IAAI,CAAC;IACjD;;IAEA;EAAA,SAAAyC,GAAA;IAAAwmB,UAAA,CAAAl6B,CAAA,CAAA0T,GAAA;EAAA;IAAAwmB,UAAA,CAAAv5B,CAAA;EAAA;EACA+Z,YAAY,GAAG0f,cAAc,CAAC1f,YAAY,CAAC;;EAE3C;EACA,IAAI,EAAAuf,qBAAA,GAAAvf,YAAY,CAACgC,MAAM,cAAAud,qBAAA,uBAAnBA,qBAAA,CAAqBlR,OAAO,IAAG,CAAC,EAAE;IACpC;IACA,IAAIrO,YAAY,CAACgC,MAAM,CAACyF,KAAK,GAAG,CAAC,EAAE;MACjChQ,OAAO,CAACU,GAAG,CAAC,yDAAyD,CAAC;MACtE,OAAOuY,SAAS,CAAC1Q,YAAY,CAAC;IAChC,CAAC,MAAM;MACLvI,OAAO,CAACU,GAAG,CAAC,yDAAyD,CAAC;MACtE,OAAO6lB,SAAS,CAAChe,YAAY,EAAE;QAAED,MAAM,EAAE;MAAO,CAAC,CAAC;IACpD;EACF;;EAEA;EACA,OAAOie,SAAS,CAAChe,YAAY,EAAE;IAAED,MAAM,EAAE;EAAM,CAAC,CAAC;AACnD;AACA,SAAS2f,cAAcA,CAACtpB,KAAK,EAAE;EAAA,IAAAupB,sBAAA;EAC7B,IAAMC,WAAW,IAAAD,sBAAA,GAAGvpB,KAAK,CAAC4L,MAAM,CAACgG,OAAO,cAAA2X,sBAAA,cAAAA,sBAAA,GAAI,CAAC;EAE7C,IAAIC,WAAW,IAAI,CAAC,EAAE;IACpB,OAAA34B,aAAA,CAAAA,aAAA,KACKmP,KAAK;MACR4L,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACDmP,KAAK,CAAC4L,MAAM;QACfgG,OAAO,EAAE;MAAC;IACX;EAEL;EAEA,IAAIhI,YAAY,GAAA/Y,aAAA,KAAQmP,KAAK,CAAE;;EAE/B;EACA4J,YAAY,GAAG6N,UAAU,CAAC7N,YAAY,EAAE4f,WAAW,EAAE,CAACv2B,YAAY,CAACC,KAAK,CAAC,CAAC;EAE1E0W,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;IACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM;MACtBgG,OAAO,EAAE;IAAC,EACX;IACD7P,GAAG,eAAAC,MAAA,CACWwnB,WAAW,WAAAxnB,MAAA,CAAQwnB,WAAW,KAAK,CAAC,GAAG,GAAG,GAAG,KAAK,QAAAxnB,MAAA,CAAAxQ,kBAAA,CAC3DoY,YAAY,CAAC7H,GAAG;EACpB,EACF;EAED,OAAO6H,YAAY;AACrB;AAEA,SAAS6f,OAAOA,CAACzpB,KAAK,EAAE;EACtB,IAAI4J,YAAY,GAAA/Y,aAAA,KAAQmP,KAAK,CAAE;;EAE/B;EACA4J,YAAY,GAAG0d,sBAAsB,CAAC1d,YAAY,CAAC;EACnD,IAAIA,YAAY,CAACgC,MAAM,CAAC8F,WAAW,EAAE,OAAO9H,YAAY;;EAExD;EACA,IAAM8f,aAAa,GAAG9f,YAAY,CAACgC,MAAM,CAACI,IAAI,IAAI,EAAE;EACpD,IAAM2d,gBAAgB,MAAA3nB,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAACgC,MAAM,CAAC4F,SAAS,GAAAhgB,kBAAA,CAAKk4B,aAAa,EAAC;EAE7E9f,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;IACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM;MACtBI,IAAI,EAAE,EAAE;MACRwF,SAAS,EAAEmY;IAAgB,EAC5B;IACD5nB,GAAG,2BAAAC,MAAA,CAAAxQ,kBAAA,CAA8BoY,YAAY,CAAC7H,GAAG;EAAC,EACnD;;EAED;EACA,IAAI6H,YAAY,CAACgC,MAAM,CAAC8F,WAAW,EAAE,OAAO9H,YAAY;;EAExD;EACA,OAAO0Q,SAAS,CAAC1Q,YAAY,CAAC;AAChC;AAEA,SAASqf,YAAYA,CAACjpB,KAAK,EAAEG,IAAI,EAAE;EACjC,IAAI,CAACA,IAAI,IAAIxR,OAAA,CAAOwR,IAAI,MAAK,QAAQ,EAAE,OAAOH,KAAK;EAEnD,IAAI4J,YAAY,GAAA/Y,aAAA,KAAQmP,KAAK,CAAE;EAC/B,IAAM4pB,OAAO,GAAG,EAAE;;EAElB;EACA,IAAIzpB,IAAI,CAAC3F,QAAQ,EAAE;IACjBoP,YAAY,GAAG6C,UAAU,CAAC7C,YAAY,EAAEzJ,IAAI,CAAC3F,QAAQ,CAAC;IACtDovB,OAAO,CAACj5B,IAAI,KAAAqR,MAAA,CAAK7B,IAAI,CAAC3F,QAAQ,WAAAwH,MAAA,CAAQ7B,IAAI,CAAC3F,QAAQ,KAAK,CAAC,GAAG,GAAG,GAAG,KAAK,CAAE,CAAC;EAC5E;;EAEA;EACA,IAAI2F,IAAI,CAAC1F,SAAS,EAAE;IAClBmP,YAAY,GAAG8C,eAAe,CAAC9C,YAAY,EAAEzJ,IAAI,CAAC1F,SAAS,CAAC;IAC5DmvB,OAAO,CAACj5B,IAAI,QAAAqR,MAAA,CAAK7B,IAAI,CAAC1F,SAAS,aAAU,CAAC;EAC5C;;EAEA;EACA,IAAI0F,IAAI,CAACzF,OAAO,EAAE;IAChBkP,YAAY,GAAGiG,QAAQ,CAACjG,YAAY,EAAEzJ,IAAI,CAACzF,OAAO,CAAC;IACnDkvB,OAAO,CAACj5B,IAAI,KAAAqR,MAAA,CAAK7B,IAAI,CAACzF,OAAO,UAAO,CAAC;EACvC;;EAEA;EACA,IAAIyF,IAAI,CAACrF,MAAM,EAAE;IACf8O,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;MACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM;QACtBC,GAAG,EAAEjC,YAAY,CAACgC,MAAM,CAACC,GAAG,GAAG1L,IAAI,CAACrF;MAAM;IAC3C,EACF;IACD8uB,OAAO,CAACj5B,IAAI,KAAAqR,MAAA,CAAK7B,IAAI,CAACrF,MAAM,SAAM,CAAC;EACrC;;EAEA;EACA,IAAIqF,IAAI,CAACvF,QAAQ,EAAE;IACjB,KAAK,IAAIrJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4O,IAAI,CAACvF,QAAQ,EAAErJ,CAAC,EAAE,EAAE;MACtCqY,YAAY,GAAG4C,QAAQ,CAAC5C,YAAY,CAAC;IACvC;IACAggB,OAAO,CAACj5B,IAAI,SAAAqR,MAAA,CAAS7B,IAAI,CAACvF,QAAQ,WAAAoH,MAAA,CAAQ7B,IAAI,CAACvF,QAAQ,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,CAAE,CAAC;EAC7E;;EAEA;EACA,IAAIuF,IAAI,CAAC4U,UAAU,EAAE;IACnBnL,YAAY,GAAGke,UAAU,CAACle,YAAY,EAAEzJ,IAAI,CAAC4U,UAAU,CAAC;IACxD6U,OAAO,CAACj5B,IAAI,KAAAqR,MAAA,CAAK7B,IAAI,CAAC4U,UAAU,QAAK,CAAC;EACxC;;EAEA;EACA,IAAI5U,IAAI,CAACxF,mCAAmC,EAAE;IAC5C,IAAMuR,YAAY,GAAGhO,IAAI,CAACiO,GAAG,CAC3BhM,IAAI,CAACxF,mCAAmC,EACxCiP,YAAY,CAAC1G,QAAQ,CAACX,IAAI,CAACjT,MAC7B,CAAC;IACD,IAAMwoB,YAAY,GAAGnd,mCAAmC,CACtDiP,YAAY,CAAC1G,QAAQ,CAACX,IAAI,EAC1B2J,YACF,CAAC;IACDtC,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;MACf1G,QAAQ,EAAArS,aAAA,CAAAA,aAAA,KACH+Y,YAAY,CAAC1G,QAAQ;QACxBX,IAAI,EAAEuV;MAAY;IACnB,EACF;IACD8R,OAAO,CAACj5B,IAAI,aAAAqR,MAAA,CAAakK,YAAY,qBAAkB,CAAC;EAC1D;;EAEA;EACA,IAAI/L,IAAI,CAACpF,mCAAmC,EAAE;IAC5C,IAAMmR,cAAY,GAAGhO,IAAI,CAACiO,GAAG,CAC3BhM,IAAI,CAACpF,mCAAmC,EACxC6O,YAAY,CAACgC,MAAM,CAACI,IAAI,CAAC1c,MAC3B,CAAC;IACD,IAAMu6B,YAAY,GAAGlvB,mCAAmC,CACtDiP,YAAY,CAACgC,MAAM,CAACI,IAAI,EACxBE,cACF,CAAC;IACDtC,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;MACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM;QACtBI,IAAI,EAAE6d;MAAY;IACnB,EACF;IACDD,OAAO,CAACj5B,IAAI,aAAAqR,MAAA,CAAakK,cAAY,qBAAkB,CAAC;EAC1D;;EAEA;EACA,IAAI/L,IAAI,CAACnF,MAAM,EAAE;IACf,IAAM8uB,KAAK,GACT16B,KAAK,CAACC,OAAO,CAAC8Q,IAAI,CAAChF,WAAW,CAAC,IAAIgF,IAAI,CAAChF,WAAW,CAAC7L,MAAM,GAAG,CAAC,GAC1D6Q,IAAI,CAAChF,WAAW,GAChB,CAAClI,YAAY,CAACC,KAAK,CAAC;IAE1B0W,YAAY,GAAG6N,UAAU,CAAC7N,YAAY,EAAEzJ,IAAI,CAACnF,MAAM,EAAE8uB,KAAK,CAAC;IAC3DF,OAAO,CAACj5B,IAAI,UAAAqR,MAAA,CAAU7B,IAAI,CAACnF,MAAM,OAAAgH,MAAA,CAAI8nB,KAAK,CAACjN,IAAI,CAAC,GAAG,CAAC,YAAS,CAAC;EAChE;;EAEA;EACA,IACE1c,IAAI,CAAC9E,UAAU,IACf,OAAO8E,IAAI,CAAC9E,UAAU,CAACC,IAAI,KAAK,QAAQ,IACxC,OAAO6E,IAAI,CAAC9E,UAAU,CAACE,KAAK,KAAK,QAAQ,EACzC;IACA,IAAAwuB,gBAAA,GAAuC5pB,IAAI,CAAC9E,UAAU;MAA9CC,IAAI,GAAAyuB,gBAAA,CAAJzuB,IAAI;MAAEC,KAAK,GAAAwuB,gBAAA,CAALxuB,KAAK;MAAAyuB,qBAAA,GAAAD,gBAAA,CAAEvuB,SAAS;MAATA,SAAS,GAAAwuB,qBAAA,cAAG,CAAC,GAAAA,qBAAA;IAClC,IAAMhvB,MAAM,GAAGivB,QAAQ,CAAC3uB,IAAI,EAAEC,KAAK,EAAEC,SAAS,CAAC;IAE/C,IAAMsuB,MAAK,GACT16B,KAAK,CAACC,OAAO,CAAC8Q,IAAI,CAAChF,WAAW,CAAC,IAAIgF,IAAI,CAAChF,WAAW,CAAC7L,MAAM,GAAG,CAAC,GAC1D6Q,IAAI,CAAChF,WAAW,GAChB,CAAClI,YAAY,CAACC,KAAK,CAAC;IAE1B0W,YAAY,GAAG6N,UAAU,CAAC7N,YAAY,EAAE5O,MAAM,EAAE8uB,MAAK,CAAC;IAEtD,IAAMI,QAAQ,GAAGJ,MAAK,CAACjN,IAAI,CAAC,KAAK,CAAC;IAClC+M,OAAO,CAACj5B,IAAI,UAAAqR,MAAA,CAAUhH,MAAM,OAAAgH,MAAA,CAAIkoB,QAAQ,YAAS,CAAC;EACpD;;EAEA;EACA,IAAI/pB,IAAI,CAAC/E,cAAc,EAAE;IACvB,IAAM0Z,YAAY,GAAGtY,WAAW,CAAC2D,IAAI,EAAEA,IAAI,CAAC/E,cAAc,CAAC;;IAE3D;IACAwO,YAAY,GAAGugB,iCAAiC,CAC9CvgB,YAAY,EACZzJ,IAAI,EACJA,IAAI,CAAC/E,cACP,CAAC;IAED,IAAMgvB,WAAW,GAAGtV,YAAY,CAACja,WAAW,GAAG,OAAO,GAAG,WAAW;IACpE,IAAMwvB,gBAAgB,GAAGzgB,YAAY,CAACgC,MAAM,CAAC6F,SAAS,CAACjhB,MAAM,CAC3D,UAAC+d,CAAC;MAAA,OAAKA,CAAC,CAACzc,IAAI,KAAKqO,IAAI,CAACrO,IAAI;IAAA,CAC7B,CAAC;IAED8X,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;MACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM,OAAA5a,eAAA;QACtBygB,SAAS,EAAE4Y;MAAgB,GAC1BD,WAAW,KAAApoB,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAACgC,MAAM,CAACwe,WAAW,CAAC,IAAEtV,YAAY,IAClE;MACDwV,SAAS,KAAAtoB,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAAC0gB,SAAS,IAAI,EAAE,IAAGnqB,IAAI,EAAC;MACpD4B,GAAG,WAAAC,MAAA,CAAW7B,IAAI,CAACrO,IAAI,QAAAkQ,MAAA,CAAK4nB,OAAO,CAAC/M,IAAI,CAAC,IAAI,CAAC,GAAA7a,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAAC7H,GAAG;IAAC,EACvE;IAED,OAAOulB,sBAAsB,CAAC1d,YAAY,CAAC;EAC7C,CAAC,MAAM;IACL;IACA,IAAMwgB,YAAW,GAAGjqB,IAAI,CAACtF,WAAW,GAAG,OAAO,GAAG,WAAW;IAC5D,IAAMwvB,iBAAgB,GAAGzgB,YAAY,CAACgC,MAAM,CAAC6F,SAAS,CAACjhB,MAAM,CAC3D,UAAC+d,CAAC;MAAA,OAAKA,CAAC,CAACzc,IAAI,KAAKqO,IAAI,CAACrO,IAAI;IAAA,CAC7B,CAAC;IAED8X,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;MACfgC,MAAM,EAAA/a,aAAA,CAAAA,aAAA,KACD+Y,YAAY,CAACgC,MAAM,OAAA5a,eAAA;QACtBygB,SAAS,EAAE4Y;MAAgB,GAC1BD,YAAW,KAAApoB,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAACgC,MAAM,CAACwe,YAAW,CAAC,IAAEjqB,IAAI,IAC1D;MACDmqB,SAAS,KAAAtoB,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAAC0gB,SAAS,IAAI,EAAE,IAAGnqB,IAAI,EAAC;MACpD4B,GAAG,WAAAC,MAAA,CAAW7B,IAAI,CAACrO,IAAI,QAAAkQ,MAAA,CAAK4nB,OAAO,CAAC/M,IAAI,CAAC,IAAI,CAAC,GAAA7a,MAAA,CAAAxQ,kBAAA,CAAOoY,YAAY,CAAC7H,GAAG;IAAC,EACvE;IAED,OAAOulB,sBAAsB,CAAC1d,YAAY,CAAC;EAC7C;AACF;AAEA,SAASge,SAASA,CAAC5nB,KAAK,EAAgB;EAAA,IAAAuqB,eAAA,EAAAC,qBAAA;EAAA,IAAdvT,OAAO,GAAAnmB,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC,CAAC;EACpCuQ,OAAO,CAACU,GAAG,CAAC,qCAAqC,EAAEkV,OAAO,CAAC;EAE3D,IAAI,CAACjX,KAAK,CAAC4L,MAAM,IAAI5L,KAAK,CAAC8D,YAAY,KAAKpN,MAAM,CAAChC,UAAU,EAAE;IAC7D,OAAOsL,KAAK,CAAC,CAAC;EAChB;EAEA,IAAI4J,YAAY,GAAA/Y,aAAA,KAAQmP,KAAK,CAAE;EAC/B,IAAM2J,MAAM,IAAA4gB,eAAA,GAAGtT,OAAO,CAACtN,MAAM,cAAA4gB,eAAA,cAAAA,eAAA,GAAI,MAAM;EACvC,IAAME,OAAO,GAAG9gB,MAAM,KAAK,KAAK;EAChC,IAAMmI,KAAK,IAAA0Y,qBAAA,GAAG5gB,YAAY,CAACgC,MAAM,cAAA4e,qBAAA,uBAAnBA,qBAAA,CAAqB1Y,KAAK;;EAExC;EACAlI,YAAY,GAAGJ,kBAAkB,CAACI,YAAY,EAAE9V,cAAc,CAACY,UAAU,CAAC;;EAE1E;EACA,IAAI+1B,OAAO,EAAE;IAAA,IAAAC,qBAAA,EAAAC,WAAA,EAAAC,qBAAA;IACX,IAAMC,OAAO,MAAA7oB,MAAA,CAAAxQ,kBAAA,EAAAk5B,qBAAA,GACP9gB,YAAY,CAACgC,MAAM,CAACif,OAAO,cAAAH,qBAAA,cAAAA,qBAAA,GAAI,EAAE,GAAAl5B,kBAAA,EAAAm5B,WAAA,GACjC7Y,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEgL,IAAI,cAAA6N,WAAA,cAAAA,WAAA,GAAI,EAAE,EACtB;IAED,IAAI7Y,KAAK,aAALA,KAAK,eAALA,KAAK,CAAE8I,MAAM,EAAE;MACjB,IAAMkQ,SAAS,GAAG9X,kBAAkB,CAAC,CAAC;MACtC,IAAI8X,SAAS,EAAED,OAAO,CAACl6B,IAAI,CAACm6B,SAAS,CAAC;IACxC;IAEA,IAAMza,eAAe,MAAArO,MAAA,CAAAxQ,kBAAA,EAAAo5B,qBAAA,GAAQhhB,YAAY,CAACyG,eAAe,cAAAua,qBAAA,cAAAA,qBAAA,GAAI,EAAE,IAAG9Y,KAAK,EAAC;IAExElI,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;MACfyG,eAAe,EAAfA,eAAe;MACfvP,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJ+Y,YAAY,CAAC9I,SAAS;QACzBiJ,aAAa,EAAE8gB;MAAO;IACvB,EACF;IAEDjhB,YAAY,GAAGmf,aAAa,CAACnf,YAAY,CAAC;EAC5C,CAAC,MAAM;IAAA,IAAAmhB,sBAAA,EAAAC,qBAAA;IACL;IACA,IAAMC,gBAAgB,IAAAF,sBAAA,IAAAC,qBAAA,GAAGphB,YAAY,CAACgC,MAAM,cAAAof,qBAAA,uBAAnBA,qBAAA,CAAqB/S,OAAO,cAAA8S,sBAAA,cAAAA,sBAAA,GAAI,CAAC;IAE1D,IAAIjZ,KAAK,aAALA,KAAK,eAALA,KAAK,CAAE8I,MAAM,EAAE;MACjB;MACAhR,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;QACfshB,cAAc,EAAE,MAAM;QACtBnpB,GAAG,wCAAAC,MAAA,CAC0B8P,KAAK,CAAChgB,IAAI,+BAAAkQ,MAAA,CAAAxQ,kBAAA,CAClCoY,YAAY,CAAC7H,GAAG;MACpB,EACF;IACH,CAAC,MAAM;MACL,IAAIkpB,gBAAgB,GAAG,CAAC,EAAE;QAAA,IAAAE,WAAA;QACxBvhB,YAAY,GAAGke,UAAU,CAACle,YAAY,EAAEqhB,gBAAgB,EAAE;UACxDlD,cAAc,EAAE;QAClB,CAAC,CAAC;QACFne,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;UACf7H,GAAG,wCAAAC,MAAA,EAAAmpB,WAAA,GAECrZ,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEhgB,IAAI,cAAAq5B,WAAA,cAAAA,WAAA,GAAI,WAAW,gBAAAnpB,MAAA,CACfipB,gBAAgB,eAAAjpB,MAAA,CAAAxQ,kBAAA,CAC1BoY,YAAY,CAAC7H,GAAG;QACpB,EACF;MACH,CAAC,MAAM;QAAA,IAAAqpB,YAAA;QACLxhB,YAAY,GAAA/Y,aAAA,CAAAA,aAAA,KACP+Y,YAAY;UACf7H,GAAG,wCAAAC,MAAA,EAAAopB,YAAA,GAC0BtZ,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEhgB,IAAI,cAAAs5B,YAAA,cAAAA,YAAA,GAAI,YAAY,GAAAppB,MAAA,CAAAxQ,kBAAA,CACnDoY,YAAY,CAAC7H,GAAG;QACpB,EACF;MACH;MAEA6H,YAAY,GAAGmf,aAAa,CAACnf,YAAY,CAAC;IAC5C;EACF;;EAEA;EACA,IAAMyhB,aAAa,GAAAx6B,aAAA,CAAAA,aAAA,KACd+Y,YAAY,CAACgC,MAAM;IACtB6F,SAAS,EAAE,EAAE;IACbzF,IAAI,EAAE,EAAE;IACRwF,SAAS,EAAE,EAAE;IACbI,OAAO,EAAE;EAAC,EACX;;EAED;EACA,IAAI0Z,UAAU,GAAAz6B,aAAA,CAAAA,aAAA,KACT+Y,YAAY;IACfgC,MAAM,EAAEyf;EAAa,EACtB;EAED,IAAIC,UAAU,CAACJ,cAAc,EAAE;IAC7BI,UAAU,GAAG3nB,cAAc,CAAC2nB,UAAU,EAAE50B,MAAM,CAACO,SAAS,CAAC;IACzDq0B,UAAU,GAAAz6B,aAAA,CAAAA,aAAA,KACLy6B,UAAU;MACbvpB,GAAG,8BAAAC,MAAA,CAAoBspB,UAAU,CAACJ,cAAc,GAAAlpB,MAAA,CAAAxQ,kBAAA,CAAO85B,UAAU,CAACvpB,GAAG;IAAC,EACvE;EACH,CAAC,MAAM;IACLupB,UAAU,GAAG3nB,cAAc,CAAC2nB,UAAU,EAAE50B,MAAM,CAAChC,UAAU,CAAC;EAC5D;EAEA,OAAOqP,sBAAsB,CAACunB,UAAU,CAAC;AAC3C;AAEA,SAASrM,kBAAkBA,CAACjf,KAAK,EAAE;EAAA,IAAAurB,iBAAA;EACjC,IAAM5F,gBAAgB,GACpB,EAAA4F,iBAAA,GAAAvrB,KAAK,CAACc,SAAS,cAAAyqB,iBAAA,uBAAfA,iBAAA,CAAiBxhB,aAAa,KAAI/J,KAAK,CAACc,SAAS,CAACiJ,aAAa,CAACza,MAAM,GAAG,CAAC;;EAE5E;EACA,IAAMk8B,QAAQ,GAAG7F,gBAAgB,GAC7B,gCAAgC,GAChC,kBAAkB;EAEtB,IAAMpb,QAAQ,GAAA1Z,aAAA,CAAAA,aAAA,KACTmP,KAAK;IACRc,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;MAClBiJ,aAAa,EAAE,EAAE,CAAE;IAAA,EACpB;IACDhI,GAAG,GAAGypB,QAAQ,EAAAxpB,MAAA,CAAAxQ,kBAAA,CAAKwO,KAAK,CAAC+B,GAAG;EAAC,EAC9B;EAED,IAAM0pB,SAAS,GAAG9nB,cAAc,CAAC4G,QAAQ,EAAE7T,MAAM,CAACK,cAAc,CAAC;EACjE,OAAOgN,sBAAsB,CAAC0nB,SAAS,CAAC;AAC1C;AACA,SAAS1C,aAAaA,CAAC/oB,KAAK,EAAE;EAC5B,IAAM0nB,UAAU,GAAG1nB,KAAK,CAACyD,MAAM,IAAI,CAAC;EACpC,IAAMioB,cAAc,GAAG,CAAC1rB,KAAK,CAACqQ,eAAe,IAAI,EAAE,EAAE7f,MAAM,CACzD,UAACshB,KAAK;IAAA,OAAKA,KAAK,CAAC8I,MAAM;EAAA,CACzB,CAAC,CAACtrB,MAAM;EAER,IAAIo4B,UAAU,EAAE;IACd,OAAA72B,aAAA,CAAAA,aAAA,KACKmP,KAAK;MACRkrB,cAAc,EAAE;IAAM;EAE1B;EAEA,IAAIQ,cAAc,IAAI,CAAC,EAAE;IACvB,OAAA76B,aAAA,CAAAA,aAAA,KACKmP,KAAK;MACRkrB,cAAc,EAAE;IAAS;EAE7B;EAEA,OAAOlrB,KAAK;AACd;AAEA,SAAS2rB,QAAQA,CAAC3rB,KAAK,EAAE2J,MAAM,EAAE;EAC/B,OAAA9Y,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACR4rB,UAAU,EAAEjiB,MAAM;IAClB7F,YAAY,EAAEpN,MAAM,CAACO,SAAS;IAC9B8K,GAAG,8BAAAC,MAAA,CAAoB2H,MAAM,GAAA3H,MAAA,CAAAxQ,kBAAA,CAAOwO,KAAK,CAAC+B,GAAG;EAAC;AAElD;AACA,SAASyd,QAAQA,CAACxf,KAAK,EAAE;EACvB,IAAM6rB,YAAY,GAAAh7B,aAAA,CAAAA,aAAA,KACbmP,KAAK;IACRc,SAAS,EAAAjQ,aAAA,CAAAA,aAAA,KACJmP,KAAK,CAACc,SAAS;MAClBC,SAAS,EAAE,EAAE,CAAE;IAAA,EAChB;IACDgB,GAAG,GAAG,qBAAqB,EAAAC,MAAA,CAAAxQ,kBAAA,CAAKwO,KAAK,CAAC+B,GAAG;EAAC,EAC3C;;EAED;EACA,OAAOgC,sBAAsB,CAC3BJ,cAAc,CAACkoB,YAAY,EAAEn1B,MAAM,CAACK,cAAc,CACpD,CAAC;AACH;AAEA,SAASkzB,QAAQA,CAAC6B,OAAO,EAAEC,WAAW,EAAiB;EAAA,IAAfvwB,SAAS,GAAA1K,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC;EACnD,IAAIk7B,KAAK,GAAG,CAAC;EACb,KAAK,IAAIz6B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGu6B,OAAO,EAAEv6B,CAAC,EAAE,EAAE;IAChCy6B,KAAK,IAAI9tB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG2tB,WAAW,CAAC,GAAG,CAAC;EACtD;EACA,OAAOC,KAAK,GAAGxwB,SAAS;AAC1B;AAEA,SAAS2uB,iCAAiCA,CAACnqB,KAAK,EAAEG,IAAI,EAAgB;EAAA,IAAA8rB,gBAAA;EAAA,IAAdzqB,QAAQ,GAAA1Q,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAAkV,SAAA,GAAAlV,SAAA,MAAG,CAAC;EAClE,IAAI,EAACkP,KAAK,aAALA,KAAK,gBAAAisB,gBAAA,GAALjsB,KAAK,CAAEkD,QAAQ,cAAA+oB,gBAAA,eAAfA,gBAAA,CAAiB1pB,IAAI,KAAI,CAACnT,KAAK,CAACC,OAAO,CAAC2Q,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAAC,EAAE;IACjElB,OAAO,CAACgB,KAAK,CAAC,wCAAwC,CAAC;IACvD,OAAOrC,KAAK;EACd;EAEA,IAAMuC,IAAI,GAAA/Q,kBAAA,CAAOwO,KAAK,CAACkD,QAAQ,CAACX,IAAI,CAAC;EACrC,IAAMmC,KAAK,GAAGnC,IAAI,CAACqK,SAAS,CAAC,UAAC2B,CAAC;IAAA,OAAKA,CAAC,CAACzc,IAAI,KAAKqO,IAAI,CAACrO,IAAI;EAAA,EAAC;EAEzD,IAAI4S,KAAK,KAAK,CAAC,CAAC,EAAE;IAChBrD,OAAO,CAACC,IAAI,qCAAAU,MAAA,CAAqC7B,IAAI,CAACrO,IAAI,CAAE,CAAC;IAC7D,OAAOkO,KAAK;EACd;EAEAuC,IAAI,CAACmC,KAAK,CAAC,GAAGlI,WAAW,CAAC+F,IAAI,CAACmC,KAAK,CAAC,EAAElD,QAAQ,CAAC;EAEhD,OAAA3Q,aAAA,CAAAA,aAAA,KACKmP,KAAK;IACRkD,QAAQ,EAAArS,aAAA,CAAAA,aAAA,KACHmP,KAAK,CAACkD,QAAQ;MACjBX,IAAI,EAAJA;IAAI;EACL;AAEL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC/hLA,IAAI2pB,UAAU,GAAG,4BAA4B;AAE7C,IAAIC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACC,MAAM;AAEpC,SAASA,MAAMA,CAACC,UAAU,EAAE;EAC1BJ,SAAS,CAACl8B,IAAI,CAAC,IAAI,EAAEs8B,UAAU,CAAC;EAChC,IAAI,CAACC,GAAG,GAAG;IACTnlB,IAAI,EAAE+kB,MAAM,CAACC,MAAM,CAACI,OAAO;IAC3BC,gBAAgB,EAAE,EAAE;IACpBC,iBAAiB,EAAE,EAAE;IACrBC,MAAM,EAAE,SAAAA,CAAUC,EAAE,EAAE;MACpB,IAAI,CAACH,gBAAgB,CAAC/7B,IAAI,CAACk8B,EAAE,IAAI,YAAY,CAAC,CAAC,CAAC;IAClD,CAAC;IACDC,OAAO,EAAE,SAAAA,CAAUD,EAAE,EAAE;MACrB,IAAI,CAACF,iBAAiB,CAACh8B,IAAI,CAACk8B,EAAE,CAAC;IACjC;EACF,CAAC;EAEDT,MAAM,CAACC,MAAM,CAACI,OAAO,GAAG,IAAI;AAC9B;AAEAL,MAAM,CAACC,MAAM,CAACC,MAAM,GAAGA,MAAM;AAC7B,IAAIS,aAAa,EAAEC,cAAc;AAEjC,IAAIC,MAAM,GAAGb,MAAM,CAACC,MAAM,CAACY,MAAM;AACjC,IAAI,CAAC,CAACA,MAAM,IAAI,CAACA,MAAM,CAACC,eAAe,KAAK,OAAOC,SAAS,KAAK,WAAW,EAAE;EAC5E,IAAIC,QAAQ,GAAG,MAA4BC,QAAQ,CAACD,QAAQ;EAC5D,IAAIE,QAAQ,GAAGD,QAAQ,CAACC,QAAQ,KAAK,QAAQ,GAAG,KAAK,GAAG,IAAI;EAC5D,IAAIC,EAAE,GAAG,IAAIJ,SAAS,CAACG,QAAQ,GAAG,KAAK,GAAGF,QAAQ,GAAG,GAAG,UAAuB,GAAG,GAAG,CAAC;EACtFG,EAAE,CAACC,SAAS,GAAG,UAASC,KAAK,EAAE;IAC7BV,aAAa,GAAG,CAAC,CAAC;IAClBC,cAAc,GAAG,EAAE;IAEnB,IAAI3lB,IAAI,GAAG6S,IAAI,CAACC,KAAK,CAACsT,KAAK,CAACpmB,IAAI,CAAC;IAEjC,IAAIA,IAAI,CAAC7H,IAAI,KAAK,QAAQ,EAAE;MAC1B,IAAIkuB,OAAO,GAAG,KAAK;MACnBrmB,IAAI,CAACsmB,MAAM,CAAC58B,OAAO,CAAC,UAAS68B,KAAK,EAAE;QAClC,IAAI,CAACA,KAAK,CAACC,KAAK,EAAE;UAChB,IAAIC,SAAS,GAAGC,cAAc,CAACC,MAAM,CAACC,aAAa,EAAEL,KAAK,CAAC3N,EAAE,CAAC;UAC9D,IAAI6N,SAAS,EAAE;YACbJ,OAAO,GAAG,IAAI;UAChB;QACF;MACF,CAAC,CAAC;;MAEF;MACAA,OAAO,GAAGA,OAAO,IAAIrmB,IAAI,CAACsmB,MAAM,CAAClmB,KAAK,CAAC,UAASmmB,KAAK,EAAE;QACrD,OAAOA,KAAK,CAACpuB,IAAI,KAAK,KAAK,IAAIouB,KAAK,CAACM,SAAS,CAACC,EAAE;MACnD,CAAC,CAAC;MAEF,IAAIT,OAAO,EAAE;QACXrsB,OAAO,CAAC+sB,KAAK,CAAC,CAAC;QAEf/mB,IAAI,CAACsmB,MAAM,CAAC58B,OAAO,CAAC,UAAU68B,KAAK,EAAE;UACnCS,QAAQ,CAACL,MAAM,CAACC,aAAa,EAAEL,KAAK,CAAC;QACvC,CAAC,CAAC;QAEFZ,cAAc,CAACj8B,OAAO,CAAC,UAAUu9B,CAAC,EAAE;UAClCC,YAAY,CAACD,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIjB,QAAQ,CAACmB,MAAM,EAAE;QAAE;QAC5BnB,QAAQ,CAACmB,MAAM,CAAC,CAAC;MACnB;IACF;IAEA,IAAInnB,IAAI,CAAC7H,IAAI,KAAK,QAAQ,EAAE;MAC1B+tB,EAAE,CAACkB,KAAK,CAAC,CAAC;MACVlB,EAAE,CAACmB,OAAO,GAAG,YAAY;QACvBrB,QAAQ,CAACmB,MAAM,CAAC,CAAC;MACnB,CAAC;IACH;IAEA,IAAInnB,IAAI,CAAC7H,IAAI,KAAK,gBAAgB,EAAE;MAClC6B,OAAO,CAACU,GAAG,CAAC,2BAA2B,CAAC;MAExC4sB,kBAAkB,CAAC,CAAC;IACtB;IAEA,IAAItnB,IAAI,CAAC7H,IAAI,KAAK,OAAO,EAAE;MACzB6B,OAAO,CAACgB,KAAK,CAAC,eAAe,GAAGgF,IAAI,CAAChF,KAAK,CAACusB,OAAO,GAAG,IAAI,GAAGvnB,IAAI,CAAChF,KAAK,CAACwsB,KAAK,CAAC;MAE7EF,kBAAkB,CAAC,CAAC;MAEpB,IAAIG,OAAO,GAAGC,kBAAkB,CAAC1nB,IAAI,CAAC;MACtCyY,QAAQ,CAACI,IAAI,CAACC,WAAW,CAAC2O,OAAO,CAAC;IACpC;EACF,CAAC;AACH;AAEA,SAASH,kBAAkBA,CAAA,EAAG;EAC5B,IAAIG,OAAO,GAAGhP,QAAQ,CAACC,cAAc,CAACmM,UAAU,CAAC;EACjD,IAAI4C,OAAO,EAAE;IACXA,OAAO,CAACE,MAAM,CAAC,CAAC;EAClB;AACF;AAEA,SAASD,kBAAkBA,CAAC1nB,IAAI,EAAE;EAChC,IAAIynB,OAAO,GAAGhP,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;EAC3C8O,OAAO,CAAC7O,EAAE,GAAGiM,UAAU;;EAEvB;EACA,IAAI0C,OAAO,GAAG9O,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;EAC3C,IAAIiP,UAAU,GAAGnP,QAAQ,CAACE,aAAa,CAAC,KAAK,CAAC;EAC9C4O,OAAO,CAACM,SAAS,GAAG7nB,IAAI,CAAChF,KAAK,CAACusB,OAAO;EACtCK,UAAU,CAACC,SAAS,GAAG7nB,IAAI,CAAChF,KAAK,CAACwsB,KAAK;EAEvCC,OAAO,CAAC1O,SAAS,GACf,wNAAwN,GACtN,mFAAmF,GACnF,yEAAyE,GACzE,qEAAqE,GAAGwO,OAAO,CAACxO,SAAS,GAAG,QAAQ,GACpG,OAAO,GAAG6O,UAAU,CAAC7O,SAAS,GAAG,QAAQ,GAC3C,QACD;EAED,OAAO0O,OAAO;AAEhB;AAEA,SAASK,UAAUA,CAAC9C,MAAM,EAAEpM,EAAE,EAAE;EAC9B,IAAImP,OAAO,GAAG/C,MAAM,CAAC+C,OAAO;EAC5B,IAAI,CAACA,OAAO,EAAE;IACZ,OAAO,EAAE;EACX;EAEA,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,CAAC,EAAEC,CAAC,EAAEC,GAAG;EAEb,KAAKF,CAAC,IAAIF,OAAO,EAAE;IACjB,KAAKG,CAAC,IAAIH,OAAO,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACvBE,GAAG,GAAGJ,OAAO,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,CAAC,CAAC;MACtB,IAAIC,GAAG,KAAKvP,EAAE,IAAK7wB,KAAK,CAACC,OAAO,CAACmgC,GAAG,CAAC,IAAIA,GAAG,CAACA,GAAG,CAAClgC,MAAM,GAAG,CAAC,CAAC,KAAK2wB,EAAG,EAAE;QACpEoP,OAAO,CAAC1+B,IAAI,CAAC2+B,CAAC,CAAC;MACjB;IACF;EACF;EAEA,IAAIjD,MAAM,CAACY,MAAM,EAAE;IACjBoC,OAAO,GAAGA,OAAO,CAACrtB,MAAM,CAACmtB,UAAU,CAAC9C,MAAM,CAACY,MAAM,EAAEhN,EAAE,CAAC,CAAC;EACzD;EAEA,OAAOoP,OAAO;AAChB;AAEA,SAAShB,QAAQA,CAAChC,MAAM,EAAEuB,KAAK,EAAE;EAC/B,IAAIwB,OAAO,GAAG/C,MAAM,CAAC+C,OAAO;EAC5B,IAAI,CAACA,OAAO,EAAE;IACZ;EACF;EAEA,IAAIA,OAAO,CAACxB,KAAK,CAAC3N,EAAE,CAAC,IAAI,CAACoM,MAAM,CAACY,MAAM,EAAE;IACvC,IAAIJ,EAAE,GAAG,IAAI4C,QAAQ,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE7B,KAAK,CAACM,SAAS,CAACC,EAAE,CAAC;IACzEP,KAAK,CAACC,KAAK,GAAG,CAACuB,OAAO,CAACxB,KAAK,CAAC3N,EAAE,CAAC;IAChCmP,OAAO,CAACxB,KAAK,CAAC3N,EAAE,CAAC,GAAG,CAAC4M,EAAE,EAAEe,KAAK,CAAC8B,IAAI,CAAC;EACtC,CAAC,MAAM,IAAIrD,MAAM,CAACY,MAAM,EAAE;IACxBoB,QAAQ,CAAChC,MAAM,CAACY,MAAM,EAAEW,KAAK,CAAC;EAChC;AACF;AAEA,SAASG,cAAcA,CAAC1B,MAAM,EAAEpM,EAAE,EAAE;EAClC,IAAImP,OAAO,GAAG/C,MAAM,CAAC+C,OAAO;EAC5B,IAAI,CAACA,OAAO,EAAE;IACZ;EACF;EAEA,IAAI,CAACA,OAAO,CAACnP,EAAE,CAAC,IAAIoM,MAAM,CAACY,MAAM,EAAE;IACjC,OAAOc,cAAc,CAAC1B,MAAM,CAACY,MAAM,EAAEhN,EAAE,CAAC;EAC1C;EAEA,IAAI8M,aAAa,CAAC9M,EAAE,CAAC,EAAE;IACrB;EACF;EACA8M,aAAa,CAAC9M,EAAE,CAAC,GAAG,IAAI;EAExB,IAAI0P,MAAM,GAAGtD,MAAM,CAACuD,KAAK,CAAC3P,EAAE,CAAC;EAE7B+M,cAAc,CAACr8B,IAAI,CAAC,CAAC07B,MAAM,EAAEpM,EAAE,CAAC,CAAC;EAEjC,IAAI0P,MAAM,IAAIA,MAAM,CAACnD,GAAG,IAAImD,MAAM,CAACnD,GAAG,CAACE,gBAAgB,CAACp9B,MAAM,EAAE;IAC9D,OAAO,IAAI;EACb;EAEA,OAAO6/B,UAAU,CAACnB,MAAM,CAACC,aAAa,EAAEhO,EAAE,CAAC,CAAC7a,IAAI,CAAC,UAAU6a,EAAE,EAAE;IAC7D,OAAO8N,cAAc,CAACC,MAAM,CAACC,aAAa,EAAEhO,EAAE,CAAC;EACjD,CAAC,CAAC;AACJ;AAEA,SAASsO,YAAYA,CAAClC,MAAM,EAAEpM,EAAE,EAAE;EAChC,IAAI0P,MAAM,GAAGtD,MAAM,CAACuD,KAAK,CAAC3P,EAAE,CAAC;EAC7BoM,MAAM,CAACI,OAAO,GAAG,CAAC,CAAC;EACnB,IAAIkD,MAAM,EAAE;IACVA,MAAM,CAACnD,GAAG,CAACnlB,IAAI,GAAGglB,MAAM,CAACI,OAAO;EAClC;EAEA,IAAIkD,MAAM,IAAIA,MAAM,CAACnD,GAAG,IAAImD,MAAM,CAACnD,GAAG,CAACG,iBAAiB,CAACr9B,MAAM,EAAE;IAC/DqgC,MAAM,CAACnD,GAAG,CAACG,iBAAiB,CAAC57B,OAAO,CAAC,UAAU8+B,EAAE,EAAE;MACjDA,EAAE,CAACxD,MAAM,CAACI,OAAO,CAAC;IACpB,CAAC,CAAC;EACJ;EAEA,OAAOJ,MAAM,CAACuD,KAAK,CAAC3P,EAAE,CAAC;EACvBoM,MAAM,CAACpM,EAAE,CAAC;EAEV0P,MAAM,GAAGtD,MAAM,CAACuD,KAAK,CAAC3P,EAAE,CAAC;EACzB,IAAI0P,MAAM,IAAIA,MAAM,CAACnD,GAAG,IAAImD,MAAM,CAACnD,GAAG,CAACE,gBAAgB,CAACp9B,MAAM,EAAE;IAC9DqgC,MAAM,CAACnD,GAAG,CAACE,gBAAgB,CAAC37B,OAAO,CAAC,UAAU8+B,EAAE,EAAE;MAChDA,EAAE,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI;EACb;AACF","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n//note to self: most functions that create a new gamestate (reducer actions) will require:\n\n// 1) the function itself\n// 2) adding to the action enum.\n// 3) adding to the reducer switch statement\n// 4) adding to the render function.\n// 5) possibly adding to the phase transition handler.\n\n//#region enums\nconst ENEMY_ABILITIES = Object.freeze({\n  INK_DRINK: \"inkDrink\",\n  INCREASE_HEALTH: \"increaseHealth\",\n  HAND_SIZE_REDUCTION: \"handSizeReduction\",\n  ADD_PEBBLES: \"addOnePebble\",\n  ADD_MERCURY: \"addTwoMercury\",\n  ADD_CLUTTER: \"addThreeClutter\",\n  DOWNGRADE_CARDS: \"downgradeCards\",\n});\nconst DAMAGE_TYPES = Object.freeze({\n  BUNNY: \"Bunny\",\n  FIRE: \"Fire\",\n  LIGHTNING: \"Lightning\",\n  POISON: \"Poison\",\n});\nconst SPECIAL_CARD_SUBTYPES = Object.freeze({\n  CURSE: \"curse\",\n  UNIQUE: \"unique\",\n  STATUS: \"status\",\n});\nconst DIFFICULTIES = Object.freeze({\n  EASY: \"easy\",\n  MEDIUM: \"medium\",\n  HARD: \"hard\",\n});\nconst TRIGGER_EVENTS = Object.freeze({\n  CARD_PICKUP: \"CARD_PICKUP\",\n  RELIC_PICKUP: \"RELIC_PICKUP\",\n  POTION_PICKUP: \"POTION_PICKUP\",\n  DRINK_POTION: \"DRINK_POTION\",\n  ASSIGN_SHOP_PRICES: \"ASSIGN_SHOP_PRICES\",\n  REST: \"REST\",\n  COMBAT_START: \"COMBAT_START\",\n  POPULATE_PATHS: \"POPULATE_PATHS\",\n  SHUFFLE_GRAVEYARD_INTO_DECK: \"SHUFFLE_GRAVEYARD_INTO_DECK\",\n  PLAY_CARD: \"PLAY_CARD\",\n  CAST_SPELLBOOK: \"CAST_SPELLBOOK\",\n  COMBAT_END: \"COMBAT_END\",\n  DEAL_DAMAGE: \"DEAL_DAMAGE\",\n});\nconst PATHS = Object.freeze({\n  EASY_FIGHT: \"Easy Fight\",\n  MEDIUM_FIGHT: \"Medium Fight\",\n  HARD_FIGHT: \"Hard Fight\",\n  BOSS_FIGHT: \"Boss Fight\",\n  REST: \"Rest\",\n  SHOP: \"Shop\",\n  RELIC_OFFERING: \"Relic Offering\",\n  GEM_OFFERING: \"Gem Offering\",\n  CARD_OFFERING: \"Card Offering\",\n  ENCHANT: \"Enchant\",\n  POTION_OFFERING: \"Potion Offering\",\n  HOARD: \"Hoard\",\n  PURGE: \"Purge\",\n  TRANSMUTE: \"Transmute\",\n});\nconst SCREENS = Object.freeze({\n  MAIN: \"main view\",\n  DECK: \"inspect deck\",\n  SETTINGS: \"settings\",\n  MOD: \"modscreen\",\n  COMBAT_DECK: \"combat deck\",\n  GRAVEYARD: \"graveyard\",\n  EXILE: \"exile\",\n});\nconst RARITIES = Object.freeze({\n  BASIC_POLY: \"basic-poly\", // basic poly cards, several of which go in the starter deck.\n  BASIC_MONO: \"basic-mono\", // basic mono cards, only one goes in the starter deck.\n  COMMON: \"common\",\n  UNCOMMON: \"uncommon\",\n  RARE: \"rare\",\n  MYTHIC: \"mythic\",\n  LEGENDARY: \"legendary\",\n});\nconst PHASES = Object.freeze({\n  MAIN_MENU: \"main menu\",\n  DIFFICULTY_SELECTION: \"difficulty selection\",\n  MYTHIC_RELIC_OFFERING: \"mythic relic offering\",\n  RELIC_OFFERING: \"relic offering\",\n  CARD_OFFERING: \"card offering\",\n  GEM_OFFERING: \"gem offering\",\n  POTION_OFFERING: \"potion offering\",\n  COMBAT_END: \"combat end\",\n  SOCKET_GEM: \"socket gem\",\n  SHOP: \"shop\",\n  PATH_SELECTION: \"path selection\",\n  REST: \"rest\",\n  ENCHANT: \"ENCHANT\",\n  TRANSMUTE: \"transmute\",\n  COMBAT: \"combat\",\n  GAME_OVER: \"game over\",\n  PURGE: \"purge\",\n  HOARD: \"hoard\",\n});\nconst ACTIONS = Object.freeze({\n  NEW_GAME: \"NEW_GAME\",\n  SET_DIFFICULTY: \"SET_DIFFICULTY\",\n  GENERATE_STARTER_DECK: \"GENERATE_STARTER_DECK\",\n  APPLY_DIFFICULTY_MODIFIERS: \"APPLY_DIFFICULTY_MODIFIERS\",\n  ADVANCE_PHASE: \"ADVANCE_PHASE\",\n  LOG_MESSAGE: \"LOG_MESSAGE\",\n  CREATE_CARD_INSTANCE: \"CREATE_CARD_INSTANCE\",\n  POPULATE_RELIC_OFFERINGS: \"POPULATE_RELIC_OFFERINGS\",\n  PICK_RELIC: \"PICK_RELIC\",\n  POPULATE_PATH_OFFERINGS: \"POPULATE_PATH_OFFERINGS\",\n  PICK_PATH: \"PICK_PATH\",\n  POPULATE_CARD_OFFERINGS: \"POPULATE_CARD_OFFERINGS\",\n  PICK_CARD: \"PICK_CARD\",\n  POPULATE_POTION_OFFERINGS: \"POPULATE_POTION_OFFERINGS\",\n  PICK_POTION: \"PICK_POTION\",\n  DRINK_POTION: \"DRINK_POTION\",\n  POPULATE_GEM_OFFERINGS: \"POPULATE_GEM_OFFERINGS\",\n  OPEN_MOD_SCREEN: \"OPEN_MOD_SCREEN\",\n  APPLY_CARD_MOD: \"APPLY_CARD_MOD\",\n  SCREEN_CHANGE: \"SCREEN_CHANGE\",\n  POPULATE_SHOPFRONT: \"POPULATE_SHOPFRONT\",\n  INCREASE_BASE_BUNNIES: \"INCREASE_BASE_BUNNIES\",\n  GAIN_GOLD: \"GAIN_GOLD\",\n  PRACTICE_WANDWORK: \"PRACTICE_WANDWORK\",\n  LOOT_HOARD: \"LOOT_HOARD\",\n  REST: \"REST\",\n  START_TURN: \"START_TURN\",\n  DRAW_CARD: \"DRAW_CARD\", // triggered when a card is drawn\n  PICK_CARD: \"PICK_CARD\", // triggered when a card is added to your deck\n  CLOSE_COMBAT_REWARDS: \"CLOSE_COMBAT_REWARDS\",\n  CLAIM_GOLD_REWARD: \"CLAIM_GOLD_REWARD\",\n  PLAY_CARD: \"PLAY_CARD\", // triggered when a card is played\n  CAST_SPELLBOOK: \"CAST_SPELLBOOK\", // triggered when the spellbook is cast\n  EXIT_SHOP: \"EXIT_SHOP\",\n});\nconst CARD_TYPES = Object.freeze({\n  INSTANT: \"instant\", // resolves immediately when played, does not go to the spellbook.\n  SPELL: \"spell\", // goes to the spellbook when played, resolves when the spellbook is cast.\n  CURSE: \"curse\", // negative card that can be removed or purged.\n  STATUS: \"status\", // temporary effect card, like a buff or debuff.\n});\nconst REST_OPTIONS = Object.freeze({\n  HEAL: \"heal\",\n  PRACTICE: \"practice\",\n  ENCHANT: \"enchant\",\n});\n//#endregion enums\n//#region data maps\nconst difficultyModifiersMap = Object.freeze({\n  [DIFFICULTIES.EASY]: {\n    maxHealthModifier: 100,\n    goldModifier: 20,\n    basicCardCountModifier: 5,\n    luckModifier: 2,\n    shopPriceMultiplierModifier: -0.2, // 20% cheaper shop prices\n    restHealthRestoreModifier: 30, // heal 30 health when resting\n    enemyHealthMultiplierModifier: -0.2, // 20% less health for enemies\n  },\n  [DIFFICULTIES.MEDIUM]: {\n    maxHealthModifier: 75,\n    goldModifier: 10,\n    basicCardCountModifier: 8,\n    luckModifier: 1,\n    shopPriceMultiplierModifier: 0, // normal shop prices\n    restHealthRestoreModifier: 25, // heal 20 health when resting\n    enemyHealthMultiplierModifier: 0,\n  },\n  [DIFFICULTIES.HARD]: {\n    maxHealthModifier: 50,\n    goldModifier: 0,\n    basicCardCountModifier: 11,\n    luckModifier: 0,\n    shopPriceMultiplierModifier: 0.2, // 20% more expensive shop prices\n    restHealthRestoreModifier: 20, // heal 20 health when resting\n    enemyHealthMultiplierModifier: 0.2, // 20% more health for enemies\n  },\n});\nconst pathMap = Object.freeze({\n  [PATHS.EASY_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.EASY,\n  },\n  [PATHS.MEDIUM_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.MEDIUM,\n  },\n  [PATHS.HARD_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.HARD,\n  },\n  [PATHS.BOSS_FIGHT]: {\n    rarity: RARITIES.SPECIAL,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: \"boss\",\n  },\n  [PATHS.REST]: { rarity: RARITIES.RARE, leadsTo: PHASES.REST },\n  [PATHS.SHOP]: { rarity: RARITIES.RARE, leadsTo: PHASES.SHOP },\n  [PATHS.RELIC_OFFERING]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.RELIC_OFFERING,\n  },\n  [PATHS.GEM_OFFERING]: { rarity: RARITIES.RARE, leadsTo: PHASES.GEM_OFFERING },\n  [PATHS.CARD_OFFERING]: {\n    rarity: RARITIES.UNCOMMON,\n    leadsTo: PHASES.CARD_OFFERING,\n  },\n  [PATHS.ENCHANT]: { rarity: RARITIES.RARE, leadsTo: PHASES.ENCHANT },\n  [PATHS.POTION_OFFERING]: {\n    rarity: RARITIES.RARE,\n    leadsTo: PHASES.POTION_OFFERING,\n  },\n  [PATHS.HOARD]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.HOARD,\n  },\n  [PATHS.PURGE]: { rarity: RARITIES.UNCOMMON, leadsTo: PHASES.PURGE },\n  [PATHS.TRANSMUTE]: { rarity: RARITIES.RARE, leadsTo: PHASES.TRANSMUTE },\n});\nconst enemyAbilityDataMap = {\n  [ENEMY_ABILITIES.INK_DRINK]: {\n    baseValue: 1,\n    description: \"Reduces player's ink at combat start\",\n    prefix: \"Inkdrinking\",\n  },\n  [ENEMY_ABILITIES.INCREASE_HEALTH]: {\n    baseValue: 1.5,\n    description: \"Increases enemy HP\",\n    prefix: \"Tanky\",\n  },\n  [ENEMY_ABILITIES.HAND_SIZE_REDUCTION]: {\n    baseValue: 2,\n    description: \"Reduces player's hand size at combat start\",\n    prefix: \"Maddening\",\n  },\n  [ENEMY_ABILITIES.ADD_PEBBLES]: {\n    baseValue: 1,\n    description: \"Adds Sisyphus' Pebble to your deck at combat start\",\n    prefix: \"Sisyphean\",\n  },\n  [ENEMY_ABILITIES.ADD_MERCURY]: {\n    baseValue: 2,\n    description: \"Adds Mercury Droplets to your deck at combat start\",\n    prefix: \"Mercurial\",\n  },\n  [ENEMY_ABILITIES.ADD_CLUTTER]: {\n    baseValue: 3,\n    description: \"Adds Clutter cards to your deck at combat start\",\n    prefix: \"Messy\",\n  },\n  [ENEMY_ABILITIES.DOWNGRADE_CARDS]: {\n    baseValue: 3,\n    description: \"Downgrades random cards in your combat deck at combat start\",\n    prefix: \"Withering\",\n  },\n};\n\n//#endregion data maps\n//#region data arrays of game objects\nconst cardList = [\n  {\n    name: \"Bunnymancy\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    inkCost: 1,\n    bunnyAdd: 6,\n  },\n  {\n    name: \"Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    inkCost: 1,\n    bunnyMult: 2,\n  },\n  {\n    name: \"Fairy Gold\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    inkCost: 1,\n    goldAdd: 5,\n  },\n  {\n    name: \"Enchant Bookshelf\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    inkCost: 1,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ponder\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    cardDraw: 3,\n    exileOnCast: true,\n  },\n  {\n    name: \"Inkswell\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 1,\n    inkAdd: 2,\n    exileOnCast: true,\n  },\n  {\n    name: \"Cloudfluff Conjuration\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 0,\n    bunnyAdd: 6,\n  },\n  {\n    name: \"Cloudfluff Boon\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    inkCost: 0,\n    bunnyAdd: 3,\n  },\n  {\n    name: \"Midas Touch\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    inkCost: 2,\n    goldAdd: 15,\n  },\n  {\n    name: \"Enchant Library\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    inkCost: 2,\n    permanentlyUpgradeRandomCardsInDeck: 3,\n  },\n  {\n    name: \"Dusk Lotus\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    inkCost: 0,\n    inkAdd: 3,\n    exileOnCast: true,\n  },\n  {\n    name: \"Weasel's Bargain\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 0,\n    goldAdd: 4,\n  },\n  {\n    name: \"Carrot Festival\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    bunnyAdd: 12,\n  },\n  {\n    name: \"Mega Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 2,\n    bunnyMult: 4,\n  },\n  {\n    name: \"Enchant Fingertips\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 1,\n    permanentlyUpgradeRandomCardsInHand: 1,\n  },\n  {\n    name: \"Enchant Hands\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    inkCost: 2,\n    permanentlyUpgradeRandomCardsInHand: 7,\n  },\n  {\n    name: \"Wisdom of the Warrens\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    inkCost: 0,\n    cardDraw: 1,\n    exileOnCast: true,\n  },\n  {\n    name: \"Magic Missile\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 0,\n    damage: 5,\n    inkCostIncreasePerLevel: 1,\n    damageMultiplierPerLevel: 2,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n  },\n  {\n    name: \"Fireball\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 3,\n    damage: 25,\n    inkCostIncreasePerLevel: 1,\n    damageMultiplierPerLevel: 2,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n  },\n  {\n    name: \"Lightning Bolt 1d4\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    upgradesOnCast: 1,\n    damageTypes: [DAMAGE_TYPES.LIGHTNING],\n    damageRoll: {\n      dice: 1,\n      sides: 4,\n      flatBonus: 0,\n    },\n  },\n  {\n    name: \"Thunderstrike 2d2\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 2,\n    upgradesOnCast: 2,\n    damageTypes: [DAMAGE_TYPES.LIGHTNING],\n    damageRoll: {\n      dice: 2,\n      sides: 2,\n      flatBonus: 0,\n    },\n  },\n  // === Curses ===\n  {\n    name: \"Sisyphus' Pebble\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    uncastable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    // No effect; added to deck via events, not in loot pool\n  },\n  {\n    name: \"Clutter\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    uncastable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    // Added to combat deck by enemies; no effect\n  },\n  {\n    name: \"Mirage\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    uncastable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    triggers: {\n      onDraw: {\n        exile: true, // Exile when drawn\n      },\n    },\n  },\n  {\n    name: \"Mercury Droplet\",\n    cardType: CARD_TYPES.INSTANT,\n    inkCost: 1,\n    unupgradable: true,\n    unsocketable: true,\n    exileOnCast: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n  },\n];\nconst gemList = [\n  {\n    name: \"Amethyst\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 2,\n  },\n  {\n    name: \"Lapis Lazuli\",\n    rarity: RARITIES.COMMON,\n    bunnyMult: 1.5,\n  },\n  // {\n  //   name: \"Sapphire\",\n  //   rarity: RARITIES.UNCOMMON,\n  //   cardDraw: 1,\n  // },\n  {\n    name: \"Topaz\",\n    rarity: RARITIES.RARE,\n    goldAdd: 5,\n  },\n  {\n    name: \"Jet\",\n    rarity: RARITIES.MYTHIC,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ruby\",\n    rarity: RARITIES.RARE,\n    damage: 5,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n    inkCostIncreasePerLevel: 1,\n    damageMultiplierPerLevel: 2,\n  },\n  {\n    name: \"Amber\",\n    rarity: RARITIES.RARE,\n    damageRoll: {\n      dice: 1,\n      sides: 4,\n      flatBonus: 0,\n    },\n    upgradesOnCast: 1,\n    damageTypes: [DAMAGE_TYPES.LIGHTNING],\n  },\n];\nconst relicList = [\n  {\n    name: \"Magic Scroll\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusPages: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Wand\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBaseBunnies: 3,\n      },\n    },\n  },\n  {\n    name: \"Fabergé Egg\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusGold: 100,\n      },\n    },\n  },\n  {\n    name: \"Heartstone\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHealth: 25,\n      },\n    },\n  },\n  // {\n  //   // fix to reduce damage taken on combat loss.\n  //   name: \"Protective Amulet\",\n  //   rarity: RARITIES.UNCOMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       bonusHealth: 10,\n  //     },\n  //   },\n  // },\n  {\n    name: \"Magic Encyclopedia\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Inkpot\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 2,\n      },\n    },\n  },\n  {\n    name: \"Enchanted Cardsleeves\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        permanentlyUpgradeRandomCardsInDeck: 5,\n      },\n    },\n  },\n  {\n    name: \"Magic Quill\",\n    rarity: RARITIES.LEGENDARY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 3,\n      },\n    },\n  },\n  {\n    name: \"Gold Bag\",\n    rarity: RARITIES.BASIC_POLY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusGold: 25,\n      },\n    },\n  },\n  {\n    name: \"Whetstone\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        upgradeCard: true,\n      },\n    },\n  },\n  {\n    name: \"Witch's Cauldron\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.POTION_PICKUP]: {\n        upgradePotion: true,\n      },\n    },\n  },\n  {\n    name: \"Crystal Vial\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.DRINK_POTION]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Discount Voucher\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.ASSIGN_SHOP_PRICES]: {\n        shopPriceMultiplier: 0.8, // 20% cheaper shop prices\n      },\n    },\n  },\n  {\n    name: \"Sleeping Bag\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        healPlayer: 50,\n      },\n    },\n  },\n  {\n    name: \"Toothfairy's Charm\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        goldAdd: 50,\n      },\n    },\n  },\n  {\n    name: \"Planetarium Mobile\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        permanentlyUpgradeRandomCardsInDeck: 2, // upgrade random cards in the deck when resting\n      },\n    },\n  },\n  {\n    name: \"Dousing Rod\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.POPULATE_PATHS]: {\n        revealAnonymousPaths: true,\n      },\n    },\n  },\n  {\n    //fix the names of this\n    name: \"Gem of Weakness\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.COMBAT_START]: {\n        weakenEnemyHpPercent: 0.1, // 10% reduction\n      },\n    },\n  },\n  {\n    name: \"Phylactery\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.SHUFFLE_GRAVEYARD_INTO_DECK]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Crystal Ball\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.DRAW_CARD]: {\n        bunnyAdd: 1,\n      },\n    },\n  },\n  {\n    name: \"Arcane Brush\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.PLAY_CARD]: {\n        bunnyAdd: 2,\n      },\n    },\n  },\n  {\n    name: \"Golden Carrot\",\n    rarity: RARITIES.LEGENDARY,\n    bossOnly: true,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n        bonusPages: 1,\n        bonusInk: 1,\n      },\n    },\n  },\n  {\n    name: \"Voynich Manuscript\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.CAST_SPELLBOOK]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Corsair's Coin\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.COMBAT_END]: {\n        goldAdd: 25,\n      },\n    },\n  },\n  {\n    name: \"Carrot Staff\",\n    rarity: RARITIES.MYTHIC,\n    description: \"Doubles all Bunny damage you deal.\",\n    triggers: {\n      [TRIGGER_EVENTS.DEAL_DAMAGE]: {\n        damageTypeTrigger: DAMAGE_TYPES.BUNNY,\n        multiplyDamage: 1.5,\n      },\n    },\n  },\n  {\n    name: \"Lightning Rod\",\n    rarity: RARITIES.MYTHIC,\n    description: \"Whenever you cast a Lightning spell, draw 2 cards.\",\n    triggers: {\n      [TRIGGER_EVENTS.PLAY_CARD]: {\n        ifLightningDrawCards: 2,\n      },\n    },\n  },\n  {\n    name: \"Firemage's Hat\",\n    rarity: RARITIES.MYTHIC,\n    description: \"All Fire cards cost 1 less ink.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        reduceInkCostOfFireCardsInDeck: 1,\n      },\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        reduceInkCostIfFire: 1,\n      },\n    },\n  },\n  {\n    name: \"Thinking Cap\",\n    rarity: RARITIES.MYTHIC,\n    description: \"Your hand size is permanently increased by 3.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHandSize: 3,\n      },\n    },\n  },\n];\nconst potionList = [\n  {\n    name: \"Lesser Healing Potion\",\n    rarity: RARITIES.COMMON,\n    healthRestore: 10,\n  },\n  {\n    name: \"Healing Potion\",\n    rarity: RARITIES.UNCOMMON,\n    healthRestore: 15,\n  },\n  {\n    name: \"Greater Healing Potion\",\n    rarity: RARITIES.RARE,\n    healthRestore: 20,\n  },\n  {\n    name: \"Elixir of Life\",\n    rarity: RARITIES.MYTHIC,\n    healthRestore: 50,\n  },\n  {\n    name: \"Squid Brew\",\n    rarity: RARITIES.UNCOMMON,\n    bonusInk: 1,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Hearty Soup\",\n    rarity: RARITIES.RARE,\n    increaseMaxHp: 5,\n  },\n  {\n    name: \"Liquid Enchantment\",\n    rarity: RARITIES.COMMON,\n    upgradeCardsInHand: 1,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Ponderous Potion\",\n    rarity: RARITIES.UNCOMMON,\n    cardDraw: 2,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Bunny Brew\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 5,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Warren Elixir\",\n    rarity: RARITIES.RARE,\n    bunnyMult: 2,\n    drinkableOutOfCombat: false,\n  },\n];\n//#endregion\n//#region utility functions\nfunction capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\nfunction shuffleArray(originalArray) {\n  const array = [...originalArray]; // copy to avoid mutation\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction weightedRandomChoice(weightedMap) {\n  const entries = Object.entries(weightedMap);\n  const totalWeight = entries.reduce((sum, [_, weight]) => sum + weight, 0);\n  const r = Math.random() * totalWeight;\n  let cumulative = 0;\n\n  for (const [key, weight] of entries) {\n    cumulative += weight;\n    if (r <= cumulative) return key;\n  }\n}\nfunction changeScreen(dispatch, screen) {\n  dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: screen });\n}\nfunction inspectDeck(dispatch) {\n  changeScreen(dispatch, SCREENS.DECK);\n}\nfunction inspectCombatDeck(dispatch) {\n  changeScreen(dispatch, SCREENS.COMBAT_DECK);\n}\nfunction inspectGraveyard(dispatch) {\n  changeScreen(dispatch, SCREENS.GRAVEYARD);\n}\nfunction inspectExile(dispatch) {\n  changeScreen(dispatch, SCREENS.EXILE);\n}\nfunction returnToMain(dispatch) {\n  changeScreen(dispatch, SCREENS.MAIN);\n}\n\nfunction assignShopPrices(state) {\n  const globalMultiplier = state.shopPriceMultiplier || 1;\n\n  const basePrices = {\n    card: 10,\n    potion: 20,\n    gem: 30,\n    relic: 100,\n  };\n\n  const rarityMultipliers = {\n    common: 1,\n    uncommon: 1.2,\n    rare: 1.4,\n    mythic: 1.6,\n    legendary: 2,\n  };\n\n  const updatedShopfront = state.offerings.shopfront.map((entry) => {\n    const { type, item } = entry;\n\n    if (!item || !item.name) {\n      console.warn(\"Invalid shop item during price assignment:\", entry);\n      return entry;\n    }\n\n    const basePrice = basePrices[type] || 0;\n    const upgrades = item.upgrades || 0;\n    const upgradeCost = [\"card\", \"potion\"].includes(type) ? upgrades * 5 : 0;\n\n    const rarity = item.rarity?.toLowerCase?.() || \"common\";\n    const rarityMultiplier = rarityMultipliers[rarity] || 1;\n\n    const price = Math.round(\n      (basePrice + upgradeCost) * rarityMultiplier * globalMultiplier\n    );\n\n    return {\n      ...entry,\n      item: {\n        ...item,\n        price,\n      },\n    };\n  });\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: updatedShopfront,\n    },\n    log: [`Assigned prices to shop items.`, ...state.log],\n  };\n}\nfunction anonymizeObject(obj) {\n  return {\n    ...obj,\n    anonymousNameDisplay: true,\n  };\n}\n\n//#endregion\n//#region reducer-action handlers\nfunction generateStarterDeck(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\n      \"Cannot generate starter deck: invalid difficulty:\",\n      difficulty\n    );\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n  const deck = [];\n\n  // 1. Add one of each basic mono card\n  const basicMonoCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_MONO\n  );\n  for (const card of basicMonoCards) {\n    deck.push(createCardInstance(card.name));\n  }\n\n  // 2. Add 3 of each basic poly card\n  const basicPolyCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_POLY\n  );\n  for (const card of basicPolyCards) {\n    for (let i = 0; i < 3; i++) {\n      deck.push(createCardInstance(card.name));\n    }\n  }\n\n  // 3. Add additional random basic poly cards based on difficulty\n  for (let i = 0; i < modifiers.basicCardCountModifier; i++) {\n    const card = generateRandomCard(state, { rarity: RARITIES.BASIC_POLY });\n    if (card) deck.push(card);\n  }\n\n  // 4. Shuffle the deck (pure)\n  const shuffledDeck = shuffleArray(deck);\n\n  // 5. Return new state with updated campaign.deck\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: shuffledDeck,\n    },\n    log: [...state.log],\n  };\n}\n\nfunction applyDifficultyModifiers(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\"Invalid or missing difficulty:\", difficulty);\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n\n  return {\n    ...state,\n    gold: state.gold + modifiers.goldModifier,\n    basicCardCount: state.basicCardCount + modifiers.basicCardCountModifier,\n    luck: (state.luck || 0) + (modifiers.luckModifier || 0),\n    shopPriceMultiplier:\n      (state.shopPriceMultiplier || 1) +\n      (modifiers.shopPriceMultiplierModifier || 0),\n    restHealthRestore:\n      (state.restHealthRestore || 0) +\n      (modifiers.restHealthRestoreModifier || 0),\n    maxHealth: state.maxHealth + modifiers.maxHealthModifier,\n    health: state.health + modifiers.maxHealthModifier,\n    enemyHealthMultiplier:\n      (state.enemyHealthMultiplier || 1) +\n      (modifiers.enemyHealthMultiplierModifier || 0),\n  };\n}\n\nfunction advancePhaseTo(state, phaseAdvancedTo) {\n  console.log(\">>> Advancing to phase:\", phaseAdvancedTo);\n\n  if (!Object.values(PHASES).includes(phaseAdvancedTo)) {\n    console.error(\"Invalid phase passed to advancePhaseTo:\", phaseAdvancedTo);\n    return state;\n  }\n\n  return {\n    ...state,\n    currentPhase: phaseAdvancedTo,\n  };\n}\nfunction handlePhaseTransitions(state) {\n  const phase = state.currentPhase;\n\n  switch (phase) {\n    case PHASES.DIFFICULTY_SELECTION:\n      return {\n        ...state,\n        log: [\"Choose your difficulty.\", ...state.log],\n      };\n\n    case PHASES.PATH_SELECTION:\n      console.log(\">> Entering PHASES.PATH_SELECTION\");\n      return populatePathOfferings(state);\n\n    case PHASES.CARD_OFFERING:\n      console.log(\">> Entering PHASES.CARD_OFFERING\");\n      return populateCardOfferings(state);\n\n    case PHASES.MYTHIC_RELIC_OFFERING:\n      console.log(\">> Entering PHASES.MYTHIC_RELIC_OFFERING .\");\n      return populateRelicOfferings(state, RARITIES.MYTHIC);\n\n    case PHASES.RELIC_OFFERING:\n      console.log(\">> Entering PHASES.RELIC_OFFERING.\");\n      return populateRelicOfferings(state);\n\n    case PHASES.POTION_OFFERING:\n      console.log(\">> Entering POTION_OFFERING phase.\");\n      return populatePotionOfferings(state);\n\n    case PHASES.GEM_OFFERING:\n      console.log(\">> Entering GEM_OFFERING phase.\");\n      return populateGemOfferings(state);\n\n    case PHASES.SHOP:\n      return populateShopfront(state);\n\n    case PHASES.COMBAT:\n      return initializeCombatPhase(state, state.currentPath);\n\n    default:\n      return state;\n  }\n}\nfunction pickPath(state, index) {\n  const paths = state.offerings.paths;\n\n  if (!paths || index < 0 || index >= paths.length) {\n    console.error(\"Invalid path index:\", index);\n    return state;\n  }\n\n  const chosenPath = paths[index];\n  const pathKey = chosenPath.path;\n  const pathData = pathMap[pathKey];\n\n  if (!pathData || !pathData.leadsTo) {\n    console.error(\"Path has no destination phase:\", pathKey);\n    return state;\n  }\n\n  return handlePhaseTransitions({\n    ...state,\n    level: (state.level ?? 0) + 1,\n    currentPath: chosenPath, // ✅ store the path here\n    currentPhase: pathData.leadsTo,\n    log: [`Chose path: ${pathKey}`, ...state.log],\n    offerings: {\n      ...state.offerings,\n      paths: [],\n    },\n  });\n}\nfunction populateCardOfferings(state) {\n  const newCards = [];\n\n  while (newCards.length < 3) {\n    const card = generateRandomCard(state);\n    if (!card) continue;\n    if (newCards.some((existing) => existing.name === card.name)) continue;\n    newCards.push(card);\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      cards: newCards,\n    },\n  };\n}\nfunction populatePotionOfferings(state) {\n  const selectedPotions = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedPotions.length < 3 && attempts < 50) {\n    attempts++;\n\n    const potion = generateRandomPotion(state);\n    if (!potion) continue;\n\n    if (usedNames.has(potion.name)) continue;\n\n    selectedPotions.push(potion);\n    usedNames.add(potion.name);\n  }\n\n  if (selectedPotions.length < 3) {\n    console.warn(\"Not enough unique potions to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      potions: selectedPotions,\n    },\n  };\n}\nfunction populateRelicOfferings(state, rarity = null) {\n  const selected = [];\n  const maxRelics = 3;\n\n  while (selected.length < maxRelics) {\n    const relic = generateRandomRelic(state, { rarity });\n\n    // Ensure uniqueness by name\n    if (selected.some((r) => r.name === relic.name)) continue;\n\n    selected.push(relic);\n  }\n\n  console.log(\"Selected relic offerings:\", selected);\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      relics: selected,\n    },\n  };\n}\nfunction populateGemOfferings(state) {\n  const selectedGems = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedGems.length < 3 && attempts < 50) {\n    attempts++;\n\n    const gem = generateRandomGem(state);\n    if (!gem) continue;\n\n    if (usedNames.has(gem.name)) continue;\n\n    selectedGems.push(gem);\n    usedNames.add(gem.name);\n  }\n\n  if (selectedGems.length < 3) {\n    console.warn(\"Not enough unique gems to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      gems: selectedGems,\n    },\n  };\n}\nfunction populatePathOfferings(state) {\n  const luck = state.luck || 0;\n  const misery = state.misery || 0;\n  const level = state.level || 0;\n\n  // === Step 0: Boss override ===\n  if ([15, 30, 45].includes(level)) {\n    const bossPath = {\n      path: PATHS.BOSS_FIGHT,\n      ...pathMap[PATHS.BOSS_FIGHT],\n    };\n    return {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        paths: [bossPath, bossPath, bossPath],\n      },\n      log: [`Boss floor! All paths lead to a boss fight.`, ...state.log],\n    };\n  }\n\n  // === Step 1: Always pick 1 fight path ===\n  const fightWeights = {\n    [PATHS.EASY_FIGHT]: 3,\n    [PATHS.MEDIUM_FIGHT]: 2,\n    [PATHS.HARD_FIGHT]: 1,\n  };\n  const fightPathKey = weightedRandomChoice(fightWeights);\n  const fightPath = {\n    path: fightPathKey,\n    ...pathMap[fightPathKey],\n  };\n\n  // === Step 2: Create a pool of all valid paths (excluding duplicate of picked fight) ===\n  const allPaths = Object.entries(pathMap)\n    .filter(([key]) => key !== fightPathKey)\n    .map(([path, data]) => ({ path, ...data }));\n\n  // 🧱 Sanity check: filter out boss paths unless on proper boss level\n  const bossLevels = [15, 30, 45];\n  const isBossLevel = bossLevels.includes(level);\n\n  // 🧱 Sanity check: filter out paths that don't match current difficulty and/or would bug the game with imppossible mods\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null || card.unsocketable);\n\n  const allCardsUnupgradable =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.unupgradable);\n\n  const filteredPaths = allPaths.filter((pathObj) => {\n    // Prevent rogue boss path unless it's a true boss level\n    if (pathObj.path === PATHS.BOSS_FIGHT && !isBossLevel) return false;\n\n    // Prevent GEM_OFFERING if all cards are socketed\n    if (pathObj.path === PATHS.GEM_OFFERING && allCardsSocketed) return false;\n\n    // Prevent ENCHANT_OFFERING if all cards are unupgradable\n    if (pathObj.path === PATHS.ENCHANT_OFFERING && allCardsUnupgradable)\n      return false;\n\n    return true;\n  });\n\n  // === Step 3: Pick first two paths using rarity weights ===\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const chosenRarities = [\n    weightedRandomChoice(rarityWeights),\n    weightedRandomChoice(rarityWeights),\n  ];\n\n  const chosenPaths = [];\n  const usedPaths = new Set([fightPathKey]);\n\n  for (const rarity of chosenRarities) {\n    const candidates = filteredPaths.filter(\n      (p) => p.rarity === rarity && !usedPaths.has(p.path)\n    );\n    if (candidates.length > 0) {\n      const pick = candidates[Math.floor(Math.random() * candidates.length)];\n      usedPaths.add(pick.path);\n      chosenPaths.push(pick);\n    }\n  }\n\n  // === Step 4: Fill in missing 2nd path if needed\n  const remainingPool = filteredPaths.filter((p) => !usedPaths.has(p.path));\n  while (chosenPaths.length < 2 && remainingPool.length > 0) {\n    const idx = Math.floor(Math.random() * remainingPool.length);\n    const pick = remainingPool.splice(idx, 1)[0];\n    usedPaths.add(pick.path);\n    chosenPaths.push(pick);\n  }\n\n  // === Step 5: Optional override for 3rd path using misery + luck if both are fights\n  const firstTwoAreFights = chosenPaths.every((p) => p.isFight);\n  let finalPaths = [fightPath, ...chosenPaths];\n  let newMisery = misery;\n\n  if (firstTwoAreFights && misery > 0 && remainingPool.length > 0) {\n    const thirdOptions = remainingPool.filter((p) => !usedPaths.has(p.path));\n    if (thirdOptions.length > 0) {\n      const nonFights = thirdOptions.filter((p) => !p.isFight);\n      const fights = thirdOptions.filter((p) => p.isFight);\n\n      const weightedPool = [];\n      nonFights.forEach((p) => {\n        for (let i = 0; i < misery + luck; i++) weightedPool.push(p);\n      });\n      fights.forEach((p) => {\n        weightedPool.push(p); // 1 weight each\n      });\n\n      if (weightedPool.length > 0) {\n        const pick =\n          weightedPool[Math.floor(Math.random() * weightedPool.length)];\n        usedPaths.add(pick.path);\n        finalPaths[2] = pick;\n        if (!pick.isFight) newMisery = misery - 1;\n      }\n    }\n  }\n\n  // === Step 6: Check again if all 3 are fights and increment misery\n  const allFights = finalPaths.every((p) => p.isFight);\n  if (allFights) newMisery++;\n\n  console.log(\"Populated path options:\", finalPaths);\n\n  // === Step 6.5: Randomly anonymize one path based on (50% - luck) chance\n  const anonChance = Math.max(0, 0.5 - (state.luck || 0) * 0.01); // luck is per % point\n  const anonIndex = Math.floor(Math.random() * finalPaths.length);\n\n  if (Math.random() < anonChance) {\n    finalPaths[anonIndex] = anonymizeObject(finalPaths[anonIndex]);\n  }\n\n  // === Step 7: Apply relic triggers for POPULATE_PATH\n  const triggerResult = checkRelicTriggers(\n    state,\n    TRIGGER_EVENTS.POPULATE_PATH,\n    {\n      payload: finalPaths,\n    }\n  );\n  const updatedPaths = triggerResult.result || finalPaths;\n  const updatedState = { ...triggerResult };\n  console.log(\"📍 Populating path offerings with:\", finalPaths);\n  return {\n    ...updatedState,\n    misery: newMisery,\n    offerings: {\n      ...updatedState.offerings,\n      paths: updatedPaths,\n    },\n  };\n}\n\nfunction pickCard(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  let sourceArrayName = null;\n\n  if (offerings.cards && index < offerings.cards.length) {\n    sourceArrayName = \"cards\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid card index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap\n  const pickedCard =\n    sourceArrayName === \"shopfront\"\n      ? entry.item\n      : sourceArrayName === \"combatRewards\"\n      ? entry.value\n      : entry;\n\n  if (!pickedCard || !pickedCard.name) {\n    console.warn(\"⚠️ Picked card is invalid:\", pickedCard);\n  }\n\n  if (!pickedCard) {\n    console.error(\"No card found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const price = entry.item?.price !== undefined ? entry.item.price : 20;\n    console.log(\n      `Trying to purchase card: ${pickedCard.name}, price: ${price}, current gold: ${state.gold}`\n    );\n    const charged = chargeGoldPrice(state, price, \"card\");\n    if (charged === state) {\n      console.warn(\"Purchase failed: not enough gold\");\n      return state;\n    }\n    updatedState = charged;\n  }\n\n  // === 3. Add to campaign deck ===\n  const updatedCampaign = {\n    ...updatedState.campaign,\n    deck: [...updatedState.campaign.deck, pickedCard],\n  };\n\n  // === 4. Remove from offerings ===\n  const updatedOfferings = {\n    ...updatedState.offerings,\n    [sourceArrayName]: sourceArray.filter((_, i) => i !== index),\n  };\n\n  // === 5. Apply triggers ===\n  let newState = {\n    ...updatedState,\n    campaign: updatedCampaign,\n    offerings: updatedOfferings,\n    log: [`Picked card: ${pickedCard.name}`, ...updatedState.log],\n  };\n\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.CARD_PICKUP, {\n    payload: pickedCard,\n  });\n\n  // === 6. Trash unchosen cards if from offering ===\n  if (phase === PHASES.CARD_OFFERING) {\n    const trashed = sourceArray.filter((_, i) => i !== index);\n\n    newState = {\n      ...newState,\n      trashPile: [...(newState.trashPile || []), ...trashed],\n      offerings: {\n        ...newState.offerings,\n        [sourceArrayName]: [],\n      },\n    };\n\n    //log the selected card:\n    console.log(`📜 Picked card: ${pickedCard.name} (from ${sourceArrayName})`);\n\n    newState = handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\nfunction pickRelic(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  if (offerings.relics && index < offerings.relics.length) {\n    sourceArrayName = \"relics\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid relic index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap relic from shopfront if needed\n  const pickedRelic =\n    sourceArrayName === \"shopfront\"\n      ? entry.item\n      : sourceArrayName === \"combatRewards\"\n      ? entry.value\n      : entry;\n  if (!pickedRelic) {\n    console.error(\"No relic found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const relicPrice = entry.price || 50;\n    const chargedState = chargeGoldPrice(state, relicPrice, \"relic\");\n    if (chargedState === state) return state; // not enough gold\n    updatedState = chargedState;\n  }\n\n  // === 3. Add relic to belt ===\n  updatedState = {\n    ...updatedState,\n    relicBelt: [...updatedState.relicBelt, pickedRelic],\n  };\n\n  // === 4. Remove the picked relic from offerings ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 5. Trash unchosen relics if from offering phase ===\n  const isOfferingPhase = [\n    PHASES.MYTHIC_RELIC_OFFERING,\n    PHASES.RELIC_OFFERING,\n  ].includes(phase);\n\n  let updatedTrashPile = updatedState.trashPile;\n  if (isOfferingPhase) {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.relics.filter((_, i) => i !== index),\n    ];\n    offerings.relics = [];\n  }\n\n  // === 6. Build the new state ===\n  const newState = {\n    ...updatedState,\n    trashPile: updatedTrashPile, // ✅ Root-level trash pile\n    offerings,\n    log: [`Picked relic: ${pickedRelic.name}`, ...updatedState.log],\n  };\n\n  // === 7. Trigger relic effects\n  const triggeredState = checkRelicTriggers(\n    newState,\n    TRIGGER_EVENTS.RELIC_PICKUP,\n    { relic: pickedRelic }\n  );\n\n  // === 8. Advance phase if in offering\n  if (isOfferingPhase) {\n    return handlePhaseTransitions(\n      advancePhaseTo(triggeredState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return triggeredState;\n}\n\nfunction pickPotion(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  let sourceArray = null;\n\n  if (offerings.potions && index < offerings.potions.length) {\n    sourceArrayName = \"potions\";\n    sourceArray = offerings.potions;\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n    sourceArray = offerings.shopfront;\n  } else if (\n    phase === PHASES.COMBAT_END &&\n    offerings.combatRewards &&\n    offerings.combatRewards[index]?.type === \"potion\"\n  ) {\n    sourceArrayName = \"combatRewards\";\n    sourceArray = offerings.combatRewards;\n  } else {\n    console.error(\"Invalid potion index:\", index);\n    return state;\n  }\n\n  const entry = sourceArray[index];\n\n  // === 2. Unwrap the potion if needed ===\n  let pickedPotion;\n  if (sourceArrayName === \"shopfront\") {\n    pickedPotion = entry.item;\n  } else if (sourceArrayName === \"combatRewards\") {\n    pickedPotion = entry.value;\n  } else {\n    pickedPotion = entry;\n  }\n\n  if (!pickedPotion) {\n    console.error(\"No potion found at index:\", index);\n    return state;\n  }\n\n  // === 3. Charge cost if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const price = entry.item?.price ?? 30;\n    const charged = chargeGoldPrice(state, price, \"potion\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  // === 4. Apply pickup relic triggers (may upgrade the potion) ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.POTION_PICKUP,\n    { payload: pickedPotion }\n  );\n  const triggeredPotion = triggerResult.result;\n  updatedState = { ...triggerResult }; // includes possible log/relic changes\n\n  // === 5. Add to potion belt ===\n  const updatedPotionBelt = [...updatedState.potionBelt, triggeredPotion];\n\n  // === 6. Remove picked potion from source\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 7. Trash unchosen potions if from potion offering\n  let updatedTrashPile = updatedState.trashPile;\n  if (phase === PHASES.POTION_OFFERING && sourceArrayName === \"potions\") {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.potions.filter((_, i) => i !== index),\n    ];\n    offerings.potions = [];\n  }\n\n  // === 8. Build new state\n  const newState = {\n    ...updatedState,\n    potionBelt: updatedPotionBelt,\n    trashPile: updatedTrashPile,\n    offerings,\n    log: [`Picked potion: ${pickedPotion.name}`, ...updatedState.log],\n  };\n\n  // === 9. Advance phase if from potion offering\n  if (phase === PHASES.POTION_OFFERING) {\n    return handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\n\nfunction drinkPotion(state, potion) {\n  if (!potion) {\n    console.error(\"No potion passed to drinkPotion\");\n    return state;\n  }\n\n  console.log(\"🧪 Drinking potion:\", potion);\n\n  let updatedState = { ...state };\n\n  // === 1. Apply effects ===\n  if (potion.healthRestore) {\n    updatedState = heal(updatedState, potion.healthRestore);\n  }\n\n  if (potion.bonusInk && state.currentPhase === PHASES.COMBAT) {\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        ink: updatedState.combat.ink + potion.bonusInk,\n        maxInk: updatedState.combat.maxInk + potion.bonusInk,\n      },\n      log: [\n        `Gained ${potion.bonusInk} bonus ink from ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  if (potion.increaseMaxHp) {\n    const amount = potion.increaseMaxHp;\n    updatedState = {\n      ...updatedState,\n      maxHealth: updatedState.maxHealth + amount,\n      health: updatedState.health + amount,\n      log: [\n        `Max and current HP increased by ${amount} from ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  if (\n    potion.upgradeCardsInHand &&\n    state.currentPhase === PHASES.COMBAT &&\n    updatedState.combat.hand\n  ) {\n    const hand = [...updatedState.combat.hand];\n    const upgradable = hand.filter(\n      (card) => !card.unupgradable && typeof card.upgrades === \"number\"\n    );\n    const numToUpgrade = Math.min(potion.upgradeCardsInHand, upgradable.length);\n\n    // Shuffle and pick upgradable cards\n    const shuffled = [...upgradable].sort(() => Math.random() - 0.5);\n    const toUpgrade = shuffled.slice(0, numToUpgrade);\n\n    const newHand = hand.map((card) => {\n      if (toUpgrade.includes(card)) {\n        return { ...card, upgrades: card.upgrades + 1 };\n      }\n      return card;\n    });\n\n    if (potion.cardDraw) {\n      for (let i = 0; i < potion.cardDraw; i++) {\n        updatedState = drawCard(updatedState);\n      }\n    }\n\n    if (potion.bunnyAdd) {\n      updatedState = addBunnies(updatedState, potion.bunnyAdd);\n    }\n\n    if (potion.bunnyMult) {\n      updatedState = multiplyBunnies(updatedState, potion.bunnyMult);\n    }\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        hand: newHand,\n      },\n      log: [\n        `Upgraded ${toUpgrade.length} card(s) in hand with ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  // === 2. Remove potion from belt and add to trash ===\n  const belt = updatedState.potionBelt || [];\n  const index = belt.findIndex((p) => p.name === potion.name);\n  const newPotionBelt =\n    index >= 0 ? [...belt.slice(0, index), ...belt.slice(index + 1)] : belt;\n  const newTrash = [...updatedState.trashPile, potion];\n\n  updatedState = {\n    ...updatedState,\n    potionBelt: newPotionBelt,\n    trashPile: newTrash,\n  };\n\n  // === 3. Trigger relic effects\n  const triggered = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.DRINK_POTION,\n    { potion }\n  );\n\n  return {\n    ...triggered,\n    log: triggered.log || updatedState.log,\n  };\n}\n\nfunction openModScreen(state, mod, originPhase = null) {\n  const validKeys = [\"upgrade\", \"gem\", \"purge\", \"transmute\"];\n  const keys = Object.keys(mod || {});\n  if (keys.length !== 1 || !validKeys.includes(keys[0])) {\n    console.error(\"Invalid mod passed to openModScreen:\", mod);\n    return state;\n  }\n\n  // === GEM LOGIC: Discard unchosen gems only if from gem offering ===\n  if (mod.gem && (state.offerings.gems?.length || 0) > 0) {\n    const chosenGemName = mod.gem.name;\n\n    const discardedGems = state.offerings.gems.filter(\n      (g) => g.name !== chosenGemName\n    );\n\n    state = {\n      ...state,\n      campaign: {\n        ...state.campaign,\n        trashPile: [...state.trashPile, ...discardedGems],\n      },\n      offerings: {\n        ...state.offerings,\n        gems: [], // clear offering gems\n      },\n      log: [`Discarded ${discardedGems.length} unchosen gem(s).`, ...state.log],\n    };\n  }\n\n  // === If the chosen gem came from combat rewards, remove it ===\n  if (\n    mod.gem &&\n    state.currentPhase === PHASES.COMBAT_END &&\n    Array.isArray(state.offerings.combatRewards)\n  ) {\n    const updatedRewards = state.offerings.combatRewards.filter(\n      (reward) => reward.type !== \"gem\" || reward.value.name !== mod.gem.name\n    );\n\n    state = {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        combatRewards: updatedRewards,\n      },\n      log: [`Picked gem: ${mod.gem.name}`, ...state.log],\n    };\n  }\n\n  // === Charge gold if in shop ===\n  if (state.currentPhase === PHASES.SHOP) {\n    const price = mod?.gem?.price ?? 50;\n\n    const charged = chargeGoldPrice(state, price, \"card modification\");\n    if (charged === state) return state; // insufficient gold\n    state = charged;\n  }\n\n  return {\n    ...state,\n    currentScreen: SCREENS.MOD,\n    modData: {\n      mod,\n      origin: originPhase || state.currentPhase,\n    },\n    log: [`Opened mod screen (${keys[0]}).`, ...state.log],\n  };\n}\n\nfunction increaseBaseBunnies(state, amount) {\n  const newAmount = Math.max(0, (state.baseBunnies || 0) + amount);\n\n  return {\n    ...state,\n    baseBunnies: newAmount,\n    log: [`Base bunnies increased by ${amount}.`, ...state.log],\n  };\n}\nfunction applyModToCard(state, card) {\n  const mod = state.modData?.mod;\n  const origin = state.modData?.origin;\n\n  if (!mod || !card) {\n    console.warn(\"applyModToCard called without a valid mod or card.\");\n    return state;\n  }\n\n  let updatedDeck = [...state.campaign.deck];\n  const cardIndex = updatedDeck.findIndex((c) => c === card);\n\n  if (cardIndex === -1) {\n    console.warn(\"Card not found in campaign deck.\");\n    return state;\n  }\n\n  // Apply mod\n  let modifiedCard = { ...card };\n  if (mod.upgrade) {\n    modifiedCard = upgradeCard(modifiedCard, mod.upgrade);\n  } else if (mod.gem) {\n    modifiedCard = socketCardWithGem(modifiedCard, mod.gem);\n  } else if (mod.purge) {\n    updatedDeck.splice(cardIndex, 1); // Remove the card\n  } else if (mod.transmute) {\n    modifiedCard = transmuteCard(modifiedCard);\n  }\n\n  // Replace modified card if not purged\n  if (!mod.purge) {\n    updatedDeck[cardIndex] = modifiedCard;\n  }\n\n  // Determine next phase\n  const nextPhase =\n    origin === PHASES.SHOP || origin === PHASES.COMBAT_END\n      ? origin\n      : PHASES.PATH_SELECTION;\n\n  const updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n    },\n    modData: null,\n    currentScreen: SCREENS.MAIN,\n    currentPhase: nextPhase,\n    log: [`Applied mod to ${card.name}.`, ...state.log],\n  };\n\n  // If transitioning to path selection, trigger path population\n  return nextPhase === PHASES.PATH_SELECTION\n    ? handlePhaseTransitions(updatedState)\n    : updatedState;\n}\nfunction populateShopfront(state) {\n  const shopfrontTypes = [];\n  // === Clear existing shop items into trash ===\n  const previousItems = state.offerings.shopfront || [];\n  const discardedItems = previousItems.map((entry) => entry.item);\n  const updatedTrash = [...(state.trashPile || []), ...discardedItems];\n  // === Step 1: Populate exactly 3 of each item type ===\n  const typeCounts = {\n    card: 3,\n    potion: 3,\n    gem: 3,\n    relic: 3,\n  };\n\n  for (const [type, count] of Object.entries(typeCounts)) {\n    for (let i = 0; i < count; i++) {\n      shopfrontTypes.push(type);\n    }\n  }\n  // // === Step 1: Ensure 1 of each type ===\n  // const guaranteedTypes = [\"relic\", \"potion\", \"card\", \"gem\"];\n  // guaranteedTypes.forEach((type) => shopfrontTypes.push(type));\n\n  // // === Step 2: Fill remaining 8 items using weighted choice ===\n  // const weights = {\n  //   card: 12,\n  //   potion: 3,\n  //   gem: 1,\n  //   relic: 1,\n  // };\n\n  // const weightedPool = Object.entries(weights).flatMap(([type, weight]) =>\n  //   Array(weight).fill(type)\n  // );\n\n  // let safetyCounter = 0;\n  // while (shopfrontTypes.length < 12 && safetyCounter < 100) {\n  //   safetyCounter++;\n  //   const chosen =\n  //     weightedPool[Math.floor(Math.random() * weightedPool.length)];\n  //   shopfrontTypes.push(chosen);\n  // }\n\n  // === Step 3: Generate actual items, avoiding duplicates ===\n  const generatedItems = [];\n  const usedKeys = new Set();\n\n  for (let type of shopfrontTypes) {\n    let item = null;\n    let attempt = 0;\n\n    while (attempt < 20) {\n      attempt++;\n      try {\n        switch (type) {\n          case \"card\":\n            item = generateRandomCard(state);\n            break;\n          case \"potion\":\n            item = generateRandomPotion(state);\n            break;\n          case \"gem\":\n            item = generateRandomGem(state);\n            break;\n          case \"relic\":\n            item = generateRandomRelic(state);\n            break;\n          default:\n            item = null;\n        }\n\n        if (!item) continue;\n\n        const key = `${type}-${item.name}`;\n        if (usedKeys.has(key)) continue;\n\n        usedKeys.add(key);\n        generatedItems.push({ type, item });\n        break; // done\n      } catch (e) {\n        console.warn(\"Shop item generation failed:\", type, e);\n      }\n    }\n  }\n\n  // === Step 4: Insert shopfront and assign prices ===\n  let updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      trashPile: updatedTrash,\n    },\n    offerings: {\n      ...state.offerings,\n      shopfront: generatedItems,\n    },\n  };\n\n  updatedState = assignShopPrices(updatedState);\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.ASSIGN_SHOP_PRICES\n  );\n\n  return {\n    ...updatedState,\n    log: [...updatedState.log],\n  };\n}\nfunction gainGold(state, amount) {\n  const newGold = (state.gold || 0) + amount;\n\n  return {\n    ...state,\n    gold: newGold,\n    log: [`Gained ${amount} gold.`, ...state.log],\n  };\n}\nfunction practiceWandwork(state) {\n  // Step 1: Increase base bunnies by 1\n  let newState = increaseBaseBunnies(state, 1);\n\n  // Step 2: Advance to path selection\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  // Step 3: Handle the transition (populate offerings)\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\nfunction lootHoard(state) {\n  const baseGold = 10;\n  const levelBonus = state.level || 0;\n  const enemiesDefeated = state.defeatedEnemies?.length || 0;\n  const luck = state.luck || 0;\n\n  const enemyBonus = enemiesDefeated * 5;\n  const luckBonus = luck * 2;\n\n  const totalGold = baseGold + levelBonus + enemyBonus + luckBonus;\n\n  // Step 1: Gain gold\n  let newState = gainGold(state, totalGold);\n\n  // Step 2: Track hoards looted\n  const hoardsLooted = (newState.hoardsLooted || 0) + 1;\n  newState = {\n    ...newState,\n    hoardsLooted,\n    log: [`Looted a hoard! (${totalGold}g)`, ...newState.log],\n  };\n\n  // Step 3: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction rest(state) {\n  const amountToHeal = state.restHealthRestore || 0;\n  const currentHealth = state.health || 0;\n\n  // Step 1: Heal the player\n  let newState = heal(state, amountToHeal);\n  const healedAmount = newState.health - currentHealth;\n\n  // Step 2: Check relic triggers for REST\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.REST);\n\n  // Step 3: Add one summary log line\n  newState = {\n    ...newState,\n    log: [\n      `Rested at the fire and recovered ${healedAmount} HP.`,\n      ...newState.log.filter((msg) => !msg.startsWith(\"Healed\")),\n    ],\n  };\n\n  // Step 4: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  //Step 5: Populate offerings for the new phase\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction toggleDeckInspect(state, dispatch) {\n  const isInspectingDeck = state.currentScreen === SCREENS.DECK;\n  const returnTo = state.previousScreen || SCREENS.MAIN;\n\n  dispatch({\n    type: ACTIONS.SCREEN_CHANGE,\n    payload: isInspectingDeck ? returnTo : SCREENS.DECK,\n  });\n}\n\n//#endregion\n//#region state setup and game initialization\nfunction createInitialState() {\n  return {\n    log: [],\n    currentScreen: SCREENS.MAIN,\n    previousScreen: null,\n    currentPhase: PHASES.MAIN_MENU,\n    currentPath: null,\n\n    basicCardCount: 5,\n    restHealthRestore: 10,\n    shopPriceMultiplier: 1,\n    enemyHealthMultiplier: 1,\n    difficulty: null,\n\n    maxHealth: 0,\n    health: 0,\n    baseBunnies: 0,\n\n    gold: 100,\n\n    luck: 0,\n    level: 0,\n    misery: 0,\n\n    hoardsLooted: 0,\n    defeatedEnemies: [],\n    trashPile: [],\n\n    relicBelt: [],\n    potionBelt: [],\n\n    campaign: {\n      deck: [],\n      ink: 4,\n      books: 1,\n      pages: 4,\n      handSize: 6,\n    },\n    combat: {\n      deck: [],\n      hand: [],\n      graveyard: [],\n      exile: [],\n      spellbook: [],\n\n      combatEnded: null,\n\n      baseBunnies: 0,\n      ink: 0,\n      maxInk: 0,\n      books: 0,\n      maxBooks: 0,\n      pages: 0,\n      bunnies: 0,\n      maxPages: 0,\n      handSize: 0,\n\n      enemy: null,\n    },\n    offerings: {\n      difficulties: [],\n      shopfront: [],\n      cards: [],\n      potions: [],\n      gems: [],\n      relics: [],\n      paths: [],\n      combatRewards: [],\n      restOptions: [],\n    },\n  };\n}\nfunction selectDifficultyAndBeginGame(dispatch, difficulty) {\n  dispatch({ type: ACTIONS.SET_DIFFICULTY, payload: difficulty });\n  dispatch({ type: ACTIONS.GENERATE_STARTER_DECK });\n  dispatch({ type: ACTIONS.APPLY_DIFFICULTY_MODIFIERS });\n  dispatch({\n    type: ACTIONS.ADVANCE_PHASE,\n    payload: PHASES.MYTHIC_RELIC_OFFERING,\n  });\n}\nfunction createGameApp(initialState, reducer, renderFn) {\n  let state = initialState;\n  function dispatch(action) {\n    state = reducer(state, action);\n    renderFn(state, dispatch); // pass dispatch so buttons etc. can use it\n  }\n  // Start the game\n  dispatch({ type: ACTIONS.NEW_GAME });\n  return { dispatch };\n}\n\n//#endregion\n//#region game mechanics\nfunction createCardInstance(\n  cardName = null,\n  rarity = null,\n  upgrades = 0,\n  gem = null\n) {\n  let card;\n  if (rarity) {\n    console.log(\"🔍 createCardInstance got rarity:\", rarity);\n  }\n  if (cardName) {\n    const found = cardList.find((c) => c.name === cardName);\n    if (!found) {\n      console.error(`Card not found: ${cardName}`);\n      return null;\n    }\n    card = { ...found };\n  } else if (rarity) {\n    const candidates = cardList.filter(\n      (c) =>\n        c.rarity === rarity &&\n        ![\"curse\", \"unique\", \"status\"].includes(c.specialSubtype)\n    );\n    if (candidates.length === 0) {\n      console.error(`No cards found with rarity: ${rarity}`);\n      return null;\n    }\n    card = { ...candidates[Math.floor(Math.random() * candidates.length)] };\n  } else {\n    console.error(\"createCardInstance requires either a cardName or a rarity.\");\n    return null;\n  }\n\n  // Apply upgrades if needed\n  if (upgrades > 0) {\n    card = upgradeCard(card, upgrades); // this should set .upgrades itself\n  }\n\n  // Apply gem if needed\n  if (gem) {\n    card = socketCardWithGem(card, gem);\n  }\n\n  return card;\n}\n\nfunction createRelicInstance(relicName) {\n  const found = relicList.find((r) => r.name === relicName);\n  if (!found) {\n    console.error(`Relic not found: ${relicName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction createPotionInstance(potionName, upgrades = 0) {\n  const found = potionList.find((p) => p.name === potionName);\n  if (!found) {\n    console.error(`Potion not found: ${potionName}`);\n    return null;\n  }\n\n  let potion = { ...found };\n\n  if (upgrades > 0) {\n    potion = upgradePotion(potion, upgrades);\n  }\n\n  return potion;\n}\nfunction createGemInstance(gemName) {\n  const found = gemList.find((g) => g.name === gemName);\n  if (!found) {\n    console.error(`Gem not found: ${gemName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction getRandomBossRelic() {\n  const bossRelics = relicList.filter((r) => r.bossOnly);\n  if (bossRelics.length === 0) return null;\n  const chosen = bossRelics[Math.floor(Math.random() * bossRelics.length)];\n  return { ...chosen };\n}\n\nfunction generateRandomRelic(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const ownedRelics = new Set([\n    ...state.relicBelt.map((r) => r.name),\n    ...state.trashPile.map((r) => r.name),\n  ]);\n\n  const GOLD_BAG = \"Gold Bag\";\n\n  // Exclude Gold Bag and duplicate high-rarity relics\n  let candidates = relicList.filter((r) => {\n    if (r.name === GOLD_BAG) return false;\n    if (r.bossOnly) return false; // ← new line to exclude boss-only relics from general pool\n    if (\n      (r.rarity === RARITIES.MYTHIC || r.rarity === RARITIES.LEGENDARY) &&\n      ownedRelics.has(r.name)\n    ) {\n      return false;\n    }\n    return true;\n  });\n\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  const filtered = candidates.filter((r) => r.rarity === rarity);\n  if (filtered.length === 0) {\n    console.warn(`No relics found for rarity: ${rarity}`);\n    return createRelicInstance(GOLD_BAG);\n  }\n\n  const chosen = filtered[Math.floor(Math.random() * filtered.length)];\n  return { ...chosen };\n}\nfunction generateRandomCard(\n  state,\n  { rarity = null, upgrades = undefined, gem = null } = {}\n) {\n  const luck = state.luck || 0;\n\n  const finalRarity =\n    rarity || weightedRandomChoice(getLuckAdjustedRarityWeights(luck));\n\n  const level = state.level ?? 0;\n  const totalFortune = (luck ?? 0) + level;\n\n  const upgradeWeights = {\n    0: Math.max(0, 60 - totalFortune),\n    1: 5 + totalFortune,\n    2: 3 + totalFortune,\n    3: 2 + totalFortune,\n    4: 0 + totalFortune,\n  };\n\n  const finalUpgrades =\n    upgrades !== undefined\n      ? upgrades\n      : Number(weightedRandomChoice(upgradeWeights));\n\n  const defeatedCount = state.defeatedEnemies?.length || 0;\n  const maxUpgrades = Math.min(4, Math.floor(defeatedCount / 3));\n  const cappedUpgrades = Math.min(finalUpgrades, maxUpgrades);\n\n  return createCardInstance(undefined, finalRarity, cappedUpgrades, gem);\n}\nfunction generateRandomPotion(state, { rarity = null, upgrades = null } = {}) {\n  const luck = state.luck || 0;\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n\n  const level = state.level ?? 0;\n  const totalFortune = (luck ?? 0) + level;\n\n  const upgradeWeights = {\n    0: Math.max(0, 70 - totalFortune),\n    1: 5 + totalFortune,\n    2: 3 + totalFortune,\n    3: 2 + totalFortune,\n    4: 0 + totalFortune,\n  };\n\n  // === Choose rarity if not provided ===\n  if (!rarity) {\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // === Fallback in case rarity yields no results ===\n  const candidates = potionList.filter((p) => p.rarity === rarity);\n  let basePotion;\n  if (candidates.length === 0) {\n    console.warn(\n      `No potions found for rarity: ${rarity}. Falling back to Lesser Healing Potion.`\n    );\n    basePotion = potionList.find((p) => p.name === \"Lesser Healing Potion\");\n    if (!basePotion) {\n      console.error(\n        \"Fallback potion 'Lesser Healing Potion' not found in potionList.\"\n      );\n      return null;\n    }\n    upgrades = 0; // ensure fallback is always unupgraded\n  } else {\n    basePotion = candidates[Math.floor(Math.random() * candidates.length)];\n\n    // === Choose upgrade level if not provided ===\n    if (upgrades === null) {\n      upgrades = Number(weightedRandomChoice(upgradeWeights));\n    }\n    upgrades = Math.min(upgrades, 4);\n  }\n\n  return createPotionInstance(basePotion.name, upgrades);\n}\nfunction generateRandomGem(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const fallbackGem = createGemInstance(\"Amethyst\");\n\n  // Choose rarity based on luck if not specified\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // Filter by rarity\n  const candidates = gemList.filter((gem) => gem.rarity === rarity);\n\n  if (candidates.length === 0) {\n    console.warn(\n      `No gems found for rarity: ${rarity}, returning fallback gem.`\n    );\n    return fallbackGem;\n  }\n\n  const chosenGem = candidates[Math.floor(Math.random() * candidates.length)];\n  return { ...chosenGem };\n}\nfunction upgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to upgradeCard:\", card);\n    return card;\n  }\n\n  if (card.unupgradable) {\n    console.warn(`Card ${card.name} is marked unupgradable.`);\n    return card;\n  }\n\n  const upgradedCard = { ...card };\n  let upgradable = false;\n\n  if (\"bunnyAdd\" in upgradedCard) {\n    upgradedCard.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedCard) {\n    upgradedCard.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"goldAdd\" in upgradedCard) {\n    upgradedCard.goldAdd += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInDeck += level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInHand\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInHand += level;\n    upgradable = true;\n  }\n\n  if (\"cardDraw\" in upgradedCard) {\n    upgradedCard.cardDraw += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"inkAdd\" in upgradedCard) {\n    upgradedCard.inkAdd += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"healthCost\" in upgradedCard) {\n    upgradedCard.healthCost -= 1 * level;\n    upgradable = true;\n  }\n\n  // === Upgrade damageRoll (any type) ===\n  if (upgradedCard.damageRoll) {\n    upgradedCard.damageRoll = {\n      ...upgradedCard.damageRoll,\n      dice: upgradedCard.damageRoll.dice + level,\n      sides: upgradedCard.damageRoll.sides + level,\n      flatBonus: upgradedCard.damageRoll.flatBonus + level,\n    };\n    upgradable = true;\n  }\n\n  // === Increase inkCost by per-level amount ===\n  if (\n    \"inkCostIncreasePerLevel\" in upgradedCard &&\n    typeof upgradedCard.inkCost === \"number\"\n  ) {\n    upgradedCard.inkCost += upgradedCard.inkCostIncreasePerLevel * level;\n    upgradable = true;\n  }\n\n  // === Multiply base damage by per-level multiplier ===\n  if (\n    \"damageMultiplierPerLevel\" in upgradedCard &&\n    typeof upgradedCard.damage === \"number\"\n  ) {\n    upgradedCard.damage *= Math.pow(\n      upgradedCard.damageMultiplierPerLevel,\n      level\n    );\n    upgradable = true;\n  }\n\n  // Add or increment the upgrade level\n  upgradedCard.upgrades = (upgradedCard.upgrades || 0) + level;\n\n  // === Smart renaming ===\n  const baseName = card.name\n    .replace(/\\s\\+\\d+$/, \"\") // remove trailing \"+3\"\n    .replace(/\\s\\d+d\\d+(\\s?\\+\\d+)?$/, \"\"); // remove \"3d6\" or \"3d6 +3\"\n\n  if (upgradedCard.damageRoll) {\n    const { dice = 1, sides, flatBonus = 0 } = upgradedCard.damageRoll;\n    upgradedCard.name = `${baseName} ${dice}d${sides}${\n      flatBonus > 0 ? `+${flatBonus}` : \"\"\n    }`;\n  } else {\n    upgradedCard.name = `${baseName} +${upgradedCard.upgrades}`;\n  }\n\n  return upgradedCard;\n}\n\nfunction downgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to downgradeCard:\", card);\n    return card;\n  }\n\n  if (card.undowngradable) {\n    console.warn(`Card ${card.name} is marked undowngradable.`);\n    return card;\n  }\n\n  const downgradedCard = { ...card };\n  const originalLevel = downgradedCard.upgrades || 0;\n  const newLevel = Math.max(originalLevel - level, -1);\n  const levelDiff = originalLevel - newLevel;\n\n  // Restore to base values if we hit -1, then halve them\n  const applyHalvedBase = () => {\n    if (\"bunnyAdd\" in card)\n      downgradedCard.bunnyAdd = Math.floor(card.bunnyAdd / 2);\n    if (\"bunnyMult\" in card)\n      downgradedCard.bunnyMult = Math.floor(card.bunnyMult / 2);\n    if (\"goldAdd\" in card)\n      downgradedCard.goldAdd = Math.floor(card.goldAdd / 2);\n    if (\"permanentlyUpgradeRandomCardsInDeck\" in card)\n      downgradedCard.permanentlyUpgradeRandomCardsInDeck = Math.floor(\n        card.permanentlyUpgradeRandomCardsInDeck / 2\n      );\n    if (\"permanentlyUpgradeRandomCardsInHand\" in card)\n      downgradedCard.permanentlyUpgradeRandomCardsInHand = Math.floor(\n        card.permanentlyUpgradeRandomCardsInHand / 2\n      );\n    if (\"cardDraw\" in card)\n      downgradedCard.cardDraw = Math.floor(card.cardDraw / 2);\n    if (\"inkAdd\" in card) downgradedCard.inkAdd = Math.floor(card.inkAdd / 2);\n    if (\"healthCost\" in card)\n      downgradedCard.healthCost = Math.floor(card.healthCost * 1.5); // assume base is higher when downgraded\n  };\n\n  if (newLevel === -1) {\n    applyHalvedBase();\n  } else {\n    // Reverse the upgrades\n    if (\"bunnyAdd\" in downgradedCard) downgradedCard.bunnyAdd -= 3 * levelDiff;\n\n    if (\"bunnyMult\" in downgradedCard)\n      downgradedCard.bunnyMult -= 0.5 * levelDiff;\n\n    if (\"goldAdd\" in downgradedCard) downgradedCard.goldAdd -= 2 * levelDiff;\n\n    if (\"permanentlyUpgradeRandomCardsInDeck\" in downgradedCard)\n      downgradedCard.permanentlyUpgradeRandomCardsInDeck -= 1 * levelDiff;\n\n    if (\"permanentlyUpgradeRandomCardsInHand\" in downgradedCard)\n      downgradedCard.permanentlyUpgradeRandomCardsInHand -= 1 * levelDiff;\n\n    if (\"cardDraw\" in downgradedCard) downgradedCard.cardDraw -= 1 * levelDiff;\n\n    if (\"inkAdd\" in downgradedCard) downgradedCard.inkAdd -= 1 * levelDiff;\n\n    if (\"healthCost\" in downgradedCard)\n      downgradedCard.healthCost += 1 * levelDiff;\n  }\n\n  // Cap upgrades at -1\n  downgradedCard.upgrades = newLevel;\n\n  // Rename\n  const baseName = card.name.replace(/\\s\\+?-?\\d+$/, \"\");\n  if (newLevel > 0) {\n    downgradedCard.name = `${baseName} +${newLevel}`;\n  } else if (newLevel === -1) {\n    downgradedCard.name = `${baseName} -1`;\n  } else {\n    downgradedCard.name = baseName;\n  }\n\n  return downgradedCard;\n}\n\nfunction upgradePotion(potion, level = 1) {\n  if (!potion || typeof potion !== \"object\") {\n    console.error(\"Invalid potion passed to upgradePotion:\", potion);\n    return potion;\n  }\n\n  // Clone the potion to avoid mutating the original\n  const upgradedPotion = { ...potion };\n\n  let upgradable = false;\n\n  // === Upgradeable Effects ===\n  if (\"healthRestore\" in upgradedPotion) {\n    upgradedPotion.healthRestore += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"bonusInk\" in upgradedPotion) {\n    upgradedPotion.bonusInk += level;\n    upgradable = true;\n  }\n\n  if (\"increaseMaxHp\" in upgradedPotion) {\n    upgradedPotion.increaseMaxHp += level * 2;\n    upgradable = true;\n  }\n\n  if (\"upgradeCardsInHand\" in upgradedPotion) {\n    upgradedPotion.upgradeCardsInHand += level;\n    upgradable = true;\n  }\n  if (\"cardDraw\" in upgradedPotion) {\n    upgradedPotion.cardDraw += level;\n    upgradable = true;\n  }\n\n  if (\"bunnyAdd\" in upgradedPotion) {\n    upgradedPotion.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedPotion) {\n    upgradedPotion.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Potion cannot be upgraded: ${potion.name}`);\n    return potion;\n  }\n\n  // === Track upgrade level ===\n  upgradedPotion.upgrades = (upgradedPotion.upgrades || 0) + level;\n\n  // === Update potion name to reflect upgrades ===\n  upgradedPotion.name =\n    potion.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedPotion.upgrades}`;\n\n  return upgradedPotion;\n}\n\nfunction socketCardWithGem(card, gem) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to socketCardWithGem:\", card);\n    return card;\n  }\n\n  if (card.unsocketable) {\n    console.warn(`Card ${card.name} is marked unsocketable.`);\n    return card;\n  }\n\n  if (!gem || typeof gem !== \"object\" || !gem.name) {\n    console.error(\"Invalid gem passed to socketCardWithGem:\", gem);\n    return card;\n  }\n\n  const socketedCard = { ...card };\n  const upgradeLevel = socketedCard.upgrades || 0;\n\n  const applyEffect = (key, baseAmount, perUpgrade) => {\n    socketedCard[key] =\n      (socketedCard[key] || 0) + baseAmount + perUpgrade * upgradeLevel;\n  };\n\n  // === Standard effects ===\n\n  if (\"bunnyAdd\" in gem) applyEffect(\"bunnyAdd\", gem.bunnyAdd, 3);\n  if (\"bunnyMult\" in gem) applyEffect(\"bunnyMult\", gem.bunnyMult, 0.5);\n  if (\"goldAdd\" in gem) applyEffect(\"goldAdd\", gem.goldAdd, 2);\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in gem)\n    applyEffect(\n      \"permanentlyUpgradeRandomCardsInDeck\",\n      gem.permanentlyUpgradeRandomCardsInDeck,\n      1\n    );\n  if (\"permanentlyUpgradeRandomCardsInHand\" in gem)\n    applyEffect(\n      \"permanentlyUpgradeRandomCardsInHand\",\n      gem.permanentlyUpgradeRandomCardsInHand,\n      1\n    );\n  if (\"damage\" in gem) applyEffect(\"damage\", gem.damage, 5);\n  if (\"damageType\" in gem) socketedCard.damageType = gem.damageType;\n  if (\"cardDraw\" in gem) applyEffect(\"cardDraw\", gem.cardDraw, 1);\n  if (\"inkAdd\" in gem) applyEffect(\"inkAdd\", gem.inkAdd, 1);\n  if (\"healthCost\" in gem) applyEffect(\"healthCost\", gem.healthCost, -1);\n\n  // === Add upgradesOnCast property ===\n  if (\"upgradesOnCast\" in gem) {\n    socketedCard.upgradesOnCast =\n      (socketedCard.upgradesOnCast || 0) + gem.upgradesOnCast;\n  }\n  // === Apply ink cost increase per level (fire effect)\n  if (\"inkCostIncreasePerLevel\" in gem) {\n    socketedCard.inkCostIncreasePerLevel = gem.inkCostIncreasePerLevel;\n    // Apply retroactive increase if inkCost exists\n    if (typeof socketedCard.inkCost === \"number\") {\n      socketedCard.inkCost += gem.inkCostIncreasePerLevel * upgradeLevel;\n    }\n  }\n\n  // === Apply damage multiplier per level (fire effect)\n  if (\"damageMultiplierPerLevel\" in gem) {\n    socketedCard.damageMultiplierPerLevel = gem.damageMultiplierPerLevel;\n    // Apply retroactive multiplier if damage exists\n    if (typeof socketedCard.damage === \"number\") {\n      socketedCard.damage *= Math.pow(\n        gem.damageMultiplierPerLevel,\n        upgradeLevel\n      );\n    }\n  }\n\n  // === Merge damageTypes (if gem has them) ===\n  if (Array.isArray(gem.damageTypes)) {\n    socketedCard.damageTypes = Array.isArray(socketedCard.damageTypes)\n      ? [...socketedCard.damageTypes]\n      : [];\n\n    for (const dmgType of gem.damageTypes) {\n      if (!socketedCard.damageTypes.includes(dmgType)) {\n        socketedCard.damageTypes.push(dmgType);\n      }\n    }\n  }\n\n  // === Add damageRoll support (e.g., Amber) ===\n\n  if (\"damageRoll\" in gem && typeof gem.damageRoll === \"object\") {\n    const gemRoll = gem.damageRoll;\n    const baseDice = gemRoll.dice || 0;\n    const baseSides = gemRoll.sides || 0;\n    const baseBonus = gemRoll.flatBonus || 0;\n\n    socketedCard.damageRoll = {\n      dice: (socketedCard.damageRoll?.dice || 0) + baseDice + upgradeLevel,\n      sides: (socketedCard.damageRoll?.sides || 0) + baseSides + upgradeLevel,\n      flatBonus:\n        (socketedCard.damageRoll?.flatBonus || 0) + baseBonus + upgradeLevel,\n    };\n  }\n\n  // === Attach gem and rename card ===\n\n  socketedCard.gem = gem;\n\n  // Build name suffix if there's a damageRoll\n  let nameSuffix = \"\";\n  if (\n    socketedCard.damageRoll &&\n    typeof socketedCard.damageRoll.dice === \"number\" &&\n    typeof socketedCard.damageRoll.sides === \"number\"\n  ) {\n    const { dice, sides, flatBonus } = socketedCard.damageRoll;\n    nameSuffix = ` ${dice}d${sides}${flatBonus ? `+${flatBonus}` : \"\"}`;\n  }\n\n  // Final name: GemName OriginalName + dice suffix if present\n  socketedCard.name = `${gem.name} ${card.name.replace(\n    /\\s\\d+d\\d+(\\+\\d+)?$/,\n    \"\"\n  )}${nameSuffix}`;\n\n  return socketedCard;\n}\n\nfunction getLuckAdjustedRarityWeights(luck = 0) {\n  return {\n    [RARITIES.COMMON]: Math.max(20, 60 - luck * 2),\n    [RARITIES.UNCOMMON]: Math.max(20, 40 - luck),\n    [RARITIES.RARE]: Math.min(20, 5 + luck),\n    [RARITIES.MYTHIC]: Math.min(10, 2 + Math.ceil(luck / 2)),\n    [RARITIES.LEGENDARY]: Math.min(5, 1 + Math.ceil(luck / 3)),\n  };\n}\nfunction chargeGoldPrice(state, price, context = \"purchase\") {\n  if (state.gold < price) {\n    console.warn(`Not enough gold for ${context}!`);\n    return state; // return unmodified state\n  }\n\n  return {\n    ...state,\n    gold: state.gold - price, // ✅ correct location\n    log: [`Spent ${price} gold on ${context}.`, ...state.log],\n  };\n}\nfunction checkRelicTriggers(\n  state,\n  triggerEvent,\n  context = { damageType: null }\n) {\n  let updatedState = { ...state };\n  let result = context.payload || null;\n\n  for (const relic of updatedState.relicBelt) {\n    const effect = relic.triggers?.[triggerEvent];\n    if (!effect) continue;\n\n    if (triggerEvent === TRIGGER_EVENTS.DRINK_POTION && context.potion) {\n      if (effect.healPlayer) {\n        updatedState = heal(updatedState, effect.healPlayer);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} healed you for ${effect.healPlayer} HP when you drank a potion.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    if (\n      triggerEvent === TRIGGER_EVENTS.DEAL_DAMAGE &&\n      typeof context.amount === \"number\" &&\n      typeof context.damageType === \"string\" &&\n      effect.multiplyDamage &&\n      effect.damageTypeTrigger === context.damageType\n    ) {\n      const bonusDamage = context.amount * (effect.multiplyDamage - 1);\n\n      updatedState = dealDamage(\n        updatedState,\n        bonusDamage,\n        [context.damageType],\n        {\n          isBonus: true,\n        }\n      );\n\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} increased your ${context.damageType} damage by +${bonusDamage}.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (\n      triggerEvent === TRIGGER_EVENTS.POTION_PICKUP &&\n      effect.upgradePotion &&\n      result\n    ) {\n      result = upgradePotion(result, 1);\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} upgraded a potion when you picked it up.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (\n      triggerEvent === TRIGGER_EVENTS.CARD_PICKUP &&\n      effect.upgradeCard &&\n      result\n    ) {\n      result = upgradeCard(result, 1);\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} upgraded a card when you picked it up.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (\n      triggerEvent === TRIGGER_EVENTS.CARD_PICKUP &&\n      effect.reduceInkCostIfFire &&\n      result &&\n      Array.isArray(result.damageTypes) &&\n      result.damageTypes.includes(DAMAGE_TYPES.FIRE)\n    ) {\n      result = {\n        ...result,\n        inkCost: Math.max(0, result.inkCost - effect.reduceInkCostIfFire),\n      };\n\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} reduced the ink cost of your new fire card.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (triggerEvent === TRIGGER_EVENTS.RELIC_PICKUP && context.relic) {\n      const campaign = { ...updatedState.campaign };\n      let newHealth = updatedState.health;\n      let newMaxHealth = updatedState.maxHealth;\n\n      if (effect.reduceInkCostOfFireCardsInDeck > 0) {\n        let modifiedCount = 0;\n\n        campaign.deck = campaign.deck.map((card) => {\n          if (\n            Array.isArray(card.damageTypes) &&\n            card.damageTypes.includes(DAMAGE_TYPES.FIRE) &&\n            typeof card.inkCost === \"number\"\n          ) {\n            modifiedCount++;\n            return {\n              ...card,\n              inkCost: Math.max(\n                0,\n                card.inkCost - effect.reduceInkCostOfFireCardsInDeck\n              ),\n            };\n          }\n          return card;\n        });\n\n        if (modifiedCount > 0) {\n          updatedState = {\n            ...updatedState,\n            log: [\n              `${relic.name} reduced the ink cost of ${modifiedCount} fire card(s) in your deck.`,\n              ...updatedState.log,\n            ],\n          };\n        }\n      }\n\n      if (effect.bonusPages) {\n        campaign.pages += effect.bonusPages;\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} gave you +${effect.bonusPages} max pages.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.bonusInk) {\n        campaign.ink += effect.bonusInk;\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} gave you +${effect.bonusInk} max ink.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.bonusBooks) {\n        campaign.books += effect.bonusBooks;\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} gave you +${effect.bonusBooks} max books.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.bonusHandSize) {\n        campaign.handSize += effect.bonusHandSize;\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} increased your hand size by ${effect.bonusHandSize}.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.bonusHealth) {\n        newHealth += effect.bonusHealth;\n        newMaxHealth += effect.bonusHealth;\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} increased your max health by ${effect.bonusHealth} HP.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.bonusGold) {\n        updatedState = gainGold(updatedState, effect.bonusGold);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} gave you ${effect.bonusGold} gold.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.bonusBaseBunnies) {\n        updatedState = increaseBaseBunnies(\n          updatedState,\n          effect.bonusBaseBunnies\n        );\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} added ${effect.bonusBaseBunnies} base bunnies.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.permanentlyUpgradeRandomCardsInDeck > 0) {\n        const { deck } = campaign;\n        const numToUpgrade = Math.min(\n          effect.permanentlyUpgradeRandomCardsInDeck,\n          deck.length\n        );\n\n        const upgradedDeck = permanentlyUpgradeRandomCardsInDeck(\n          deck,\n          numToUpgrade\n        );\n\n        campaign.deck = upgradedDeck;\n\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} permanently upgraded ${numToUpgrade} card(s) in your deck.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      updatedState = {\n        ...updatedState,\n        campaign,\n        health: newHealth,\n        maxHealth: newMaxHealth,\n      };\n    }\n\n    if (\n      triggerEvent === TRIGGER_EVENTS.ASSIGN_SHOP_PRICES &&\n      effect.shopPriceMultiplier\n    ) {\n      updatedState = {\n        ...updatedState,\n        offerings: {\n          ...updatedState.offerings,\n          shopfront: updatedState.offerings.shopfront.map((entry) => {\n            const adjustedPrice = Math.round(\n              entry.item.price * effect.shopPriceMultiplier\n            );\n            return {\n              ...entry,\n              item: {\n                ...entry.item,\n                price: adjustedPrice,\n              },\n            };\n          }),\n        },\n        log: [\n          `${relic.name} reduced shop prices by ${Math.round(\n            (1 - effect.shopPriceMultiplier) * 100\n          )}%.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (triggerEvent === TRIGGER_EVENTS.REST) {\n      if (effect.healPlayer) {\n        updatedState = heal(updatedState, effect.healPlayer);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} healed you for ${effect.healPlayer} HP while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.goldAdd) {\n        updatedState = gainGold(updatedState, effect.goldAdd);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} gave you ${effect.goldAdd} gold while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.permanentlyUpgradeRandomCardsInDeck > 0) {\n        const { deck } = updatedState.campaign;\n        const numToUpgrade = Math.min(\n          effect.permanentlyUpgradeRandomCardsInDeck,\n          deck.length\n        );\n\n        const upgradedDeck = permanentlyUpgradeRandomCardsInDeck(\n          deck,\n          numToUpgrade\n        );\n\n        updatedState = {\n          ...updatedState,\n          campaign: {\n            ...updatedState.campaign,\n            deck: upgradedDeck,\n          },\n          log: [\n            `${relic.name} permanently upgraded ${numToUpgrade} card(s) while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    if (\n      triggerEvent === TRIGGER_EVENTS.POPULATE_PATHS &&\n      effect.revealAnonymousPaths\n    ) {\n      const updatedPaths = updatedState.offerings.paths.map((path) =>\n        path.anonymousNameDisplay\n          ? { ...path, anonymousNameDisplay: false }\n          : path\n      );\n\n      updatedState = {\n        ...updatedState,\n        offerings: {\n          ...updatedState.offerings,\n          paths: updatedPaths,\n        },\n        log: [`${relic.name} revealed all hidden paths.`, ...updatedState.log],\n      };\n    }\n\n    if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n      if (effect.weakenEnemyHpPercent && updatedState.combat?.enemyHp) {\n        const reduction = Math.floor(\n          updatedState.combat.enemyHp * effect.weakenEnemyHpPercent\n        );\n        updatedState = {\n          ...updatedState,\n          combat: {\n            ...updatedState.combat,\n            enemyHp: updatedState.combat.enemyHp - reduction,\n          },\n          log: [\n            `${relic.name} weakened the enemy by ${reduction} HP at the start of combat.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    if (\n      triggerEvent === TRIGGER_EVENTS.PLAY_CARD &&\n      effect.ifLightningDrawCards &&\n      result && // the card being played\n      Array.isArray(result.damageTypes) &&\n      result.damageTypes.includes(DAMAGE_TYPES.LIGHTNING)\n    ) {\n      for (let i = 0; i < effect.ifLightningDrawCards; i++) {\n        updatedState = drawCard(updatedState);\n      }\n\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} triggered and drew ${\n            effect.ifLightningDrawCards\n          } card${\n            effect.ifLightningDrawCards > 1 ? \"s\" : \"\"\n          } from casting a Lightning spell.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    if (triggerEvent === TRIGGER_EVENTS.DRAW_CARD) {\n      if (!updatedState.combat || updatedState.currentPhase !== PHASES.COMBAT)\n        continue;\n\n      if (effect.bunnyAdd) {\n        updatedState = addBunnies(updatedState, effect.bunnyAdd);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} added ${effect.bunnyAdd} bunn${\n              effect.bunnyAdd === 1 ? \"y\" : \"ies\"\n            } when you drew a card.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    if (triggerEvent === TRIGGER_EVENTS.PLAY_CARD) {\n      if (effect.bunnyAdd) {\n        updatedState = addBunnies(updatedState, effect.bunnyAdd);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} added ${effect.bunnyAdd} bunn${\n              effect.bunnyAdd === 1 ? \"y\" : \"ies\"\n            } when you played a card.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    if (triggerEvent === TRIGGER_EVENTS.CAST_SPELLBOOK) {\n      if (effect.healPlayer) {\n        updatedState = heal(updatedState, effect.healPlayer);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} healed you for ${effect.healPlayer} HP when casting your spellbook.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    if (triggerEvent === TRIGGER_EVENTS.SHUFFLE_GRAVEYARD_INTO_DECK) {\n      if (effect.healPlayer) {\n        updatedState = heal(updatedState, effect.healPlayer);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} healed you for ${effect.healPlayer} HP after shuffling your graveyard.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    if (triggerEvent === TRIGGER_EVENTS.COMBAT_END) {\n      if (effect.goldAdd) {\n        updatedState = gainGold(updatedState, effect.goldAdd);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} gave you ${effect.goldAdd} gold after combat.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n  }\n\n  return {\n    ...updatedState,\n    result,\n  };\n}\n\nfunction checkEnemyTriggers(state, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  const enemy = updatedState.combat?.enemy;\n  if (!enemy) return updatedState;\n\n  const abilities = enemy.abilities || {};\n  const logMessages = [];\n\n  if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n    // Ink Drink effect\n    if (abilities[ENEMY_ABILITIES.INK_DRINK]) {\n      const amount = abilities[ENEMY_ABILITIES.INK_DRINK];\n\n      const newMaxInk = Math.max(0, updatedState.combat.maxInk - amount);\n      const newInk = Math.min(updatedState.combat.ink, newMaxInk); // Ensure current ink doesn't exceed new max\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          maxInk: newMaxInk,\n          ink: newInk,\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} drained ${amount} max ink at the start of combat!`\n      );\n    }\n\n    // Increase Health effect\n    if (abilities[ENEMY_ABILITIES.INCREASE_HEALTH]) {\n      const multiplier = abilities[ENEMY_ABILITIES.INCREASE_HEALTH]; // e.g., 1.5\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          enemyHp: Math.floor(updatedState.combat.enemyHp * multiplier),\n          enemy: {\n            ...updatedState.combat.enemy,\n            hp: Math.floor(updatedState.combat.enemy.hp * multiplier),\n          },\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} increased its health by ${Math.round(\n          (multiplier - 1) * 100\n        )}%!`\n      );\n    }\n\n    // Downgrade Cards at Combat Start\n    if (abilities[ENEMY_ABILITIES.DOWNGRADE_CARDS]) {\n      const amount = abilities[ENEMY_ABILITIES.DOWNGRADE_CARDS];\n      const deck = [...updatedState.combat.deck];\n      const downgradable = deck.filter((card) => !card.undowngradable);\n\n      const shuffled = [...downgradable].sort(() => Math.random() - 0.5);\n      const toDowngrade = shuffled.slice(0, amount);\n\n      const updatedDeck = deck.map((card) =>\n        toDowngrade.includes(card) ? downgradeCard(card, 1) : card\n      );\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          deck: updatedDeck,\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} downgraded ${toDowngrade.length} card(s) in your deck!`\n      );\n    }\n\n    // Hand Size Reduction\n    if (abilities[ENEMY_ABILITIES.HAND_SIZE_REDUCTION]) {\n      const amount = abilities[ENEMY_ABILITIES.HAND_SIZE_REDUCTION];\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          handSize: Math.max(1, updatedState.combat.handSize - amount),\n        },\n      };\n      logMessages.push(`${enemy.name} reduces your hand size by ${amount}!`);\n    }\n\n    // === Add curses at combat start ===\n    if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n      const abilities = enemy.abilities || {};\n\n      if (abilities[ENEMY_ABILITIES.ADD_PEBBLES]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_PEBBLES];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Sisyphus' Pebble\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Sisyphus' Pebble to your deck!`\n        );\n      }\n\n      if (abilities[ENEMY_ABILITIES.ADD_MERCURY]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_MERCURY];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Mercury Droplet\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Mercury Droplet(s) to your deck!`\n        );\n      }\n\n      if (abilities[ENEMY_ABILITIES.ADD_CLUTTER]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_CLUTTER];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Clutter\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Clutter card(s) to your deck!`\n        );\n      }\n    }\n  }\n\n  if (logMessages.length > 0) {\n    updatedState = {\n      ...updatedState,\n      log: [`⚠️ Enemy ability activated!`, ...logMessages, ...updatedState.log],\n    };\n  }\n\n  return updatedState;\n}\n\nfunction modifyCombatInk(state, amount) {\n  const current = state.combat?.ink ?? 0;\n  const max = state.combat?.maxInk ?? 0;\n\n  const newInk = Math.max(0, Math.min(current + amount, max));\n  const actualChange = newInk - current;\n\n  // let changeMessage =\n  //   actualChange === 0\n  //     ? `Ink unchanged.`\n  //     : actualChange > 0\n  //     ? `Gained ${actualChange} ink.`\n  //     : `Spent ${Math.abs(actualChange)} ink.`;\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      ink: newInk,\n    },\n    // log: [changeMessage, ...state.log],\n  };\n}\n\nfunction heal(state, amount) {\n  const current = state.health || 0;\n  const max = state.maxHealth || 0;\n  const newHealth = Math.min(current + amount, max);\n  const healedAmount = newHealth - current;\n\n  return {\n    ...state,\n    health: newHealth,\n    log: [`Healed ${healedAmount} HP.`, ...state.log],\n  };\n}\nfunction transmuteCard(card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to transmuteCard:\", card);\n    return null;\n  }\n\n  // Define excluded subtypes (easily extendable)\n  const excludedSubtypes = new Set([\n    SPECIAL_CARD_SUBTYPES.CURSE,\n    // Add more subtypes here in future\n  ]);\n\n  const alternatives = cardList.filter(\n    (c) =>\n      c.name !== card.name &&\n      !c.unchoosableByTransmute &&\n      (!c.specialSubtype || !excludedSubtypes.has(c.specialSubtype))\n  );\n\n  if (alternatives.length === 0) {\n    console.warn(\n      `No valid alternatives found to transmute ${card.name}. Returning original.`\n    );\n    return { ...card };\n  }\n\n  const newBase = alternatives[Math.floor(Math.random() * alternatives.length)];\n  return createCardInstance(newBase.name, null, card.upgrades, card.gem);\n}\n\nfunction purgeCard(state, card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to purgeCard:\", card);\n    return state;\n  }\n\n  const updatedDeck = state.campaign.deck.filter((c) => c !== card);\n  const updatedTrash = [...(state.trashPile || []), card];\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n      trashPile: updatedTrash,\n    },\n    log: [`Purged card: ${card.name}`, ...state.log],\n  };\n}\n\nfunction initializeCombatPhase(state, path) {\n  const level = state.level ?? 1;\n\n  // Define ability power modifier based on level\n  const modifyEnemyAbilityPower = ({ currentValue }) => {\n    if (level > 30) return currentValue + 2;\n    if (level > 15) return currentValue + 1;\n    return currentValue;\n  };\n\n  const enemy = generateEnemy(state, path, modifyEnemyAbilityPower);\n\n  // Deep copy and shuffle the deck\n  const deepDeckCopy = JSON.parse(JSON.stringify(state.campaign.deck));\n  const shuffledDeck = shuffleArray(deepDeckCopy);\n\n  const newCombat = {\n    enemy,\n    enemyHp: enemy.hp,\n    deck: shuffledDeck,\n    hand: [],\n    graveyard: [], // was 'discard' but rest of code uses 'graveyard'\n    exile: [],\n    ink: state.campaign.ink,\n    maxInk: state.campaign.ink,\n    books: state.campaign.books,\n    maxBooks: state.campaign.books,\n    pages: state.campaign.pages,\n    maxPages: state.campaign.pages,\n    handSize: state.campaign.handSize,\n    baseBunnies: state.baseBunnies ?? 0,\n    bunnies: 0,\n    combatEnded: false,\n  };\n\n  let newState = {\n    ...state,\n    combat: newCombat,\n    log: [`⚔️ Combat begins against ${enemy.name}!`, ...state.log],\n  };\n\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.COMBAT_START);\n  newState = checkEnemyTriggers(newState, TRIGGER_EVENTS.COMBAT_START);\n  console.log(\"🛠️ Starting combat with baseBunnies =\", newCombat.baseBunnies);\n\n  // Start the player's turn (draw hand, refill ink, setup spellbook, etc.)\n  newState = startTurn(newState);\n\n  return newState;\n}\n\nfunction generateEnemy(state, path, modifyEnemyAbilityPower = null) {\n  const difficulty = pathMap[path?.path]?.difficulty;\n  console.log(\"Path:\", path?.path, \"| Difficulty:\", difficulty);\n\n  const level = state.level ?? 1;\n  const multiplier = state.enemyHealthMultiplier ?? 1;\n  const isBoss = difficulty === \"boss\";\n\n  // === Health Calculation ===\n  const baseHealthMap = {\n    easy: 10,\n    medium: 13,\n    hard: 16,\n    boss: 25,\n  };\n\n  const perLevelIncrement = {\n    easy: 4,\n    medium: 5,\n    hard: 6,\n    boss: 10,\n  };\n\n  let base = baseHealthMap[difficulty] ?? 10;\n  let increment = perLevelIncrement[difficulty] ?? 3;\n  let health = (base + level * increment) * multiplier;\n\n  // === Ability Assignment ===\n  const allAbilities = Object.keys(enemyAbilityDataMap);\n  const selectedAbilities = new Set();\n\n  let numAbilities = 0;\n  if (difficulty === \"hard\") numAbilities = 1;\n  if (isBoss) numAbilities = 2;\n\n  if (state.difficulty === DIFFICULTIES.HARD) {\n    const bonusChance = Math.max(0, 0.5 - (state.luck ?? 0));\n    if (Math.random() < bonusChance) numAbilities += 1;\n  }\n\n  numAbilities = Math.min(numAbilities, 3);\n\n  while (selectedAbilities.size < numAbilities) {\n    const ability =\n      allAbilities[Math.floor(Math.random() * allAbilities.length)];\n    selectedAbilities.add(ability);\n  }\n\n  // === Build abilities object ===\n  const abilities = {};\n  for (const key of selectedAbilities) {\n    const data = enemyAbilityDataMap[key];\n    const baseValue = data.baseValue ?? 0;\n    const override = data.value ?? 0;\n    let value = baseValue + override;\n\n    if (typeof modifyEnemyAbilityPower === \"function\") {\n      value = modifyEnemyAbilityPower({\n        ability: key,\n        baseValue,\n        currentValue: value,\n        enemyLevel: level,\n        difficulty,\n        isBoss,\n        state,\n      });\n    }\n\n    abilities[key] = value;\n  }\n  // === Name Generation ===\n  let name;\n  const smallMonsters = [\n    \"goblin\",\n    \"kobold\",\n    \"rat\",\n    \"spider\",\n    \"imp\",\n    \"gremlin\",\n    \"bat\",\n    \"quasit\",\n    \"skeleton\",\n    \"zombie\",\n  ];\n\n  const mediumMonsters = [\n    \"orc\",\n    \"ogre\",\n    \"gnoll\",\n    \"troll\",\n    \"hobgoblin\",\n    \"ghoul\",\n    \"harpy\",\n    \"lizardfolk\",\n    \"wight\",\n    \"mimic\",\n  ];\n\n  const largeMonsters = [\n    \"dragon\",\n    \"manticore\",\n    \"hydra\",\n    \"wyvern\",\n    \"beholder\",\n    \"medusa\",\n    \"chimera\",\n    \"giant\",\n    \"basilisk\",\n    \"banshee\",\n  ];\n  const vegetables = [\n    \"carrot\",\n    \"broccoli\",\n    \"spinach\",\n    \"kale\",\n    \"zucchini\",\n    \"eggplant\",\n    \"cauliflower\",\n    \"cabbage\",\n    \"lettuce\",\n    \"beet\",\n    \"radish\",\n    \"turnip\",\n    \"bokchoi\",\n    \"chilli\",\n    \"nopal\",\n    \"durian\",\n    \"bean\",\n    \"yam\",\n    \"tomato\",\n    \"asparagus\",\n    \"potato\",\n    \"pumpkin\",\n    \"bellpepper\",\n    \"celery\",\n    \"onion\",\n  ];\n  const bossNames = [\"Avatar of the Weasel\", \"Fox Spirit\", \"Beaglesoul\"];\n\n  if (isBoss) {\n    name = bossNames[Math.floor(Math.random() * bossNames.length)];\n  } else {\n    // Base monster type\n    let monsterList;\n    if (level < 15) {\n      monsterList = smallMonsters;\n    } else if (level < 30) {\n      monsterList = mediumMonsters;\n    } else {\n      monsterList = largeMonsters;\n    }\n\n    const vegetable = vegetables[Math.floor(Math.random() * vegetables.length)];\n    const monster = monsterList[Math.floor(Math.random() * monsterList.length)];\n\n    // Prefixes based on abilities\n    const prefixes = Object.keys(abilities)\n      .map((ability) => enemyAbilityDataMap[ability]?.prefix)\n      .filter(Boolean);\n\n    name = [...prefixes, capitalize(vegetable), capitalize(monster)].join(\" \");\n  }\n\n  // === Loot Generation ===\n  const loot = generateEnemyLoot(state, difficulty, numAbilities, isBoss);\n\n  return {\n    name,\n    hp: Math.round(health),\n    abilities,\n    loot,\n  };\n}\n\nfunction generateEnemyLoot(state, difficulty, numAbilities, isBoss) {\n  const luck = state.luck ?? 0;\n  const level = state.level ?? 1;\n  const deck = state.campaign?.deck ?? [];\n  const allGemmedOrUnsocketable =\n    deck.length > 0 && deck.every((card) => card.gem || card.unsocketable);\n  const weights = {\n    gold: 30,\n    potion: 30,\n    card: 60,\n    relic: 1 + luck + numAbilities * 2,\n    gem: allGemmedOrUnsocketable ? 0 : 5 + luck + numAbilities * 2,\n  };\n\n  let drops = isBoss ? 3 : 1;\n  if (!isBoss) {\n    const chanceTwo = 40 + luck + numAbilities * 10;\n    if (Math.random() * 100 < chanceTwo) {\n      drops++;\n      const chanceThree = 15 + luck + numAbilities * 7;\n      if (Math.random() * 100 < chanceThree) {\n        drops++;\n      }\n    }\n  }\n\n  const usedTypes = new Set();\n  const loot = [];\n\n  if (isBoss) {\n    loot.push({ type: \"relic\", value: generateRandomRelic(state) });\n    usedTypes.add(\"relic\");\n    drops--;\n  }\n\n  while (loot.length < drops) {\n    const available = Object.entries(weights).filter(\n      ([type, weight]) => weight > 0 && !usedTypes.has(type)\n    );\n\n    if (available.length === 0) break;\n\n    const totalWeight = available.reduce((sum, [_, w]) => sum + w, 0);\n    let roll = Math.random() * totalWeight;\n\n    let selected;\n    for (const [type, weight] of available) {\n      if (roll < weight) {\n        selected = type;\n        break;\n      }\n      roll -= weight;\n    }\n\n    usedTypes.add(selected);\n\n    if (selected === \"gold\") {\n      const base = { easy: 2, medium: 4, hard: 6 }[difficulty] ?? 2;\n      const amount =\n        (base + level + luck + numAbilities * 2) * (0.5 + Math.random());\n      loot.push({ type: \"gold\", value: Math.max(1, Math.round(amount)) });\n    } else if (selected === \"card\") {\n      loot.push({ type: \"card\", value: generateRandomCard(state) });\n    } else if (selected === \"potion\") {\n      loot.push({ type: \"potion\", value: generateRandomPotion(state) });\n    } else if (selected === \"relic\") {\n      loot.push({ type: \"relic\", value: generateRandomRelic(state) });\n    } else if (selected === \"gem\") {\n      loot.push({ type: \"gem\", value: generateRandomGem(state) });\n    }\n  }\n\n  return loot;\n}\nfunction permanentlyUpgradeRandomCardsInDeck(deck, numUpgrades = 1) {\n  const upgradableCards = deck.filter((card) => !card.unupgradable);\n  const shuffled = [...upgradableCards].sort(() => Math.random() - 0.5);\n  const toUpgrade = shuffled.slice(0, numUpgrades);\n  const upgradedCards = toUpgrade.map((card) => upgradeCard(card, 1));\n\n  return deck.map((card) => {\n    const index = toUpgrade.indexOf(card);\n    return index !== -1 ? upgradedCards[index] : card;\n  });\n}\n\nfunction addCardToCombatDeck(state, cardName) {\n  const base = cardList.find((c) => c.name === cardName);\n  if (!base) {\n    console.warn(`Could not find card \"${cardName}\"`);\n    return state;\n  }\n\n  const newCard = createCardInstance(cardName);\n  const combatDeck = Array.isArray(state.combat?.deck) ? state.combat.deck : [];\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      deck: [...combatDeck, newCard],\n    },\n  };\n}\n\n//#endregion\n//#region game reducer\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.NEW_GAME:\n      return {\n        ...createInitialState(),\n        log: [\"New game started.\"],\n      };\n\n    case ACTIONS.SET_DIFFICULTY: {\n      if (state.difficulty === action.payload) {\n        console.log(\"Difficulty already set to\", action.payload);\n        return state;\n      }\n      console.log(`Difficulty set to ${action.payload}`);\n      return {\n        ...state,\n        difficulty: action.payload, // ✅ store at root\n        log: [`Difficulty set to ${action.payload}.`, ...state.log],\n      };\n    }\n\n    case ACTIONS.GENERATE_STARTER_DECK:\n      return generateStarterDeck(state);\n\n    case ACTIONS.APPLY_DIFFICULTY_MODIFIERS:\n      return applyDifficultyModifiers(state);\n\n    case ACTIONS.ADVANCE_PHASE:\n      const newState = advancePhaseTo(state, action.payload);\n      return handlePhaseTransitions(newState);\n\n    case ACTIONS.CREATE_CARD_INSTANCE: {\n      const newCard = createCardInstance(\n        action.payload.cardName,\n        action.payload.rarity,\n        action.payload.upgrades,\n        action.payload.gem\n      );\n      return {\n        ...state,\n        campaign: {\n          ...state.campaign,\n          deck: [...state.campaign.deck, newCard],\n        },\n        log: [`Created card: ${newCard.name}`, ...state.log],\n      };\n    }\n\n    case ACTIONS.POPULATE_RELIC_OFFERINGS:\n      return populateRelicOfferings(state, action.payload?.rarity);\n\n    case ACTIONS.PICK_RELIC:\n      return pickRelic(state, action.payload);\n\n    case ACTIONS.POPULATE_PATH_OFFERINGS:\n      return populatePathOfferings(state);\n\n    case ACTIONS.PICK_PATH:\n      return pickPath(state, action.payload);\n\n    case ACTIONS.POPULATE_CARD_OFFERINGS:\n      return populateCardOfferings(state);\n\n    case ACTIONS.PICK_CARD:\n      return pickCard(state, action.payload);\n\n    case ACTIONS.POPULATE_POTION_OFFERINGS:\n      return populatePotionOfferings(state);\n\n    case ACTIONS.PICK_POTION:\n      return pickPotion(state, action.payload);\n\n    case ACTIONS.DRINK_POTION: {\n      const potionIndex = action.payload;\n      const potionToDrink = state.potionBelt[potionIndex];\n      if (!potionToDrink) {\n        console.error(\"Invalid potion index:\", potionIndex);\n        return state;\n      }\n      return drinkPotion(state, potionToDrink);\n    }\n\n    case ACTIONS.POPULATE_GEM_OFFERINGS:\n      return populateGemOfferings(state);\n\n    case ACTIONS.OPEN_MOD_SCREEN:\n      return openModScreen(state, action.payload.mod, action.payload.origin);\n\n    case ACTIONS.APPLY_CARD_MOD:\n      return applyModToCard(state, action.payload); // payload = selected card\n\n    case ACTIONS.SCREEN_CHANGE:\n      return {\n        ...state,\n        previousScreen: state.currentScreen,\n        currentScreen: action.payload,\n      };\n\n    case ACTIONS.POPULATE_SHOPFRONT:\n      return populateShopfront(state);\n\n    case ACTIONS.INCREASE_BASE_BUNNIES:\n      return increaseBaseBunnies(state, action.payload);\n\n    case ACTIONS.GAIN_GOLD:\n      return gainGold(state, action.payload);\n\n    case ACTIONS.PRACTICE_WANDWORK:\n      return practiceWandwork(state);\n\n    case ACTIONS.LOOT_HOARD:\n      return lootHoard(state);\n\n    case ACTIONS.REST:\n      return rest(state);\n\n    case ACTIONS.START_TURN:\n      return startTurn(state, action.dispatch);\n\n    case ACTIONS.CLOSE_COMBAT_REWARDS:\n      return closeCombatRewards(state);\n\n    case ACTIONS.CLAIM_GOLD_REWARD: {\n      const { index, amount } = action.payload;\n      const newRewards = [...state.offerings.combatRewards];\n      newRewards.splice(index, 1);\n\n      return {\n        ...gainGold(state, amount),\n        offerings: {\n          ...state.offerings,\n          combatRewards: newRewards,\n        },\n      };\n    }\n\n    case ACTIONS.DRAW_CARD:\n      return drawCard(state);\n\n    case ACTIONS.PLAY_CARD:\n      return playCard(state, action.payload);\n\n    case ACTIONS.CAST_SPELLBOOK:\n      return castSpellbook(state);\n\n    case ACTIONS.EXIT_SHOP:\n      return exitShop(state);\n\n    case ACTIONS.LOG_MESSAGE:\n      return {\n        ...state,\n        log: [action.payload, ...state.log],\n      };\n\n    default:\n      console.warn(\"Unknown action type:\", action.type);\n      return state;\n  }\n}\n//#endregion\n//#region render function\nfunction render(state, dispatch) {\n  // Get or create output div\n  let output = document.getElementById(\"output\");\n  if (!output) {\n    output = document.createElement(\"div\");\n    output.id = \"output\";\n    document.body.appendChild(output);\n  }\n  output.innerHTML = \"\"; // Clear previous contents\n  // //check and see if all cards in the deck are socketed\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null || card.unsocketable);\n\n  //\n  function renderCardList(title, cards) {\n    const section = document.createElement(\"div\");\n    section.innerHTML = `<h3>${title}</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    cards.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    section.appendChild(ul);\n    output.appendChild(section);\n  }\n\n  // render utility function\n  function renderModPhaseEntry(phase, label, modKey) {\n    if (state.currentPhase === phase && state.currentScreen !== SCREENS.MOD) {\n      const modBtn = document.createElement(\"button\");\n      modBtn.textContent = label;\n      modBtn.style.fontSize = \"1.5rem\";\n      modBtn.style.padding = \"1rem 2rem\";\n      modBtn.onclick = () => {\n        modBtn.disabled = true; // prevent double click\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { [modKey]: true },\n            origin: phase,\n          },\n        });\n      };\n      output.appendChild(modBtn);\n    }\n  }\n\n  // === Game Info ===\n  const info = document.createElement(\"div\");\n  info.innerHTML = `\n  <h2>Game Info</h2>\n  <p><strong>Current Screen:</strong> ${state.currentScreen}</p>\n  <p><strong>Phase:</strong> ${\n    state.currentPhase\n  } &nbsp;&nbsp; <strong>Level:</strong> ${state.level ?? 0}</p>\n  <p><strong>Gold:</strong> ${state.gold}</p>\n  <p><strong>Health:</strong> ${state.health}/${state.maxHealth}</p>\n  <p><strong>Deck Size:</strong> ${state.campaign.deck.length}</p>\n  <p><strong>Relics:</strong> ${\n    state.relicBelt.length > 0\n      ? Object.entries(\n          state.relicBelt.reduce((acc, relic) => {\n            acc[relic.name] = (acc[relic.name] || 0) + 1;\n            return acc;\n          }, {})\n        )\n          .map(([name, count]) => (count > 1 ? `${name} x${count}` : name))\n          .join(\", \")\n      : \"None\"\n  }</p>\n`;\n  output.appendChild(info);\n\n  // === Combat Display ===\n  const isCombatInspectScreen = [\n    SCREENS.COMBAT_DECK,\n    SCREENS.GRAVEYARD,\n    SCREENS.EXILE,\n  ].includes(state.currentScreen);\n\n  if (state.currentPhase === PHASES.COMBAT && state.combat) {\n    const combatSection = document.createElement(\"div\");\n    combatSection.style.border = \"2px solid black\";\n    combatSection.style.padding = \"1rem\";\n    combatSection.style.margin = \"1rem 0\";\n    combatSection.innerHTML = `<h3>Combat</h3>`;\n\n    // === Main Combat UI (skip if inspecting)\n    if (!isCombatInspectScreen) {\n      // Enemy Name + HP (on same line)\n      const enemyBox = document.createElement(\"div\");\n      enemyBox.style.display = \"flex\";\n      enemyBox.style.justifyContent = \"space-between\";\n      enemyBox.style.alignItems = \"center\";\n      enemyBox.style.fontSize = \"1.5rem\";\n      enemyBox.style.fontWeight = \"bold\";\n      enemyBox.style.border = \"1px solid red\";\n      enemyBox.style.padding = \"1rem\";\n      enemyBox.style.marginBottom = \"1rem\";\n\n      // Enemy name\n      const nameSpan = document.createElement(\"span\");\n      nameSpan.textContent = state.combat.enemy.name;\n\n      // Enemy HP\n      const hpSpan = document.createElement(\"span\");\n      hpSpan.textContent = `HP: ${state.combat.enemyHp}`;\n\n      enemyBox.appendChild(nameSpan);\n      enemyBox.appendChild(hpSpan);\n      combatSection.appendChild(enemyBox);\n\n      // Spellbook Pages\n      const spellbook = document.createElement(\"div\");\n      spellbook.style.display = \"flex\";\n      spellbook.style.gap = \"0.5rem\";\n      spellbook.style.marginBottom = \"1rem\";\n      state.combat.spellbook.forEach((page, index) => {\n        const pageDiv = document.createElement(\"div\");\n        pageDiv.style.width = \"60px\";\n        pageDiv.style.height = \"90px\";\n        pageDiv.style.border = \"1px solid #333\";\n        pageDiv.style.display = \"flex\";\n        pageDiv.style.alignItems = \"center\";\n        pageDiv.style.justifyContent = \"center\";\n        pageDiv.style.backgroundColor =\n          page === \"blank page\" ? \"lightgrey\" : \"white\";\n        pageDiv.textContent = page === \"blank page\" ? \"\" : page.name;\n        spellbook.appendChild(pageDiv);\n      });\n\n      const spellbookLabel = document.createElement(\"p\");\n      spellbookLabel.textContent = \"Spellbook:\";\n      spellbookLabel.style.fontWeight = \"bold\";\n      spellbookLabel.style.marginBottom = \"0.25rem\";\n      combatSection.appendChild(spellbookLabel);\n      combatSection.appendChild(spellbook);\n\n      // Cast + Ink + Bunny Count\n      const castRow = document.createElement(\"div\");\n      castRow.style.display = \"flex\";\n      castRow.style.alignItems = \"center\";\n      castRow.style.gap = \"1rem\";\n      castRow.style.marginBottom = \"0.5rem\";\n\n      const allPagesBlank =\n        state.combat.spellbook.length > 0 &&\n        state.combat.spellbook.every((page) => page === \"blank page\");\n\n      const castButton = document.createElement(\"button\");\n      if (allPagesBlank) {\n        castButton.textContent = \"Skip Turn\";\n        castButton.style.backgroundColor = \"#f88\";\n      } else {\n        castButton.textContent = \"Cast Spellbook\";\n      }\n      castButton.onclick = () => dispatch({ type: ACTIONS.CAST_SPELLBOOK });\n\n      const bunnyDisplay = document.createElement(\"span\");\n      bunnyDisplay.textContent = `BUNNIES: ${state.combat?.bunnies || 0}`;\n\n      castRow.appendChild(castButton);\n      castRow.appendChild(bunnyDisplay);\n      combatSection.appendChild(castRow);\n\n      // === INK and BOOKS Line (below cast + bunnies)\n      const resourcesRow = document.createElement(\"div\");\n      resourcesRow.style.display = \"flex\";\n      resourcesRow.style.gap = \"1rem\";\n      resourcesRow.style.marginBottom = \"1rem\";\n\n      const inkDisplay = document.createElement(\"span\");\n      inkDisplay.textContent = `INK: ${state.combat.ink}/${state.combat.maxInk}`;\n\n      const booksDisplay = document.createElement(\"span\");\n      booksDisplay.textContent = `BOOKS: ${state.combat.books}`;\n\n      resourcesRow.appendChild(inkDisplay);\n      resourcesRow.appendChild(booksDisplay);\n      combatSection.appendChild(resourcesRow);\n\n      // Hand\n      const handRow = document.createElement(\"div\");\n      handRow.style.display = \"flex\";\n      handRow.style.gap = \"0.5rem\";\n      handRow.style.flexWrap = \"wrap\";\n\n      if (state.combat.hand && state.combat.hand.length > 0) {\n        state.combat.hand.forEach((card, index) => {\n          const cardBtn = document.createElement(\"button\");\n\n          const cardCost = card.inkCost ?? 0;\n          const canAfford = cardCost <= state.combat.ink;\n          const isUncastable = !!card.uncastable;\n\n          // Display name and cost\n          const costText =\n            !isUncastable && card.inkCost != null\n              ? ` (Cost: ${card.inkCost})`\n              : \"\";\n          cardBtn.textContent = `${card.name}${costText}`;\n\n          // Disable the button if the card is uncastable or too expensive\n          cardBtn.disabled = isUncastable || !canAfford;\n\n          // Style disabled buttons\n          if (cardBtn.disabled) {\n            cardBtn.style.opacity = \"0.5\";\n            cardBtn.style.cursor = \"not-allowed\";\n          }\n\n          // Only dispatch if allowed\n          cardBtn.onclick = () => {\n            if (!cardBtn.disabled) {\n              dispatch({ type: ACTIONS.PLAY_CARD, payload: index });\n            }\n          };\n\n          handRow.appendChild(cardBtn);\n        });\n      } else {\n        const empty = document.createElement(\"p\");\n        empty.textContent = \"Your hand is empty.\";\n        handRow.appendChild(empty);\n      }\n\n      // Hand label\n      const handLabel = document.createElement(\"p\");\n      handLabel.textContent = \"Hand:\";\n      handLabel.style.fontWeight = \"bold\";\n      handLabel.style.marginBottom = \"0.25rem\";\n      combatSection.appendChild(handLabel);\n\n      combatSection.appendChild(handRow);\n    }\n\n    // === Inspect Buttons (always shown in combat)\n    const inspectRow = document.createElement(\"div\");\n    inspectRow.style.marginTop = \"1rem\";\n    inspectRow.style.display = \"flex\";\n    inspectRow.style.gap = \"0.5rem\";\n\n    [\n      { label: \"Combat Deck\", screen: SCREENS.COMBAT_DECK },\n      { label: \"Graveyard\", screen: SCREENS.GRAVEYARD },\n      { label: \"Exile\", screen: SCREENS.EXILE },\n    ].forEach(({ label, screen }) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent =\n        state.currentScreen === screen ? \"Return\" : `Inspect ${label}`;\n      btn.onclick = () => {\n        if (state.currentScreen === screen) {\n          returnToMain(dispatch);\n        } else {\n          changeScreen(dispatch, screen);\n        }\n      };\n      inspectRow.appendChild(btn);\n    });\n\n    //label\n    const inspectZoneLabel = document.createElement(\"p\");\n    inspectZoneLabel.textContent = \"Inspect Zones:\";\n    inspectZoneLabel.style.fontWeight = \"bold\";\n    inspectZoneLabel.style.marginBottom = \"0.25rem\";\n    combatSection.appendChild(inspectZoneLabel);\n    combatSection.appendChild(inspectRow);\n    output.appendChild(combatSection);\n  }\n\n  if (state.currentScreen === SCREENS.COMBAT_DECK) {\n    renderCardList(\"Combat Deck\", state.combat?.deck || []);\n  }\n  if (state.currentScreen === SCREENS.GRAVEYARD) {\n    renderCardList(\"Graveyard\", state.combat?.graveyard || []);\n  }\n  if (state.currentScreen === SCREENS.EXILE) {\n    renderCardList(\"Exile\", state.combat?.exile || []);\n  }\n\n  // === Log ===\n  const log = document.createElement(\"div\");\n  log.innerHTML = `<h3>Log</h3><ul>${state.log\n    .slice(0, 5)\n    .map((msg) => `<li>${msg}</li>`)\n    .join(\"\")}</ul>`;\n  output.appendChild(log);\n\n  // === Main Menu ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.MAIN_MENU\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = \"New Game\";\n    button.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.DIFFICULTY_SELECTION,\n      });\n    };\n    output.appendChild(button);\n  }\n\n  // === Difficulty Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.DIFFICULTY_SELECTION\n  ) {\n    const difficulties = [\n      DIFFICULTIES.EASY,\n      DIFFICULTIES.MEDIUM,\n      DIFFICULTIES.HARD,\n    ];\n    difficulties.forEach((difficulty) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `Start ${difficulty} Game`;\n      btn.onclick = () => selectDifficultyAndBeginGame(dispatch, difficulty);\n      output.appendChild(btn);\n    });\n  }\n\n  // === Relic Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.relics &&\n    state.offerings.relics.length > 0\n  ) {\n    const relicSection = document.createElement(\"div\");\n    relicSection.innerHTML = `<h3>Relic Offerings</h3>`;\n    state.offerings.relics.forEach((relic, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${relic.name}`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n      relicSection.appendChild(btn);\n    });\n    output.appendChild(relicSection);\n  }\n  // === Path Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.paths &&\n    state.offerings.paths.length > 0\n  ) {\n    const pathSection = document.createElement(\"div\");\n    pathSection.innerHTML = `<h3>Choose a Path</h3>`;\n\n    state.offerings.paths.forEach((path, index) => {\n      const btn = document.createElement(\"button\");\n\n      // === Conditionally render based on anonymity ===\n      if (path.anonymousNameDisplay) {\n        btn.textContent = `???`;\n      } else {\n        btn.textContent = `${path.path}`;\n      }\n\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_PATH, payload: index });\n\n      pathSection.appendChild(btn);\n    });\n\n    output.appendChild(pathSection);\n  }\n\n  // === Card Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.cards &&\n    state.offerings.cards.length > 0\n  ) {\n    const cardSection = document.createElement(\"div\");\n    cardSection.innerHTML = `<h3>Choose a Card</h3>`;\n\n    state.offerings.cards.forEach((card, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.inkCost})${\n        card.upgrades ? ` +${card.upgrades}` : \"\"\n      }${card.gem ? ` [Gem: ${card.gem.name}]` : \"\"}`;\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n      cardSection.appendChild(btn);\n    });\n\n    output.appendChild(cardSection);\n  }\n\n  // === Potion Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.POTION_OFFERING &&\n    state.offerings.potions &&\n    state.offerings.potions.length > 0\n  ) {\n    const potionSection = document.createElement(\"div\");\n    potionSection.innerHTML = `<h3>Choose a Potion</h3>`;\n\n    state.offerings.potions.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${potion.name} (${potion.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n      potionSection.appendChild(btn);\n    });\n\n    output.appendChild(potionSection);\n  }\n\n  // ==== Gem Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentScreen === SCREENS.MAIN &&\n    state.currentPhase === PHASES.GEM_OFFERING &&\n    state.offerings.gems &&\n    state.offerings.gems.length > 0\n  ) {\n    const gemSection = document.createElement(\"div\");\n    gemSection.innerHTML = `<h3>Choose a Gem</h3>`;\n\n    state.offerings.gems.forEach((gem, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${gem.name} (${gem.rarity})`;\n\n      btn.onclick = () =>\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { gem },\n            origin: PHASES.GEM_OFFERING,\n          },\n        });\n\n      gemSection.appendChild(btn);\n    });\n\n    output.appendChild(gemSection);\n  }\n  // === Shopfront Display ===\n\n  if (\n    state.currentPhase === PHASES.SHOP &&\n    state.currentScreen !== SCREENS.MOD &&\n    state.offerings.shopfront.length > 0\n  ) {\n    const shopSection = document.createElement(\"div\");\n    shopSection.innerHTML = `<h3>Shop Inventory</h3>`;\n\n    const list = document.createElement(\"ul\");\n    state.offerings.shopfront.forEach((entry, index) => {\n      if (!entry || !entry.item || !entry.item.name) return;\n\n      const li = document.createElement(\"li\");\n\n      const btn = document.createElement(\"button\");\n      const price = entry.item?.price ?? 0;\n      const playerGold = state.gold ?? 0;\n      const isGem = entry.type === \"gem\";\n      const disabled = price > playerGold || (isGem && allCardsSocketed);\n      btn.textContent = `${entry.type.toUpperCase()}: ${\n        entry.item.name\n      } (${price}g)`;\n      if (disabled) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      // Bind correct function based on type\n      btn.onclick = () => {\n        switch (entry.type) {\n          case \"card\":\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n            break;\n          case \"potion\":\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n            break;\n          case \"gem\":\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: entry.item },\n                origin: PHASES.SHOP,\n              },\n            });\n            break;\n\n          case \"relic\":\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n            break;\n          default:\n            console.warn(\"Unknown shop item type:\", entry.type);\n        }\n      };\n\n      li.appendChild(btn);\n      list.appendChild(li);\n    });\n\n    // Exit Shop Button (for future logic)\n    const exitBtn = document.createElement(\"button\");\n    exitBtn.textContent = \"Exit Shop\";\n    exitBtn.onclick = () => {\n      dispatch({ type: ACTIONS.EXIT_SHOP });\n    };\n    shopSection.appendChild(list);\n    shopSection.appendChild(exitBtn);\n    output.appendChild(shopSection);\n  }\n\n  // === Mod Screen ===\n  if (state.currentScreen === SCREENS.MOD && state.modData?.mod) {\n    const modSection = document.createElement(\"div\");\n    modSection.innerHTML = `<h3>Choose a card to modify</h3>`;\n\n    const mod = state.modData.mod;\n    const isGemMod = !!mod.gem;\n\n    state.campaign.deck.forEach((card) => {\n      // === Filter based on mod type ===\n      if (isGemMod && (card.gem || card.unsocketable)) return;\n      if (mod.upgrade && card.unupgradable) return;\n\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.inkCost})`;\n\n      if (card.gem) {\n        btn.textContent += ` [Gem: ${card.gem.name}]`;\n      }\n\n      btn.onclick = () => {\n        dispatch({ type: ACTIONS.APPLY_CARD_MOD, payload: card });\n      };\n\n      modSection.appendChild(btn);\n    });\n\n    output.appendChild(modSection);\n  }\n\n  // ======= render purge, transmute, and enchant phases (AKA mod phases) ======\n\n  renderModPhaseEntry(PHASES.PURGE, \"Lethian Font\", \"purge\");\n  renderModPhaseEntry(PHASES.TRANSMUTE, \"Metamorphosis\", \"transmute\");\n  renderModPhaseEntry(PHASES.ENCHANT, \"Enchanted Dolmen\", \"upgrade\");\n\n  // ====== render hoard phase= ======\n  if (state.currentPhase === PHASES.HOARD) {\n    const btn = document.createElement(\"button\");\n    btn.textContent = \"Loot Hoard\";\n    btn.style.fontSize = \"1.5rem\";\n    btn.style.padding = \"1rem 2rem\";\n    btn.onclick = () => {\n      // Placeholder until lootHoard is implemented\n      dispatch({ type: \"LOOT_HOARD\" }); // or just console.log(\"Loot Hoard\")\n    };\n    output.appendChild(btn);\n  }\n  // ====== rest phase rendering ======\n  if (state.currentPhase === PHASES.REST) {\n    const restBtn = document.createElement(\"button\");\n    restBtn.textContent = \"Fireside Rest\";\n    restBtn.style.fontSize = \"1.5rem\";\n    restBtn.style.padding = \"1rem 2rem\";\n    restBtn.onclick = () => {\n      dispatch({ type: \"REST\" }); // Placeholder\n    };\n\n    const practiceBtn = document.createElement(\"button\");\n    practiceBtn.textContent = \"Practice Wandwork\";\n    practiceBtn.style.fontSize = \"1.5rem\";\n    practiceBtn.style.padding = \"1rem 2rem\";\n    practiceBtn.onclick = () => {\n      dispatch({ type: \"PRACTICE_WANDWORK\" }); // Placeholder\n    };\n\n    output.appendChild(restBtn);\n    output.appendChild(practiceBtn);\n  }\n\n  // === Combat End Phase ===\n  if (state.currentPhase === PHASES.COMBAT_END) {\n    const combatEndSection = document.createElement(\"div\");\n    combatEndSection.innerHTML = `<h3>Combat Concluded</h3>`;\n\n    const hasUnclaimedLoot =\n      state.offerings?.combatRewards &&\n      state.offerings.combatRewards.length > 0;\n\n    const btn = document.createElement(\"button\");\n    btn.textContent = hasUnclaimedLoot ? \"Skip Loot\" : \"Continue\";\n    btn.onclick = () => {\n      dispatch({ type: ACTIONS.CLOSE_COMBAT_REWARDS });\n    };\n\n    combatEndSection.appendChild(btn);\n    output.appendChild(combatEndSection);\n  }\n  if (\n    state.currentPhase === PHASES.COMBAT_END &&\n    state.offerings.combatRewards &&\n    state.offerings.combatRewards.length > 0\n  ) {\n    const rewardSection = document.createElement(\"div\");\n    rewardSection.innerHTML = `<h3>Combat Rewards</h3>`;\n\n    state.offerings.combatRewards.forEach((reward, index) => {\n      const btn = document.createElement(\"button\");\n\n      let label = \"\";\n      switch (reward.type) {\n        case \"gold\":\n          label = `Gold: ${reward.value}`;\n          break;\n        case \"card\":\n          label = `Card: ${reward.value.name}`;\n          break;\n        case \"relic\":\n          label = `Relic: ${reward.value.name}`;\n          break;\n        case \"potion\":\n          label = `Potion: ${reward.value.name}`;\n          break;\n        case \"gem\":\n          label = `Gem: ${reward.value.name}`;\n          break;\n        default:\n          label = \"Unknown Reward\";\n      }\n\n      btn.textContent = label;\n\n      const isGem = reward.type === \"gem\";\n      const shouldDisable = isGem && allCardsSocketed;\n\n      if (shouldDisable) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      if (!shouldDisable) {\n        btn.onclick = () => {\n          if (reward.type === \"gold\") {\n            dispatch({\n              type: ACTIONS.CLAIM_GOLD_REWARD,\n              payload: { index, amount: reward.value },\n            });\n          } else if (reward.type === \"card\") {\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n          } else if (reward.type === \"relic\") {\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n          } else if (reward.type === \"potion\") {\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n          } else if (reward.type === \"gem\") {\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: reward.value },\n                origin: PHASES.COMBAT_END,\n              },\n            });\n          }\n        };\n      }\n\n      rewardSection.appendChild(btn);\n    });\n\n    output.appendChild(rewardSection);\n  }\n  // === GAME OVER screen ====\n  if (state.currentPhase === PHASES.GAME_OVER) {\n    const gameOverSection = document.createElement(\"div\");\n    gameOverSection.classList.add(\"game-over\");\n\n    const banner = document.createElement(\"h1\");\n    banner.textContent =\n      state.result === \"Victory\" ? \"🏆 Victory!\" : \"💀 Defeat!\";\n    gameOverSection.appendChild(banner);\n\n    const summary = document.createElement(\"div\");\n    summary.innerHTML = `\n      <p>Game ended at level: ${state.level}</p>\n      <h3>Decklist:</h3>\n      <ul>\n        ${state.campaign.deck\n          .map(\n            (card) =>\n              `<li>${card.name}</li>\n`\n          )\n          .join(\"\")}\n      </ul>\n      <h3>Relics:</h3>\n      <ul>\n        ${state.relicBelt.map((relic) => `<li>${relic.name}</li>`).join(\"\")}\n      </ul>\n    `;\n    gameOverSection.appendChild(summary);\n\n    const newGameBtn = document.createElement(\"button\");\n    newGameBtn.textContent = \"Return to Main Menu\";\n    newGameBtn.onclick = () => {\n      dispatch({ type: ACTIONS.NEW_GAME });\n    };\n\n    gameOverSection.appendChild(newGameBtn);\n    output.appendChild(gameOverSection);\n  }\n\n  // === Deck Inspect / Return Button ===\n  //deck inspect button\n  if (\n    (state.currentScreen === SCREENS.MAIN ||\n      state.currentScreen === SCREENS.DECK) &&\n    state.campaign.deck.length > 0\n  ) {\n    const deckBtn = document.createElement(\"button\");\n    deckBtn.textContent =\n      state.currentScreen === SCREENS.MAIN ? \"Inspect Deck\" : \"Return\";\n    deckBtn.onclick = () => {\n      const nextScreen =\n        state.currentScreen === SCREENS.MAIN ? SCREENS.DECK : SCREENS.MAIN;\n      dispatch({\n        type: ACTIONS.SCREEN_CHANGE,\n        payload: nextScreen,\n      });\n    };\n    output.appendChild(deckBtn);\n  }\n  // deck inspect screen\n  if (state.currentScreen === SCREENS.DECK) {\n    const deckView = document.createElement(\"div\");\n    deckView.innerHTML = `<h3>Campaign Deck</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    state.campaign.deck.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    deckView.appendChild(ul);\n    output.appendChild(deckView);\n  }\n\n  // === Always-Visible Potion Belt ===\n  if (state.potionBelt && state.potionBelt.length > 0) {\n    const beltSection = document.createElement(\"div\");\n    beltSection.innerHTML = `<h3>Your Potions</h3>`;\n\n    state.potionBelt.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = potion.name;\n\n      const isCombatPhase = state.currentPhase === PHASES.COMBAT;\n      const isDrinkableNow =\n        potion.drinkableOutOfCombat !== false || isCombatPhase;\n\n      if (!isDrinkableNow) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      btn.onclick = () => {\n        if (isDrinkableNow) {\n          dispatch({ type: ACTIONS.DRINK_POTION, payload: index });\n        }\n      };\n\n      beltSection.appendChild(btn);\n    });\n\n    output.appendChild(beltSection);\n  }\n}\n// #endregion\n\n// Initialize the game app\nwindow.onload = () => {\n  createGameApp(createInitialState(), gameReducer, render);\n};\n\n//hotkeys\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Escape\") {\n    dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: SCREENS.MAIN });\n  }\n});\n\n//#region WIP\n// //------------------------------------------------WIP functions for MVP ------------------------------------------------\nfunction startTurn(state) {\n  console.log(\">>> Starting new turn. Books remaining: \", state.combat.books);\n\n  if (state.combat.books < 1) {\n    return {\n      ...state,\n      combat: {\n        ...state.combat,\n        combatEnded: true,\n      },\n      log: [\"📕 You have no books left. Combat ends.\", ...state.log],\n    };\n  }\n\n  // Open a new spellbook of blank pages\n  const newBook = Array(state.combat.pages).fill(\"blank page\");\n\n  const baseBunnies = state.combat.baseBunnies ?? 0;\n\n  // Subtract one book, set up spellbook, and apply base bunnies\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      books: state.combat.books - 1,\n      spellbook: newBook,\n      bunnies: baseBunnies, // ✅ Set starting bunnies for the turn\n      combatEnded: false,\n    },\n    log: [\n      `📖 A new turn begins. 🐇 Gained ${baseBunnies} bunnies.`,\n      ...state.log,\n    ],\n  };\n\n  updatedState = newHand(updatedState);\n  updatedState = refillInkpot(updatedState);\n\n  return updatedState;\n}\n\nfunction shuffleGraveyardIntoDeck(state) {\n  const graveyard = state.combat?.graveyard ?? [];\n  const deck = state.combat?.deck ?? [];\n\n  if (graveyard.length === 0) {\n    return {\n      ...state,\n      log: [\"Your graveyard is already empty.\", ...state.log],\n    };\n  }\n\n  // Purely combine and shuffle\n  const combinedDeck = [...deck, ...graveyard];\n  const shuffledDeck = shuffleArray(combinedDeck);\n\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      deck: shuffledDeck,\n      graveyard: [], // clear graveyard\n    },\n    log: [\"You shuffled your graveyard into your deck.\", ...state.log],\n  };\n\n  // 🔁 Check for relic triggers\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.SHUFFLE_GRAVEYARD_INTO_DECK\n  );\n\n  // 🧪 Check if anyone died as a result of relic effects\n  updatedState = checkCombatEndViaDeath(updatedState);\n\n  return updatedState;\n}\n\nfunction refillInkpot(state) {\n  const maxInk = state.combat?.maxInk ?? 0;\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      ink: maxInk,\n    },\n    log: [`🔮 Inkpot refilled to ${maxInk}.`, ...state.log],\n  };\n}\nfunction checkCombatEndViaDeath(state) {\n  const playerDead = state.health <= 0;\n  const enemyDead = state.combat?.enemyHp <= 0;\n\n  if (playerDead) {\n    console.log(\">>> Player is dead. Ending combat.\");\n\n    return combatEnd(state, { result: \"loss\" });\n  }\n\n  if (enemyDead) {\n    console.log(\">>> Enemy is dead. Ending combat.\");\n\n    return combatEnd(state, { result: \"win\" });\n  }\n\n  // No one is dead — combat continues\n  return state;\n}\nfunction newHand(state) {\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      hand: [], // clear hand before drawing\n    },\n  };\n\n  for (let i = 0; i < updatedState.combat.handSize; i++) {\n    updatedState = drawCard(updatedState);\n  }\n\n  return updatedState;\n}\nfunction drawCard(state) {\n  let updatedState = { ...state };\n\n  // 🛠 Use the most recent combat state from the input state\n  let currentCombat = updatedState.combat;\n\n  // Step 1: If deck is empty, try to shuffle from graveyard\n  if (currentCombat.deck.length === 0) {\n    updatedState = shuffleGraveyardIntoDeck(updatedState);\n  }\n\n  // 🧠 Rebind again after potential shuffle\n  currentCombat = updatedState.combat;\n\n  // Step 2: If still no cards, apply fatigue\n  if (currentCombat.deck.length === 0) {\n    updatedState = takeDamage(updatedState, 1, { skipDeathCheck: false });\n    updatedState = {\n      ...updatedState,\n      log: [\n        \"💀 Lost 1 HP to fatigue by attempting to draw from an empty deck.\",\n        ...updatedState.log,\n      ],\n    };\n    return updatedState;\n  }\n\n  // Step 3: Draw the card normally\n  const [drawnCard, ...remainingDeck] = currentCombat.deck;\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...currentCombat,\n      deck: remainingDeck,\n      hand: [...currentCombat.hand, drawnCard],\n    },\n    log: [`📜 Drew card: ${drawnCard.name}`, ...updatedState.log],\n  };\n\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.DRAW_CARD);\n  updatedState = checkCardTriggers(\n    updatedState,\n    drawnCard,\n    TRIGGER_EVENTS.DRAW_CARD\n  );\n\n  return updatedState;\n}\n\nfunction checkCardTriggers(state, card, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  const effect = card.triggers?.[triggerEvent];\n  if (!effect) return updatedState;\n  // === Handle DRAW_CARD triggers ===\n  if (triggerEvent === TRIGGER_EVENTS.DRAW_CARD) {\n    // on draw triggers go here\n  }\n  // === Handle PICK_CARD triggers ===\n  if (triggerEvent === TRIGGER_EVENTS.PICK_CARD) {\n    // on pick triggers go here\n  }\n  return updatedState;\n}\nfunction addBunnies(state, bunnyAdd) {\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      bunnies: (state.combat.bunnies ?? 0) + bunnyAdd,\n    },\n  };\n}\nfunction multiplyBunnies(state, bunnyMult) {\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      bunnies: Math.floor((state.combat.bunnies ?? 0) * bunnyMult),\n    },\n  };\n}\nfunction takeDamage(state, dmg, options = {}) {\n  console.trace(\"taking damage:\", dmg, \"options:\", options);\n  const skipDeathCheck = options.skipDeathCheck ?? false;\n\n  const updatedState = {\n    ...state,\n    health: Math.max(0, state.health - dmg),\n    log: [`You took ${dmg} damage.`, ...state.log],\n  };\n\n  return skipDeathCheck ? updatedState : checkCombatEndViaDeath(updatedState);\n}\n\nfunction dealDamage(state, damage, damageTypes = [], options = {}) {\n  const { isBonus = false } = options;\n  const newEnemyHp = Math.max(0, state.combat.enemyHp - damage);\n\n  console.log(\n    `>> dealDamage: current enemy HP = ${\n      state.combat.enemyHp\n    }, damage = ${damage}, new = ${newEnemyHp}, types = [${damageTypes.join(\n      \", \"\n    )}], isBonus = ${isBonus}`\n  );\n\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      enemyHp: newEnemyHp,\n    },\n    log: [\n      `⚔️ You dealt ${damage} damage to ${state.combat.enemy.name}` +\n        (damageTypes.length > 0 ? ` (${damageTypes.join(\", \")})` : \"\") +\n        \".\",\n      ...state.log,\n    ],\n  };\n\n  // Only trigger relics if this isn't bonus damage\n  if (!isBonus) {\n    for (const damageType of damageTypes) {\n      updatedState = checkRelicTriggers(\n        updatedState,\n        TRIGGER_EVENTS.DEAL_DAMAGE,\n        {\n          damageType,\n          amount: damage,\n          enemy: state.combat.enemy,\n        }\n      );\n    }\n  }\n\n  updatedState = checkCombatEndViaDeath(updatedState);\n  updatedState = checkGameOver(updatedState);\n\n  return updatedState;\n}\n\nfunction playCard(state, index) {\n  const hand = [...state.combat.hand];\n  const card = hand[index];\n\n  /* ── Guard clauses ─────────────────────────────────────────────────── */\n  if (!card || card.uncastable) return state;\n  if ((card.inkCost ?? 0) > state.combat.ink) return state;\n\n  /* ── Step 1: deduct ink ────────────────────────────────────────────── */\n  let updatedState = modifyCombatInk({ ...state }, -card.inkCost);\n\n  /* ── Step 2: remove card from hand ─────────────────────────────────── */\n  hand.splice(index, 1);\n  updatedState = {\n    ...updatedState,\n    combat: { ...updatedState.combat, hand },\n  };\n\n  /* ── Step 3: relic triggers for PLAY_CARD ──────────────────────────── */\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.PLAY_CARD, {\n    card,\n  });\n\n  /* ── INSTANT cards resolve immediately ─────────────────────────────── */\n  if (card.cardType === CARD_TYPES.INSTANT) {\n    //  No zone-placement here!  resolveSpell will handle graveyard/exile\n    updatedState = resolveSpell(updatedState, card);\n    updatedState = checkCombatEndViaDeath(updatedState);\n    updatedState = checkGameOver(updatedState);\n    return updatedState;\n  }\n\n  /* ── SPELL cards: place into spellbook ─────────────────────────────── */\n  const spellbook = [...updatedState.combat.spellbook];\n  const firstBlank = spellbook.indexOf(\"blank page\");\n  if (firstBlank === -1) return updatedState; // failsafe\n\n  spellbook[firstBlank] = card;\n  updatedState = {\n    ...updatedState,\n    combat: { ...updatedState.combat, spellbook },\n  };\n\n  /* ── Auto-cast when the spellbook is full ───────────────────────────── */\n  if (!spellbook.includes(\"blank page\")) {\n    updatedState = castSpellbook(updatedState);\n    updatedState = checkCombatEndViaDeath(updatedState);\n    updatedState = checkGameOver(updatedState);\n  }\n\n  return updatedState;\n}\n\nfunction castSpellbook(state) {\n  let updatedState = { ...state };\n\n  // 🌀 Trigger relic effects for CAST_SPELLBOOK\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.CAST_SPELLBOOK\n  );\n\n  // 🔮 Cast each non-blank spell in the spellbook\n  for (const card of updatedState.combat.spellbook) {\n    if (typeof card !== \"object\" || card.name === \"blank page\") continue;\n    updatedState = resolveSpell(updatedState, card);\n  }\n\n  // 🐇 Release bunnies (deal damage equal to bunny count)\n  updatedState = releaseBunnies(updatedState);\n\n  // ✅ If enemy is still alive\n  if (updatedState.combat?.enemyHp > 0) {\n    // 👇 Check if any books remain\n    if (updatedState.combat.books > 0) {\n      console.log(\">>> Enemy survived, but books remain. Next turn begins.\");\n      return startTurn(updatedState);\n    } else {\n      console.log(\">>> Enemy survived. No books left. Player loses combat.\");\n      return combatEnd(updatedState, { result: \"loss\" });\n    }\n  }\n\n  // ✅ Enemy is dead → player wins\n  return combatEnd(updatedState, { result: \"win\" });\n}\nfunction releaseBunnies(state) {\n  const bunnyDamage = state.combat.bunnies ?? 0;\n\n  if (bunnyDamage <= 0) {\n    return {\n      ...state,\n      combat: {\n        ...state.combat,\n        bunnies: 0,\n      },\n    };\n  }\n\n  let updatedState = { ...state };\n\n  // ✅ Pass as an array now\n  updatedState = dealDamage(updatedState, bunnyDamage, [DAMAGE_TYPES.BUNNY]);\n\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...updatedState.combat,\n      bunnies: 0,\n    },\n    log: [\n      `Released ${bunnyDamage} bunn${bunnyDamage === 1 ? \"y\" : \"ies\"}!`,\n      ...updatedState.log,\n    ],\n  };\n\n  return updatedState;\n}\n\nfunction endTurn(state) {\n  let updatedState = { ...state };\n\n  // 🧪 Check if combat has ended via death\n  updatedState = checkCombatEndViaDeath(updatedState);\n  if (updatedState.combat.combatEnded) return updatedState;\n\n  // 🪦 Move remaining cards in hand to the graveyard\n  const remainingHand = updatedState.combat.hand || [];\n  const updatedGraveyard = [...updatedState.combat.graveyard, ...remainingHand];\n\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...updatedState.combat,\n      hand: [],\n      graveyard: updatedGraveyard,\n    },\n    log: [`You ended your turn.`, ...updatedState.log],\n  };\n\n  // 🧪 Check again before starting next turn\n  if (updatedState.combat.combatEnded) return updatedState;\n\n  // 🔁 Start a new turn\n  return startTurn(updatedState);\n}\n\nfunction resolveSpell(state, card) {\n  if (!card || typeof card !== \"object\") return state;\n\n  let updatedState = { ...state };\n  const effects = [];\n\n  // === Bunny Add ===\n  if (card.bunnyAdd) {\n    updatedState = addBunnies(updatedState, card.bunnyAdd);\n    effects.push(`+${card.bunnyAdd} bunn${card.bunnyAdd === 1 ? \"y\" : \"ies\"}`);\n  }\n\n  // === Bunny Multiply ===\n  if (card.bunnyMult) {\n    updatedState = multiplyBunnies(updatedState, card.bunnyMult);\n    effects.push(`×${card.bunnyMult} bunnies`);\n  }\n\n  // === Gain Gold ===\n  if (card.goldAdd) {\n    updatedState = gainGold(updatedState, card.goldAdd);\n    effects.push(`+${card.goldAdd} gold`);\n  }\n\n  // === Add Ink ===\n  if (card.inkAdd) {\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        ink: updatedState.combat.ink + card.inkAdd,\n      },\n    };\n    effects.push(`+${card.inkAdd} ink`);\n  }\n\n  // === Draw Cards ===\n  if (card.cardDraw) {\n    for (let i = 0; i < card.cardDraw; i++) {\n      updatedState = drawCard(updatedState);\n    }\n    effects.push(`Drew ${card.cardDraw} card${card.cardDraw === 1 ? \"\" : \"s\"}`);\n  }\n\n  // === Health Cost ===\n  if (card.healthCost) {\n    updatedState = takeDamage(updatedState, card.healthCost);\n    effects.push(`-${card.healthCost} HP`);\n  }\n\n  // === Permanently Upgrade Cards in Deck ===\n  if (card.permanentlyUpgradeRandomCardsInDeck) {\n    const numToUpgrade = Math.min(\n      card.permanentlyUpgradeRandomCardsInDeck,\n      updatedState.campaign.deck.length\n    );\n    const upgradedDeck = permanentlyUpgradeRandomCardsInDeck(\n      updatedState.campaign.deck,\n      numToUpgrade\n    );\n    updatedState = {\n      ...updatedState,\n      campaign: {\n        ...updatedState.campaign,\n        deck: upgradedDeck,\n      },\n    };\n    effects.push(`Upgraded ${numToUpgrade} card(s) in deck`);\n  }\n\n  // === Permanently Upgrade Cards in Hand ===\n  if (card.permanentlyUpgradeRandomCardsInHand) {\n    const numToUpgrade = Math.min(\n      card.permanentlyUpgradeRandomCardsInHand,\n      updatedState.combat.hand.length\n    );\n    const upgradedHand = permanentlyUpgradeRandomCardsInDeck(\n      updatedState.combat.hand,\n      numToUpgrade\n    );\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        hand: upgradedHand,\n      },\n    };\n    effects.push(`Upgraded ${numToUpgrade} card(s) in hand`);\n  }\n\n  // === Flat Damage ===\n  if (card.damage) {\n    const types =\n      Array.isArray(card.damageTypes) && card.damageTypes.length > 0\n        ? card.damageTypes\n        : [DAMAGE_TYPES.BUNNY];\n\n    updatedState = dealDamage(updatedState, card.damage, types);\n    effects.push(`Dealt ${card.damage} ${types.join(\"/\")} damage`);\n  }\n\n  // === Rolled Damage (e.g., Lightning) ===\n  if (\n    card.damageRoll &&\n    typeof card.damageRoll.dice === \"number\" &&\n    typeof card.damageRoll.sides === \"number\"\n  ) {\n    const { dice, sides, flatBonus = 0 } = card.damageRoll;\n    const damage = rollDice(dice, sides, flatBonus);\n\n    const types =\n      Array.isArray(card.damageTypes) && card.damageTypes.length > 0\n        ? card.damageTypes\n        : [DAMAGE_TYPES.BUNNY];\n\n    updatedState = dealDamage(updatedState, damage, types);\n\n    const typeList = types.join(\" & \");\n    effects.push(`Dealt ${damage} ${typeList} damage`);\n  }\n\n  /// === Upgrade on Cast (if applicable) ===\n  if (card.upgradesOnCast) {\n    const upgradedCard = upgradeCard(card, card.upgradesOnCast);\n\n    // === Update campaign deck with upgraded version\n    updatedState = upgradeSpecificCardInCampaignDeck(\n      updatedState,\n      card,\n      card.upgradesOnCast\n    );\n\n    const destination = upgradedCard.exileOnCast ? \"exile\" : \"graveyard\";\n    const updatedSpellbook = updatedState.combat.spellbook.filter(\n      (c) => c.name !== card.name\n    );\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        spellbook: updatedSpellbook,\n        [destination]: [...updatedState.combat[destination], upgradedCard],\n      },\n      trashpile: [...(updatedState.trashpile || []), card],\n      log: [`Cast ${card.name}: ${effects.join(\", \")}`, ...updatedState.log],\n    };\n\n    return checkCombatEndViaDeath(updatedState);\n  } else {\n    // === Move to Exile or Graveyard ===\n    const destination = card.exileOnCast ? \"exile\" : \"graveyard\";\n    const updatedSpellbook = updatedState.combat.spellbook.filter(\n      (c) => c.name !== card.name\n    );\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        spellbook: updatedSpellbook,\n        [destination]: [...updatedState.combat[destination], card],\n      },\n      trashpile: [...(updatedState.trashpile || []), card],\n      log: [`Cast ${card.name}: ${effects.join(\", \")}`, ...updatedState.log],\n    };\n\n    return checkCombatEndViaDeath(updatedState);\n  }\n}\n\nfunction combatEnd(state, context = {}) {\n  console.log(\">>> Entered combatEnd with context:\", context);\n\n  if (!state.combat || state.currentPhase === PHASES.COMBAT_END) {\n    return state; // Already ended or invalid\n  }\n\n  let updatedState = { ...state };\n  const result = context.result ?? \"loss\";\n  const victory = result === \"win\";\n  const enemy = updatedState.combat?.enemy;\n\n  // === Call relic triggers for COMBAT_END\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.COMBAT_END);\n\n  // === Handle victory\n  if (victory) {\n    const rewards = [\n      ...(updatedState.combat.rewards ?? []),\n      ...(enemy?.loot ?? []),\n    ];\n\n    if (enemy?.isBoss) {\n      const bossRelic = getRandomBossRelic();\n      if (bossRelic) rewards.push(bossRelic);\n    }\n\n    const defeatedEnemies = [...(updatedState.defeatedEnemies ?? []), enemy];\n\n    updatedState = {\n      ...updatedState,\n      defeatedEnemies,\n      offerings: {\n        ...updatedState.offerings,\n        combatRewards: rewards,\n      },\n    };\n\n    updatedState = checkGameOver(updatedState);\n  } else {\n    // === Handle defeat: take damage equal to enemy's remaining HP\n    const remainingEnemyHp = updatedState.combat?.enemyHp ?? 0;\n\n    if (enemy?.isBoss) {\n      // Immediate game over\n      updatedState = {\n        ...updatedState,\n        gameOverResult: \"loss\",\n        log: [\n          `☠️ You were defeated by ${enemy.name}. The journey ends here.`,\n          ...updatedState.log,\n        ],\n      };\n    } else {\n      if (remainingEnemyHp > 0) {\n        updatedState = takeDamage(updatedState, remainingEnemyHp, {\n          skipDeathCheck: true,\n        });\n        updatedState = {\n          ...updatedState,\n          log: [\n            `☠️ You were defeated by ${\n              enemy?.name ?? \"the enemy\"\n            } and took ${remainingEnemyHp} damage.`,\n            ...updatedState.log,\n          ],\n        };\n      } else {\n        updatedState = {\n          ...updatedState,\n          log: [\n            `☠️ You were defeated by ${enemy?.name ?? \"the enemy.\"}`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      updatedState = checkGameOver(updatedState);\n    }\n  }\n\n  // === Clean up combat state\n  const cleanedCombat = {\n    ...updatedState.combat,\n    spellbook: [],\n    hand: [],\n    graveyard: [],\n    bunnies: 0,\n  };\n\n  // === Determine next phase\n  let finalState = {\n    ...updatedState,\n    combat: cleanedCombat,\n  };\n\n  if (finalState.gameOverResult) {\n    finalState = advancePhaseTo(finalState, PHASES.GAME_OVER);\n    finalState = {\n      ...finalState,\n      log: [`🛑 Game Over: ${finalState.gameOverResult}`, ...finalState.log],\n    };\n  } else {\n    finalState = advancePhaseTo(finalState, PHASES.COMBAT_END);\n  }\n\n  return handlePhaseTransitions(finalState);\n}\n\nfunction closeCombatRewards(state) {\n  const hasUnclaimedLoot =\n    state.offerings?.combatRewards && state.offerings.combatRewards.length > 0;\n\n  // Optional: Log message about skipping loot\n  const logEntry = hasUnclaimedLoot\n    ? \"Skipped remaining combat loot.\"\n    : \"Combat complete.\";\n\n  const newState = {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      combatRewards: [], // clear the rewards\n    },\n    log: [logEntry, ...state.log],\n  };\n\n  const pathState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n  return handlePhaseTransitions(pathState);\n}\nfunction checkGameOver(state) {\n  const playerDead = state.health <= 0;\n  const defeatedBosses = (state.defeatedEnemies || []).filter(\n    (enemy) => enemy.isBoss\n  ).length;\n\n  if (playerDead) {\n    return {\n      ...state,\n      gameOverResult: \"loss\",\n    };\n  }\n\n  if (defeatedBosses >= 3) {\n    return {\n      ...state,\n      gameOverResult: \"victory\",\n    };\n  }\n\n  return state;\n}\n\nfunction gameOver(state, result) {\n  return {\n    ...state,\n    gameResult: result,\n    currentPhase: PHASES.GAME_OVER,\n    log: [`🛑 Game Over: ${result}`, ...state.log],\n  };\n}\nfunction exitShop(state) {\n  const cleanedState = {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: [], // Clear the shop\n    },\n    log: [\"🛒 Exited the shop.\", ...state.log],\n  };\n\n  // Use your phase transition helpers to change to the next phase\n  return handlePhaseTransitions(\n    advancePhaseTo(cleanedState, PHASES.PATH_SELECTION)\n  );\n}\n\nfunction rollDice(numDice, sidesPerDie, flatBonus = 0) {\n  let total = 0;\n  for (let i = 0; i < numDice; i++) {\n    total += Math.floor(Math.random() * sidesPerDie) + 1;\n  }\n  return total + flatBonus;\n}\n\nfunction upgradeSpecificCardInCampaignDeck(state, card, upgrades = 1) {\n  if (!state?.campaign?.deck || !Array.isArray(state.campaign.deck)) {\n    console.error(\"No valid campaign deck found in state.\");\n    return state;\n  }\n\n  const deck = [...state.campaign.deck];\n  const index = deck.findIndex((c) => c.name === card.name);\n\n  if (index === -1) {\n    console.warn(`Card not found in campaign deck: ${card.name}`);\n    return state;\n  }\n\n  deck[index] = upgradeCard(deck[index], upgrades);\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck,\n    },\n  };\n}\n\n//current bugs/fixes/additions.\n\n// if you start a new game after losing, it seems to carry on some of the previous game state. Make sure to completely clean the state.\n// game gets mega bugged if you continue to play after a defeat. Really double check the state cleanup.\n\n//render: inspect deck / combat deck / graveyard / exile should all dispaly the #of cards in brackets.\n\n//shop bugs\n//purchasing a gem doesn't remove it from the shop, so you can buy it multiple times.\n\n//downgrading cards doesn't affect the new fire and lightning mechanics - it should.\n\n//potion bugs\n// ponderous potion doesn't draw cards. (and should log)\n// bunny brew doesn't work. (and should log)\n// liquid enchantment behaves strangely - possibly not working.\n// squid brew shouldnt increase max ink.\n\n//relic bugs\n//discount voucher should act immediately on pickup as well as on shopfront load.\n//firemage's hat should reduce ink costs by 1, but it doesn't work correctly.\n//carrot staff doesn't round numbers; it can add 0.5 bunnies, which is weird.\n// lightning rod doesn't work - no cards drawn.\n// whetstone doesnt work if you buy things from shop.\n\n//bug with socketing naming (or at least displaying) - eg., Amber Bunnymancy +1 2d5+1 (checkinspect deck render as well as the naming logic, error could be in either place)\n\n//losing to bosses does't make you lose the game (it should, but it doesn't).\n\n//expanding the game\n//consider doubling enemy HP and adding +1 book to base state. Probably more fun.\n//consider a once-per-combat 'mulligan' button, allowing the player to craft the perfect spellbook or dig for their best card.\n//a relic to increase the mulligan count.\n// a mythic gem that makes a spell cost 1 less ink, be an instant, and exile on cast.\n// implement a 'gold hoarding matters' mythic that adds bunnies based on gold.\n// implement \"critical hit\" mechanics; cards, gems, and relics, plus three 'critical hit matters' mythics - one that boosts crit amounts,  one that increases crit chance, and one that gives crits to everything.\n// implement three boss abilties keyed to the boss name: 'downgrade all cards in enemy deck', '+1 ink cost to all enemy cards', and 'enemy loses 1 hp whenever they play a card'.\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}