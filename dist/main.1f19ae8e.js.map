{"version":3,"sources":["main.js"],"names":["Object","defineProperty","exports","value","SCREENS","PHASES","DIFFICULTIES","ACTIONS","changeScreen","returnToMain","selectDifficultyAndBeginGame","setupHotkeys","_excluded","_Object$freeze3","_toArray","r","_arrayWithHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableRest","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","e","t","Array","isArray","length","_n","F","s","n","done","f","TypeError","a","u","call","next","return","_objectWithoutProperties","i","_objectWithoutPropertiesLoose","getOwnPropertySymbols","indexOf","propertyIsEnumerable","hasOwnProperty","ownKeys","keys","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_slicedToArray","_iterableToArrayLimit","l","_toConsumableArray","_arrayWithoutHoles","_nonIterableSpread","_arrayLikeToArray","toString","slice","name","from","test","_toPropertyKey","configurable","writable","_toPrimitive","toPrimitive","String","Number","ENEMY_ABILITIES","freeze","INK_DRINK","INCREASE_HEALTH","HAND_SIZE_REDUCTION","ADD_PEBBLES","ADD_MERCURY","ADD_CLUTTER","DOWNGRADE_CARDS","DAMAGE_TYPES","BUNNY","FIRE","LIGHTNING","POISON","SPECIAL_CARD_SUBTYPES","CURSE","UNIQUE","STATUS","EASY","MEDIUM","HARD","TRIGGER_EVENTS","CARD_PICKUP","RELIC_PICKUP","POTION_PICKUP","DRINK_POTION","ASSIGN_SHOP_PRICES","REST","COMBAT_START","POPULATE_PATHS","SHUFFLE_GRAVEYARD_INTO_DECK","PLAY_CARD","CAST_SPELLBOOK","COMBAT_END","DEAL_DAMAGE","DRAW_CARD","PATHS","EASY_FIGHT","MEDIUM_FIGHT","HARD_FIGHT","BOSS_FIGHT","SHOP","RELIC_OFFERING","GEM_OFFERING","CARD_OFFERING","ENCHANT","POTION_OFFERING","HOARD","PURGE","TRANSMUTE","MAIN","DECK","SETTINGS","MOD","COMBAT_DECK","GRAVEYARD","EXILE","RARITIES","BASIC_POLY","BASIC_MONO","COMMON","UNCOMMON","RARE","MYTHIC","LEGENDARY","MAIN_MENU","DIFFICULTY_SELECTION","MYTHIC_RELIC_OFFERING","SOCKET_GEM","PATH_SELECTION","COMBAT","GAME_OVER","NEW_GAME","SET_DIFFICULTY","GENERATE_STARTER_DECK","APPLY_DIFFICULTY_MODIFIERS","ADVANCE_PHASE","LOG_MESSAGE","CREATE_CARD_INSTANCE","POPULATE_RELIC_OFFERINGS","PICK_RELIC","POPULATE_PATH_OFFERINGS","PICK_PATH","POPULATE_CARD_OFFERINGS","PICK_CARD","POPULATE_POTION_OFFERINGS","PICK_POTION","POPULATE_GEM_OFFERINGS","OPEN_MOD_SCREEN","APPLY_CARD_MOD","SCREEN_CHANGE","POPULATE_SHOPFRONT","INCREASE_BASE_BUNNIES","GAIN_GOLD","PRACTICE_WANDWORK","LOOT_HOARD","START_TURN","CARD_TYPES","INSTANT","SPELL","REST_OPTIONS","HEAL","PRACTICE","difficultyModifiersMap","maxHealthModifier","goldModifier","basicCardCountModifier","luckModifier","shopPriceMultiplierModifier","restHealthRestoreModifier","enemyHealthMultiplierModifier","pathMap","rarity","isFight","leadsTo","difficulty","SPECIAL","enemyAbilityDataMap","baseValue","incrementValue","description","prefix","cardList","cardType","inkCost","bunnyAdd","bunnyMult","goldAdd","permanentlyUpgradeRandomCardsInDeck","cardDraw","exileOnCast","inkAdd","goldAddPerCardInDeck","bunnyAddPerCardInDeck","permanentlyUpgradeRandomCardsInHand","healPerCardInDeck","damage","inkCostIncreasePerLevel","damageMultiplierPerLevel","damageTypes","upgradesOnCast","damageRoll","dice","sides","flatBonus","heal","weakenEnemyHpPercent","unupgradable","unsocketable","uncastable","specialSubtype","gemList","relicList","triggers","bonusPages","bonusBaseBunnies","bonusHealth","BonusMulligans","bonusBooks","bonusInk","upgradeCard","bonusGold","upgradePotion","healPlayer","revealAnonymousPaths","nonDuplicable","bossOnly","damageTypeTrigger","multiplyDamage","ifLightningDrawCards","bonusHandSize","potionList","healthRestore","drinkableOutOfCombat","increaseMaxHp","capitalize","word","charAt","toUpperCase","shuffleArray","originalArray","array","j","Math","floor","random","_ref","weightedRandomChoice","weightedMap","entries","totalWeight","reduce","sum","_ref2","_ref3","_","weight","cumulative","_i","_entries","_entries$_i","key","dispatch","screen","type","payload","inspectDeck","inspectCombatDeck","inspectGraveyard","inspectExile","anonymizeObject","obj","anonymousNameDisplay","paths","map","path","rest","getShopPriceMultiplier","state","relicBelt","multiplier","relic","_relic$triggers","effect","shopPriceMultiplier","purgeCard","card","console","error","updatedDeck","campaign","deck","c","updatedTrash","concat","trashPile","log","initializeCombatPhase","_state$level","_state$stage","_state$campaign$mulli","_state$baseBunnies","level","stage","modifyEnemyAbilityPower","_ref4","currentValue","enemy","generateEnemy","deepDeckCopy","JSON","parse","stringify","shuffledDeck","newCombat","enemyHp","hp","hand","graveyard","exile","mulligans","ink","maxInk","books","maxBooks","pages","maxPages","handSize","baseBunnies","bunnies","combatEnded","newState","combat","checkRelicTriggers","checkEnemyTriggers","startTurn","triggerEvent","context","undefined","damageType","updatedState","result","_relic$triggers2","_updatedState$offerin","newHealth","health","newMaxHealth","maxHealth","reduceInkCostOfFireCardsInDeck","modifiedCount","includes","max","unshift","_campaign$mulligans","gainGold","increaseBaseBunnies","numToUpgrade","min","currentPhase","offerings","shopfront","newMultiplier","updatedShopfront","entry","_item$rarity","_item$rarity$toLowerC","item","basePrices","potion","gem","rarityMultipliers","common","uncommon","rare","mythic","legendary","basePrice","upgrades","upgradeCost","toLowerCase","rarityMultiplier","price","round","_iterator","_step","_relic$triggers3","allTriggerKeys","isLightning","drawCard","upgraded","warn","weakenEnemyByPercent","cardToUpgrade","currentPaths","pickedCard","err","_updatedState$combat","abilities","logMessages","amount","newMaxInk","newInk","downgradable","undowngradable","shuffled","sort","toDowngrade","downgradeCard","addCardToCombatDeck","modifyCombatInk","_state$combat$ink","_state$combat","_state$combat$maxInk","_state$combat2","current","actualChange","healedAmount","generateStarterDeck","modifiers","basicMonoCards","_iterator2","_step2","createCardInstance","basicPolyCards","_iterator3","_step3","generateRandomCard","chargeGoldPrice","gold","cardName","_state$combat3","base","find","newCard","combatDeck","insertIndex","splice","assignShopPrices","globalMultiplier","_item$rarity2","_item$rarity2$toLower","applyDifficultyModifiers","basicCardCount","luck","restHealthRestore","enemyHealthMultiplier","advancePhaseTo","phaseAdvancedTo","values","handlePhaseTransitions","phase","populatePathOfferings","populateCardOfferings","populateRelicOfferings","populatePotionOfferings","populateGemOfferings","populateShopfront","currentPath","pickPath","index","_state$level2","chosenPath","pathKey","pathData","newCards","_loop","some","existing","_ret","cards","selectedPotions","usedNames","Set","attempts","generateRandomPotion","has","add","potions","selected","maxRelics","_loop2","generateRandomRelic","relics","selectedGems","generateRandomGem","gems","_state$campaign$deck","_state$campaign$deck2","_triggerResult$result","misery","bossPath","fightWeights","fightPathKey","fightPath","allPaths","_ref5","_ref6","_ref7","_ref8","data","bossLevels","isBossLevel","allCardsSocketed","every","allCardsUnupgradable","filteredPaths","pathObj","rarityWeights","getLuckAdjustedRarityWeights","chosenRarities","chosenPaths","usedPaths","_loop3","_chosenRarities","_i5","candidates","p","pick","remainingPool","idx","firstTwoAreFights","finalPaths","newMisery","thirdOptions","nonFights","fights","weightedPool","allFights","shopIndex","findIndex","replaceableOptions","ENCHANT_OFFERING","existingPaths","replacements","replacement","replacementData","anonChance","anonIndex","pathsAfterAnonymize","triggerResult","updatedPaths","_iterator4","_step4","pickCard","sourceArrayName","combatRewards","sourceArray","_entry$item","charged","upgradedCard","updatedCampaign","updatedOfferings","trashed","pickRelic","pickedRelic","_entry$item$price","_entry$item2","relicPrice","chargedState","isOfferingPhase","updatedTrashPile","triggeredState","pickPotion","_offerings$combatRewa","pickedPotion","_entry$item$price2","_entry$item3","triggeredPotion","updatedPotionBelt","potionBelt","drinkPotion","upgradeCardsInHand","upgradable","toUpgrade","newHand","addBunnies","multiplyBunnies","belt","newPotionBelt","newTrash","triggered","openModScreen","mod","_state$offerings$gems","originPhase","validKeys","chosenGemName","discardedGems","g","updatedRewards","reward","_mod$gem$price","_mod$gem","currentScreen","modData","origin","newAmount","applyModToCard","_state$modData","_state$modData2","cardIndex","modifiedCard","upgrade","socketCardWithGem","purge","transmute","transmuteCard","nextPhase","shopfrontTypes","previousItems","discardedItems","typeCounts","_i6","_Object$entries","_Object$entries$_i","count","generatedItems","usedKeys","_i7","_shopfrontTypes","attempt","newGold","practiceWandwork","lootHoard","_state$defeatedEnemie","baseGold","levelBonus","enemiesDefeated","defeatedEnemies","enemyBonus","luckBonus","totalGold","hoardsLooted","amountToHeal","currentHealth","msg","startsWith","toggleDeckInspect","isInspectingDeck","returnTo","previousScreen","createInitialState","spellbook","difficulties","restOptions","createGameApp","initialState","reducer","renderFn","action","found","createRelicInstance","relicName","createPotionInstance","potionName","createGemInstance","gemName","getRandomBossRelic","bossRelics","chosen","_ref9","_ref9$rarity","ownedRelics","HEARTSTONE","filtered","_state$level3","_state$defeatedEnemie2","_ref0","_ref0$rarity","_ref0$upgrades","_ref0$gem","finalRarity","totalFortune","upgradeWeights","finalUpgrades","defeatedCount","maxUpgrades","cappedUpgrades","_state$level4","_ref1","_ref1$rarity","_ref1$upgrades","basePotion","_ref10","_ref10$rarity","fallbackGem","chosenGem","healthCost","pow","baseName","replace","_upgradedCard$damageR","_upgradedCard$damageR2","_upgradedCard$damageR3","downgradedCard","originalLevel","newLevel","levelDiff","applyHalvedBase","ceil","_downgradedCard$damag","_downgradedCard$damag2","_downgradedCard$damag3","upgradedPotion","socketedCard","upgradeLevel","applyEffect","baseAmount","perUpgrade","_iterator5","_step5","dmgType","_socketedCard$damageR","_socketedCard$damageR2","_socketedCard$damageR3","gemRoll","baseDice","baseSides","baseBonus","nameSuffix","_socketedCard$damageR4","excludedSubtypes","alternatives","unchoosableByTransmute","newBase","_pathMap$path$path","_state$level5","_state$stage2","_state$enemyHealthMul","_baseHealthMap$diffic","_perLevelIncrement$di","_perStageMultiplier$s","isBoss","baseHealthMap","easy","medium","hard","boss","perLevelIncrement","perStageMultiplier","increment","stageMultiplier","allAbilities","selectedAbilities","numAbilities","_state$luck","bonusChance","size","ability","_iterator6","_step6","_data$baseValue","_data$incrementValue","_state$stage3","enemyLevel","smallMonsters","mediumMonsters","largeMonsters","vegetables","bossNames","_state$defeatedEnemie3","defeated","remainingBosses","monsterList","vegetable","monster","prefixes","_enemyAbilityDataMap$","Boolean","join","loot","generateEnemyLoot","_state$luck2","_state$level6","_state$campaign$deck3","_state$campaign","allGemmedOrUnsocketable","weights","dropsRemaining","chanceTwo","chanceThree","usedTypes","guaranteedGold","bossRelic","available","_ref12","_ref13","_ref14","_ref15","w","roll","_iterator7","_step7","_step7$value","_easy$medium$hard$dif","goldAmount","_card$name","_relic$name","color","numUpgrades","upgradableCards","upgradedCards","gameReducer","_action$payload","potionIndex","potionToDrink","CLOSE_COMBAT_REWARDS","closeCombatRewards","MULLIGAN","mulligan","CLAIM_GOLD_REWARD","_action$payload2","newRewards","playCard","castSpellbook","EXIT_SHOP","exitShop","window","onload","render","document","onkeydown","_state$offerings$path","_state$offerings$comb","isPathSelection","parseInt","isNaN","isCombat","_state$combat$mulliga","_state$combat4","_state$combat$hand","_card$inkCost","preventDefault","toggleCombatInspect","relicIndex","isCombatEnd","_state$offerings$comb2","_state$combat$baseBun","newBook","fill","refillInkpot","shuffleGraveyardIntoDeck","_state$combat$graveya","_state$combat5","_state$combat$deck","_state$combat6","combinedDeck","checkCombatEndViaDeath","_state$combat$maxInk2","_state$combat7","_state$combat8","playerDead","enemyDead","combatEnd","currentCombat","takeDamage","skipDeathCheck","_currentCombat$deck","drawnCard","remainingDeck","checkCardTriggers","_card$triggers","_state$combat$bunnies","_state$combat$bunnies2","dmg","_options$skipDeathChe","options","trace","dealDamage","_options$isBonus","isBonus","newEnemyHp","_iterator8","_step8","checkGameOver","_card$inkCost2","resolveSpell","firstBlank","_updatedState$combat2","_iterator9","_step9","releaseBunnies","_state$combat$bunnies3","bunnyDamage","endTurn","remainingHand","updatedGraveyard","effects","deckSize","bunnyAmount","healAmount","upgradedDeck","upgradedHand","_updatedState$combat$","percent","baseHp","poisonDamage","types","_card$damageRoll","_card$damageRoll$flat","rollDice","typeList","upgradeSpecificCardInCampaignDeck","destination","updatedSpellbook","trashpile","_context$result","_updatedState$combat3","victory","_updatedState$combat$2","_enemy$loot","_updatedState$defeate","rewards","_updatedState$stage","newStage","gameOverResult","_enemy$maxHp","_updatedState$combat$3","_updatedState$combat4","enemyMaxHp","maxHp","enemyCurrentHp","remainingEnemyHp","_enemy$name","_enemy$name2","cleanedCombat","finalState","_state$offerings","hasUnclaimedLoot","logEntry","pathState","defeatedBosses","gameOver","gameResult","cleanedState","numDice","sidesPerDie","total","_state$campaign2","_state$combat9","_state$campaign$deck4","_state$level7","_state$modData3","output","getElementById","createElement","id","body","appendChild","innerHTML","renderCardList","title","section","ul","li","textContent","renderModPhaseEntry","label","modKey","modBtn","style","fontSize","padding","onclick","disabled","info","acc","_ref16","_ref17","isCombatInspectScreen","combatSection","border","margin","_state$combat0","_state$combat$mulliga2","_state$combat1","enemyBox","display","justifyContent","alignItems","fontWeight","marginBottom","nameSpan","hpSpan","gap","page","pageDiv","width","height","backgroundColor","spellbookLabel","castRow","allPagesBlank","castButton","bunnyDisplay","mulliganBtn","remaining","cursor","resourcesRow","inkDisplay","booksDisplay","handRow","flexWrap","_card$inkCost3","cardBtn","cardCost","canAfford","isUncastable","costText","opacity","empty","handLabel","inspectRow","marginTop","_ref18","btn","inspectZoneLabel","_state$combat10","_state$combat11","_state$combat12","button","relicSection","pathSection","cardSection","potionSection","gemSection","shopSection","list","_entry$item$price3","_entry$item4","_state$gold","playerGold","isGem","exitBtn","modSection","isGemMod","restBtn","practiceBtn","_state$offerings2","combatEndSection","rewardSection","shouldDisable","gameOverSection","classList","banner","summary","newGameBtn","deckBtn","nextScreen","deckView","beltSection","isCombatPhase","isGameOver","isDrinkableNow"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n\n//#region enums\nconst ENEMY_ABILITIES = Object.freeze({\n  INK_DRINK: \"inkDrink\",\n  INCREASE_HEALTH: \"increaseHealth\",\n  HAND_SIZE_REDUCTION: \"handSizeReduction\",\n  ADD_PEBBLES: \"addOnePebble\",\n  ADD_MERCURY: \"addTwoMercury\",\n  ADD_CLUTTER: \"addThreeClutter\",\n  DOWNGRADE_CARDS: \"downgradeCards\",\n});\nconst DAMAGE_TYPES = Object.freeze({\n  BUNNY: \"Bunny\",\n  FIRE: \"Fire\",\n  LIGHTNING: \"Lightning\",\n  POISON: \"Poison\",\n});\nconst SPECIAL_CARD_SUBTYPES = Object.freeze({\n  CURSE: \"curse\",\n  UNIQUE: \"unique\",\n  STATUS: \"status\",\n});\nexport const DIFFICULTIES = Object.freeze({\n  EASY: \"easy\",\n  MEDIUM: \"medium\",\n  HARD: \"hard\",\n});\nconst TRIGGER_EVENTS = Object.freeze({\n  CARD_PICKUP: \"CARD_PICKUP\",\n  RELIC_PICKUP: \"RELIC_PICKUP\",\n  POTION_PICKUP: \"POTION_PICKUP\",\n  DRINK_POTION: \"DRINK_POTION\",\n  ASSIGN_SHOP_PRICES: \"ASSIGN_SHOP_PRICES\",\n  REST: \"REST\",\n  COMBAT_START: \"COMBAT_START\",\n  POPULATE_PATHS: \"POPULATE_PATHS\",\n  SHUFFLE_GRAVEYARD_INTO_DECK: \"SHUFFLE_GRAVEYARD_INTO_DECK\",\n  PLAY_CARD: \"PLAY_CARD\",\n  CAST_SPELLBOOK: \"CAST_SPELLBOOK\",\n  COMBAT_END: \"COMBAT_END\",\n  DEAL_DAMAGE: \"DEAL_DAMAGE\",\n  DRAW_CARD: \"DRAW_CARD\",\n});\nconst PATHS = Object.freeze({\n  EASY_FIGHT: \"Easy Fight\",\n  MEDIUM_FIGHT: \"Medium Fight\",\n  HARD_FIGHT: \"Hard Fight\",\n  BOSS_FIGHT: \"Boss Fight\",\n  REST: \"Rest\",\n  SHOP: \"Shop\",\n  RELIC_OFFERING: \"Relic Offering\",\n  GEM_OFFERING: \"Gem Offering\",\n  CARD_OFFERING: \"Card Offering\",\n  ENCHANT: \"Enchant\",\n  POTION_OFFERING: \"Potion Offering\",\n  HOARD: \"Hoard\",\n  PURGE: \"Purge\",\n  TRANSMUTE: \"Transmute\",\n});\nexport const SCREENS = Object.freeze({\n  MAIN: \"main view\",\n  DECK: \"inspect deck\",\n  SETTINGS: \"settings\",\n  MOD: \"modscreen\",\n  COMBAT_DECK: \"combat deck\",\n  GRAVEYARD: \"graveyard\",\n  EXILE: \"exile\",\n});\nconst RARITIES = Object.freeze({\n  BASIC_POLY: \"basic-poly\", // basic poly cards, several of which go in the starter deck.\n  BASIC_MONO: \"basic-mono\", // basic mono cards, only one goes in the starter deck.\n  COMMON: \"common\",\n  UNCOMMON: \"uncommon\",\n  RARE: \"rare\",\n  MYTHIC: \"mythic\",\n  LEGENDARY: \"legendary\",\n});\nexport const PHASES = Object.freeze({\n  MAIN_MENU: \"main menu\",\n  DIFFICULTY_SELECTION: \"difficulty selection\",\n  MYTHIC_RELIC_OFFERING: \"mythic relic offering\",\n  RELIC_OFFERING: \"relic offering\",\n  CARD_OFFERING: \"card offering\",\n  GEM_OFFERING: \"gem offering\",\n  POTION_OFFERING: \"potion offering\",\n  COMBAT_END: \"combat end\",\n  SOCKET_GEM: \"socket gem\",\n  SHOP: \"shop\",\n  PATH_SELECTION: \"path selection\",\n  REST: \"rest\",\n  ENCHANT: \"ENCHANT\",\n  TRANSMUTE: \"transmute\",\n  COMBAT: \"combat\",\n  GAME_OVER: \"game over\",\n  PURGE: \"purge\",\n  HOARD: \"hoard\",\n});\nexport const ACTIONS = Object.freeze({\n  NEW_GAME: \"NEW_GAME\",\n  SET_DIFFICULTY: \"SET_DIFFICULTY\",\n  GENERATE_STARTER_DECK: \"GENERATE_STARTER_DECK\",\n  APPLY_DIFFICULTY_MODIFIERS: \"APPLY_DIFFICULTY_MODIFIERS\",\n  ADVANCE_PHASE: \"ADVANCE_PHASE\",\n  LOG_MESSAGE: \"LOG_MESSAGE\",\n  CREATE_CARD_INSTANCE: \"CREATE_CARD_INSTANCE\",\n  POPULATE_RELIC_OFFERINGS: \"POPULATE_RELIC_OFFERINGS\",\n  PICK_RELIC: \"PICK_RELIC\",\n  POPULATE_PATH_OFFERINGS: \"POPULATE_PATH_OFFERINGS\",\n  PICK_PATH: \"PICK_PATH\",\n  POPULATE_CARD_OFFERINGS: \"POPULATE_CARD_OFFERINGS\",\n  PICK_CARD: \"PICK_CARD\",\n  POPULATE_POTION_OFFERINGS: \"POPULATE_POTION_OFFERINGS\",\n  PICK_POTION: \"PICK_POTION\",\n  DRINK_POTION: \"DRINK_POTION\",\n  POPULATE_GEM_OFFERINGS: \"POPULATE_GEM_OFFERINGS\",\n  OPEN_MOD_SCREEN: \"OPEN_MOD_SCREEN\",\n  APPLY_CARD_MOD: \"APPLY_CARD_MOD\",\n  SCREEN_CHANGE: \"SCREEN_CHANGE\",\n  POPULATE_SHOPFRONT: \"POPULATE_SHOPFRONT\",\n  INCREASE_BASE_BUNNIES: \"INCREASE_BASE_BUNNIES\",\n  GAIN_GOLD: \"GAIN_GOLD\",\n  PRACTICE_WANDWORK: \"PRACTICE_WANDWORK\",\n  LOOT_HOARD: \"LOOT_HOARD\",\n  REST: \"REST\",\n  START_TURN: \"START_TURN\",\n  DRAW_CARD: \"DRAW_CARD\", // triggered when a card is drawn\n  PICK_CARD: \"PICK_CARD\", // triggered when a card is added to your deck\n  CLOSE_COMBAT_REWARDS: \"CLOSE_COMBAT_REWARDS\",\n  CLAIM_GOLD_REWARD: \"CLAIM_GOLD_REWARD\",\n  PLAY_CARD: \"PLAY_CARD\", // triggered when a card is played\n  CAST_SPELLBOOK: \"CAST_SPELLBOOK\", // triggered when the spellbook is cast\n  EXIT_SHOP: \"EXIT_SHOP\",\n  MULLIGAN: \"MULLIGAN\",\n});\nconst CARD_TYPES = Object.freeze({\n  INSTANT: \"instant\", // resolves immediately when played, does not go to the spellbook.\n  SPELL: \"spell\", // goes to the spellbook when played, resolves when the spellbook is cast.\n  CURSE: \"curse\", // negative card that can be removed or purged.\n  STATUS: \"status\", // temporary effect card, like a buff or debuff.\n});\nconst REST_OPTIONS = Object.freeze({\n  HEAL: \"heal\",\n  PRACTICE: \"practice\",\n  ENCHANT: \"enchant\",\n});\n//#endregion enums\n//#region data maps\nconst difficultyModifiersMap = Object.freeze({\n  [DIFFICULTIES.EASY]: {\n    maxHealthModifier: 100,\n    goldModifier: 20,\n    basicCardCountModifier: 5,\n    luckModifier: 2,\n    shopPriceMultiplierModifier: -0.2, // 20% cheaper shop prices\n    restHealthRestoreModifier: 30, // heal 30 health when resting\n    enemyHealthMultiplierModifier: -0.2, // 20% less health for enemies\n  },\n  [DIFFICULTIES.MEDIUM]: {\n    maxHealthModifier: 75,\n    goldModifier: 10,\n    basicCardCountModifier: 8,\n    luckModifier: 1,\n    shopPriceMultiplierModifier: 0, // normal shop prices\n    restHealthRestoreModifier: 25, // heal 20 health when resting\n    enemyHealthMultiplierModifier: 0,\n  },\n  [DIFFICULTIES.HARD]: {\n    maxHealthModifier: 50,\n    goldModifier: 0,\n    basicCardCountModifier: 11,\n    luckModifier: 0,\n    shopPriceMultiplierModifier: 0.2, // 20% more expensive shop prices\n    restHealthRestoreModifier: 20, // heal 20 health when resting\n    enemyHealthMultiplierModifier: 0.2, // 20% more health for enemies\n  },\n});\nconst pathMap = Object.freeze({\n  [PATHS.EASY_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.EASY,\n  },\n  [PATHS.MEDIUM_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.MEDIUM,\n  },\n  [PATHS.HARD_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.HARD,\n  },\n  [PATHS.BOSS_FIGHT]: {\n    rarity: RARITIES.SPECIAL,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: \"boss\",\n  },\n  [PATHS.REST]: { rarity: RARITIES.UNCOMMON, leadsTo: PHASES.REST },\n  [PATHS.SHOP]: { rarity: RARITIES.UNCOMMON, leadsTo: PHASES.SHOP },\n  [PATHS.RELIC_OFFERING]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.RELIC_OFFERING,\n  },\n  [PATHS.GEM_OFFERING]: { rarity: RARITIES.RARE, leadsTo: PHASES.GEM_OFFERING },\n  [PATHS.CARD_OFFERING]: {\n    rarity: RARITIES.UNCOMMON,\n    leadsTo: PHASES.CARD_OFFERING,\n  },\n  [PATHS.ENCHANT]: { rarity: RARITIES.RARE, leadsTo: PHASES.ENCHANT },\n  [PATHS.POTION_OFFERING]: {\n    rarity: RARITIES.RARE,\n    leadsTo: PHASES.POTION_OFFERING,\n  },\n  [PATHS.HOARD]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.HOARD,\n  },\n  [PATHS.PURGE]: { rarity: RARITIES.RARE, leadsTo: PHASES.PURGE },\n  [PATHS.TRANSMUTE]: { rarity: RARITIES.RARE, leadsTo: PHASES.TRANSMUTE },\n});\nconst enemyAbilityDataMap = {\n  [ENEMY_ABILITIES.INK_DRINK]: {\n    baseValue: 1,\n    incrementValue: 1,\n    description: \"Reduces player's ink at combat start\",\n    prefix: \"Inkdrinking\",\n  },\n  [ENEMY_ABILITIES.INCREASE_HEALTH]: {\n    baseValue: 1.5,\n    incrementValue: 0.5,\n    description: \"Increases enemy HP\",\n    prefix: \"Tanky\",\n  },\n  [ENEMY_ABILITIES.HAND_SIZE_REDUCTION]: {\n    baseValue: 2,\n    incrementValue: 1,\n    description: \"Reduces player's hand size at combat start\",\n    prefix: \"Maddening\",\n  },\n  [ENEMY_ABILITIES.ADD_PEBBLES]: {\n    baseValue: 1,\n    incrementValue: 2,\n    description: \"Adds Sisyphus' Pebble to your deck at combat start\",\n    prefix: \"Sisyphean\",\n  },\n  [ENEMY_ABILITIES.ADD_MERCURY]: {\n    baseValue: 2,\n    incrementValue: 2,\n    description: \"Adds Mercury Droplets to your deck at combat start\",\n    prefix: \"Mercurial\",\n  },\n  [ENEMY_ABILITIES.ADD_CLUTTER]: {\n    baseValue: 3,\n    incrementValue: 2,\n    description: \"Adds Clutter cards to your deck at combat start\",\n    prefix: \"Messy\",\n  },\n  [ENEMY_ABILITIES.DOWNGRADE_CARDS]: {\n    baseValue: 3,\n    incrementValue: 2,\n    description: \"Downgrades random cards in your combat deck at combat start\",\n    prefix: \"Withering\",\n  },\n};\n\n//#endregion data maps\n//#region data arrays of game objects\nconst cardList = [\n  {\n    name: \"Bunnymancy\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    inkCost: 1,\n    bunnyAdd: 6,\n  },\n  {\n    name: \"Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    inkCost: 1,\n    bunnyMult: 2,\n  },\n  {\n    name: \"Fairy Gold\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    inkCost: 1,\n    goldAdd: 8,\n  },\n  {\n    name: \"Enchant Bookshelf\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    inkCost: 1,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ponder\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    cardDraw: 3,\n    exileOnCast: true,\n  },\n  {\n    name: \"Inkswell\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 1,\n    inkAdd: 2,\n    exileOnCast: true,\n  },\n  {\n    name: \"Cloudfluff Conjuration\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 0,\n    bunnyAdd: 8,\n  },\n  {\n    name: \"Cloudfluff Boon\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    inkCost: 0,\n    bunnyAdd: 4,\n    exileOnCast: true,\n  },\n  {\n    name: \"Midas Touch\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    inkCost: 1,\n    goldAddPerCardInDeck: 1,\n  },\n  // {\n  //   name: \"Enchant Library\",\n  //   cardType: CARD_TYPES.SPELL,\n  //   rarity: RARITIES.RARE,\n  //   inkCost: 2,\n  //   permanentlyUpgradeRandomCardsInDeck: 3,\n  // },\n  {\n    name: \"Dusk Lotus\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    inkCost: 0,\n    inkAdd: 3,\n    exileOnCast: true,\n  },\n  {\n    name: \"Weasel's Bargain\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 0,\n    goldAdd: 8,\n    exileOnCast: true,\n  },\n  {\n    name: \"Carrot Festival\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    bunnyAddPerCardInDeck: 1,\n  },\n  {\n    name: \"Mega Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 2,\n    bunnyMult: 3.5,\n  },\n  {\n    name: \"Enchant Fingertips\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 1,\n    permanentlyUpgradeRandomCardsInHand: 1,\n    exileOnCast: true,\n  },\n  {\n    name: \"Healing Light\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    inkCost: 1,\n    healPerCardInDeck: 1,\n  },\n  // {\n  //   name: \"Enchant Hands\",\n  //   cardType: CARD_TYPES.INSTANT,\n  //   rarity: RARITIES.RARE,\n  //   inkCost: 2,\n  //   permanentlyUpgradeRandomCardsInHand: 7,\n  // },\n  {\n    name: \"Wisdom of the Warrens\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    inkCost: 0,\n    cardDraw: 1,\n    exileOnCast: true,\n  },\n  {\n    name: \"Magic Missile\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    damage: 6,\n    inkCostIncreasePerLevel: 1,\n    damageMultiplierPerLevel: 2,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n  },\n  {\n    name: \"Fireball\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 3,\n    damage: 30,\n    inkCostIncreasePerLevel: 1,\n    damageMultiplierPerLevel: 2,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n  },\n  {\n    name: \"Lightning Bolt 1d4\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    upgradesOnCast: 1,\n    exileOnCast: true,\n    damageTypes: [DAMAGE_TYPES.LIGHTNING],\n    damageRoll: {\n      dice: 1,\n      sides: 4,\n      flatBonus: 0,\n    },\n  },\n  {\n    name: \"Thunderstrike 2d2\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 2,\n    upgradesOnCast: 2,\n    exileOnCast: true,\n    damageTypes: [DAMAGE_TYPES.LIGHTNING],\n    damageRoll: {\n      dice: 2,\n      sides: 2,\n      flatBonus: 0,\n    },\n  },\n  {\n    name: \"Vampire Bunnies\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    inkCost: 1,\n    heal: 5,\n    bunnyAdd: 5,\n  },\n  {\n    name: \"Weaken\",\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 1,\n    cardType: CARD_TYPES.SPELL,\n    damageTypes: [DAMAGE_TYPES.POISON],\n    weakenEnemyHpPercent: 0.15, // 15% max HP as bonus poison damage\n  },\n  // === Curses ===\n  {\n    name: \"Sisyphus' Pebble\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    uncastable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    // No effect; added to deck via events, not in loot pool\n  },\n  {\n    name: \"Clutter\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    uncastable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    // Added to combat deck by enemies; no effect\n  },\n  {\n    name: \"Mirage\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    inkCost: 0,\n    exileOnCast: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n  },\n  {\n    name: \"Mercury Droplet\",\n    cardType: CARD_TYPES.INSTANT,\n    inkCost: 1,\n    unupgradable: true,\n    unsocketable: true,\n    exileOnCast: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n  },\n];\nconst gemList = [\n  {\n    name: \"Amethyst\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 3,\n  },\n  {\n    name: \"Lapis Lazuli\",\n    rarity: RARITIES.COMMON,\n    bunnyMult: 1.5,\n  },\n  // {\n  //   name: \"Sapphire\",\n  //   rarity: RARITIES.UNCOMMON,\n  //   cardDrawOnDraw: 1,\n  // },\n  {\n    name: \"Topaz\",\n    rarity: RARITIES.COMMON,\n    goldAdd: 7,\n  },\n  {\n    name: \"Jet\",\n    rarity: RARITIES.RARE,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ruby\",\n    rarity: RARITIES.RARE,\n    damage: 5,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n    damageMultiplierPerLevel: 2,\n  },\n  // {\n  //   name: \"Amber\",\n  //   rarity: RARITIES.MYTHIC,\n  //   damageRoll: {\n  //     dice: 1,\n  //     sides: 4,\n  //     flatBonus: 0,\n  //   },\n  //   upgradesOnCast: 1,\n  //   damageTypes: [DAMAGE_TYPES.LIGHTNING],\n  // },\n  {\n    name: \"Moonstone\",\n    rarity: RARITIES.UNCOMMON,\n    heal: 10,\n  },\n  {\n    name: \"Emerald\",\n    rarity: RARITIES.UNCOMMON,\n    weakenEnemyHpPercent: 0.1, // Deals bonus damage equal to 10% of enemy max HP\n    damageTypes: [DAMAGE_TYPES.POISON],\n  },\n];\nconst relicList = [\n  {\n    name: \"Magic Scroll\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusPages: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Wand\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBaseBunnies: 3,\n      },\n    },\n  },\n  // {\n  //   name: \"Fabergé Egg\",\n  //   rarity: RARITIES.COMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       bonusGold: 100,\n  //     },\n  //   },\n  // },\n  {\n    name: \"Heartstone\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHealth: 50,\n      },\n    },\n  },\n  {\n    name: \"Cowbell\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        BonusMulligans: 1,\n      },\n    },\n  },\n  // {\n  //   // fix to reduce damage taken on combat loss.\n  //   name: \"Protective Amulet\",\n  //   rarity: RARITIES.UNCOMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       bonusHealth: 10,\n  //     },\n  //   },\n  // },\n  {\n    name: \"Encyclopedia\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n      },\n    },\n  },\n  {\n    name: \"Inkpot\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 2,\n      },\n    },\n  },\n  {\n    name: \"Cardsleeves\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        permanentlyUpgradeRandomCardsInDeck: 5,\n      },\n    },\n  },\n  // {\n  //   name: \"Magic Quill\",\n  //   rarity: RARITIES.LEGENDARY,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       bonusInk: 2,\n  //     },\n  //   },\n  // },\n  // {\n  //   name: \"Gold Bag\",\n  //   rarity: RARITIES.BASIC_POLY,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       bonusGold: 25,\n  //     },\n  //   },\n  // },\n  {\n    name: \"Whetstone\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        upgradeCard: true,\n      },\n    },\n  },\n  {\n    name: \"Porcelain Koi\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        bonusGold: 5,\n        bonusHealth: 20,\n      },\n    },\n  },\n\n  {\n    name: \"Witch's Cauldron\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.POTION_PICKUP]: {\n        upgradePotion: true,\n      },\n    },\n  },\n  {\n    name: \"Glittering Vial\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.DRINK_POTION]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  // {\n  //   name: \"Discount Voucher\",\n  //   rarity: RARITIES.COMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.ASSIGN_SHOP_PRICES]: {\n  //       shopPriceMultiplier: 0.8, // 20% cheaper shop prices\n  //     },\n  //   },\n  // },\n  // {\n  //   name: \"Sleeping Bag\",\n  //   rarity: RARITIES.COMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.REST]: {\n  //       healPlayer: 50,\n  //     },\n  //   },\n  // },\n  // {\n  //   name: \"Toothfairy's Charm\",\n  //   rarity: RARITIES.COMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.REST]: {\n  //       goldAdd: 50,\n  //     },\n  //   },\n  // },\n  // {\n  //   name: \"Planetarium Mobile\",\n  //   rarity: RARITIES.UNCOMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.REST]: {\n  //       permanentlyUpgradeRandomCardsInDeck: 2, // upgrade random cards in the deck when resting\n  //     },\n  //   },\n  // },\n  {\n    name: \"Dousing Rod\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.POPULATE_PATHS]: {\n        revealAnonymousPaths: true,\n      },\n    },\n    nonDuplicable: true,\n  },\n  {\n    name: \"Gem of Weakness\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.COMBAT_START]: {\n        weakenEnemyHpPercent: 0.1, // 10% reduction\n      },\n    },\n  },\n  {\n    name: \"Phylactery\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.SHUFFLE_GRAVEYARD_INTO_DECK]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Crystal Ball\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.DRAW_CARD]: {\n        bunnyAdd: 1,\n      },\n    },\n  },\n  {\n    name: \"Arcane Brush\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.PLAY_CARD]: {\n        bunnyAdd: 2,\n      },\n    },\n  },\n  {\n    name: \"Golden Carrot\",\n    rarity: RARITIES.LEGENDARY,\n    bossOnly: true,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n        bonusPages: 1,\n        bonusInk: 1,\n      },\n    },\n  },\n  {\n    name: \"Voynich Manuscript\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.CAST_SPELLBOOK]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Corsair's Coin\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.COMBAT_END]: {\n        goldAdd: 25,\n      },\n    },\n  },\n  {\n    name: \"Carrot Staff\",\n    rarity: RARITIES.MYTHIC,\n    description: \"increases all Bunny damage you deal.\",\n    triggers: {\n      [TRIGGER_EVENTS.DEAL_DAMAGE]: {\n        damageTypeTrigger: DAMAGE_TYPES.BUNNY,\n        multiplyDamage: 1.5,\n      },\n    },\n  },\n  {\n    name: \"Lightning Rod\",\n    rarity: RARITIES.MYTHIC,\n    description: \"Whenever you cast a Lightning spell, draw 2 cards.\",\n    triggers: {\n      [TRIGGER_EVENTS.PLAY_CARD]: {\n        ifLightningDrawCards: 2,\n      },\n    },\n  },\n  // {\n  //   name: \"Firemage's Hat\",\n  //   rarity: RARITIES.MYTHIC,\n  //   description: \"All Fire cards cost 1 less ink.\",\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       reduceInkCostOfFireCardsInDeck: 1,\n  //     },\n  //     [TRIGGER_EVENTS.CARD_PICKUP]: {\n  //       reduceInkCostIfFire: 1,\n  //     },\n  //   },\n  // },\n  {\n    name: \"Thinking Cap\",\n    rarity: RARITIES.MYTHIC,\n    description: \"Your hand size is permanently increased by 3.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHandSize: 3,\n      },\n    },\n  },\n  {\n    name: \"Silk Gloves\",\n    rarity: RARITIES.COMMON,\n    description: \"Your hand size is permanently increased by 1.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHandSize: 1,\n      },\n    },\n  },\n  {\n    name: \"Ring of Athena\",\n    rarity: RARITIES.RARE,\n    description: \"Your hand size is permanently increased by 2.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHandSize: 2,\n      },\n    },\n  },\n];\nconst potionList = [\n  {\n    name: \"Lesser Healing Potion\",\n    rarity: RARITIES.COMMON,\n    healthRestore: 10,\n  },\n  {\n    name: \"Healing Potion\",\n    rarity: RARITIES.UNCOMMON,\n    healthRestore: 15,\n  },\n  {\n    name: \"Greater Healing Potion\",\n    rarity: RARITIES.RARE,\n    healthRestore: 20,\n  },\n  {\n    name: \"Elixir of Life\",\n    rarity: RARITIES.MYTHIC,\n    healthRestore: 50,\n  },\n  {\n    name: \"Squid Brew\",\n    rarity: RARITIES.UNCOMMON,\n    bonusInk: 1,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Hearty Soup\",\n    rarity: RARITIES.RARE,\n    increaseMaxHp: 10,\n  },\n  {\n    name: \"Coconut Juice\",\n    rarity: RARITIES.COMMON,\n    increaseMaxHp: 2,\n  },\n  {\n    name: \"Ponderous Potion\",\n    rarity: RARITIES.UNCOMMON,\n    cardDraw: 2,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Bunny Brew\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 5,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Warren Elixir\",\n    rarity: RARITIES.RARE,\n    bunnyMult: 2,\n    drinkableOutOfCombat: false,\n  },\n];\n//#endregion\n//#region utility functions\nfunction capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\nfunction shuffleArray(originalArray) {\n  const array = [...originalArray]; // copy to avoid mutation\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction weightedRandomChoice(weightedMap) {\n  const entries = Object.entries(weightedMap);\n  const totalWeight = entries.reduce((sum, [_, weight]) => sum + weight, 0);\n  const r = Math.random() * totalWeight;\n  let cumulative = 0;\n\n  for (const [key, weight] of entries) {\n    cumulative += weight;\n    if (r <= cumulative) return key;\n  }\n}\nexport function changeScreen(dispatch, screen) {\n  dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: screen });\n}\nfunction inspectDeck(dispatch) {\n  changeScreen(dispatch, SCREENS.DECK);\n}\nfunction inspectCombatDeck(dispatch) {\n  changeScreen(dispatch, SCREENS.COMBAT_DECK);\n}\nfunction inspectGraveyard(dispatch) {\n  changeScreen(dispatch, SCREENS.GRAVEYARD);\n}\nfunction inspectExile(dispatch) {\n  changeScreen(dispatch, SCREENS.EXILE);\n}\nexport function returnToMain(dispatch) {\n  changeScreen(dispatch, SCREENS.MAIN);\n}\nfunction anonymizeObject(obj) {\n  return {\n    ...obj,\n    anonymousNameDisplay: true,\n  };\n}\nfunction revealAnonymousPaths(paths) {\n  return paths.map((path) => {\n    const { anonymousNameDisplay, ...rest } = path;\n    return rest;\n  });\n}\n\n//#endregion\n//#region reducer-action handlers\nfunction getShopPriceMultiplier(state) {\n  return state.relicBelt.reduce((multiplier, relic) => {\n    const effect = relic.triggers?.[TRIGGER_EVENTS.ASSIGN_SHOP_PRICES];\n    return effect?.shopPriceMultiplier\n      ? multiplier * effect.shopPriceMultiplier\n      : multiplier;\n  }, 1);\n}\n\nfunction purgeCard(state, card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to purgeCard:\", card);\n    return state;\n  }\n\n  const updatedDeck = state.campaign.deck.filter((c) => c !== card);\n  const updatedTrash = [...(state.trashPile || []), card];\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n      trashPile: updatedTrash,\n    },\n    log: [`Purged card: ${card.name}`, ...state.log],\n  };\n}\n\nfunction initializeCombatPhase(state, path) {\n  const level = state.level ?? 1;\n  const stage = state.stage ?? 0;\n\n  // Define ability power modifier based on level\n  const modifyEnemyAbilityPower = ({ currentValue }) => {\n    if (stage === 2) return currentValue + 2;\n    if (stage === 1) return currentValue + 1;\n    return currentValue;\n  };\n\n  const enemy = generateEnemy(state, path, modifyEnemyAbilityPower);\n\n  // Deep copy and shuffle the deck\n  const deepDeckCopy = JSON.parse(JSON.stringify(state.campaign.deck));\n  const shuffledDeck = shuffleArray(deepDeckCopy);\n\n  const newCombat = {\n    enemy,\n    enemyHp: enemy.hp,\n    deck: shuffledDeck,\n    hand: [],\n    graveyard: [], // was 'discard' but rest of code uses 'graveyard'\n    exile: [],\n    mulligans: state.campaign.mulligans ?? 0,\n    ink: state.campaign.ink,\n    maxInk: state.campaign.ink,\n    books: state.campaign.books,\n    maxBooks: state.campaign.books,\n    pages: state.campaign.pages,\n    maxPages: state.campaign.pages,\n    handSize: state.campaign.handSize,\n    baseBunnies: state.baseBunnies ?? 0,\n    bunnies: 0,\n    combatEnded: false,\n  };\n\n  let newState = {\n    ...state,\n    combat: newCombat,\n    log: [`⚔️ Combat begins against ${enemy.name}!`, ...state.log],\n  };\n\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.COMBAT_START);\n  newState = checkEnemyTriggers(newState, TRIGGER_EVENTS.COMBAT_START);\n  console.log(\"🛠️ Starting combat with baseBunnies =\", newCombat.baseBunnies);\n\n  // Start the player's turn (draw hand, refill ink, setup spellbook, etc.)\n  newState = startTurn(newState);\n\n  return newState;\n}\nfunction checkRelicTriggers(\n  state,\n  triggerEvent,\n  context = { damageType: null }\n) {\n  let updatedState = { ...state };\n  let result = context.payload || null;\n\n  if (!Array.isArray(state.relicBelt)) {\n    console.error(\"❌ relicBelt is not an array!\", state.relicBelt);\n  } else {\n    console.log(\n      \"👜 Current relic belt:\",\n      state.relicBelt.map((r) => r.name || r)\n    );\n  }\n\n  // === Special case: Relic is being picked up ===\n  if (triggerEvent === TRIGGER_EVENTS.RELIC_PICKUP && context.relic) {\n    const relic = context.relic;\n    const effect = relic.triggers?.[triggerEvent];\n    if (!effect) return { ...updatedState, result };\n\n    const campaign = { ...updatedState.campaign };\n    let newHealth = updatedState.health;\n    let newMaxHealth = updatedState.maxHealth;\n\n    if (effect.reduceInkCostOfFireCardsInDeck > 0) {\n      let modifiedCount = 0;\n      campaign.deck = campaign.deck.map((card) => {\n        if (\n          Array.isArray(card.damageTypes) &&\n          card.damageTypes.includes(DAMAGE_TYPES.FIRE) &&\n          typeof card.inkCost === \"number\"\n        ) {\n          modifiedCount++;\n          return {\n            ...card,\n            inkCost: Math.max(\n              0,\n              card.inkCost - effect.reduceInkCostOfFireCardsInDeck\n            ),\n          };\n        }\n        return card;\n      });\n      if (modifiedCount > 0) {\n        updatedState.log.unshift(\n          `${relic.name} reduced the ink cost of ${modifiedCount} fire card(s) in your deck.`\n        );\n      }\n    }\n\n    if (effect.bonusPages) {\n      campaign.pages += effect.bonusPages;\n      updatedState.log.unshift(\n        `${relic.name} gave you +${effect.bonusPages} max pages.`\n      );\n    }\n\n    if (effect.BonusMulligans) {\n      campaign.mulligans = (campaign.mulligans ?? 0) + effect.BonusMulligans;\n      updatedState.log.unshift(\n        `${relic.name} gave you +${effect.BonusMulligans} mulligan.`\n      );\n    }\n\n    if (effect.bonusInk) {\n      campaign.ink += effect.bonusInk;\n      updatedState.log.unshift(\n        `${relic.name} gave you +${effect.bonusInk} max ink.`\n      );\n    }\n\n    if (effect.bonusBooks) {\n      campaign.books += effect.bonusBooks;\n      updatedState.log.unshift(\n        `${relic.name} gave you +${effect.bonusBooks} max books.`\n      );\n    }\n\n    if (effect.bonusHandSize) {\n      campaign.handSize += effect.bonusHandSize;\n      updatedState.log.unshift(\n        `${relic.name} increased your hand size by ${effect.bonusHandSize}.`\n      );\n    }\n\n    if (effect.bonusHealth) {\n      newHealth += effect.bonusHealth;\n      newMaxHealth += effect.bonusHealth;\n      updatedState.log.unshift(\n        `${relic.name} increased your max health by ${effect.bonusHealth} HP.`\n      );\n    }\n\n    if (effect.bonusGold) {\n      updatedState = gainGold(updatedState, effect.bonusGold);\n      updatedState.log.unshift(\n        `${relic.name} gave you ${effect.bonusGold} gold.`\n      );\n    }\n\n    if (effect.bonusBaseBunnies) {\n      updatedState = increaseBaseBunnies(updatedState, effect.bonusBaseBunnies);\n      updatedState.log.unshift(\n        `${relic.name} added ${effect.bonusBaseBunnies} base bunnies.`\n      );\n    }\n\n    if (effect.permanentlyUpgradeRandomCardsInDeck > 0) {\n      const { deck } = campaign;\n      const numToUpgrade = Math.min(\n        effect.permanentlyUpgradeRandomCardsInDeck,\n        deck.length\n      );\n      campaign.deck = permanentlyUpgradeRandomCardsInDeck(deck, numToUpgrade);\n      updatedState.log.unshift(\n        `${relic.name} permanently upgraded ${numToUpgrade} card(s) in your deck.`\n      );\n    }\n\n    if (\n      effect.shopPriceMultiplier &&\n      state.currentPhase === PHASES.SHOP &&\n      updatedState.offerings?.shopfront\n    ) {\n      const newMultiplier = getShopPriceMultiplier(updatedState);\n      const updatedShopfront = updatedState.offerings.shopfront.map((entry) => {\n        const { type, item } = entry;\n        const basePrices = { card: 10, potion: 20, gem: 30, relic: 100 };\n        const rarityMultipliers = {\n          common: 1,\n          uncommon: 1.2,\n          rare: 1.4,\n          mythic: 1.6,\n          legendary: 2,\n        };\n        const basePrice = basePrices[type] || 0;\n        const upgrades = item.upgrades || 0;\n        const upgradeCost = [\"card\", \"potion\"].includes(type)\n          ? upgrades * 5\n          : 0;\n        const rarity = item.rarity?.toLowerCase?.() || \"common\";\n        const rarityMultiplier = rarityMultipliers[rarity] || 1;\n        const price = Math.round(\n          (basePrice + upgradeCost) * rarityMultiplier * newMultiplier\n        );\n\n        return {\n          ...entry,\n          item: { ...item, price },\n        };\n      });\n\n      updatedState.offerings.shopfront = updatedShopfront;\n      updatedState.log.unshift(\n        `${relic.name} triggered and updated shop prices.`\n      );\n    }\n\n    updatedState = {\n      ...updatedState,\n      campaign,\n      health: newHealth,\n      maxHealth: newMaxHealth,\n    };\n\n    return { ...updatedState, result };\n  }\n\n  // === General case: loop through all relics and handle triggers ===\n  for (const relic of updatedState.relicBelt) {\n    if (!relic.triggers || typeof relic.triggers !== \"object\") continue;\n\n    const allTriggerKeys = Object.keys(relic.triggers);\n    const effect = relic.triggers?.[triggerEvent];\n\n    if (!effect) continue;\n\n    // === Handle Lightning spell draw trigger\n    if (\n      triggerEvent === TRIGGER_EVENTS.PLAY_CARD &&\n      effect.ifLightningDrawCards > 0\n    ) {\n      const card = context.card || context.payload;\n      const isLightning =\n        Array.isArray(card?.damageTypes) &&\n        card.damageTypes.includes(DAMAGE_TYPES.LIGHTNING);\n\n      if (isLightning) {\n        updatedState.log.unshift(\n          `${relic.name} triggered and drew ${\n            effect.ifLightningDrawCards\n          } card${\n            effect.ifLightningDrawCards > 1 ? \"s\" : \"\"\n          } because you played a Lightning card!`\n        );\n        for (let i = 0; i < effect.ifLightningDrawCards; i++) {\n          updatedState = drawCard(updatedState);\n        }\n      }\n    }\n    // potion pickup triggers\n    if (triggerEvent === TRIGGER_EVENTS.POTION_PICKUP && effect.upgradePotion) {\n      const potion = context.potion || context.payload;\n      if (potion) {\n        const upgraded = upgradePotion(potion, 1);\n        updatedState.log.unshift(\n          `${relic.name} upgraded ${potion.name} into ${upgraded.name}.`\n        );\n        result = upgraded;\n      } else {\n        console.warn(\n          `⚠️ ${relic.name} triggered upgradePotion but no potion provided.`\n        );\n      }\n    }\n\n    // === Other trigger types\n    if (\n      triggerEvent === TRIGGER_EVENTS.COMBAT_START &&\n      effect.weakenEnemyHpPercent > 0\n    ) {\n      updatedState = weakenEnemyByPercent(\n        updatedState,\n        effect.weakenEnemyHpPercent\n      );\n      updatedState.log.unshift(\n        `${relic.name} weakened the enemy by ${\n          effect.weakenEnemyHpPercent * 100\n        }%!`\n      );\n    }\n\n    if (effect.bunnyAdd) {\n      updatedState.combat = {\n        ...updatedState.combat,\n        bunnies: (updatedState.combat.bunnies || 0) + effect.bunnyAdd,\n      };\n      updatedState.log.unshift(\n        `${relic.name} summoned ${effect.bunnyAdd} bunny${\n          effect.bunnyAdd === 1 ? \"\" : \"ies\"\n        }!`\n      );\n    }\n\n    if (effect.permanentlyUpgradeRandomCardsInDeck > 0) {\n      const campaign = { ...updatedState.campaign };\n      const { deck } = campaign;\n      const numToUpgrade = Math.min(\n        effect.permanentlyUpgradeRandomCardsInDeck,\n        deck.length\n      );\n      campaign.deck = permanentlyUpgradeRandomCardsInDeck(deck, numToUpgrade);\n      updatedState.campaign = campaign;\n      updatedState.log.unshift(\n        `${relic.name} permanently upgraded ${numToUpgrade} card(s) in your deck.`\n      );\n    }\n\n    // === Support for Whetstone ===\n    if (triggerEvent === TRIGGER_EVENTS.CARD_PICKUP && effect.upgradeCard) {\n      const cardToUpgrade = context.card || context.payload;\n      if (cardToUpgrade) {\n        console.log(\n          `🪓 ${relic.name} is upgrading a picked-up card: ${cardToUpgrade.name}`\n        );\n        const upgraded = upgradeCard(cardToUpgrade, 1);\n        updatedState.log.unshift(\n          `${relic.name} upgraded ${cardToUpgrade.name} into ${upgraded.name}.`\n        );\n        result = upgraded;\n      } else {\n        console.warn(\n          `⚠️ ${relic.name} triggered upgradeCard but no card was provided.`\n        );\n      }\n    }\n\n    // === Support for Dousing Rod ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.POPULATE_PATHS &&\n      effect.revealAnonymousPaths\n    ) {\n      const currentPaths = context.payload || [];\n      result = {\n        paths: revealAnonymousPaths(currentPaths),\n      };\n      updatedState.log.unshift(`${relic.name} revealed anonymous paths!`);\n    }\n\n    // === Support for Porcelain Koi ===\n    if (triggerEvent === TRIGGER_EVENTS.CARD_PICKUP) {\n      const pickedCard = context.card || context.payload;\n\n      if (effect.bonusHealth) {\n        updatedState.health += effect.bonusHealth;\n        updatedState.maxHealth += effect.bonusHealth;\n        updatedState.log.unshift(\n          `${relic.name} increased your max health by ${effect.bonusHealth}${\n            pickedCard?.name ? ` (from picking ${pickedCard.name})` : \"\"\n          }.`\n        );\n      }\n\n      if (effect.bonusGold) {\n        updatedState = gainGold(updatedState, effect.bonusGold);\n        updatedState.log.unshift(\n          `${relic.name} granted you ${effect.bonusGold} gold${\n            pickedCard?.name ? ` (from picking ${pickedCard.name})` : \"\"\n          }.`\n        );\n      }\n    }\n\n    // === Add additional relic effects here ===\n  }\n\n  return {\n    ...updatedState,\n    result,\n  };\n}\n\nfunction checkEnemyTriggers(state, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  const enemy = updatedState.combat?.enemy;\n  if (!enemy) return updatedState;\n\n  const abilities = enemy.abilities || {};\n  const logMessages = [];\n\n  if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n    // Ink Drink effect\n    if (abilities[ENEMY_ABILITIES.INK_DRINK]) {\n      const amount = abilities[ENEMY_ABILITIES.INK_DRINK];\n\n      const newMaxInk = Math.max(0, updatedState.combat.maxInk - amount);\n      const newInk = Math.min(updatedState.combat.ink, newMaxInk); // Ensure current ink doesn't exceed new max\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          maxInk: newMaxInk,\n          ink: newInk,\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} drained ${amount} max ink at the start of combat!`\n      );\n    }\n\n    // Increase Health effect\n    if (abilities[ENEMY_ABILITIES.INCREASE_HEALTH]) {\n      const multiplier = abilities[ENEMY_ABILITIES.INCREASE_HEALTH]; // e.g., 1.5\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          enemyHp: Math.floor(updatedState.combat.enemyHp * multiplier),\n          enemy: {\n            ...updatedState.combat.enemy,\n            hp: Math.floor(updatedState.combat.enemy.hp * multiplier),\n          },\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} increased its health by ${Math.round(\n          (multiplier - 1) * 100\n        )}%!`\n      );\n    }\n\n    // Downgrade Cards at Combat Start\n    if (abilities[ENEMY_ABILITIES.DOWNGRADE_CARDS]) {\n      const amount = abilities[ENEMY_ABILITIES.DOWNGRADE_CARDS];\n      const deck = [...updatedState.combat.deck];\n      const downgradable = deck.filter((card) => !card.undowngradable);\n\n      const shuffled = [...downgradable].sort(() => Math.random() - 0.5);\n      const toDowngrade = shuffled.slice(0, amount);\n\n      const updatedDeck = deck.map((card) =>\n        toDowngrade.includes(card) ? downgradeCard(card, 1) : card\n      );\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          deck: updatedDeck,\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} downgraded ${toDowngrade.length} card(s) in your deck!`\n      );\n    }\n\n    // Hand Size Reduction\n    if (abilities[ENEMY_ABILITIES.HAND_SIZE_REDUCTION]) {\n      const amount = abilities[ENEMY_ABILITIES.HAND_SIZE_REDUCTION];\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          handSize: Math.max(1, updatedState.combat.handSize - amount),\n        },\n      };\n      logMessages.push(`${enemy.name} reduces your hand size by ${amount}!`);\n    }\n\n    // === Add curses at combat start ===\n    if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n      const abilities = enemy.abilities || {};\n\n      if (abilities[ENEMY_ABILITIES.ADD_PEBBLES]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_PEBBLES];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Sisyphus' Pebble\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Sisyphus' Pebble to your deck!`\n        );\n      }\n\n      if (abilities[ENEMY_ABILITIES.ADD_MERCURY]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_MERCURY];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Mercury Droplet\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Mercury Droplet(s) to your deck!`\n        );\n      }\n\n      if (abilities[ENEMY_ABILITIES.ADD_CLUTTER]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_CLUTTER];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Clutter\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Clutter card(s) to your deck!`\n        );\n      }\n    }\n  }\n\n  if (logMessages.length > 0) {\n    updatedState = {\n      ...updatedState,\n      log: [`⚠️ Enemy ability activated!`, ...logMessages, ...updatedState.log],\n    };\n  }\n\n  return updatedState;\n}\n\nfunction modifyCombatInk(state, amount) {\n  const current = state.combat?.ink ?? 0;\n  const max = state.combat?.maxInk ?? 0;\n\n  const newInk = Math.max(0, Math.min(current + amount, max));\n  const actualChange = newInk - current;\n\n  // let changeMessage =\n  //   actualChange === 0\n  //     ? `Ink unchanged.`\n  //     : actualChange > 0\n  //     ? `Gained ${actualChange} ink.`\n  //     : `Spent ${Math.abs(actualChange)} ink.`;\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      ink: newInk,\n    },\n    // log: [changeMessage, ...state.log],\n  };\n}\n\nfunction heal(state, amount) {\n  const current = state.health || 0;\n  const max = state.maxHealth || 0;\n  const newHealth = Math.min(current + amount, max);\n  const healedAmount = newHealth - current;\n\n  return {\n    ...state,\n    health: newHealth,\n    log: [`Healed ${healedAmount} HP.`, ...state.log],\n  };\n}\nfunction generateStarterDeck(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\n      \"Cannot generate starter deck: invalid difficulty:\",\n      difficulty\n    );\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n  const deck = [];\n\n  // 1. Add one of each basic mono card\n  const basicMonoCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_MONO\n  );\n  for (const card of basicMonoCards) {\n    deck.push(createCardInstance(card.name));\n  }\n\n  // 2. Add 3 of each basic poly card\n  const basicPolyCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_POLY\n  );\n  for (const card of basicPolyCards) {\n    for (let i = 0; i < 3; i++) {\n      deck.push(createCardInstance(card.name));\n    }\n  }\n\n  // 3. Add additional random basic poly cards based on difficulty\n  for (let i = 0; i < modifiers.basicCardCountModifier; i++) {\n    const card = generateRandomCard(state, { rarity: RARITIES.BASIC_POLY });\n    if (card) deck.push(card);\n  }\n\n  // 4. Shuffle the deck (pure)\n  const shuffledDeck = shuffleArray(deck);\n\n  // 5. Return new state with updated campaign.deck\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: shuffledDeck,\n    },\n    log: [...state.log],\n  };\n}\nfunction chargeGoldPrice(state, price, context = \"purchase\") {\n  if (state.gold < price) {\n    console.warn(`Not enough gold for ${context}!`);\n    return state; // return unmodified state\n  }\n\n  return {\n    ...state,\n    gold: state.gold - price, // ✅ correct location\n    log: [`Spent ${price} gold on ${context}.`, ...state.log],\n  };\n}\n\nfunction addCardToCombatDeck(state, cardName) {\n  const base = cardList.find((c) => c.name === cardName);\n  if (!base) {\n    console.warn(`Could not find card \"${cardName}\"`);\n    return state;\n  }\n\n  const newCard = createCardInstance(cardName);\n  const combatDeck = Array.isArray(state.combat?.deck)\n    ? [...state.combat.deck]\n    : [];\n\n  const insertIndex = Math.floor(Math.random() * (combatDeck.length + 1));\n  combatDeck.splice(insertIndex, 0, newCard); // insert at random index\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      deck: combatDeck,\n    },\n  };\n}\n\nfunction assignShopPrices(state) {\n  const globalMultiplier = state.shopPriceMultiplier || 1;\n\n  const basePrices = {\n    card: 10,\n    potion: 20,\n    gem: 30,\n    relic: 100,\n  };\n\n  const rarityMultipliers = {\n    common: 1,\n    uncommon: 1.2,\n    rare: 1.4,\n    mythic: 1.6,\n    legendary: 2,\n  };\n\n  const updatedShopfront = state.offerings.shopfront.map((entry) => {\n    const { type, item } = entry;\n\n    if (!item || !item.name) {\n      console.warn(\"Invalid shop item during price assignment:\", entry);\n      return entry;\n    }\n\n    const basePrice = basePrices[type] || 0;\n    const upgrades = item.upgrades || 0;\n    const upgradeCost = [\"card\", \"potion\"].includes(type) ? upgrades * 5 : 0;\n\n    const rarity = item.rarity?.toLowerCase?.() || \"common\";\n    const rarityMultiplier = rarityMultipliers[rarity] || 1;\n\n    const price = Math.round(\n      (basePrice + upgradeCost) * rarityMultiplier * globalMultiplier\n    );\n\n    return {\n      ...entry,\n      item: {\n        ...item,\n        price,\n      },\n    };\n  });\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: updatedShopfront,\n    },\n    log: [`Assigned prices to shop items.`, ...state.log],\n  };\n}\n\nfunction applyDifficultyModifiers(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\"Invalid or missing difficulty:\", difficulty);\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n\n  return {\n    ...state,\n    gold: state.gold + modifiers.goldModifier,\n    basicCardCount: state.basicCardCount + modifiers.basicCardCountModifier,\n    luck: (state.luck || 0) + (modifiers.luckModifier || 0),\n    shopPriceMultiplier:\n      (state.shopPriceMultiplier || 1) +\n      (modifiers.shopPriceMultiplierModifier || 0),\n    restHealthRestore:\n      (state.restHealthRestore || 0) +\n      (modifiers.restHealthRestoreModifier || 0),\n    maxHealth: state.maxHealth + modifiers.maxHealthModifier,\n    health: state.health + modifiers.maxHealthModifier,\n    enemyHealthMultiplier:\n      (state.enemyHealthMultiplier || 1) +\n      (modifiers.enemyHealthMultiplierModifier || 0),\n  };\n}\n\nfunction advancePhaseTo(state, phaseAdvancedTo) {\n  console.log(\">>> Advancing to phase:\", phaseAdvancedTo);\n\n  if (!Object.values(PHASES).includes(phaseAdvancedTo)) {\n    console.error(\"Invalid phase passed to advancePhaseTo:\", phaseAdvancedTo);\n    return state;\n  }\n\n  return {\n    ...state,\n    currentPhase: phaseAdvancedTo,\n  };\n}\nfunction handlePhaseTransitions(state) {\n  const phase = state.currentPhase;\n\n  switch (phase) {\n    case PHASES.DIFFICULTY_SELECTION:\n      return {\n        ...state,\n        log: [\"Choose your difficulty.\", ...state.log],\n      };\n\n    case PHASES.PATH_SELECTION:\n      console.log(\">> Entering PHASES.PATH_SELECTION\");\n      return populatePathOfferings(state);\n\n    case PHASES.CARD_OFFERING:\n      console.log(\">> Entering PHASES.CARD_OFFERING\");\n      return populateCardOfferings(state);\n\n    case PHASES.MYTHIC_RELIC_OFFERING:\n      console.log(\">> Entering PHASES.MYTHIC_RELIC_OFFERING .\");\n      return populateRelicOfferings(state, RARITIES.MYTHIC);\n\n    case PHASES.RELIC_OFFERING:\n      console.log(\">> Entering PHASES.RELIC_OFFERING.\");\n      return populateRelicOfferings(state);\n\n    case PHASES.POTION_OFFERING:\n      console.log(\">> Entering POTION_OFFERING phase.\");\n      return populatePotionOfferings(state);\n\n    case PHASES.GEM_OFFERING:\n      console.log(\">> Entering GEM_OFFERING phase.\");\n      return populateGemOfferings(state);\n\n    case PHASES.SHOP:\n      return populateShopfront(state);\n\n    case PHASES.COMBAT:\n      return initializeCombatPhase(state, state.currentPath);\n\n    default:\n      return state;\n  }\n}\nfunction pickPath(state, index) {\n  const paths = state.offerings.paths;\n\n  if (!paths || index < 0 || index >= paths.length) {\n    console.error(\"Invalid path index:\", index);\n    return state;\n  }\n\n  const chosenPath = paths[index];\n  const pathKey = chosenPath.path;\n  const pathData = pathMap[pathKey];\n\n  if (!pathData || !pathData.leadsTo) {\n    console.error(\"Path has no destination phase:\", pathKey);\n    return state;\n  }\n\n  return handlePhaseTransitions({\n    ...state,\n    level: (state.level ?? 0) + 1,\n    currentPath: chosenPath, // ✅ store the path here\n    currentPhase: pathData.leadsTo,\n    log: [`Chose path: ${pathKey}`, ...state.log],\n    offerings: {\n      ...state.offerings,\n      paths: [],\n    },\n  });\n}\nfunction populateCardOfferings(state) {\n  const newCards = [];\n\n  while (newCards.length < 3) {\n    const card = generateRandomCard(state);\n    if (!card) continue;\n    if (newCards.some((existing) => existing.name === card.name)) continue;\n    newCards.push(card);\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      cards: newCards,\n    },\n  };\n}\nfunction populatePotionOfferings(state) {\n  const selectedPotions = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedPotions.length < 3 && attempts < 50) {\n    attempts++;\n\n    const potion = generateRandomPotion(state);\n    if (!potion) continue;\n\n    if (usedNames.has(potion.name)) continue;\n\n    selectedPotions.push(potion);\n    usedNames.add(potion.name);\n  }\n\n  if (selectedPotions.length < 3) {\n    console.warn(\"Not enough unique potions to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      potions: selectedPotions,\n    },\n  };\n}\nfunction populateRelicOfferings(state, rarity = null) {\n  const selected = [];\n  const maxRelics = 3;\n\n  while (selected.length < maxRelics) {\n    const relic = generateRandomRelic(state, { rarity });\n\n    // Ensure uniqueness by name\n    if (selected.some((r) => r.name === relic.name)) continue;\n\n    selected.push(relic);\n  }\n\n  console.log(\"Selected relic offerings:\", selected);\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      relics: selected,\n    },\n  };\n}\nfunction populateGemOfferings(state) {\n  const selectedGems = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedGems.length < 3 && attempts < 50) {\n    attempts++;\n\n    const gem = generateRandomGem(state);\n    if (!gem) continue;\n\n    if (usedNames.has(gem.name)) continue;\n\n    selectedGems.push(gem);\n    usedNames.add(gem.name);\n  }\n\n  if (selectedGems.length < 3) {\n    console.warn(\"Not enough unique gems to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      gems: selectedGems,\n    },\n  };\n}\nfunction populatePathOfferings(state) {\n  const luck = state.luck || 0;\n  const misery = state.misery || 0;\n  const level = state.level || 0;\n\n  // === Step 0: Boss override ===\n  if ([15, 30, 45].includes(level)) {\n    const bossPath = {\n      path: PATHS.BOSS_FIGHT,\n      ...pathMap[PATHS.BOSS_FIGHT],\n    };\n    return {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        paths: [bossPath, bossPath, bossPath],\n      },\n      log: [`Boss floor! All paths lead to a boss fight.`, ...state.log],\n    };\n  }\n\n  // === Step 1: Always pick 1 fight path ===\n  const fightWeights = {\n    [PATHS.EASY_FIGHT]: 3,\n    [PATHS.MEDIUM_FIGHT]: 2,\n    [PATHS.HARD_FIGHT]: 1,\n  };\n  const fightPathKey = weightedRandomChoice(fightWeights);\n  const fightPath = {\n    path: fightPathKey,\n    ...pathMap[fightPathKey],\n  };\n\n  // === Step 2: Create pool of all valid paths (excluding duplicate of picked fight) ===\n  const allPaths = Object.entries(pathMap)\n    .filter(([key]) => key !== fightPathKey)\n    .map(([path, data]) => ({ path, ...data }));\n\n  const bossLevels = [15, 30, 45];\n  const isBossLevel = bossLevels.includes(level);\n\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null || card.unsocketable);\n\n  const allCardsUnupgradable =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.unupgradable);\n\n  const filteredPaths = allPaths.filter((pathObj) => {\n    if (pathObj.path === PATHS.BOSS_FIGHT && !isBossLevel) return false;\n    if (pathObj.path === PATHS.GEM_OFFERING && allCardsSocketed) return false;\n    if (pathObj.path === PATHS.ENCHANT && allCardsUnupgradable) return false;\n    return true;\n  });\n\n  // === Step 3: Pick first two paths using rarity weights ===\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const chosenRarities = [\n    weightedRandomChoice(rarityWeights),\n    weightedRandomChoice(rarityWeights),\n  ];\n\n  const chosenPaths = [];\n  const usedPaths = new Set([fightPathKey]);\n\n  for (const rarity of chosenRarities) {\n    const candidates = filteredPaths.filter(\n      (p) => p.rarity === rarity && !usedPaths.has(p.path)\n    );\n    if (candidates.length > 0) {\n      const pick = candidates[Math.floor(Math.random() * candidates.length)];\n      usedPaths.add(pick.path);\n      chosenPaths.push(pick);\n    }\n  }\n\n  // === Step 4: Fill in missing 2nd path if needed\n  const remainingPool = filteredPaths.filter((p) => !usedPaths.has(p.path));\n  while (chosenPaths.length < 2 && remainingPool.length > 0) {\n    const idx = Math.floor(Math.random() * remainingPool.length);\n    const pick = remainingPool.splice(idx, 1)[0];\n    usedPaths.add(pick.path);\n    chosenPaths.push(pick);\n  }\n\n  // === Step 5: Optional override for 3rd path using misery + luck if both are fights\n  const firstTwoAreFights = chosenPaths.every((p) => p.isFight);\n  let finalPaths = [fightPath, ...chosenPaths];\n  let newMisery = misery;\n\n  if (firstTwoAreFights && misery > 0 && remainingPool.length > 0) {\n    const thirdOptions = remainingPool.filter((p) => !usedPaths.has(p.path));\n    if (thirdOptions.length > 0) {\n      const nonFights = thirdOptions.filter((p) => !p.isFight);\n      const fights = thirdOptions.filter((p) => p.isFight);\n\n      const weightedPool = [];\n      nonFights.forEach((p) => {\n        for (let i = 0; i < misery + luck; i++) weightedPool.push(p);\n      });\n      fights.forEach((p) => {\n        weightedPool.push(p); // 1 weight each\n      });\n\n      if (weightedPool.length > 0) {\n        const pick =\n          weightedPool[Math.floor(Math.random() * weightedPool.length)];\n        usedPaths.add(pick.path);\n        finalPaths[2] = pick;\n        if (!pick.isFight) newMisery = misery - 1;\n      }\n    }\n  }\n\n  // === Step 6: Check again if all 3 are fights and increment misery\n  const allFights = finalPaths.every((p) => p.isFight);\n  if (allFights) newMisery++;\n\n  // === Step 6.5: Replace SHOP if player is broke\n  if (state.gold < 100) {\n    const shopIndex = finalPaths.findIndex((p) => p.path === PATHS.SHOP);\n    if (shopIndex !== -1) {\n      const replaceableOptions = [\n        PATHS.REST,\n        PATHS.PURGE,\n        PATHS.TRANSMUTE,\n        PATHS.CARD_OFFERING,\n        PATHS.RELIC_OFFERING,\n        PATHS.ENCHANT_OFFERING,\n      ];\n      const existingPaths = new Set(finalPaths.map((p) => p.path));\n      const replacements = replaceableOptions.filter(\n        (p) => !existingPaths.has(p)\n      );\n\n      if (replacements.length > 0) {\n        const replacement =\n          replacements[Math.floor(Math.random() * replacements.length)];\n        const replacementData = pathMap[replacement];\n\n        if (replacementData) {\n          finalPaths[shopIndex] = {\n            path: replacement,\n            ...replacementData,\n          };\n          console.log(\n            `💰 Replaced SHOP with ${replacement} because player has < 100 gold.`\n          );\n        } else {\n          console.warn(\n            `⚠️ No data found in pathMap for replacement path: ${replacement}`\n          );\n        }\n      }\n    }\n  }\n\n  // === Step 7: Randomly anonymize one path based on (50% - luck) chance\n  const anonChance = Math.max(0, 0.5 - (state.luck || 0) * 0.01);\n  const anonIndex = Math.floor(Math.random() * finalPaths.length);\n\n  let pathsAfterAnonymize = finalPaths;\n\n  if (Math.random() < anonChance) {\n    pathsAfterAnonymize = finalPaths.map((path, index) =>\n      index === anonIndex ? anonymizeObject(path) : path\n    );\n  }\n\n  // === Step 8: Apply relic triggers\n  const triggerResult = checkRelicTriggers(\n    state,\n    TRIGGER_EVENTS.POPULATE_PATHS,\n    {\n      payload: pathsAfterAnonymize,\n    }\n  );\n\n  const updatedPaths = triggerResult.result?.paths || pathsAfterAnonymize;\n  const updatedState = { ...triggerResult };\n\n  // Final sanity check for undefineds\n  for (const path of updatedPaths) {\n    if (!path || !path.path) {\n      console.warn(\"⚠️ Invalid path in final offerings:\", path);\n    }\n  }\n\n  console.log(\"📍 Populating path offerings with:\", updatedPaths);\n  return {\n    ...updatedState,\n    misery: newMisery,\n    offerings: {\n      ...updatedState.offerings,\n      paths: updatedPaths,\n    },\n  };\n}\n\nfunction pickCard(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  let sourceArrayName = null;\n\n  if (offerings.cards && index < offerings.cards.length) {\n    sourceArrayName = \"cards\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid card index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap\n  const pickedCard =\n    sourceArrayName === \"shopfront\"\n      ? entry.item\n      : sourceArrayName === \"combatRewards\"\n      ? entry.value\n      : entry;\n\n  if (!pickedCard || !pickedCard.name) {\n    console.warn(\"⚠️ Picked card is invalid:\", pickedCard);\n  }\n\n  if (!pickedCard) {\n    console.error(\"No card found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const price = entry.item?.price !== undefined ? entry.item.price : 20;\n    const charged = chargeGoldPrice(state, price, \"card\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  // === 3. Trigger relics BEFORE adding to deck ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.CARD_PICKUP,\n    {\n      payload: pickedCard,\n    }\n  );\n\n  const upgradedCard = triggerResult.result || pickedCard;\n  updatedState = { ...triggerResult, result: undefined };\n\n  // === 4. Add to campaign deck ===\n  const updatedCampaign = {\n    ...updatedState.campaign,\n    deck: [...updatedState.campaign.deck, upgradedCard],\n  };\n\n  // === 5. Remove from offerings ===\n  const updatedOfferings = {\n    ...updatedState.offerings,\n    [sourceArrayName]: sourceArray.filter((_, i) => i !== index),\n  };\n\n  // === 6. Build new state ===\n  let newState = {\n    ...updatedState,\n    campaign: updatedCampaign,\n    offerings: updatedOfferings,\n    log: [`Picked card: ${upgradedCard.name}`, ...updatedState.log],\n  };\n\n  // === 7. Trash if from offering ===\n  if (phase === PHASES.CARD_OFFERING) {\n    const trashed = sourceArray.filter((_, i) => i !== index);\n    newState = {\n      ...newState,\n      trashPile: [...(newState.trashPile || []), ...trashed],\n      offerings: {\n        ...newState.offerings,\n        [sourceArrayName]: [],\n      },\n    };\n\n    newState = handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\nfunction pickRelic(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  if (offerings.relics && index < offerings.relics.length) {\n    sourceArrayName = \"relics\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid relic index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap relic from shopfront if needed\n  const pickedRelic =\n    sourceArrayName === \"shopfront\"\n      ? entry.item\n      : sourceArrayName === \"combatRewards\"\n      ? entry.value\n      : entry;\n  if (!pickedRelic) {\n    console.error(\"No relic found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const relicPrice = entry.item?.price ?? 50;\n    const chargedState = chargeGoldPrice(state, relicPrice, \"relic\");\n    if (chargedState === state) return state; // not enough gold\n    updatedState = chargedState;\n  }\n\n  // === 3. Add relic to belt ===\n  updatedState = {\n    ...updatedState,\n    relicBelt: [...updatedState.relicBelt, pickedRelic],\n  };\n\n  // === 4. Remove the picked relic from offerings ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 5. Trash unchosen relics if from offering phase ===\n  const isOfferingPhase = [\n    PHASES.MYTHIC_RELIC_OFFERING,\n    PHASES.RELIC_OFFERING,\n  ].includes(phase);\n\n  let updatedTrashPile = updatedState.trashPile;\n  if (isOfferingPhase) {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.relics.filter((_, i) => i !== index),\n    ];\n    offerings.relics = [];\n  }\n\n  // === 6. Build the new state ===\n  const newState = {\n    ...updatedState,\n    trashPile: updatedTrashPile, // ✅ Root-level trash pile\n    offerings,\n    log: [`Picked relic: ${pickedRelic.name}`, ...updatedState.log],\n  };\n\n  // === 7. Trigger relic effects\n  const triggeredState = checkRelicTriggers(\n    newState,\n    TRIGGER_EVENTS.RELIC_PICKUP,\n    { relic: pickedRelic }\n  );\n\n  // === 8. Advance phase if in offering\n  if (isOfferingPhase) {\n    return handlePhaseTransitions(\n      advancePhaseTo(triggeredState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return triggeredState;\n}\n\nfunction pickPotion(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  let sourceArray = null;\n\n  if (offerings.potions && index < offerings.potions.length) {\n    sourceArrayName = \"potions\";\n    sourceArray = offerings.potions;\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n    sourceArray = offerings.shopfront;\n  } else if (\n    phase === PHASES.COMBAT_END &&\n    offerings.combatRewards &&\n    offerings.combatRewards[index]?.type === \"potion\"\n  ) {\n    sourceArrayName = \"combatRewards\";\n    sourceArray = offerings.combatRewards;\n  } else {\n    console.error(\"Invalid potion index:\", index);\n    return state;\n  }\n\n  const entry = sourceArray[index];\n\n  // === 2. Unwrap the potion if needed ===\n  let pickedPotion;\n  if (sourceArrayName === \"shopfront\") {\n    pickedPotion = entry.item;\n  } else if (sourceArrayName === \"combatRewards\") {\n    pickedPotion = entry.value;\n  } else {\n    pickedPotion = entry;\n  }\n\n  if (!pickedPotion) {\n    console.error(\"No potion found at index:\", index);\n    return state;\n  }\n\n  // === 3. Charge cost if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const price = entry.item?.price ?? 30;\n    const charged = chargeGoldPrice(state, price, \"potion\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  // === 4. Apply pickup relic triggers (may upgrade the potion) ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.POTION_PICKUP,\n    { payload: pickedPotion }\n  );\n  const triggeredPotion = triggerResult.result;\n  updatedState = { ...triggerResult }; // includes possible log/relic changes\n\n  // === 5. Add to potion belt ===\n  const updatedPotionBelt = [...updatedState.potionBelt, triggeredPotion];\n\n  // === 6. Remove picked potion from source\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 7. Trash unchosen potions if from potion offering\n  let updatedTrashPile = updatedState.trashPile;\n  if (phase === PHASES.POTION_OFFERING && sourceArrayName === \"potions\") {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.potions.filter((_, i) => i !== index),\n    ];\n    offerings.potions = [];\n  }\n\n  // === 8. Build new state\n  const newState = {\n    ...updatedState,\n    potionBelt: updatedPotionBelt,\n    trashPile: updatedTrashPile,\n    offerings,\n    log: [`Picked potion: ${pickedPotion.name}`, ...updatedState.log],\n  };\n\n  // === 9. Advance phase if from potion offering\n  if (phase === PHASES.POTION_OFFERING) {\n    return handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\n\nfunction drinkPotion(state, potion) {\n  if (!potion) {\n    console.error(\"No potion passed to drinkPotion\");\n    return state;\n  }\n\n  console.log(\"🧪 Drinking potion:\", potion);\n\n  let updatedState = { ...state };\n\n  // === 1. Apply effects ===\n  if (potion.healthRestore) {\n    updatedState = heal(updatedState, potion.healthRestore);\n  }\n\n  if (potion.bonusInk && state.currentPhase === PHASES.COMBAT) {\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        ink: updatedState.combat.ink + potion.bonusInk,\n      },\n      log: [\n        `Gained ${potion.bonusInk} bonus ink from ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  if (potion.increaseMaxHp) {\n    const amount = potion.increaseMaxHp;\n    updatedState = {\n      ...updatedState,\n      maxHealth: updatedState.maxHealth + amount,\n      health: updatedState.health + amount,\n      log: [\n        `Max and current HP increased by ${amount} from ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  // === Upgrade cards in hand (if applicable) ===\n  if (\n    potion.upgradeCardsInHand &&\n    state.currentPhase === PHASES.COMBAT &&\n    updatedState.combat.hand\n  ) {\n    const hand = [...updatedState.combat.hand];\n    const upgradable = hand.filter(\n      (card) => !card.unupgradable && typeof card.upgrades === \"number\"\n    );\n    const numToUpgrade = Math.min(potion.upgradeCardsInHand, upgradable.length);\n\n    const shuffled = [...upgradable].sort(() => Math.random() - 0.5);\n    const toUpgrade = shuffled.slice(0, numToUpgrade);\n\n    const newHand = hand.map((card) => {\n      if (toUpgrade.includes(card)) {\n        return { ...card, upgrades: card.upgrades + 1 };\n      }\n      return card;\n    });\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        hand: newHand,\n      },\n      log: [\n        `Upgraded ${toUpgrade.length} card(s) in hand with ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  // === Always apply draw, bunnyAdd, bunnyMult if present ===\n  if (potion.cardDraw && state.currentPhase === PHASES.COMBAT) {\n    for (let i = 0; i < potion.cardDraw; i++) {\n      updatedState = drawCard(updatedState);\n    }\n  }\n\n  if (potion.bunnyAdd) {\n    updatedState = addBunnies(updatedState, potion.bunnyAdd);\n  }\n\n  if (potion.bunnyMult) {\n    updatedState = multiplyBunnies(updatedState, potion.bunnyMult);\n  }\n\n  // === 2. Remove potion from belt and add to trash ===\n  const belt = updatedState.potionBelt || [];\n  const index = belt.findIndex((p) => p.name === potion.name);\n  const newPotionBelt =\n    index >= 0 ? [...belt.slice(0, index), ...belt.slice(index + 1)] : belt;\n  const newTrash = [...updatedState.trashPile, potion];\n\n  updatedState = {\n    ...updatedState,\n    potionBelt: newPotionBelt,\n    trashPile: newTrash,\n  };\n\n  // === 3. Trigger relic effects\n  const triggered = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.DRINK_POTION,\n    { potion }\n  );\n\n  return {\n    ...triggered,\n    log: triggered.log || updatedState.log,\n  };\n}\n\nfunction openModScreen(state, mod, originPhase = null) {\n  const validKeys = [\"upgrade\", \"gem\", \"purge\", \"transmute\"];\n  const keys = Object.keys(mod || {});\n  if (keys.length !== 1 || !validKeys.includes(keys[0])) {\n    console.error(\"Invalid mod passed to openModScreen:\", mod);\n    return state;\n  }\n\n  // === GEM LOGIC: Discard unchosen gems only if from gem offering ===\n  if (mod.gem && (state.offerings.gems?.length || 0) > 0) {\n    const chosenGemName = mod.gem.name;\n\n    const discardedGems = state.offerings.gems.filter(\n      (g) => g.name !== chosenGemName\n    );\n\n    state = {\n      ...state,\n      campaign: {\n        ...state.campaign,\n        trashPile: [...state.trashPile, ...discardedGems],\n      },\n      offerings: {\n        ...state.offerings,\n        gems: [], // clear offering gems\n      },\n      log: [`Discarded ${discardedGems.length} unchosen gem(s).`, ...state.log],\n    };\n  }\n\n  // === If the chosen gem came from combat rewards, remove it ===\n  if (\n    mod.gem &&\n    state.currentPhase === PHASES.COMBAT_END &&\n    Array.isArray(state.offerings.combatRewards)\n  ) {\n    const updatedRewards = state.offerings.combatRewards.filter(\n      (reward) => reward.type !== \"gem\" || reward.value.name !== mod.gem.name\n    );\n\n    state = {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        combatRewards: updatedRewards,\n      },\n      log: [`Picked gem: ${mod.gem.name}`, ...state.log],\n    };\n  }\n\n  // === Charge gold if in shop ===\n  if (state.currentPhase === PHASES.SHOP) {\n    const price = mod?.gem?.price ?? 50;\n\n    const charged = chargeGoldPrice(state, price, \"card modification\");\n    if (charged === state) return state; // insufficient gold\n    state = charged;\n  }\n\n  // Remove purchased gem from shopfront\n  if (mod.gem && Array.isArray(state.offerings.shopfront)) {\n    const updatedShopfront = state.offerings.shopfront.filter(\n      (entry) => !(entry.type === \"gem\" && entry.item.name === mod.gem.name)\n    );\n\n    state = {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        shopfront: updatedShopfront,\n      },\n      log: [`Purchased gem: ${mod.gem.name}`, ...state.log],\n    };\n  }\n\n  return {\n    ...state,\n    currentScreen: SCREENS.MOD,\n    modData: {\n      mod,\n      origin: originPhase || state.currentPhase,\n    },\n    log: [`Opened mod screen (${keys[0]}).`, ...state.log],\n  };\n}\n\nfunction increaseBaseBunnies(state, amount) {\n  const newAmount = Math.max(0, (state.baseBunnies || 0) + amount);\n\n  return {\n    ...state,\n    baseBunnies: newAmount,\n    log: [`Base bunnies increased by ${amount}.`, ...state.log],\n  };\n}\nfunction applyModToCard(state, card) {\n  const mod = state.modData?.mod;\n  const origin = state.modData?.origin;\n\n  if (!mod || !card) {\n    console.warn(\"applyModToCard called without a valid mod or card.\");\n    return state;\n  }\n\n  let updatedDeck = [...state.campaign.deck];\n  const cardIndex = updatedDeck.findIndex((c) => c === card);\n\n  if (cardIndex === -1) {\n    console.warn(\"Card not found in campaign deck.\");\n    return state;\n  }\n\n  // Apply mod\n  let modifiedCard = { ...card };\n  if (mod.upgrade) {\n    modifiedCard = upgradeCard(modifiedCard, mod.upgrade);\n  } else if (mod.gem) {\n    modifiedCard = socketCardWithGem(modifiedCard, mod.gem);\n  } else if (mod.purge) {\n    updatedDeck.splice(cardIndex, 1); // Remove the card\n  } else if (mod.transmute) {\n    modifiedCard = transmuteCard(modifiedCard);\n  }\n\n  // Replace modified card if not purged\n  if (!mod.purge) {\n    updatedDeck[cardIndex] = modifiedCard;\n  }\n\n  // Determine next phase\n  const nextPhase =\n    origin === PHASES.SHOP || origin === PHASES.COMBAT_END\n      ? origin\n      : PHASES.PATH_SELECTION;\n\n  const updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n    },\n    modData: null,\n    currentScreen: SCREENS.MAIN,\n    currentPhase: nextPhase,\n    log: [`Applied mod to ${card.name}.`, ...state.log],\n  };\n\n  // If transitioning to path selection, trigger path population\n  return nextPhase === PHASES.PATH_SELECTION\n    ? handlePhaseTransitions(updatedState)\n    : updatedState;\n}\nfunction populateShopfront(state) {\n  const shopfrontTypes = [];\n  // === Clear existing shop items into trash ===\n  const previousItems = state.offerings.shopfront || [];\n  const discardedItems = previousItems.map((entry) => entry.item);\n  const updatedTrash = [...(state.trashPile || []), ...discardedItems];\n  // === Step 1: Populate exactly 3 of each item type ===\n  const typeCounts = {\n    card: 3,\n    potion: 3,\n    gem: 3,\n    relic: 3,\n  };\n\n  for (const [type, count] of Object.entries(typeCounts)) {\n    for (let i = 0; i < count; i++) {\n      shopfrontTypes.push(type);\n    }\n  }\n\n  // === Step 3: Generate actual items, avoiding duplicates ===\n  const generatedItems = [];\n  const usedKeys = new Set();\n\n  for (let type of shopfrontTypes) {\n    let item = null;\n    let attempt = 0;\n\n    while (attempt < 20) {\n      attempt++;\n      try {\n        switch (type) {\n          case \"card\":\n            item = generateRandomCard(state);\n            break;\n          case \"potion\":\n            item = generateRandomPotion(state);\n            break;\n          case \"gem\":\n            item = generateRandomGem(state);\n            break;\n          case \"relic\":\n            item = generateRandomRelic(state);\n            break;\n          default:\n            item = null;\n        }\n\n        if (!item) continue;\n\n        const key = `${type}-${item.name}`;\n        if (usedKeys.has(key)) continue;\n\n        usedKeys.add(key);\n        generatedItems.push({ type, item });\n        break; // done\n      } catch (e) {\n        console.warn(\"Shop item generation failed:\", type, e);\n      }\n    }\n  }\n\n  // === Step 4: Insert shopfront and assign prices ===\n  let updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      trashPile: updatedTrash,\n    },\n    offerings: {\n      ...state.offerings,\n      shopfront: generatedItems,\n    },\n  };\n\n  updatedState = assignShopPrices(updatedState);\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.ASSIGN_SHOP_PRICES\n  );\n\n  return {\n    ...updatedState,\n    log: [...updatedState.log],\n  };\n}\nfunction gainGold(state, amount) {\n  const newGold = (state.gold || 0) + amount;\n\n  return {\n    ...state,\n    gold: newGold,\n    log: [`Gained ${amount} gold.`, ...state.log],\n  };\n}\nfunction practiceWandwork(state) {\n  // Step 1: Increase base bunnies by 1\n  let newState = increaseBaseBunnies(state, 1);\n\n  // Step 2: Advance to path selection\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  // Step 3: Handle the transition (populate offerings)\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\nfunction lootHoard(state) {\n  const baseGold = 10;\n  const levelBonus = state.level || 0;\n  const enemiesDefeated = state.defeatedEnemies?.length || 0;\n  const luck = state.luck || 0;\n\n  const enemyBonus = enemiesDefeated * 5;\n  const luckBonus = luck * 2;\n\n  const totalGold = baseGold + levelBonus + enemyBonus + luckBonus;\n\n  // Step 1: Gain gold\n  let newState = gainGold(state, totalGold);\n\n  // Step 2: Track hoards looted\n  const hoardsLooted = (newState.hoardsLooted || 0) + 1;\n  newState = {\n    ...newState,\n    hoardsLooted,\n    log: [`Looted a hoard! (${totalGold}g)`, ...newState.log],\n  };\n\n  // Step 3: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction rest(state) {\n  const amountToHeal = state.restHealthRestore || 0;\n  const currentHealth = state.health || 0;\n\n  // Step 1: Heal the player\n  let newState = heal(state, amountToHeal);\n  const healedAmount = newState.health - currentHealth;\n\n  // Step 2: Check relic triggers for REST\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.REST);\n\n  // Step 3: Add one summary log line\n  newState = {\n    ...newState,\n    log: [\n      `Rested at the fire and recovered ${healedAmount} HP.`,\n      ...newState.log.filter((msg) => !msg.startsWith(\"Healed\")),\n    ],\n  };\n\n  // Step 4: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  //Step 5: Populate offerings for the new phase\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction toggleDeckInspect(state, dispatch) {\n  const isInspectingDeck = state.currentScreen === SCREENS.DECK;\n  const returnTo = state.previousScreen || SCREENS.MAIN;\n\n  dispatch({\n    type: ACTIONS.SCREEN_CHANGE,\n    payload: isInspectingDeck ? returnTo : SCREENS.DECK,\n  });\n}\n\n//#endregion\n//#region state setup and game initialization\nfunction createInitialState() {\n  return {\n    log: [],\n    currentScreen: SCREENS.MAIN,\n    previousScreen: null,\n    currentPhase: PHASES.MAIN_MENU,\n    currentPath: null,\n\n    basicCardCount: 5,\n    restHealthRestore: 10,\n    shopPriceMultiplier: 1,\n    enemyHealthMultiplier: 1,\n    difficulty: null,\n\n    maxHealth: 0,\n    health: 0,\n    baseBunnies: 0,\n\n    gold: 100,\n\n    luck: 0,\n    level: 0,\n    stage: 0,\n    misery: 0,\n\n    hoardsLooted: 0,\n    defeatedEnemies: [],\n    trashPile: [],\n\n    relicBelt: [],\n    potionBelt: [],\n\n    campaign: {\n      mulligans: 0,\n      deck: [],\n      ink: 4,\n      books: 1,\n      pages: 4,\n      handSize: 6,\n    },\n    combat: {\n      mulligans: 0,\n      deck: [],\n      hand: [],\n      graveyard: [],\n      exile: [],\n      spellbook: [],\n\n      combatEnded: null,\n\n      baseBunnies: 0,\n      ink: 0,\n      maxInk: 0,\n      books: 0,\n      maxBooks: 0,\n      pages: 0,\n      bunnies: 0,\n      maxPages: 0,\n      handSize: 0,\n\n      enemy: null,\n    },\n    offerings: {\n      difficulties: [],\n      shopfront: [],\n      cards: [],\n      potions: [],\n      gems: [],\n      relics: [],\n      paths: [],\n      combatRewards: [],\n      restOptions: [],\n    },\n  };\n}\nexport function selectDifficultyAndBeginGame(dispatch, difficulty) {\n  dispatch({ type: ACTIONS.SET_DIFFICULTY, payload: difficulty });\n  dispatch({ type: ACTIONS.GENERATE_STARTER_DECK });\n  dispatch({ type: ACTIONS.APPLY_DIFFICULTY_MODIFIERS });\n  dispatch({\n    type: ACTIONS.ADVANCE_PHASE,\n    payload: PHASES.MYTHIC_RELIC_OFFERING,\n  });\n}\nfunction createGameApp(initialState, reducer, renderFn) {\n  let state = initialState;\n  function dispatch(action) {\n    state = reducer(state, action);\n    renderFn(state, dispatch); // ✅ already correct\n  }\n  dispatch({ type: ACTIONS.NEW_GAME });\n  return { dispatch };\n}\n\n//#endregion\n//#region game mechanics\nfunction createCardInstance(\n  cardName = null,\n  rarity = null,\n  upgrades = 0,\n  gem = null\n) {\n  let card;\n  if (rarity) {\n    console.log(\"🔍 createCardInstance got rarity:\", rarity);\n  }\n  if (cardName) {\n    const found = cardList.find((c) => c.name === cardName);\n    if (!found) {\n      console.error(`Card not found: ${cardName}`);\n      return null;\n    }\n    card = { ...found };\n  } else if (rarity) {\n    const candidates = cardList.filter(\n      (c) =>\n        c.rarity === rarity &&\n        ![\"curse\", \"unique\", \"status\"].includes(c.specialSubtype)\n    );\n    if (candidates.length === 0) {\n      console.error(`No cards found with rarity: ${rarity}`);\n      return null;\n    }\n    card = { ...candidates[Math.floor(Math.random() * candidates.length)] };\n  } else {\n    console.error(\"createCardInstance requires either a cardName or a rarity.\");\n    return null;\n  }\n\n  // Apply upgrades if needed\n  if (upgrades > 0) {\n    card = upgradeCard(card, upgrades); // this should set .upgrades itself\n  }\n\n  // Apply gem if needed\n  if (gem) {\n    card = socketCardWithGem(card, gem);\n  }\n\n  return card;\n}\nfunction createRelicInstance(relicName) {\n  const found = relicList.find((r) => r.name === relicName);\n  if (!found) {\n    console.error(`Relic not found: ${relicName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction createPotionInstance(potionName, upgrades = 0) {\n  const found = potionList.find((p) => p.name === potionName);\n  if (!found) {\n    console.error(`Potion not found: ${potionName}`);\n    return null;\n  }\n\n  let potion = { ...found };\n\n  if (upgrades > 0) {\n    potion = upgradePotion(potion, upgrades);\n  }\n\n  return potion;\n}\nfunction createGemInstance(gemName) {\n  const found = gemList.find((g) => g.name === gemName);\n  if (!found) {\n    console.error(`Gem not found: ${gemName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction getRandomBossRelic() {\n  const bossRelics = relicList.filter((r) => r.bossOnly);\n  if (bossRelics.length === 0) return null;\n  const chosen = bossRelics[Math.floor(Math.random() * bossRelics.length)];\n  return { ...chosen };\n}\nfunction generateRandomRelic(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const ownedRelics = new Set([\n    ...state.relicBelt.map((r) => r.name),\n    ...state.trashPile.map((r) => r.name),\n  ]);\n\n  const HEARTSTONE = \"Heartstone\";\n\n  // Exclude Heartstone and duplicate high-rarity relics, and respect non-duplicable relics\n  let candidates = relicList.filter((r) => {\n    if (r.name === HEARTSTONE) return false;\n    if (r.bossOnly) return false;\n\n    // Exclude relics that shouldn't be duplicated\n    if (r.nonDuplicable && ownedRelics.has(r.name)) return false;\n\n    // Optional: still exclude duplicate Mythic/Legendary even if not marked\n    if (\n      (r.rarity === RARITIES.MYTHIC || r.rarity === RARITIES.LEGENDARY) &&\n      ownedRelics.has(r.name)\n    ) {\n      return false;\n    }\n\n    return true;\n  });\n\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  const filtered = candidates.filter((r) => r.rarity === rarity);\n  if (filtered.length === 0) {\n    console.warn(`No relics found for rarity: ${rarity}`);\n    return createRelicInstance(HEARTSTONE);\n  }\n\n  const chosen = filtered[Math.floor(Math.random() * filtered.length)];\n  return { ...chosen };\n}\nfunction generateRandomCard(\n  state,\n  { rarity = null, upgrades = undefined, gem = null } = {}\n) {\n  const luck = state.luck || 0;\n\n  const finalRarity =\n    rarity || weightedRandomChoice(getLuckAdjustedRarityWeights(luck));\n\n  const level = state.level ?? 0;\n  const totalFortune = (luck ?? 0) + level;\n\n  const upgradeWeights = {\n    0: Math.max(0, 60 - totalFortune),\n    1: 5 + totalFortune,\n    2: 3 + totalFortune,\n    3: 2 + totalFortune,\n    4: 0 + totalFortune,\n  };\n\n  const finalUpgrades =\n    upgrades !== undefined\n      ? upgrades\n      : Number(weightedRandomChoice(upgradeWeights));\n\n  const defeatedCount = state.defeatedEnemies?.length || 0;\n  const maxUpgrades = Math.min(4, Math.floor(defeatedCount / 3));\n  const cappedUpgrades = Math.min(finalUpgrades, maxUpgrades);\n\n  return createCardInstance(undefined, finalRarity, cappedUpgrades, gem);\n}\nfunction generateRandomPotion(state, { rarity = null, upgrades = null } = {}) {\n  const luck = state.luck || 0;\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n\n  const level = state.level ?? 0;\n  const totalFortune = (luck ?? 0) + level;\n\n  const upgradeWeights = {\n    0: Math.max(0, 70 - totalFortune),\n    1: 5 + totalFortune,\n    2: 3 + totalFortune,\n    3: 2 + totalFortune,\n    4: 0 + totalFortune,\n  };\n\n  // === Choose rarity if not provided ===\n  if (!rarity) {\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // === Fallback in case rarity yields no results ===\n  const candidates = potionList.filter((p) => p.rarity === rarity);\n  let basePotion;\n  if (candidates.length === 0) {\n    console.warn(\n      `No potions found for rarity: ${rarity}. Falling back to Lesser Healing Potion.`\n    );\n    basePotion = potionList.find((p) => p.name === \"Lesser Healing Potion\");\n    if (!basePotion) {\n      console.error(\n        \"Fallback potion 'Lesser Healing Potion' not found in potionList.\"\n      );\n      return null;\n    }\n    upgrades = 0; // ensure fallback is always unupgraded\n  } else {\n    basePotion = candidates[Math.floor(Math.random() * candidates.length)];\n\n    // === Choose upgrade level if not provided ===\n    if (upgrades === null) {\n      upgrades = Number(weightedRandomChoice(upgradeWeights));\n    }\n    upgrades = Math.min(upgrades, 4);\n  }\n\n  return createPotionInstance(basePotion.name, upgrades);\n}\nfunction generateRandomGem(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const fallbackGem = createGemInstance(\"Amethyst\");\n\n  // Choose rarity based on luck if not specified\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // Filter by rarity\n  const candidates = gemList.filter((gem) => gem.rarity === rarity);\n\n  if (candidates.length === 0) {\n    console.warn(\n      `No gems found for rarity: ${rarity}, returning fallback gem.`\n    );\n    return fallbackGem;\n  }\n\n  const chosenGem = candidates[Math.floor(Math.random() * candidates.length)];\n  return { ...chosenGem };\n}\nfunction upgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to upgradeCard:\", card);\n    return card;\n  }\n\n  if (card.unupgradable) {\n    console.warn(`Card ${card.name} is marked unupgradable.`);\n    return card;\n  }\n\n  const upgradedCard = { ...card };\n  let upgradable = false;\n\n  if (\"bunnyAdd\" in upgradedCard) {\n    upgradedCard.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyAddPerCardInDeck\" in upgradedCard) {\n    upgradedCard.bunnyAddPerCardInDeck += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"goldAddPerCardInDeck\" in upgradedCard) {\n    upgradedCard.goldAddPerCardInDeck += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"healPerCardInDeck\" in upgradedCard) {\n    upgradedCard.healPerCardInDeck += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedCard) {\n    upgradedCard.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"goldAdd\" in upgradedCard) {\n    upgradedCard.goldAdd += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInDeck += level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInHand\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInHand += level;\n    upgradable = true;\n  }\n\n  if (\"cardDraw\" in upgradedCard) {\n    upgradedCard.cardDraw += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"inkAdd\" in upgradedCard) {\n    upgradedCard.inkAdd += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"healthCost\" in upgradedCard) {\n    upgradedCard.healthCost -= 1 * level;\n    upgradable = true;\n  }\n\n  if (\"heal\" in upgradedCard) {\n    upgradedCard.heal += 5 * level;\n    upgradable = true;\n  }\n\n  // ✅ New: Weaken effect scaling\n  if (\"weakenEnemyHpPercent\" in upgradedCard) {\n    upgradedCard.weakenEnemyHpPercent += 0.05 * level;\n    upgradable = true;\n  }\n\n  // === Upgrade damageRoll (any type) ===\n  if (upgradedCard.damageRoll) {\n    upgradedCard.damageRoll = {\n      ...upgradedCard.damageRoll,\n      dice: upgradedCard.damageRoll.dice + level,\n      sides: upgradedCard.damageRoll.sides + level,\n      flatBonus: upgradedCard.damageRoll.flatBonus + level,\n    };\n    upgradable = true;\n  }\n\n  // === Increase inkCost by per-level amount ===\n  if (\n    \"inkCostIncreasePerLevel\" in upgradedCard &&\n    typeof upgradedCard.inkCost === \"number\"\n  ) {\n    upgradedCard.inkCost += upgradedCard.inkCostIncreasePerLevel * level;\n    upgradable = true;\n  }\n\n  // === Multiply base damage by per-level multiplier ===\n  if (\n    \"damageMultiplierPerLevel\" in upgradedCard &&\n    typeof upgradedCard.damage === \"number\"\n  ) {\n    upgradedCard.damage *= Math.pow(\n      upgradedCard.damageMultiplierPerLevel,\n      level\n    );\n    upgradable = true;\n  }\n\n  // Add or increment the upgrade level\n  upgradedCard.upgrades = (upgradedCard.upgrades || 0) + level;\n\n  // === Smart renaming ===\n  const baseName = card.name\n    .replace(/\\s\\+\\d+$/, \"\") // remove trailing \"+3\"\n    .replace(/\\s\\d+d\\d+(\\s?\\+\\d+)?$/, \"\"); // remove \"3d6\" or \"3d6 +3\"\n\n  if (upgradedCard.damageRoll) {\n    const { dice = 1, sides, flatBonus = 0 } = upgradedCard.damageRoll;\n    upgradedCard.name = `${baseName} ${dice}d${sides}${\n      flatBonus > 0 ? `+${flatBonus}` : \"\"\n    }`;\n  } else {\n    upgradedCard.name = `${baseName} +${upgradedCard.upgrades}`;\n  }\n\n  return upgradedCard;\n}\n\nfunction downgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to downgradeCard:\", card);\n    return card;\n  }\n\n  if (card.undowngradable) {\n    console.warn(`Card ${card.name} is marked undowngradable.`);\n    return card;\n  }\n\n  const downgradedCard = { ...card };\n  const originalLevel = downgradedCard.upgrades || 0;\n  const newLevel = Math.max(originalLevel - level, -1);\n  const levelDiff = originalLevel - newLevel;\n\n  const applyHalvedBase = () => {\n    if (\"bunnyAdd\" in card)\n      downgradedCard.bunnyAdd = Math.floor(card.bunnyAdd / 2);\n    if (\"bunnyAddPerCardInDeck\" in card)\n      downgradedCard.bunnyAddPerCardInDeck = 0.5;\n    if (\"bunnyMult\" in card)\n      downgradedCard.bunnyMult = Math.floor(card.bunnyMult / 2);\n    if (\"goldAdd\" in card)\n      downgradedCard.goldAdd = Math.floor(card.goldAdd / 2);\n    if (\"goldAddPerCardInDeck\" in card)\n      downgradedCard.goldAddPerCardInDeck = 0.5;\n    if (\"permanentlyUpgradeRandomCardsInDeck\" in card)\n      downgradedCard.permanentlyUpgradeRandomCardsInDeck = Math.floor(\n        card.permanentlyUpgradeRandomCardsInDeck / 2\n      );\n    if (\"permanentlyUpgradeRandomCardsInHand\" in card)\n      downgradedCard.permanentlyUpgradeRandomCardsInHand = Math.floor(\n        card.permanentlyUpgradeRandomCardsInHand / 2\n      );\n    if (\"cardDraw\" in card)\n      downgradedCard.cardDraw = Math.floor(card.cardDraw / 2);\n    if (\"inkAdd\" in card) downgradedCard.inkAdd = Math.floor(card.inkAdd / 2);\n    if (\"healthCost\" in card)\n      downgradedCard.healthCost = Math.floor(card.healthCost * 1.5);\n    if (\"heal\" in card)\n      downgradedCard.heal = Math.max(1, Math.floor(card.heal / 2));\n    if (\"healPerCardInDeck\" in card) downgradedCard.healPerCardInDeck = 0.5;\n    if (\"weakenEnemyHpPercent\" in card)\n      downgradedCard.weakenEnemyHpPercent = 0.1;\n\n    if (typeof card.damage === \"number\")\n      downgradedCard.damage = Math.ceil(card.damage / 2);\n\n    if (card.damageRoll) {\n      downgradedCard.damageRoll = {\n        dice: Math.max(1, Math.floor(card.damageRoll.dice / 2)),\n        sides: Math.max(1, Math.floor(card.damageRoll.sides / 2)),\n        flatBonus: Math.max(0, Math.floor(card.damageRoll.flatBonus / 2)),\n      };\n    }\n  };\n\n  if (newLevel === -1) {\n    applyHalvedBase();\n  } else {\n    if (\"bunnyAdd\" in downgradedCard) downgradedCard.bunnyAdd -= 3 * levelDiff;\n    if (\"bunnyAddPerCardInDeck\" in downgradedCard) {\n      downgradedCard.bunnyAddPerCardInDeck = Math.max(\n        0.5,\n        downgradedCard.bunnyAddPerCardInDeck - 0.5 * levelDiff\n      );\n    }\n    if (\"bunnyMult\" in downgradedCard)\n      downgradedCard.bunnyMult -= 0.5 * levelDiff;\n    if (\"goldAdd\" in downgradedCard) downgradedCard.goldAdd -= 2 * levelDiff;\n    if (\"goldAddPerCardInDeck\" in downgradedCard) {\n      downgradedCard.goldAddPerCardInDeck = Math.max(\n        0.5,\n        downgradedCard.goldAddPerCardInDeck - 0.5 * levelDiff\n      );\n    }\n    if (\"permanentlyUpgradeRandomCardsInDeck\" in downgradedCard)\n      downgradedCard.permanentlyUpgradeRandomCardsInDeck -= levelDiff;\n    if (\"permanentlyUpgradeRandomCardsInHand\" in downgradedCard)\n      downgradedCard.permanentlyUpgradeRandomCardsInHand -= levelDiff;\n    if (\"cardDraw\" in downgradedCard) downgradedCard.cardDraw -= levelDiff;\n    if (\"inkAdd\" in downgradedCard) downgradedCard.inkAdd -= levelDiff;\n    if (\"healthCost\" in downgradedCard) downgradedCard.healthCost += levelDiff;\n    if (\"heal\" in downgradedCard)\n      downgradedCard.heal = Math.max(1, downgradedCard.heal - 5 * levelDiff);\n    if (\"healPerCardInDeck\" in downgradedCard) {\n      downgradedCard.healPerCardInDeck = Math.max(\n        0.5,\n        downgradedCard.healPerCardInDeck - 0.5 * levelDiff\n      );\n    }\n    if (\"weakenEnemyHpPercent\" in downgradedCard) {\n      downgradedCard.weakenEnemyHpPercent = Math.max(\n        0.1,\n        downgradedCard.weakenEnemyHpPercent - 0.05 * levelDiff\n      );\n    }\n\n    if (\n      \"inkCostIncreasePerLevel\" in downgradedCard &&\n      typeof downgradedCard.inkCost === \"number\"\n    ) {\n      downgradedCard.inkCost -=\n        downgradedCard.inkCostIncreasePerLevel * levelDiff;\n    }\n\n    if (\n      \"damageMultiplierPerLevel\" in downgradedCard &&\n      typeof downgradedCard.damage === \"number\"\n    ) {\n      downgradedCard.damage = Math.ceil(\n        downgradedCard.damage /\n          Math.pow(downgradedCard.damageMultiplierPerLevel, levelDiff)\n      );\n    }\n\n    if (downgradedCard.damageRoll) {\n      downgradedCard.damageRoll = {\n        ...downgradedCard.damageRoll,\n        dice: Math.max(1, downgradedCard.damageRoll.dice - levelDiff),\n        sides: Math.max(1, downgradedCard.damageRoll.sides - levelDiff),\n        flatBonus: Math.max(0, downgradedCard.damageRoll.flatBonus - levelDiff),\n      };\n    }\n  }\n\n  downgradedCard.upgrades = newLevel;\n\n  const baseName = card.name\n    .replace(/\\s\\+\\d+$/, \"\")\n    .replace(/\\s\\d+d\\d+(\\s?\\+\\d+)?$/, \"\");\n\n  if (downgradedCard.damageRoll) {\n    const { dice = 1, sides, flatBonus = 0 } = downgradedCard.damageRoll;\n    downgradedCard.name = `${baseName} ${dice}d${sides}${\n      flatBonus > 0 ? `+${flatBonus}` : \"\"\n    }`;\n  } else if (newLevel > 0) {\n    downgradedCard.name = `${baseName} +${newLevel}`;\n  } else if (newLevel === -1) {\n    downgradedCard.name = `${baseName} -1`;\n  } else {\n    downgradedCard.name = baseName;\n  }\n\n  return downgradedCard;\n}\n\nfunction upgradePotion(potion, level = 1) {\n  if (!potion || typeof potion !== \"object\") {\n    console.error(\"Invalid potion passed to upgradePotion:\", potion);\n    return potion;\n  }\n\n  // Clone the potion to avoid mutating the original\n  const upgradedPotion = { ...potion };\n\n  let upgradable = false;\n\n  // === Upgradeable Effects ===\n  if (\"healthRestore\" in upgradedPotion) {\n    upgradedPotion.healthRestore += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"bonusInk\" in upgradedPotion) {\n    upgradedPotion.bonusInk += level;\n    upgradable = true;\n  }\n\n  if (\"increaseMaxHp\" in upgradedPotion) {\n    upgradedPotion.increaseMaxHp += level * 2;\n    upgradable = true;\n  }\n\n  if (\"upgradeCardsInHand\" in upgradedPotion) {\n    upgradedPotion.upgradeCardsInHand += level;\n    upgradable = true;\n  }\n  if (\"cardDraw\" in upgradedPotion) {\n    upgradedPotion.cardDraw += level;\n    upgradable = true;\n  }\n\n  if (\"bunnyAdd\" in upgradedPotion) {\n    upgradedPotion.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedPotion) {\n    upgradedPotion.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Potion cannot be upgraded: ${potion.name}`);\n    return potion;\n  }\n\n  // === Track upgrade level ===\n  upgradedPotion.upgrades = (upgradedPotion.upgrades || 0) + level;\n\n  // === Update potion name to reflect upgrades ===\n  upgradedPotion.name =\n    potion.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedPotion.upgrades}`;\n\n  return upgradedPotion;\n}\n\nfunction socketCardWithGem(card, gem) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to socketCardWithGem:\", card);\n    return card;\n  }\n\n  if (card.unsocketable) {\n    console.warn(`Card ${card.name} is marked unsocketable.`);\n    return card;\n  }\n\n  if (!gem || typeof gem !== \"object\" || !gem.name) {\n    console.error(\"Invalid gem passed to socketCardWithGem:\", gem);\n    return card;\n  }\n\n  const socketedCard = { ...card };\n  const upgradeLevel = socketedCard.upgrades || 0;\n\n  const applyEffect = (key, baseAmount, perUpgrade) => {\n    socketedCard[key] =\n      (socketedCard[key] || 0) + baseAmount + perUpgrade * upgradeLevel;\n  };\n\n  // === Standard effects ===\n\n  if (\"bunnyAdd\" in gem) applyEffect(\"bunnyAdd\", gem.bunnyAdd, 3);\n  if (\"bunnyMult\" in gem) applyEffect(\"bunnyMult\", gem.bunnyMult, 0.5);\n  if (\"goldAdd\" in gem) applyEffect(\"goldAdd\", gem.goldAdd, 2);\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in gem)\n    applyEffect(\n      \"permanentlyUpgradeRandomCardsInDeck\",\n      gem.permanentlyUpgradeRandomCardsInDeck,\n      1\n    );\n  if (\"permanentlyUpgradeRandomCardsInHand\" in gem)\n    applyEffect(\n      \"permanentlyUpgradeRandomCardsInHand\",\n      gem.permanentlyUpgradeRandomCardsInHand,\n      1\n    );\n  if (\"damage\" in gem) applyEffect(\"damage\", gem.damage, 5);\n  if (\"damageType\" in gem) socketedCard.damageType = gem.damageType;\n  if (\"cardDraw\" in gem) applyEffect(\"cardDraw\", gem.cardDraw, 1);\n  if (\"inkAdd\" in gem) applyEffect(\"inkAdd\", gem.inkAdd, 1);\n  if (\"healthCost\" in gem) applyEffect(\"healthCost\", gem.healthCost, -1);\n  if (\"heal\" in gem) applyEffect(\"heal\", gem.heal, 5);\n  if (\"weakenEnemyHpPercent\" in gem) {\n    socketedCard.weakenEnemyHpPercent =\n      (socketedCard.weakenEnemyHpPercent || 0) + gem.weakenEnemyHpPercent;\n  }\n\n  // === Add upgradesOnCast property ===\n  if (\"upgradesOnCast\" in gem) {\n    socketedCard.upgradesOnCast =\n      (socketedCard.upgradesOnCast || 0) + gem.upgradesOnCast;\n  }\n  // === Apply ink cost increase per level (fire effect)\n  if (\"inkCostIncreasePerLevel\" in gem) {\n    socketedCard.inkCostIncreasePerLevel = gem.inkCostIncreasePerLevel;\n    // Apply retroactive increase if inkCost exists\n    if (typeof socketedCard.inkCost === \"number\") {\n      socketedCard.inkCost += gem.inkCostIncreasePerLevel * upgradeLevel;\n    }\n  }\n\n  // === Apply damage multiplier per level (fire effect)\n  if (\"damageMultiplierPerLevel\" in gem) {\n    socketedCard.damageMultiplierPerLevel = gem.damageMultiplierPerLevel;\n    // Apply retroactive multiplier if damage exists\n    if (typeof socketedCard.damage === \"number\") {\n      socketedCard.damage *= Math.pow(\n        gem.damageMultiplierPerLevel,\n        upgradeLevel\n      );\n    }\n  }\n\n  // === Merge damageTypes (if gem has them) ===\n  if (Array.isArray(gem.damageTypes)) {\n    socketedCard.damageTypes = Array.isArray(socketedCard.damageTypes)\n      ? [...socketedCard.damageTypes]\n      : [];\n\n    for (const dmgType of gem.damageTypes) {\n      if (!socketedCard.damageTypes.includes(dmgType)) {\n        socketedCard.damageTypes.push(dmgType);\n      }\n    }\n  }\n\n  // === Add damageRoll support (e.g., Amber) ===\n\n  if (\"damageRoll\" in gem && typeof gem.damageRoll === \"object\") {\n    const gemRoll = gem.damageRoll;\n    const baseDice = gemRoll.dice || 0;\n    const baseSides = gemRoll.sides || 0;\n    const baseBonus = gemRoll.flatBonus || 0;\n\n    socketedCard.damageRoll = {\n      dice: (socketedCard.damageRoll?.dice || 0) + baseDice + upgradeLevel,\n      sides: (socketedCard.damageRoll?.sides || 0) + baseSides + upgradeLevel,\n      flatBonus:\n        (socketedCard.damageRoll?.flatBonus || 0) + baseBonus + upgradeLevel,\n    };\n  }\n\n  // === Attach gem and rename card ===\n\n  socketedCard.gem = gem;\n\n  // Build name suffix if there's a damageRoll\n  let nameSuffix = \"\";\n  if (\n    socketedCard.damageRoll &&\n    typeof socketedCard.damageRoll.dice === \"number\" &&\n    typeof socketedCard.damageRoll.sides === \"number\"\n  ) {\n    const { dice, sides, flatBonus } = socketedCard.damageRoll;\n    nameSuffix = ` ${dice}d${sides}${flatBonus ? `+${flatBonus}` : \"\"}`;\n  }\n\n  // Final name: GemName OriginalName + dice suffix if present\n  socketedCard.name = `${gem.name} ${card.name.replace(\n    /\\s\\d+d\\d+(\\+\\d+)?$/,\n    \"\"\n  )}${nameSuffix}`;\n\n  return socketedCard;\n}\n\nfunction getLuckAdjustedRarityWeights(luck = 0) {\n  return {\n    [RARITIES.COMMON]: Math.max(20, 60 - luck * 2),\n    [RARITIES.UNCOMMON]: Math.max(20, 40 - luck),\n    [RARITIES.RARE]: Math.min(20, 5 + luck),\n    [RARITIES.MYTHIC]: Math.min(10, 2 + Math.ceil(luck / 2)),\n    [RARITIES.LEGENDARY]: Math.min(5, 1 + Math.ceil(luck / 3)),\n  };\n}\n\nfunction transmuteCard(card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to transmuteCard:\", card);\n    return null;\n  }\n\n  // Define excluded subtypes (easily extendable)\n  const excludedSubtypes = new Set([\n    SPECIAL_CARD_SUBTYPES.CURSE,\n    // Add more subtypes here in future\n  ]);\n\n  const alternatives = cardList.filter(\n    (c) =>\n      c.name !== card.name &&\n      !c.unchoosableByTransmute &&\n      (!c.specialSubtype || !excludedSubtypes.has(c.specialSubtype))\n  );\n\n  if (alternatives.length === 0) {\n    console.warn(\n      `No valid alternatives found to transmute ${card.name}. Returning original.`\n    );\n    return { ...card };\n  }\n\n  const newBase = alternatives[Math.floor(Math.random() * alternatives.length)];\n  return createCardInstance(newBase.name, null, card.upgrades, card.gem);\n}\n\nfunction generateEnemy(state, path, modifyEnemyAbilityPower = null) {\n  const difficulty = pathMap[path?.path]?.difficulty;\n  console.log(\"Path:\", path?.path, \"| Difficulty:\", difficulty);\n\n  const level = state.level ?? 1;\n  const stage = state.stage ?? 0;\n  console.log(`Generating enemy at stage ${stage}`);\n\n  const multiplier = state.enemyHealthMultiplier ?? 1;\n  const isBoss = difficulty === \"boss\";\n\n  // === Health Calculation ===\n  const baseHealthMap = {\n    easy: 10,\n    medium: 13,\n    hard: 16,\n    boss: 25,\n  };\n\n  const perLevelIncrement = {\n    easy: 4,\n    medium: 5,\n    hard: 6,\n    boss: 10,\n  };\n\n  const perStageMultiplier = {\n    0: 1,\n    1: 2,\n    2: 3,\n  };\n\n  let base = baseHealthMap[difficulty] ?? 10;\n  let increment = perLevelIncrement[difficulty] ?? 3;\n  let stageMultiplier = perStageMultiplier[stage] ?? 1;\n  let health = (base + level * increment) * multiplier * stageMultiplier;\n\n  // === Ability Assignment ===\n  const allAbilities = Object.keys(enemyAbilityDataMap);\n  const selectedAbilities = new Set();\n\n  let numAbilities = 0;\n  if (difficulty === \"medium\") numAbilities = 1;\n  else if (difficulty === \"hard\") numAbilities = 2;\n  if (isBoss) numAbilities = 0;\n\n  if (state.difficulty === DIFFICULTIES.HARD) {\n    const bonusChance = Math.max(0, 0.5 - (state.luck ?? 0));\n    if (Math.random() < bonusChance) numAbilities += 1;\n  }\n\n  numAbilities = Math.min(numAbilities, 3);\n\n  while (selectedAbilities.size < numAbilities) {\n    const ability =\n      allAbilities[Math.floor(Math.random() * allAbilities.length)];\n    selectedAbilities.add(ability);\n  }\n\n  // === Build abilities object ===\n  const abilities = {};\n  for (const key of selectedAbilities) {\n    const data = enemyAbilityDataMap[key];\n    const baseValue = data.baseValue ?? 0;\n    const increment = data.incrementValue ?? 0;\n    const stage = state.stage ?? 0;\n    let value = baseValue + increment * stage;\n    console.log(\n      `→ Ability: ${key} | Base: ${baseValue}, Incr: ${increment}, Stage: ${stage}, Final Value: ${value}`\n    );\n\n    if (typeof modifyEnemyAbilityPower === \"function\") {\n      value = modifyEnemyAbilityPower({\n        ability: key,\n        baseValue,\n        increment,\n        currentValue: value,\n        stage,\n        enemyLevel: level,\n        difficulty,\n        isBoss,\n        state,\n      });\n    }\n\n    abilities[key] = value;\n  }\n  // === Name Generation ===\n  let name;\n  const smallMonsters = [\n    \"goblin\",\n    \"kobold\",\n    \"rat\",\n    \"spider\",\n    \"imp\",\n    \"gremlin\",\n    \"bat\",\n    \"quasit\",\n    \"skeleton\",\n    \"zombie\",\n  ];\n\n  const mediumMonsters = [\n    \"orc\",\n    \"ogre\",\n    \"gnoll\",\n    \"troll\",\n    \"hobgoblin\",\n    \"ghoul\",\n    \"harpy\",\n    \"lizardfolk\",\n    \"wight\",\n    \"mimic\",\n  ];\n\n  const largeMonsters = [\n    \"dragon\",\n    \"manticore\",\n    \"hydra\",\n    \"wyvern\",\n    \"beholder\",\n    \"medusa\",\n    \"chimera\",\n    \"giant\",\n    \"basilisk\",\n    \"banshee\",\n  ];\n  const vegetables = [\n    \"carrot\",\n    \"broccoli\",\n    \"spinach\",\n    \"kale\",\n    \"zucchini\",\n    \"eggplant\",\n    \"cauliflower\",\n    \"cabbage\",\n    \"lettuce\",\n    \"beet\",\n    \"radish\",\n    \"turnip\",\n    \"bokchoi\",\n    \"chilli\",\n    \"nopal\",\n    \"durian\",\n    \"bean\",\n    \"yam\",\n    \"tomato\",\n    \"asparagus\",\n    \"potato\",\n    \"pumpkin\",\n    \"bellpepper\",\n    \"celery\",\n    \"onion\",\n  ];\n  const bossNames = [\"Avatar of the Weasel\", \"Fox Spirit\", \"Beaglesoul\"];\n\n  if (isBoss) {\n    const defeated = state.defeatedEnemies ?? [];\n\n    // Filter out bosses that have already been defeated\n    const remainingBosses = bossNames.filter(\n      (boss) => !defeated.includes(boss)\n    );\n\n    if (remainingBosses.length === 0) {\n      console.warn(\"All bosses have already been defeated!\");\n      name = \"???\"; // or throw an error or return null or fallback enemy\n    } else {\n      name =\n        remainingBosses[Math.floor(Math.random() * remainingBosses.length)];\n    }\n  } else {\n    // Base monster type\n    let monsterList;\n    if (stage === 0) {\n      monsterList = smallMonsters;\n    } else if (stage === 1) {\n      monsterList = mediumMonsters;\n    } else {\n      monsterList = largeMonsters;\n    }\n\n    const vegetable = vegetables[Math.floor(Math.random() * vegetables.length)];\n    const monster = monsterList[Math.floor(Math.random() * monsterList.length)];\n\n    // Prefixes based on abilities\n    const prefixes = Object.keys(abilities)\n      .map((ability) => enemyAbilityDataMap[ability]?.prefix)\n      .filter(Boolean);\n\n    name = [...prefixes, capitalize(vegetable), capitalize(monster)].join(\" \");\n  }\n\n  // === Loot Generation ===\n  const loot = generateEnemyLoot(state, difficulty, numAbilities, isBoss);\n\n  return {\n    name,\n    hp: Math.round(health),\n    abilities,\n    loot,\n    isBoss,\n  };\n}\nfunction generateEnemyLoot(state, difficulty, numAbilities, isBoss) {\n  const luck = state.luck ?? 0;\n  const level = state.level ?? 1;\n  const deck = state.campaign?.deck ?? [];\n  const allGemmedOrUnsocketable =\n    deck.length > 0 && deck.every((card) => card.gem || card.unsocketable);\n  const weights = {\n    gold: 30,\n    potion: 30,\n    card: 40,\n    relic: 5 + luck + numAbilities * 4,\n    gem: allGemmedOrUnsocketable ? 0 : 5 + luck + numAbilities * 4,\n  };\n\n  let dropsRemaining = isBoss ? 3 : 1;\n  if (!isBoss) {\n    const chanceTwo = 50 + luck + numAbilities * 20;\n    if (Math.random() * 100 < chanceTwo) {\n      dropsRemaining++;\n      const chanceThree = 35 + luck + numAbilities * 15;\n      if (Math.random() * 100 < chanceThree) {\n        dropsRemaining++;\n      }\n    }\n  }\n\n  const usedTypes = new Set();\n  const loot = [];\n\n  console.log(\"💥 Generating loot — boss:\", isBoss, \"drops:\", dropsRemaining);\n\n  // === Guaranteed gold for bosses\n  if (isBoss) {\n    const guaranteedGold = 100;\n    console.log(\"💰 Boss gold drop (guaranteed):\", guaranteedGold);\n    loot.push({ type: \"gold\", value: guaranteedGold });\n\n    const bossRelic = getRandomBossRelic();\n    if (bossRelic && bossRelic.name) {\n      console.log(\"🧿 Boss Relic drop:\", bossRelic.name);\n      loot.push({ type: \"relic\", value: bossRelic });\n      usedTypes.add(\"relic\");\n      dropsRemaining--; // Only reduce dropsRemaining for relic\n    } else {\n      console.warn(\"⚠️ Boss relic was null or missing .name:\", bossRelic);\n    }\n\n    usedTypes.add(\"gold\"); // Prevent gold from dropping again\n  }\n\n  while (dropsRemaining > 0) {\n    const available = Object.entries(weights).filter(\n      ([type, weight]) => weight > 0 && !usedTypes.has(type)\n    );\n\n    if (available.length === 0) {\n      console.warn(\"⚠️ No available loot types remaining.\");\n      break;\n    }\n\n    const totalWeight = available.reduce((sum, [_, w]) => sum + w, 0);\n    let roll = Math.random() * totalWeight;\n\n    let selected;\n    for (const [type, weight] of available) {\n      if (roll < weight) {\n        selected = type;\n        break;\n      }\n      roll -= weight;\n    }\n\n    usedTypes.add(selected);\n    console.log(\"🎁 Loot type selected:\", selected);\n\n    // === Loot Type Handling ===\n    if (selected === \"gold\") {\n      const base = { easy: 3, medium: 5, hard: 8 }[difficulty] ?? 2;\n      const amount =\n        (base + level + luck + numAbilities * 3) * (0.5 + Math.random());\n      const goldAmount = Math.max(1, Math.round(amount));\n      console.log(\"💰 Gold awarded:\", goldAmount);\n      loot.push({ type: \"gold\", value: goldAmount });\n    } else if (selected === \"card\") {\n      const card = generateRandomCard(state);\n      if (!card) {\n        console.warn(\"⚠️ Card generation returned null or undefined!\");\n        continue;\n      }\n      console.log(\"🃏 Card awarded:\", card.name ?? \"[Unnamed card]\");\n      loot.push({ type: \"card\", value: card });\n    } else if (selected === \"potion\") {\n      const potion = generateRandomPotion(state);\n      if (!potion) {\n        console.warn(\"⚠️ Potion generation returned null or undefined!\");\n        continue;\n      }\n      console.log(\n        \"🧪 Potion awarded:\",\n        potion.name || potion.type || \"[Unnamed potion]\"\n      );\n      loot.push({ type: \"potion\", value: potion });\n    } else if (selected === \"relic\") {\n      const relic = generateRandomRelic(state);\n      if (!relic) {\n        console.warn(\"⚠️ Relic generation returned null or undefined!\");\n        continue;\n      }\n      console.log(\"💎 Relic awarded:\", relic.name ?? \"[Unnamed relic]\");\n      loot.push({ type: \"relic\", value: relic });\n    } else if (selected === \"gem\") {\n      const gem = generateRandomGem(state);\n      if (!gem) {\n        console.warn(\"⚠️ Gem generation returned null or undefined!\");\n        continue;\n      }\n      console.log(\n        \"🔮 Gem awarded:\",\n        gem.name || gem.color || gem.type || \"[Unnamed gem]\"\n      );\n      loot.push({ type: \"gem\", value: gem });\n    } else {\n      console.warn(\"❓ Unknown loot type selected:\", selected);\n    }\n\n    dropsRemaining--;\n  }\n\n  console.log(\"🎉 Final generated loot:\", loot);\n  return loot;\n}\n\nfunction permanentlyUpgradeRandomCardsInDeck(deck, numUpgrades = 1) {\n  const upgradableCards = deck.filter((card) => !card.unupgradable);\n  const shuffled = [...upgradableCards].sort(() => Math.random() - 0.5);\n  const toUpgrade = shuffled.slice(0, numUpgrades);\n  const upgradedCards = toUpgrade.map((card) => upgradeCard(card, 1));\n\n  return deck.map((card) => {\n    const index = toUpgrade.indexOf(card);\n    return index !== -1 ? upgradedCards[index] : card;\n  });\n}\n\n//#endregion\n//#region game reducer\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.NEW_GAME:\n      return {\n        ...createInitialState(),\n        log: [\"New game started.\"],\n      };\n\n    case ACTIONS.SET_DIFFICULTY: {\n      if (state.difficulty === action.payload) {\n        console.log(\"Difficulty already set to\", action.payload);\n        return state;\n      }\n      console.log(`Difficulty set to ${action.payload}`);\n      return {\n        ...state,\n        difficulty: action.payload, // ✅ store at root\n        log: [`Difficulty set to ${action.payload}.`, ...state.log],\n      };\n    }\n\n    case ACTIONS.GENERATE_STARTER_DECK:\n      return generateStarterDeck(state);\n\n    case ACTIONS.APPLY_DIFFICULTY_MODIFIERS:\n      return applyDifficultyModifiers(state);\n\n    case ACTIONS.ADVANCE_PHASE:\n      const newState = advancePhaseTo(state, action.payload);\n      return handlePhaseTransitions(newState);\n\n    case ACTIONS.CREATE_CARD_INSTANCE: {\n      const newCard = createCardInstance(\n        action.payload.cardName,\n        action.payload.rarity,\n        action.payload.upgrades,\n        action.payload.gem\n      );\n      return {\n        ...state,\n        campaign: {\n          ...state.campaign,\n          deck: [...state.campaign.deck, newCard],\n        },\n        log: [`Created card: ${newCard.name}`, ...state.log],\n      };\n    }\n\n    case ACTIONS.POPULATE_RELIC_OFFERINGS:\n      return populateRelicOfferings(state, action.payload?.rarity);\n\n    case ACTIONS.PICK_RELIC:\n      return pickRelic(state, action.payload);\n\n    case ACTIONS.POPULATE_PATH_OFFERINGS:\n      return populatePathOfferings(state);\n\n    case ACTIONS.PICK_PATH:\n      return pickPath(state, action.payload);\n\n    case ACTIONS.POPULATE_CARD_OFFERINGS:\n      return populateCardOfferings(state);\n\n    case ACTIONS.PICK_CARD:\n      return pickCard(state, action.payload);\n\n    case ACTIONS.POPULATE_POTION_OFFERINGS:\n      return populatePotionOfferings(state);\n\n    case ACTIONS.PICK_POTION:\n      return pickPotion(state, action.payload);\n\n    case ACTIONS.DRINK_POTION: {\n      const potionIndex = action.payload;\n      const potionToDrink = state.potionBelt[potionIndex];\n      if (!potionToDrink) {\n        console.error(\"Invalid potion index:\", potionIndex);\n        return state;\n      }\n      return drinkPotion(state, potionToDrink);\n    }\n\n    case ACTIONS.POPULATE_GEM_OFFERINGS:\n      return populateGemOfferings(state);\n\n    case ACTIONS.OPEN_MOD_SCREEN:\n      return openModScreen(state, action.payload.mod, action.payload.origin);\n\n    case ACTIONS.APPLY_CARD_MOD:\n      return applyModToCard(state, action.payload); // payload = selected card\n\n    case ACTIONS.SCREEN_CHANGE:\n      return {\n        ...state,\n        previousScreen: state.currentScreen,\n        currentScreen: action.payload,\n      };\n\n    case ACTIONS.POPULATE_SHOPFRONT:\n      return populateShopfront(state);\n\n    case ACTIONS.INCREASE_BASE_BUNNIES:\n      return increaseBaseBunnies(state, action.payload);\n\n    case ACTIONS.GAIN_GOLD:\n      return gainGold(state, action.payload);\n\n    case ACTIONS.PRACTICE_WANDWORK:\n      return practiceWandwork(state);\n\n    case ACTIONS.LOOT_HOARD:\n      return lootHoard(state);\n\n    case ACTIONS.REST:\n      return rest(state);\n\n    case ACTIONS.START_TURN:\n      return startTurn(state, action.dispatch);\n\n    case ACTIONS.CLOSE_COMBAT_REWARDS:\n      return closeCombatRewards(state);\n\n    case ACTIONS.MULLIGAN:\n      return mulligan(state);\n\n    case ACTIONS.CLAIM_GOLD_REWARD: {\n      const { index, amount } = action.payload;\n      const newRewards = [...state.offerings.combatRewards];\n      newRewards.splice(index, 1);\n\n      return {\n        ...gainGold(state, amount),\n        offerings: {\n          ...state.offerings,\n          combatRewards: newRewards,\n        },\n      };\n    }\n\n    case ACTIONS.DRAW_CARD:\n      return drawCard(state);\n\n    case ACTIONS.PLAY_CARD:\n      return playCard(state, action.payload);\n\n    case ACTIONS.CAST_SPELLBOOK:\n      return castSpellbook(state);\n\n    case ACTIONS.EXIT_SHOP:\n      return exitShop(state);\n\n    case ACTIONS.LOG_MESSAGE:\n      return {\n        ...state,\n        log: [action.payload, ...state.log],\n      };\n\n    default:\n      console.warn(\"Unknown action type:\", action.type);\n      return state;\n  }\n}\n// #endregion\n\n// Initialize the game app\nwindow.onload = () => {\n  createGameApp(createInitialState(), gameReducer, render);\n};\n\n//hotkeys\nexport function setupHotkeys(state, dispatch) {\n  document.onkeydown = null; // clear previous\n\n  document.onkeydown = (e) => {\n    const key = e.key;\n\n    // === Always Available\n    if (key === \"Escape\") {\n      dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: SCREENS.MAIN });\n    }\n\n    // === Path Selection\n    const isPathSelection =\n      state.currentPhase === PHASES.PATH_SELECTION &&\n      state.offerings.paths?.length > 0;\n\n    if (isPathSelection) {\n      const index = parseInt(key, 10) - 1;\n      if (!isNaN(index) && state.offerings.paths[index]) {\n        dispatch({ type: ACTIONS.PICK_PATH, payload: index });\n      }\n    }\n\n    // === Combat Phase\n    const isCombat =\n      state.currentPhase === PHASES.COMBAT &&\n      state.combat &&\n      ![SCREENS.COMBAT_DECK, SCREENS.GRAVEYARD, SCREENS.EXILE].includes(\n        state.currentScreen\n      );\n\n    if (isCombat) {\n      if (/^[1-9]$/.test(key) || key === \"0\") {\n        const index = key === \"0\" ? 9 : parseInt(key, 10) - 1;\n        const card = state.combat.hand?.[index];\n        if (\n          card &&\n          !card.uncastable &&\n          (card.inkCost ?? 0) <= state.combat.ink\n        ) {\n          dispatch({ type: ACTIONS.PLAY_CARD, payload: index });\n        }\n      }\n\n      if (key === \" \") {\n        e.preventDefault();\n        dispatch({ type: ACTIONS.CAST_SPELLBOOK });\n      }\n\n      if (key.toLowerCase() === \"m\" && (state.combat?.mulligans ?? 0) > 0) {\n        dispatch({ type: ACTIONS.MULLIGAN });\n      }\n\n      if (key === \"[\")\n        toggleCombatInspect(dispatch, state, SCREENS.COMBAT_DECK);\n      if (key === \"]\") toggleCombatInspect(dispatch, state, SCREENS.GRAVEYARD);\n      if (key === \"\\\\\") toggleCombatInspect(dispatch, state, SCREENS.EXILE);\n    }\n\n    // === Main Menu: Spacebar to start new game\n    if (state.currentPhase === PHASES.MAIN_MENU) {\n      if (key === \" \") {\n        e.preventDefault();\n        dispatch({\n          type: ACTIONS.ADVANCE_PHASE,\n          payload: PHASES.DIFFICULTY_SELECTION,\n        });\n      }\n    }\n\n    // === Difficulty Selection: 1 = Easy, 2 = Medium, 3 = Hard\n    if (state.currentPhase === PHASES.DIFFICULTY_SELECTION) {\n      if (key === \"1\") {\n        selectDifficultyAndBeginGame(dispatch, DIFFICULTIES.EASY);\n      }\n      if (key === \"2\") {\n        selectDifficultyAndBeginGame(dispatch, DIFFICULTIES.MEDIUM);\n      }\n      if (key === \"3\") {\n        selectDifficultyAndBeginGame(dispatch, DIFFICULTIES.HARD);\n      }\n    }\n\n    // === Relic Offerings: 1, 2, 3 to pick relics\n    if (\n      state.offerings.relics &&\n      state.offerings.relics.length > 0 &&\n      state.currentScreen !== SCREENS.DECK\n    ) {\n      const relicIndex = parseInt(key) - 1;\n      if (relicIndex >= 0 && relicIndex < state.offerings.relics.length) {\n        dispatch({ type: ACTIONS.PICK_RELIC, payload: relicIndex });\n      }\n    }\n\n    // === Combat End Phase\n    const isCombatEnd =\n      state.currentPhase === PHASES.COMBAT_END &&\n      state.offerings.combatRewards?.length >= 0;\n\n    if (isCombatEnd) {\n      if (key === \" \") {\n        e.preventDefault();\n        dispatch({ type: ACTIONS.CLOSE_COMBAT_REWARDS });\n      }\n\n      // Claim specific reward (1–9, 0)\n      if (/^[1-9]$/.test(key) || key === \"0\") {\n        const index = key === \"0\" ? 9 : parseInt(key, 10) - 1;\n        const reward = state.offerings.combatRewards?.[index];\n        if (!reward) return;\n\n        if (reward.type === \"gold\") {\n          dispatch({\n            type: ACTIONS.CLAIM_GOLD_REWARD,\n            payload: { index, amount: reward.value },\n          });\n        } else if (reward.type === \"card\") {\n          dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n        } else if (reward.type === \"relic\") {\n          dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n        } else if (reward.type === \"potion\") {\n          dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n        } else if (reward.type === \"gem\") {\n          dispatch({\n            type: ACTIONS.OPEN_MOD_SCREEN,\n            payload: {\n              mod: { gem: reward.value },\n              origin: PHASES.COMBAT_END,\n            },\n          });\n        }\n      }\n    }\n  };\n}\n\n// Helper function for toggling inspect screens\nfunction toggleCombatInspect(dispatch, state, screen) {\n  if (state.currentScreen === screen) {\n    dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: SCREENS.MAIN });\n  } else {\n    dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: screen });\n  }\n}\n//#endregion\n// //------------------------------------------------ DISORGANIZED ------------------------------------------------\n//#region combat functions\nfunction startTurn(state) {\n  console.log(\">>> Starting new turn. Books remaining: \", state.combat.books);\n\n  if (state.combat.books < 1) {\n    return {\n      ...state,\n      combat: {\n        ...state.combat,\n        combatEnded: true,\n      },\n      log: [\"📕 You have no books left. Combat ends.\", ...state.log],\n    };\n  }\n\n  // Open a new spellbook of blank pages\n  const newBook = Array(state.combat.pages).fill(\"blank page\");\n\n  const baseBunnies = state.combat.baseBunnies ?? 0;\n\n  // Subtract one book, set up spellbook, and apply base bunnies\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      books: state.combat.books - 1,\n      spellbook: newBook,\n      bunnies: baseBunnies, // ✅ Set starting bunnies for the turn\n      combatEnded: false,\n    },\n    log: [\n      `📖 A new turn begins. 🐇 Gained ${baseBunnies} bunnies.`,\n      ...state.log,\n    ],\n  };\n\n  updatedState = newHand(updatedState);\n  updatedState = refillInkpot(updatedState);\n\n  return updatedState;\n}\nfunction shuffleGraveyardIntoDeck(state) {\n  const graveyard = state.combat?.graveyard ?? [];\n  const deck = state.combat?.deck ?? [];\n\n  if (graveyard.length === 0) {\n    return {\n      ...state,\n      log: [\"Your graveyard is already empty.\", ...state.log],\n    };\n  }\n\n  // Purely combine and shuffle\n  const combinedDeck = [...deck, ...graveyard];\n  const shuffledDeck = shuffleArray(combinedDeck);\n\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      deck: shuffledDeck,\n      graveyard: [], // clear graveyard\n    },\n    log: [\"You shuffled your graveyard into your deck.\", ...state.log],\n  };\n\n  // 🔁 Check for relic triggers\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.SHUFFLE_GRAVEYARD_INTO_DECK\n  );\n\n  // 🧪 Check if anyone died as a result of relic effects\n  updatedState = checkCombatEndViaDeath(updatedState);\n\n  return updatedState;\n}\nfunction refillInkpot(state) {\n  const maxInk = state.combat?.maxInk ?? 0;\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      ink: maxInk,\n    },\n    log: [`🔮 Inkpot refilled to ${maxInk}.`, ...state.log],\n  };\n}\nfunction checkCombatEndViaDeath(state) {\n  const playerDead = state.health <= 0;\n  const enemyDead = state.combat?.enemyHp <= 0;\n\n  if (playerDead) {\n    console.log(\">>> Player is dead. Ending combat.\");\n\n    return combatEnd(state, { result: \"loss\" });\n  }\n\n  if (enemyDead) {\n    console.log(\">>> Enemy is dead. Ending combat.\");\n\n    return combatEnd(state, { result: \"win\" });\n  }\n\n  // No one is dead — combat continues\n  return state;\n}\nfunction newHand(state) {\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      hand: [], // clear hand before drawing\n    },\n  };\n\n  for (let i = 0; i < updatedState.combat.handSize; i++) {\n    updatedState = drawCard(updatedState);\n  }\n\n  return updatedState;\n}\nfunction drawCard(state) {\n  let updatedState = { ...state };\n\n  // 🛠 Use the most recent combat state from the input state\n  let currentCombat = updatedState.combat;\n\n  // Step 1: If deck is empty, try to shuffle from graveyard\n  if (currentCombat.deck.length === 0) {\n    updatedState = shuffleGraveyardIntoDeck(updatedState);\n  }\n\n  // 🧠 Rebind again after potential shuffle\n  currentCombat = updatedState.combat;\n\n  // Step 2: If still no cards, apply fatigue\n  if (currentCombat.deck.length === 0) {\n    updatedState = takeDamage(updatedState, 1, { skipDeathCheck: false });\n    updatedState = {\n      ...updatedState,\n      log: [\n        \"💀 Lost 1 HP to fatigue by attempting to draw from an empty deck.\",\n        ...updatedState.log,\n      ],\n    };\n    return updatedState;\n  }\n\n  // Step 3: Draw the card normally\n  const [drawnCard, ...remainingDeck] = currentCombat.deck;\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...currentCombat,\n      deck: remainingDeck,\n      hand: [...currentCombat.hand, drawnCard],\n    },\n    // log: [`📜 Drew card: ${drawnCard.name}`, ...updatedState.log],\n  };\n\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.DRAW_CARD);\n  updatedState = checkCardTriggers(\n    updatedState,\n    drawnCard,\n    TRIGGER_EVENTS.DRAW_CARD\n  );\n\n  return updatedState;\n}\nfunction checkCardTriggers(state, card, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  const effect = card.triggers?.[triggerEvent];\n  if (!effect) return updatedState;\n  // === Handle DRAW_CARD triggers ===\n  if (triggerEvent === TRIGGER_EVENTS.DRAW_CARD) {\n    // on draw triggers go here\n  }\n  // === Handle PICK_CARD triggers ===\n  if (triggerEvent === TRIGGER_EVENTS.PICK_CARD) {\n    // on pick triggers go here\n  }\n  return updatedState;\n}\nfunction addBunnies(state, bunnyAdd) {\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      bunnies: (state.combat.bunnies ?? 0) + bunnyAdd,\n    },\n  };\n}\nfunction multiplyBunnies(state, bunnyMult) {\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      bunnies: Math.floor((state.combat.bunnies ?? 0) * bunnyMult),\n    },\n  };\n}\nfunction takeDamage(state, dmg, options = {}) {\n  console.trace(\"taking damage:\", dmg, \"options:\", options);\n  const skipDeathCheck = options.skipDeathCheck ?? false;\n\n  const updatedState = {\n    ...state,\n    health: Math.max(0, state.health - dmg),\n    log: [`You took ${dmg} damage.`, ...state.log],\n  };\n\n  return skipDeathCheck ? updatedState : checkCombatEndViaDeath(updatedState);\n}\nfunction dealDamage(state, damage, damageTypes = [], options = {}) {\n  const { isBonus = false } = options;\n  const newEnemyHp = Math.max(0, state.combat.enemyHp - damage);\n\n  console.log(\n    `>> dealDamage: current enemy HP = ${\n      state.combat.enemyHp\n    }, damage = ${damage}, new = ${newEnemyHp}, types = [${damageTypes.join(\n      \", \"\n    )}], isBonus = ${isBonus}`\n  );\n\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      enemyHp: newEnemyHp,\n    },\n    log: [\n      `⚔️ You dealt ${damage} damage to ${state.combat.enemy.name}` +\n        (damageTypes.length > 0 ? ` (${damageTypes.join(\", \")})` : \"\") +\n        \".\",\n      ...state.log,\n    ],\n  };\n\n  // Only trigger relics if this isn't bonus damage\n  if (!isBonus) {\n    for (const damageType of damageTypes) {\n      updatedState = checkRelicTriggers(\n        updatedState,\n        TRIGGER_EVENTS.DEAL_DAMAGE,\n        {\n          damageType,\n          amount: damage,\n          enemy: state.combat.enemy,\n        }\n      );\n    }\n  }\n\n  updatedState = checkCombatEndViaDeath(updatedState);\n  updatedState = checkGameOver(updatedState);\n\n  return updatedState;\n}\nfunction playCard(state, index) {\n  const hand = [...state.combat.hand];\n  const card = hand[index];\n\n  /* ── Guard clauses ─────────────────────────────────────────────────── */\n  if (!card || card.uncastable) return state;\n  if ((card.inkCost ?? 0) > state.combat.ink) return state;\n\n  /* ── Step 1: deduct ink ────────────────────────────────────────────── */\n  let updatedState = modifyCombatInk({ ...state }, -card.inkCost);\n\n  /* ── Step 2: remove card from hand ─────────────────────────────────── */\n  hand.splice(index, 1);\n  updatedState = {\n    ...updatedState,\n    combat: { ...updatedState.combat, hand },\n  };\n\n  /* ── Step 3: relic triggers for PLAY_CARD ──────────────────────────── */\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.PLAY_CARD, {\n    card,\n  });\n\n  /* ── INSTANT cards resolve immediately ─────────────────────────────── */\n  if (card.cardType === CARD_TYPES.INSTANT) {\n    //  No zone-placement here!  resolveSpell will handle graveyard/exile\n    updatedState = resolveSpell(updatedState, card);\n    updatedState = checkCombatEndViaDeath(updatedState);\n    updatedState = checkGameOver(updatedState);\n    return updatedState;\n  }\n\n  /* ── SPELL cards: place into spellbook ─────────────────────────────── */\n  const spellbook = [...updatedState.combat.spellbook];\n  const firstBlank = spellbook.indexOf(\"blank page\");\n  if (firstBlank === -1) return updatedState; // failsafe\n\n  spellbook[firstBlank] = card;\n  updatedState = {\n    ...updatedState,\n    combat: { ...updatedState.combat, spellbook },\n  };\n\n  /* ── Auto-cast when the spellbook is full ───────────────────────────── */\n  if (!spellbook.includes(\"blank page\")) {\n    updatedState = castSpellbook(updatedState);\n    updatedState = checkCombatEndViaDeath(updatedState);\n    updatedState = checkGameOver(updatedState);\n  }\n\n  return updatedState;\n}\nfunction castSpellbook(state) {\n  let updatedState = { ...state };\n\n  // 🌀 Trigger relic effects for CAST_SPELLBOOK\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.CAST_SPELLBOOK\n  );\n\n  // 🔮 Cast each non-blank spell in the spellbook\n  for (const card of updatedState.combat.spellbook) {\n    if (typeof card !== \"object\" || card.name === \"blank page\") continue;\n    updatedState = resolveSpell(updatedState, card);\n  }\n\n  // 🐇 Release bunnies (deal damage equal to bunny count)\n  updatedState = releaseBunnies(updatedState);\n\n  // ✅ If enemy is still alive\n  if (updatedState.combat?.enemyHp > 0) {\n    // 👇 Check if any books remain\n    if (updatedState.combat.books > 0) {\n      console.log(\">>> Enemy survived, but books remain. Next turn begins.\");\n      return startTurn(updatedState);\n    } else {\n      console.log(\">>> Enemy survived. No books left. Player loses combat.\");\n      return combatEnd(updatedState, { result: \"loss\" });\n    }\n  }\n\n  // ✅ Enemy is dead → player wins\n  return combatEnd(updatedState, { result: \"win\" });\n}\nfunction releaseBunnies(state) {\n  const bunnyDamage = state.combat.bunnies ?? 0;\n\n  if (bunnyDamage <= 0) {\n    return {\n      ...state,\n      combat: {\n        ...state.combat,\n        bunnies: 0,\n      },\n    };\n  }\n\n  let updatedState = { ...state };\n\n  // ✅ Pass as an array now\n  updatedState = dealDamage(updatedState, bunnyDamage, [DAMAGE_TYPES.BUNNY]);\n\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...updatedState.combat,\n      bunnies: 0,\n    },\n    log: [\n      `Released ${bunnyDamage} bunn${bunnyDamage === 1 ? \"y\" : \"ies\"}!`,\n      ...updatedState.log,\n    ],\n  };\n\n  return updatedState;\n}\nfunction endTurn(state) {\n  let updatedState = { ...state };\n\n  // 🧪 Check if combat has ended via death\n  updatedState = checkCombatEndViaDeath(updatedState);\n  if (updatedState.combat.combatEnded) return updatedState;\n\n  // 🪦 Move remaining cards in hand to the graveyard\n  const remainingHand = updatedState.combat.hand || [];\n  const updatedGraveyard = [...updatedState.combat.graveyard, ...remainingHand];\n\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...updatedState.combat,\n      hand: [],\n      graveyard: updatedGraveyard,\n    },\n    log: [`You ended your turn.`, ...updatedState.log],\n  };\n\n  // 🧪 Check again before starting next turn\n  if (updatedState.combat.combatEnded) return updatedState;\n\n  // 🔁 Start a new turn\n  return startTurn(updatedState);\n}\nfunction resolveSpell(state, card) {\n  if (!card || typeof card !== \"object\") return state;\n\n  let updatedState = { ...state };\n  const effects = [];\n\n  // === Bunny Add ===\n  if (card.bunnyAdd) {\n    updatedState = addBunnies(updatedState, card.bunnyAdd);\n    effects.push(`+${card.bunnyAdd} bunn${card.bunnyAdd === 1 ? \"y\" : \"ies\"}`);\n  }\n\n  // === Bunny Add Based on Deck Size Multiplier ===\n  if (typeof card.bunnyAddPerCardInDeck === \"number\") {\n    const multiplier = card.bunnyAddPerCardInDeck;\n    const deckSize = updatedState.campaign.deck.length;\n    const bunnyAmount = Math.floor(deckSize * multiplier);\n\n    if (bunnyAmount > 0) {\n      updatedState = addBunnies(updatedState, bunnyAmount);\n      effects.push(`+${bunnyAmount} bunnies (${multiplier}× deck size)`);\n    }\n  }\n\n  // === Gain Gold Based on Deck Size Multiplier ===\n  if (typeof card.goldAddPerCardInDeck === \"number\") {\n    const multiplier = card.goldAddPerCardInDeck;\n    const deckSize = updatedState.campaign.deck.length;\n    const goldAmount = Math.floor(deckSize * multiplier);\n\n    if (goldAmount > 0) {\n      updatedState = gainGold(updatedState, goldAmount);\n      effects.push(`+${goldAmount} gold (${multiplier}× deck size)`);\n    }\n  }\n\n  // === Heal Based on Deck Size Multiplier ===\n  if (card.healPerCardInDeck) {\n    const multiplier = card.healPerCardInDeck;\n    const deckSize = updatedState.campaign.deck.length;\n    const healAmount = Math.floor(deckSize * multiplier);\n\n    if (healAmount > 0) {\n      updatedState = heal(updatedState, healAmount);\n      effects.push(`+${healAmount} HP (${multiplier}× deck size)`);\n    }\n  }\n\n  // === Bunny Multiply ===\n  if (card.bunnyMult) {\n    updatedState = multiplyBunnies(updatedState, card.bunnyMult);\n    effects.push(`×${card.bunnyMult} bunnies`);\n  }\n\n  // === Gain Gold ===\n  if (card.goldAdd) {\n    updatedState = gainGold(updatedState, card.goldAdd);\n    effects.push(`+${card.goldAdd} gold`);\n  }\n\n  // === Add Ink ===\n  if (card.inkAdd) {\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        ink: updatedState.combat.ink + card.inkAdd,\n      },\n    };\n    effects.push(`+${card.inkAdd} ink`);\n  }\n\n  // === Draw Cards ===\n  if (card.cardDraw) {\n    for (let i = 0; i < card.cardDraw; i++) {\n      updatedState = drawCard(updatedState);\n    }\n    effects.push(`Drew ${card.cardDraw} card${card.cardDraw === 1 ? \"\" : \"s\"}`);\n  }\n\n  // === Health Cost ===\n  if (card.healthCost) {\n    updatedState = takeDamage(updatedState, card.healthCost);\n    effects.push(`-${card.healthCost} HP`);\n  }\n\n  // === Heal ===\n  if (card.heal) {\n    updatedState = heal(updatedState, card.heal);\n    effects.push(`+${card.heal} HP`);\n  }\n\n  // === Permanently Upgrade Cards in Deck ===\n  if (card.permanentlyUpgradeRandomCardsInDeck) {\n    const numToUpgrade = Math.min(\n      card.permanentlyUpgradeRandomCardsInDeck,\n      updatedState.campaign.deck.length\n    );\n    const upgradedDeck = permanentlyUpgradeRandomCardsInDeck(\n      updatedState.campaign.deck,\n      numToUpgrade\n    );\n    updatedState = {\n      ...updatedState,\n      campaign: {\n        ...updatedState.campaign,\n        deck: upgradedDeck,\n      },\n    };\n    effects.push(`Upgraded ${numToUpgrade} card(s) in deck`);\n  }\n\n  // === Permanently Upgrade Cards in Hand ===\n  if (card.permanentlyUpgradeRandomCardsInHand) {\n    const numToUpgrade = Math.min(\n      card.permanentlyUpgradeRandomCardsInHand,\n      updatedState.combat.hand.length\n    );\n    const upgradedHand = permanentlyUpgradeRandomCardsInDeck(\n      updatedState.combat.hand,\n      numToUpgrade\n    );\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        hand: upgradedHand,\n      },\n    };\n    effects.push(`Upgraded ${numToUpgrade} card(s) in hand`);\n  }\n\n  // === Weaken Enemy by Percent (e.g., Poison)\n  if (card.weakenEnemyHpPercent > 0) {\n    const percent = card.weakenEnemyHpPercent;\n    const baseHp = updatedState.combat.enemy?.hp || 0;\n    const poisonDamage = Math.floor(baseHp * percent);\n\n    if (poisonDamage > 0) {\n      updatedState = dealDamage(\n        updatedState,\n        poisonDamage,\n        [DAMAGE_TYPES.POISON],\n        { isBonus: true }\n      );\n      effects.push(`Dealt ${poisonDamage} poison damage (max HP % effect)`);\n    }\n  }\n\n  // === Flat Damage ===\n  if (card.damage) {\n    const types =\n      Array.isArray(card.damageTypes) && card.damageTypes.length > 0\n        ? card.damageTypes\n        : [DAMAGE_TYPES.BUNNY];\n\n    updatedState = dealDamage(updatedState, card.damage, types);\n    effects.push(`Dealt ${card.damage} ${types.join(\"/\")} damage`);\n  }\n\n  // === Rolled Damage (e.g., Lightning) ===\n  if (\n    card.damageRoll &&\n    typeof card.damageRoll.dice === \"number\" &&\n    typeof card.damageRoll.sides === \"number\"\n  ) {\n    const { dice, sides, flatBonus = 0 } = card.damageRoll;\n    const damage = rollDice(dice, sides, flatBonus);\n\n    const types =\n      Array.isArray(card.damageTypes) && card.damageTypes.length > 0\n        ? card.damageTypes\n        : [DAMAGE_TYPES.BUNNY];\n\n    updatedState = dealDamage(updatedState, damage, types);\n\n    const typeList = types.join(\" & \");\n    effects.push(`Dealt ${damage} ${typeList} damage`);\n  }\n\n  /// === Upgrade on Cast (if applicable) ===\n  if (card.upgradesOnCast) {\n    const upgradedCard = upgradeCard(card, card.upgradesOnCast);\n\n    // === Update campaign deck with upgraded version\n    updatedState = upgradeSpecificCardInCampaignDeck(\n      updatedState,\n      card,\n      card.upgradesOnCast\n    );\n\n    const destination = upgradedCard.exileOnCast ? \"exile\" : \"graveyard\";\n    const updatedSpellbook = updatedState.combat.spellbook.filter(\n      (c) => c.name !== card.name\n    );\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        spellbook: updatedSpellbook,\n        [destination]: [...updatedState.combat[destination], upgradedCard],\n      },\n      trashpile: [...(updatedState.trashpile || []), card],\n      log: [`Cast ${card.name}: ${effects.join(\", \")}`, ...updatedState.log],\n    };\n\n    return checkCombatEndViaDeath(updatedState);\n  } else {\n    // === Move to Exile or Graveyard ===\n    const destination = card.exileOnCast ? \"exile\" : \"graveyard\";\n    const updatedSpellbook = updatedState.combat.spellbook.filter(\n      (c) => c.name !== card.name\n    );\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        spellbook: updatedSpellbook,\n        [destination]: [...updatedState.combat[destination], card],\n      },\n      trashpile: [...(updatedState.trashpile || []), card],\n      log: [`Cast ${card.name}: ${effects.join(\", \")}`, ...updatedState.log],\n    };\n\n    return checkCombatEndViaDeath(updatedState);\n  }\n}\nfunction combatEnd(state, context = {}) {\n  console.log(\">>> Entered combatEnd with context:\", context);\n\n  if (!state.combat || state.currentPhase === PHASES.COMBAT_END) {\n    return state; // Already ended or invalid\n  }\n\n  let updatedState = { ...state };\n  const result = context.result ?? \"loss\";\n  const victory = result === \"win\";\n  const enemy = updatedState.combat?.enemy;\n\n  // === Call relic triggers for COMBAT_END\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.COMBAT_END);\n\n  // === Handle victory\n  if (victory) {\n    const rewards = [\n      ...(updatedState.combat.rewards ?? []),\n      ...(enemy?.loot ?? []),\n    ];\n\n    const defeatedEnemies = [...(updatedState.defeatedEnemies ?? []), enemy];\n\n    if (enemy?.isBoss) {\n      const newStage = (updatedState.stage ?? 0) + 1;\n\n      updatedState = {\n        ...updatedState,\n        stage: newStage,\n        log: [\n          `🏆 You defeated a boss! Stage increased to ${newStage}.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    updatedState = {\n      ...updatedState,\n      defeatedEnemies,\n    };\n\n    console.log(\n      \"[DEBUG] Boss defeated, checking for game over. Stage =\",\n      updatedState.stage\n    );\n\n    // 🧠 Check if the game is over BEFORE assigning rewards\n    updatedState = checkGameOver(updatedState);\n\n    if (!updatedState.gameOverResult) {\n      updatedState = {\n        ...updatedState,\n        offerings: {\n          ...updatedState.offerings,\n          combatRewards: rewards,\n        },\n      };\n    }\n  } else {\n    // === Handle defeat\n    if (enemy?.isBoss) {\n      // Bosses cause instant game over — no damage calculation needed\n      updatedState = {\n        ...updatedState,\n        gameOverResult: \"loss\",\n        log: [\n          `☠️ You were defeated by the boss ${enemy.name}. Your journey ends here.`,\n          ...updatedState.log,\n        ],\n      };\n    } else {\n      // Safe damage calc for regular enemies\n      const enemyMaxHp = enemy?.maxHp ?? 0;\n      const enemyCurrentHp = updatedState.combat?.enemyHp ?? enemyMaxHp;\n      const remainingEnemyHp = Math.max(0, enemyCurrentHp);\n\n      if (remainingEnemyHp > 0) {\n        updatedState = takeDamage(updatedState, remainingEnemyHp, {\n          skipDeathCheck: true,\n        });\n        updatedState = {\n          ...updatedState,\n          log: [\n            `☠️ You were defeated by ${\n              enemy?.name ?? \"the enemy\"\n            } and took ${remainingEnemyHp} damage.`,\n            ...updatedState.log,\n          ],\n        };\n      } else {\n        updatedState = {\n          ...updatedState,\n          log: [\n            `☠️ You were defeated by ${enemy?.name ?? \"the enemy.\"}`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      console.log(\"[DEBUG] Player defeated. Health:\", updatedState.health);\n      updatedState = checkGameOver(updatedState);\n    }\n  }\n\n  // === Clean up combat state\n  const cleanedCombat = {\n    ...updatedState.combat,\n    spellbook: [],\n    hand: [],\n    graveyard: [],\n    bunnies: 0,\n  };\n\n  // === Determine next phase\n  let finalState = {\n    ...updatedState,\n    combat: cleanedCombat,\n  };\n\n  console.log(\n    \"[DEBUG] Final combatEnd state. Game over?\",\n    finalState.gameOverResult\n  );\n\n  if (finalState.gameOverResult) {\n    finalState = advancePhaseTo(finalState, PHASES.GAME_OVER);\n    finalState = {\n      ...finalState,\n      log: [`🛑 Game Over: ${finalState.gameOverResult}`, ...finalState.log],\n    };\n  } else {\n    finalState = advancePhaseTo(finalState, PHASES.COMBAT_END);\n  }\n\n  return handlePhaseTransitions(finalState);\n}\nfunction closeCombatRewards(state) {\n  const hasUnclaimedLoot =\n    state.offerings?.combatRewards && state.offerings.combatRewards.length > 0;\n\n  // Optional: Log message about skipping loot\n  const logEntry = hasUnclaimedLoot\n    ? \"Skipped remaining combat loot.\"\n    : \"Combat complete.\";\n\n  const newState = {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      combatRewards: [], // clear the rewards\n    },\n    log: [logEntry, ...state.log],\n  };\n\n  const pathState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n  return handlePhaseTransitions(pathState);\n}\nfunction checkGameOver(state) {\n  const playerDead = state.health <= 0;\n  const defeatedBosses = (state.defeatedEnemies || []).filter(\n    (enemy) => enemy.isBoss\n  ).length;\n  console.log(\n    \"[DEBUG] checkGameOver called. Health:\",\n    state.health,\n    \"Bosses defeated:\",\n    defeatedBosses\n  );\n\n  if (playerDead) {\n    return {\n      ...state,\n      gameOverResult: \"loss\",\n    };\n  }\n\n  if (defeatedBosses >= 3) {\n    return {\n      ...state,\n      gameOverResult: \"victory\",\n    };\n  }\n\n  return state;\n}\nfunction gameOver(state, result) {\n  return {\n    ...state,\n    gameResult: result,\n    currentPhase: PHASES.GAME_OVER,\n    log: [`🛑 Game Over: ${result}`, ...state.log],\n  };\n}\nfunction exitShop(state) {\n  const cleanedState = {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: [], // Clear the shop\n    },\n    log: [\"🛒 Exited the shop.\", ...state.log],\n  };\n\n  // Use your phase transition helpers to change to the next phase\n  return handlePhaseTransitions(\n    advancePhaseTo(cleanedState, PHASES.PATH_SELECTION)\n  );\n}\nfunction rollDice(numDice, sidesPerDie, flatBonus = 0) {\n  let total = 0;\n  for (let i = 0; i < numDice; i++) {\n    total += Math.floor(Math.random() * sidesPerDie) + 1;\n  }\n  return total + flatBonus;\n}\nfunction upgradeSpecificCardInCampaignDeck(state, card, upgrades = 1) {\n  if (!state?.campaign?.deck || !Array.isArray(state.campaign.deck)) {\n    console.error(\"No valid campaign deck found in state.\");\n    return state;\n  }\n\n  const deck = [...state.campaign.deck];\n  const index = deck.findIndex((c) => c.name === card.name);\n\n  if (index === -1) {\n    console.warn(`Card not found in campaign deck: ${card.name}`);\n    return state;\n  }\n\n  deck[index] = upgradeCard(deck[index], upgrades);\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck,\n    },\n  };\n}\nfunction mulligan(state) {\n  let updatedState = { ...state };\n  const combat = updatedState.combat;\n\n  if (!combat || combat.mulligans <= 0) {\n    console.warn(\"Cannot mulligan: no mulligans remaining.\");\n    return updatedState;\n  }\n\n  const handSize = combat.hand.length;\n\n  // Move hand to graveyard\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...combat,\n      hand: [],\n      graveyard: [...combat.graveyard, ...combat.hand],\n      mulligans: combat.mulligans - 1,\n    },\n    log: [`🔄 Mulliganed ${handSize} card(s).`, ...updatedState.log],\n  };\n\n  // Draw the same number of cards\n  for (let i = 0; i < handSize; i++) {\n    updatedState = drawCard(updatedState);\n  }\n\n  return updatedState;\n}\nfunction weakenEnemyByPercent(state, percent) {\n  if (\n    !state?.combat?.enemy ||\n    typeof state.combat.enemy.hp !== \"number\" ||\n    percent <= 0\n  ) {\n    console.warn(\"Invalid state or percent passed to weakenEnemyByPercent.\");\n    return state;\n  }\n\n  const enemyMaxHp = state.combat.enemy.hp;\n  const damage = Math.floor(enemyMaxHp * percent);\n\n  if (damage <= 0) {\n    console.log(\n      `No damage dealt by weakenEnemyByPercent (percent = ${percent}).`\n    );\n    return state;\n  }\n\n  return dealDamage(state, damage, [], { isBonus: true });\n}\n\n//#region render\n\nfunction render(state, dispatch) {\n  // Get or create output div\n  let output = document.getElementById(\"output\");\n  if (!output) {\n    output = document.createElement(\"div\");\n    output.id = \"output\";\n    document.body.appendChild(output);\n  }\n  output.innerHTML = \"\"; // Clear previous contents\n\n  // //check and see if all cards in the deck are socketed\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null || card.unsocketable);\n\n  //\n  function renderCardList(title, cards) {\n    const section = document.createElement(\"div\");\n    section.innerHTML = `<h3>${title}</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    cards.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    section.appendChild(ul);\n    output.appendChild(section);\n  }\n\n  // render utility function\n  function renderModPhaseEntry(phase, label, modKey) {\n    if (state.currentPhase === phase && state.currentScreen !== SCREENS.MOD) {\n      const modBtn = document.createElement(\"button\");\n      modBtn.textContent = label;\n      modBtn.style.fontSize = \"1.5rem\";\n      modBtn.style.padding = \"1rem 2rem\";\n      modBtn.onclick = () => {\n        modBtn.disabled = true; // prevent double click\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { [modKey]: true },\n            origin: phase,\n          },\n        });\n      };\n      output.appendChild(modBtn);\n    }\n  }\n\n  // === Game Info ===\n  const info = document.createElement(\"div\");\n  info.innerHTML = `\n  <h2>Game Info</h2>\n  <p><strong>Current Screen:</strong> ${state.currentScreen}</p>\n  <p><strong>Phase:</strong> ${\n    state.currentPhase\n  } &nbsp;&nbsp; <strong>Level:</strong> ${state.level ?? 0}</p>\n  <p><strong>Gold:</strong> ${state.gold}</p>\n  <p><strong>Health:</strong> ${state.health}/${state.maxHealth}</p>\n  <p><strong>Deck Size:</strong> ${state.campaign.deck.length}</p>\n  <p><strong>Relics:</strong> ${\n    state.relicBelt.length > 0\n      ? Object.entries(\n          state.relicBelt.reduce((acc, relic) => {\n            acc[relic.name] = (acc[relic.name] || 0) + 1;\n            return acc;\n          }, {})\n        )\n          .map(([name, count]) => (count > 1 ? `${name} x${count}` : name))\n          .join(\", \")\n      : \"None\"\n  }</p>\n`;\n  output.appendChild(info);\n\n  // === Combat Display ===\n  const isCombatInspectScreen = [\n    SCREENS.COMBAT_DECK,\n    SCREENS.GRAVEYARD,\n    SCREENS.EXILE,\n  ].includes(state.currentScreen);\n\n  if (state.currentPhase === PHASES.COMBAT && state.combat) {\n    const combatSection = document.createElement(\"div\");\n    combatSection.style.border = \"2px solid black\";\n    combatSection.style.padding = \"1rem\";\n    combatSection.style.margin = \"1rem 0\";\n    combatSection.innerHTML = `<h3>Combat</h3>`;\n\n    // === Main Combat UI (skip if inspecting)\n    if (!isCombatInspectScreen) {\n      // Enemy Name + HP (on same line)\n      const enemyBox = document.createElement(\"div\");\n      enemyBox.style.display = \"flex\";\n      enemyBox.style.justifyContent = \"space-between\";\n      enemyBox.style.alignItems = \"center\";\n      enemyBox.style.fontSize = \"1.5rem\";\n      enemyBox.style.fontWeight = \"bold\";\n      enemyBox.style.border = \"1px solid red\";\n      enemyBox.style.padding = \"1rem\";\n      enemyBox.style.marginBottom = \"1rem\";\n\n      // Enemy name\n      const nameSpan = document.createElement(\"span\");\n      nameSpan.textContent = state.combat.enemy.name;\n\n      // Enemy HP\n      const hpSpan = document.createElement(\"span\");\n      hpSpan.textContent = `HP: ${state.combat.enemyHp}`;\n\n      enemyBox.appendChild(nameSpan);\n      enemyBox.appendChild(hpSpan);\n      combatSection.appendChild(enemyBox);\n\n      // Spellbook Pages\n      const spellbook = document.createElement(\"div\");\n      spellbook.style.display = \"flex\";\n      spellbook.style.gap = \"0.5rem\";\n      spellbook.style.marginBottom = \"1rem\";\n      state.combat.spellbook.forEach((page, index) => {\n        const pageDiv = document.createElement(\"div\");\n        pageDiv.style.width = \"60px\";\n        pageDiv.style.height = \"90px\";\n        pageDiv.style.border = \"1px solid #333\";\n        pageDiv.style.display = \"flex\";\n        pageDiv.style.alignItems = \"center\";\n        pageDiv.style.justifyContent = \"center\";\n        pageDiv.style.backgroundColor =\n          page === \"blank page\" ? \"lightgrey\" : \"white\";\n        pageDiv.textContent = page === \"blank page\" ? \"\" : page.name;\n        spellbook.appendChild(pageDiv);\n      });\n\n      const spellbookLabel = document.createElement(\"p\");\n      spellbookLabel.textContent = \"Spellbook:\";\n      spellbookLabel.style.fontWeight = \"bold\";\n      spellbookLabel.style.marginBottom = \"0.25rem\";\n      combatSection.appendChild(spellbookLabel);\n      combatSection.appendChild(spellbook);\n\n      // Cast + Ink + Bunny Count\n      const castRow = document.createElement(\"div\");\n      castRow.style.display = \"flex\";\n      castRow.style.alignItems = \"center\";\n      castRow.style.gap = \"1rem\";\n      castRow.style.marginBottom = \"0.5rem\";\n\n      const allPagesBlank =\n        state.combat.spellbook.length > 0 &&\n        state.combat.spellbook.every((page) => page === \"blank page\");\n\n      const castButton = document.createElement(\"button\");\n      if (allPagesBlank) {\n        castButton.textContent = \"Skip Turn\";\n        castButton.style.backgroundColor = \"#f88\";\n      } else {\n        castButton.textContent = \"Cast Spellbook\";\n      }\n      castButton.onclick = () => dispatch({ type: ACTIONS.CAST_SPELLBOOK });\n\n      const bunnyDisplay = document.createElement(\"span\");\n      bunnyDisplay.textContent = `BUNNIES: ${state.combat?.bunnies || 0}`;\n\n      castRow.appendChild(castButton);\n      castRow.appendChild(castButton);\n\n      // === Mulligan Button ===\n      const mulliganBtn = document.createElement(\"button\");\n      const remaining = state.combat?.mulligans ?? 0;\n      mulliganBtn.textContent = `Mulligan (${remaining})`;\n\n      if (remaining <= 0) {\n        mulliganBtn.disabled = true;\n        mulliganBtn.style.backgroundColor = \"#ccc\";\n        mulliganBtn.style.cursor = \"not-allowed\";\n      } else {\n        mulliganBtn.onclick = () => {\n          dispatch({ type: ACTIONS.MULLIGAN });\n        };\n      }\n\n      castRow.appendChild(mulliganBtn);\n      castRow.appendChild(bunnyDisplay);\n      combatSection.appendChild(castRow);\n\n      // === INK and BOOKS Line (below cast + bunnies)\n      const resourcesRow = document.createElement(\"div\");\n      resourcesRow.style.display = \"flex\";\n      resourcesRow.style.gap = \"1rem\";\n      resourcesRow.style.marginBottom = \"1rem\";\n\n      const inkDisplay = document.createElement(\"span\");\n      inkDisplay.textContent = `INK: ${state.combat.ink}/${state.combat.maxInk}`;\n\n      const booksDisplay = document.createElement(\"span\");\n      booksDisplay.textContent = `BOOKS: ${state.combat.books}`;\n\n      resourcesRow.appendChild(inkDisplay);\n      resourcesRow.appendChild(booksDisplay);\n      combatSection.appendChild(resourcesRow);\n\n      // Hand\n      const handRow = document.createElement(\"div\");\n      handRow.style.display = \"flex\";\n      handRow.style.gap = \"0.5rem\";\n      handRow.style.flexWrap = \"wrap\";\n\n      if (state.combat.hand && state.combat.hand.length > 0) {\n        state.combat.hand.forEach((card, index) => {\n          const cardBtn = document.createElement(\"button\");\n\n          const cardCost = card.inkCost ?? 0;\n          const canAfford = cardCost <= state.combat.ink;\n          const isUncastable = !!card.uncastable;\n\n          // Display name and cost\n          const costText =\n            !isUncastable && card.inkCost != null\n              ? ` (Cost: ${card.inkCost})`\n              : \"\";\n          cardBtn.textContent = `${card.name}${costText}`;\n\n          // Disable the button if the card is uncastable or too expensive\n          cardBtn.disabled = isUncastable || !canAfford;\n\n          // Style disabled buttons\n          if (cardBtn.disabled) {\n            cardBtn.style.opacity = \"0.5\";\n            cardBtn.style.cursor = \"not-allowed\";\n          }\n\n          // Only dispatch if allowed\n          cardBtn.onclick = () => {\n            if (!cardBtn.disabled) {\n              dispatch({ type: ACTIONS.PLAY_CARD, payload: index });\n            }\n          };\n\n          handRow.appendChild(cardBtn);\n        });\n      } else {\n        const empty = document.createElement(\"p\");\n        empty.textContent = \"Your hand is empty.\";\n        handRow.appendChild(empty);\n      }\n\n      // Hand label\n      const handLabel = document.createElement(\"p\");\n      handLabel.textContent = \"Hand:\";\n      handLabel.style.fontWeight = \"bold\";\n      handLabel.style.marginBottom = \"0.25rem\";\n      combatSection.appendChild(handLabel);\n\n      combatSection.appendChild(handRow);\n    }\n\n    // === Inspect Buttons (always shown in combat)\n    const inspectRow = document.createElement(\"div\");\n    inspectRow.style.marginTop = \"1rem\";\n    inspectRow.style.display = \"flex\";\n    inspectRow.style.gap = \"0.5rem\";\n\n    [\n      {\n        label: `Combat Deck (${state.combat.deck.length})`,\n        screen: SCREENS.COMBAT_DECK,\n      },\n      {\n        label: `Graveyard (${state.combat.graveyard.length})`,\n        screen: SCREENS.GRAVEYARD,\n      },\n      {\n        label: `Exile (${state.combat.exile.length})`,\n        screen: SCREENS.EXILE,\n      },\n    ].forEach(({ label, screen }) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent =\n        state.currentScreen === screen ? \"Return\" : `Inspect ${label}`;\n      btn.onclick = () => {\n        if (state.currentScreen === screen) {\n          returnToMain(dispatch);\n        } else {\n          changeScreen(dispatch, screen);\n        }\n      };\n      inspectRow.appendChild(btn);\n    });\n\n    //label\n    const inspectZoneLabel = document.createElement(\"p\");\n    inspectZoneLabel.textContent = \"Inspect Zones:\";\n    inspectZoneLabel.style.fontWeight = \"bold\";\n    inspectZoneLabel.style.marginBottom = \"0.25rem\";\n    combatSection.appendChild(inspectZoneLabel);\n    combatSection.appendChild(inspectRow);\n    output.appendChild(combatSection);\n  }\n\n  if (state.currentScreen === SCREENS.COMBAT_DECK) {\n    renderCardList(\"Combat Deck\", state.combat?.deck || []);\n  }\n  if (state.currentScreen === SCREENS.GRAVEYARD) {\n    renderCardList(\"Graveyard\", state.combat?.graveyard || []);\n  }\n  if (state.currentScreen === SCREENS.EXILE) {\n    renderCardList(\"Exile\", state.combat?.exile || []);\n  }\n\n  // === Log ===\n  const log = document.createElement(\"div\");\n  log.innerHTML = `<h3>Log</h3><ul>${state.log\n    .slice(0, 5)\n    .map((msg) => `<li>${msg}</li>`)\n    .join(\"\")}</ul>`;\n  output.appendChild(log);\n\n  // === Main Menu ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.MAIN_MENU\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = \"New Game\";\n    button.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.DIFFICULTY_SELECTION,\n      });\n    };\n    output.appendChild(button);\n  }\n\n  // === Difficulty Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.DIFFICULTY_SELECTION\n  ) {\n    const difficulties = [\n      DIFFICULTIES.EASY,\n      DIFFICULTIES.MEDIUM,\n      DIFFICULTIES.HARD,\n    ];\n    difficulties.forEach((difficulty) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `Start ${difficulty} Game`;\n      btn.onclick = () => selectDifficultyAndBeginGame(dispatch, difficulty);\n      output.appendChild(btn);\n    });\n  }\n\n  // === Relic Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.relics &&\n    state.offerings.relics.length > 0\n  ) {\n    const relicSection = document.createElement(\"div\");\n    relicSection.innerHTML = `<h3>Relic Offerings</h3>`;\n    state.offerings.relics.forEach((relic, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${relic.name}`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n      relicSection.appendChild(btn);\n    });\n    output.appendChild(relicSection);\n  }\n  // === Path Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.paths &&\n    state.offerings.paths.length > 0\n  ) {\n    const pathSection = document.createElement(\"div\");\n    pathSection.innerHTML = `<h3>Choose a Path</h3>`;\n\n    state.offerings.paths.forEach((path, index) => {\n      const btn = document.createElement(\"button\");\n\n      // === Conditionally render based on anonymity ===\n      if (path.anonymousNameDisplay) {\n        btn.textContent = `???`;\n      } else {\n        btn.textContent = `${path.path}`;\n      }\n\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_PATH, payload: index });\n\n      pathSection.appendChild(btn);\n    });\n\n    output.appendChild(pathSection);\n  }\n\n  // === Card Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.cards &&\n    state.offerings.cards.length > 0\n  ) {\n    const cardSection = document.createElement(\"div\");\n    cardSection.innerHTML = `<h3>Choose a Card</h3>`;\n\n    state.offerings.cards.forEach((card, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.inkCost})${\n        card.gem ? ` [Gem: ${card.gem.name}]` : \"\"\n      }`;\n\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n      cardSection.appendChild(btn);\n    });\n\n    output.appendChild(cardSection);\n  }\n\n  // === Potion Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.POTION_OFFERING &&\n    state.offerings.potions &&\n    state.offerings.potions.length > 0\n  ) {\n    const potionSection = document.createElement(\"div\");\n    potionSection.innerHTML = `<h3>Choose a Potion</h3>`;\n\n    state.offerings.potions.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${potion.name} (${potion.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n      potionSection.appendChild(btn);\n    });\n\n    output.appendChild(potionSection);\n  }\n\n  // ==== Gem Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentScreen === SCREENS.MAIN &&\n    state.currentPhase === PHASES.GEM_OFFERING &&\n    state.offerings.gems &&\n    state.offerings.gems.length > 0\n  ) {\n    const gemSection = document.createElement(\"div\");\n    gemSection.innerHTML = `<h3>Choose a Gem</h3>`;\n\n    state.offerings.gems.forEach((gem, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${gem.name} (${gem.rarity})`;\n\n      btn.onclick = () =>\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { gem },\n            origin: PHASES.GEM_OFFERING,\n          },\n        });\n\n      gemSection.appendChild(btn);\n    });\n\n    output.appendChild(gemSection);\n  }\n  // === Shopfront Display ===\n  if (\n    state.currentPhase === PHASES.SHOP &&\n    state.currentScreen !== SCREENS.MOD &&\n    state.offerings.shopfront.length > 0\n  ) {\n    const shopSection = document.createElement(\"div\");\n    shopSection.innerHTML = `<h3>Shop Inventory</h3>`;\n\n    const list = document.createElement(\"ul\");\n    state.offerings.shopfront.forEach((entry, index) => {\n      if (!entry || !entry.item || !entry.item.name) return;\n\n      const li = document.createElement(\"li\");\n\n      const btn = document.createElement(\"button\");\n      const price = entry.item?.price ?? 0;\n      const playerGold = state.gold ?? 0;\n      const isGem = entry.type === \"gem\";\n      const disabled = price > playerGold || (isGem && allCardsSocketed);\n      btn.textContent = `${entry.type.toUpperCase()}: ${\n        entry.item.name\n      } (${price}g)`;\n      if (disabled) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      // Bind correct function based on type\n      btn.onclick = () => {\n        switch (entry.type) {\n          case \"card\":\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n            break;\n          case \"potion\":\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n            break;\n          case \"gem\":\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: entry.item },\n                origin: PHASES.SHOP,\n              },\n            });\n            break;\n\n          case \"relic\":\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n            break;\n          default:\n            console.warn(\"Unknown shop item type:\", entry.type);\n        }\n      };\n\n      li.appendChild(btn);\n      list.appendChild(li);\n    });\n\n    // Exit Shop Button (for future logic)\n    const exitBtn = document.createElement(\"button\");\n    exitBtn.textContent = \"Exit Shop\";\n    exitBtn.onclick = () => {\n      dispatch({ type: ACTIONS.EXIT_SHOP });\n    };\n    shopSection.appendChild(list);\n    shopSection.appendChild(exitBtn);\n    output.appendChild(shopSection);\n  }\n\n  // === Mod Screen ===\n  if (state.currentScreen === SCREENS.MOD && state.modData?.mod) {\n    const modSection = document.createElement(\"div\");\n    modSection.innerHTML = `<h3>Choose a card to modify</h3>`;\n\n    const mod = state.modData.mod;\n    const isGemMod = !!mod.gem;\n\n    state.campaign.deck.forEach((card) => {\n      // === Filter based on mod type ===\n      if (isGemMod && (card.gem || card.unsocketable)) return;\n      if (mod.upgrade && card.unupgradable) return;\n\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.inkCost})`;\n\n      btn.onclick = () => {\n        dispatch({ type: ACTIONS.APPLY_CARD_MOD, payload: card });\n      };\n\n      modSection.appendChild(btn);\n    });\n\n    output.appendChild(modSection);\n  }\n\n  // ======= render purge, transmute, and enchant phases (AKA mod phases) ======\n  renderModPhaseEntry(PHASES.PURGE, \"Lethian Font\", \"purge\");\n  renderModPhaseEntry(PHASES.TRANSMUTE, \"Metamorphosis\", \"transmute\");\n  renderModPhaseEntry(PHASES.ENCHANT, \"Enchanted Dolmen\", \"upgrade\");\n\n  // ====== render hoard phase= ======\n  if (state.currentPhase === PHASES.HOARD) {\n    const btn = document.createElement(\"button\");\n    btn.textContent = \"Loot Hoard\";\n    btn.style.fontSize = \"1.5rem\";\n    btn.style.padding = \"1rem 2rem\";\n    btn.onclick = () => {\n      // Placeholder until lootHoard is implemented\n      dispatch({ type: \"LOOT_HOARD\" }); // or just console.log(\"Loot Hoard\")\n    };\n    output.appendChild(btn);\n  }\n  // ====== rest phase rendering ======\n  if (state.currentPhase === PHASES.REST) {\n    const restBtn = document.createElement(\"button\");\n    restBtn.textContent = \"Fireside Rest\";\n    restBtn.style.fontSize = \"1.5rem\";\n    restBtn.style.padding = \"1rem 2rem\";\n    restBtn.onclick = () => {\n      dispatch({ type: \"REST\" }); // Placeholder\n    };\n\n    const practiceBtn = document.createElement(\"button\");\n    practiceBtn.textContent = \"Practice Wandwork\";\n    practiceBtn.style.fontSize = \"1.5rem\";\n    practiceBtn.style.padding = \"1rem 2rem\";\n    practiceBtn.onclick = () => {\n      dispatch({ type: \"PRACTICE_WANDWORK\" }); // Placeholder\n    };\n\n    output.appendChild(restBtn);\n    output.appendChild(practiceBtn);\n  }\n\n  // === Combat End Phase ===\n  if (state.currentPhase === PHASES.COMBAT_END) {\n    const combatEndSection = document.createElement(\"div\");\n    combatEndSection.innerHTML = `<h3>Combat Concluded</h3>`;\n\n    const hasUnclaimedLoot =\n      state.offerings?.combatRewards &&\n      state.offerings.combatRewards.length > 0;\n\n    const btn = document.createElement(\"button\");\n    btn.textContent = hasUnclaimedLoot ? \"Skip Loot\" : \"Continue\";\n    btn.onclick = () => {\n      dispatch({ type: ACTIONS.CLOSE_COMBAT_REWARDS });\n    };\n\n    combatEndSection.appendChild(btn);\n    output.appendChild(combatEndSection);\n  }\n  if (\n    state.currentPhase === PHASES.COMBAT_END &&\n    state.offerings.combatRewards &&\n    state.offerings.combatRewards.length > 0\n  ) {\n    console.log(\"🔎 Rendering combatRewards:\", state.offerings.combatRewards);\n\n    const rewardSection = document.createElement(\"div\");\n    rewardSection.innerHTML = `<h3>Combat Rewards</h3>`;\n\n    state.offerings.combatRewards.forEach((reward, index) => {\n      const btn = document.createElement(\"button\");\n\n      let label = \"\";\n      switch (reward.type) {\n        case \"gold\":\n          label = `Gold: ${reward.value}`;\n          break;\n        case \"card\":\n          label = `Card: ${reward.value.name}`;\n          break;\n        case \"relic\":\n          label = `Relic: ${reward.value.name}`;\n          break;\n        case \"potion\":\n          label = `Potion: ${reward.value.name}`;\n          break;\n        case \"gem\":\n          label = `Gem: ${reward.value.name}`;\n          break;\n        default:\n          label = \"Unknown Reward\";\n      }\n\n      btn.textContent = label;\n\n      const isGem = reward.type === \"gem\";\n      const shouldDisable = isGem && allCardsSocketed;\n\n      if (shouldDisable) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      if (!shouldDisable) {\n        btn.onclick = () => {\n          if (reward.type === \"gold\") {\n            dispatch({\n              type: ACTIONS.CLAIM_GOLD_REWARD,\n              payload: { index, amount: reward.value },\n            });\n          } else if (reward.type === \"card\") {\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n          } else if (reward.type === \"relic\") {\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n          } else if (reward.type === \"potion\") {\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n          } else if (reward.type === \"gem\") {\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: reward.value },\n                origin: PHASES.COMBAT_END,\n              },\n            });\n          }\n        };\n      }\n\n      rewardSection.appendChild(btn);\n    });\n\n    output.appendChild(rewardSection);\n  }\n  // === GAME OVER screen ====\n  if (state.currentPhase === PHASES.GAME_OVER) {\n    const gameOverSection = document.createElement(\"div\");\n    gameOverSection.classList.add(\"game-over\");\n\n    const banner = document.createElement(\"h1\");\n    banner.textContent =\n      state.gameOverResult === \"victory\" ? \"🏆 Victory!\" : \"💀 Defeat!\";\n    gameOverSection.appendChild(banner);\n\n    const summary = document.createElement(\"div\");\n    summary.innerHTML = `\n      <p>Game ended at level: ${state.level}</p>\n      <h3>Decklist:</h3>\n      <ul>\n        ${state.campaign.deck\n          .map(\n            (card) => `<li>${card.name}</li>\n`\n          )\n          .join(\"\")}\n      </ul>\n      <h3>Relics:</h3>\n      <ul>\n        ${state.relicBelt.map((relic) => `<li>${relic.name}</li>`).join(\"\")}\n      </ul>\n    `;\n    gameOverSection.appendChild(summary);\n\n    const newGameBtn = document.createElement(\"button\");\n    newGameBtn.textContent = \"Return to Main Menu\";\n    newGameBtn.onclick = () => {\n      dispatch({ type: ACTIONS.NEW_GAME });\n    };\n\n    gameOverSection.appendChild(newGameBtn);\n    output.appendChild(gameOverSection);\n  }\n\n  // === Deck Inspect / Return Button ===\n  //deck inspect button\n  if (\n    (state.currentScreen === SCREENS.MAIN ||\n      state.currentScreen === SCREENS.DECK) &&\n    state.campaign.deck.length > 0\n  ) {\n    const deckBtn = document.createElement(\"button\");\n    deckBtn.textContent =\n      state.currentScreen === SCREENS.MAIN\n        ? `Inspect Deck (${state.campaign.deck.length})`\n        : \"Return\";\n    deckBtn.onclick = () => {\n      const nextScreen =\n        state.currentScreen === SCREENS.MAIN ? SCREENS.DECK : SCREENS.MAIN;\n      dispatch({\n        type: ACTIONS.SCREEN_CHANGE,\n        payload: nextScreen,\n      });\n    };\n    output.appendChild(deckBtn);\n  }\n  // deck inspect screen\n  if (state.currentScreen === SCREENS.DECK) {\n    const deckView = document.createElement(\"div\");\n    deckView.innerHTML = `<h3>Campaign Deck</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    state.campaign.deck.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    deckView.appendChild(ul);\n    output.appendChild(deckView);\n  }\n\n  // === Always-Visible Potion Belt ===\n  if (state.potionBelt && state.potionBelt.length > 0) {\n    const beltSection = document.createElement(\"div\");\n    beltSection.innerHTML = `<h3>Your Potions</h3>`;\n\n    const isCombatPhase = state.currentPhase === PHASES.COMBAT;\n    const isGameOver = state.currentPhase === PHASES.GAME_OVER;\n\n    state.potionBelt.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = potion.name;\n\n      const isDrinkableNow =\n        !isGameOver && (potion.drinkableOutOfCombat !== false || isCombatPhase);\n\n      if (!isDrinkableNow) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      btn.onclick = () => {\n        if (isDrinkableNow) {\n          dispatch({ type: ACTIONS.DRINK_POTION, payload: index });\n        }\n      };\n\n      beltSection.appendChild(btn);\n    });\n\n    output.appendChild(beltSection);\n  }\n  setupHotkeys(state, dispatch);\n}\n\n//#endregion\n\n// ============================================= expanding the game =============================================================\n// a mythic gem that makes a spell cost 1 less ink, be an instant, and exile on cast.\n\n// implement \"critical hit\" mechanics; cards, gems, and relics, plus three 'critical hit matters' mythics - one that boosts crit amounts,  one that increases crit chance, and one that gives crits to everything.\n// a relic that gives the cast spellbook button +10% chance for a 200% crit.\n// a gem that gives the card a 10% chance for double effect on cast.\n\n// implement three boss abilties keyed to the boss name: 'downgrade all cards in enemy deck', '+1 ink cost to all enemy cards', and 'enemy loses 1 hp whenever they play a card'.\n// IMPORTANT: implement an enemy ablity that exiles 3 random cards from your deck at combat start, increment value 2. (\"Milling\")\n// IMPORTANT: implement an enemy ability that removes the 1 most-upgraded card in your deck (\"Lobotomizing\"), increment value 1.\n\n// a potion that does (20+(10*upgrades))*(stage+1) damage.\n\n// enemies with resistances: X% bunny, X% lightning, X% fire, etc.\n\n//reward deck size mechanics:\n// make mega bunniplication mult bunnies based on decksize.\n// make hand of midas add gold based on decksize.\n// make healing light heal based on decksize.\n// make rest mechanic heal 2x decksize.\n\n// a relic that on pickup gives you +HP based on the #cards in the campaign deck.\n// a relic that on pickup gives you +baseBunnies based on the #cards in the campaign deck.\n\n// a potion that heals based on the #cards in the campaign deck.\n\n//structure & organization:\n// refactor into proper file management system - it's really getting too bloated.\n// reorganize properly during refactor.\n// ensure that all actions and game reducer elements are correctly named and traced on the whitelist.\n\n//implement //firemages hat\n"]}