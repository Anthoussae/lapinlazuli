{"version":3,"sources":["main.js"],"names":["_Object$freeze2","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","r","e","t","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","a","u","call","next","return","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","from","_arrayLikeToArray","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","toString","slice","name","test","l","i","_toPropertyKey","configurable","writable","_toPrimitive","toPrimitive","String","Number","DIFFICULTIES","freeze","EASY","MEDIUM","HARD","TRIGGER_EVENTS","CARD_PICKUP","RELIC_PICKUP","POTION_PICKUP","DRINK_POTION","ASSIGN_SHOP_PRICES","REST","COMBAT_START","POPULATE_PATHS","PATHS","EASY_FIGHT","MEDIUM_FIGHT","HARD_FIGHT","BOSS_FIGHT","SHOP","RELIC_OFFERING","GEM_OFFERING","CARD_OFFERING","ENCHANT","POTION_OFFERING","HOARD","PURGE","TRANSMUTE","SCREENS","MAIN","DECK","RELICS","SETTINGS","MOD","RARITIES","BASIC_POLY","BASIC_MONO","COMMON","UNCOMMON","RARE","MYTHIC","LEGENDARY","PHASES","MAIN_MENU","DIFFICULTY_SELECTION","MYTHIC_RELIC_OFFERING","COMBAT_END","SOCKET_GEM","PATH_SELECTION","COMBAT","DEATH","VICTORY","ACTIONS","NEW_GAME","SET_DIFFICULTY","GENERATE_STARTER_DECK","APPLY_DIFFICULTY_MODIFIERS","ADVANCE_PHASE","LOG_MESSAGE","CREATE_CARD_INSTANCE","POPULATE_RELIC_OFFERINGS","PICK_RELIC","POPULATE_PATH_OFFERINGS","PICK_PATH","POPULATE_CARD_OFFERINGS","PICK_CARD","POPULATE_POTION_OFFERINGS","PICK_POTION","POPULATE_GEM_OFFERINGS","OPEN_MOD_SCREEN","APPLY_CARD_MOD","SCREEN_CHANGE","POPULATE_SHOPFRONT","INCREASE_BASE_BUNNIES","GAIN_GOLD","PRACTICE_WANDWORK","LOOT_HOARD","CARD_TYPES","INSTANT","SPELL","REST_OPTIONS","HEAL","PRACTICE","difficultyModifiersMap","maxHealthModifier","goldModifier","basicCardCountModifier","luckModifier","shopPriceMultiplierModifier","restHealthRestoreModifier","pathMap","rarity","isFight","leadsTo","SPECIAL","cardList","cardType","cost","bunnyAdd","bunnyMult","goldAdd","permanentlyUpgradeRandomCardsInDeck","cardDraw","inkAdd","healthCost","exile","permanentlyUpgradeRandomCardsInHand","gemList","relicList","triggers","bonusPages","bonusBaseBunnies","bonusGold","bonusHealthOnCombatVictory","bonusHealth","bonusBooks","bonusInk","bunnyAddOnCast","goldAddOnCombatVictory","upgradeCard","upgradePotion","healPlayer","shopPriceMultiplier","revealAnonymousPaths","potionList","healthRestore","enemyList","level","difficulty","health","goldRewardChance","gemRewardChance","potionRewardChance","relicRewardChance","shuffle","array","j","Math","floor","random","_ref","weightedRandomChoice","weightedMap","entries","totalWeight","reduce","sum","_ref2","_ref3","_","weight","cumulative","_i","_entries","_entries$_i","key","screenChange","state","targetScreen","currentScreen","log","concat","assignShopPrices","globalMultiplier","basePrices","card","potion","gem","relic","rarityMultipliers","common","uncommon","rare","mythic","legendary","updatedShopfront","offerings","shopfront","map","entry","_item$rarity","_item$rarity$toLowerC","type","item","basePrice","upgrades","upgradeCost","includes","toLowerCase","rarityMultiplier","round","anonymizeObject","obj","anonymousNameDisplay","generateStarterDeck","console","error","modifiers","deck","basicMonoCards","_iterator","_step","createCardInstance","err","basicPolyCards","_iterator2","_step2","generateRandomCard","campaign","applyDifficultyModifiers","gold","basicCardCount","luck","restHealthRestore","maxHealth","advancePhaseTo","phaseAdvancedTo","values","currentPhase","handlePhaseTransitions","phase","populatePathOfferings","populateCardOfferings","populateRelicOfferings","populatePotionOfferings","populateGemOfferings","populateShopfront","pickPath","index","_state$level","paths","chosenPath","pathKey","path","pathData","newCards","_loop","some","existing","_ret","cards","selectedPotions","usedNames","Set","attempts","generateRandomPotion","has","add","warn","potions","undefined","selected","maxRelics","_loop2","generateRandomRelic","relics","selectedGems","generateRandomGem","gems","_state$campaign$deck","misery","bossPath","fightWeights","fightPathKey","fightPath","allPaths","_ref4","_ref5","_ref6","_ref7","data","allCardsSocketed","every","filteredPaths","pathObj","rarityWeights","getLuckAdjustedRarityWeights","chosenRarities","chosenPaths","usedPaths","_loop3","_chosenRarities","_i3","candidates","p","pick","remainingPool","idx","splice","firstTwoAreFights","finalPaths","newMisery","thirdOptions","nonFights","fights","weightedPool","allFights","anonChance","max","anonIndex","triggerResult","checkRelicTriggers","POPULATE_PATH","payload","updatedPaths","result","updatedState","pickCard","sourceArrayName","combatRewards","sourceArray","pickedCard","charged","chargeGoldCost","updatedCampaign","updatedOfferings","newState","trashed","trashPile","pickRelic","pickedRelic","relicCost","chargedState","relicBelt","isOfferingPhase","updatedTrashPile","triggeredState","pickPotion","pickedPotion","triggeredPotion","updatedPotionBelt","potionBelt","drinkPotion","heal","newPotionBelt","newTrash","openModScreen","mod","_state$offerings$gems","originPhase","validKeys","chosenGemName","discardedGems","g","_mod$gem","modData","origin","increaseBaseBunnies","amount","newAmount","baseBunnies","applyModToCard","_state$modData","_state$modData2","updatedDeck","cardIndex","findIndex","c","modifiedCard","upgrade","socketCardWithGem","purge","transmute","transmuteCard","nextPhase","shopfrontTypes","previousItems","discardedItems","updatedTrash","guaranteedTypes","weights","flatMap","_ref8","_ref9","fill","safetyCounter","chosen","generatedItems","usedKeys","_i4","_shopfrontTypes","attempt","gainGold","newGold","practiceWandwork","lootHoard","_state$defeatedEnemie","baseGold","levelBonus","enemiesDefeated","defeatedEnemies","enemyBonus","luckBonus","totalGold","hoardsLooted","rest","amountToHeal","currentHealth","healedAmount","msg","startsWith","createInitialState","ink","books","pages","handSize","combat","hand","graveyard","spellbook","maxInk","maxBooks","bunnies","maxPages","enemy","difficulties","restOptions","selectDifficultyAndBeginGame","dispatch","createGameApp","initialState","reducer","renderFn","action","cardName","found","find","createRelicInstance","relicName","createPotionInstance","potionName","createGemInstance","gemName","_ref0","_ref0$rarity","ownedRelics","GOLD_BAG","filtered","_state$defeatedEnemie2","_ref1","_ref1$rarity","_ref1$upgrades","_ref1$gem","finalRarity","upgradeWeights","finalUpgrades","defeatedCount","maxUpgrades","min","cappedUpgrades","_ref10","_ref10$rarity","_ref10$upgrades","basePotion","_ref11","_ref11$rarity","fallbackGem","chosenGem","upgradedCard","upgradable","replace","upgradedPotion","socketedCard","ceil","context","triggerEvent","_iterator3","_step3","_loop4","_relic$triggers","effect","newHealth","newMaxHealth","adjustedCost","numToUpgrade","shuffled","sort","toUpgrade","upgraded","upgradedDeck","indexOf","event","triggerData","current","alternatives","unchoosableByTransmute","newBase","purgeCard","gameReducer","_action$payload","newCard","potionIndex","potionToDrink","render","_state$level2","_state$modData3","output","document","getElementById","createElement","id","body","appendChild","innerHTML","renderModPhaseEntry","label","modKey","modBtn","textContent","style","fontSize","padding","onclick","disabled","info","join","button","btn","relicSection","pathSection","cardSection","potionSection","gemSection","shopSection","list","_entry$item$cost","_entry$item","_state$gold","li","playerGold","toUpperCase","opacity","cursor","exitBtn","modSection","isGemMod","restBtn","practiceBtn","deckBtn","nextScreen","deckView","ul","beltSection","window","onload","vegetables"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n//note to self: most functions that create a new gamestate (reducer actions) will require:\n\n// 1) the function itself\n// 2) adding to the action enum.\n// 3) adding to the reducer switch statement\n// 4) adding to the render function.\n// 5) possibly adding to the phase transition handler.\n\n//#region enums\nconst DIFFICULTIES = Object.freeze({\n  EASY: \"easy\",\n  MEDIUM: \"medium\",\n  HARD: \"hard\",\n});\nconst TRIGGER_EVENTS = Object.freeze({\n  CARD_PICKUP: \"CARD_PICKUP\",\n  RELIC_PICKUP: \"RELIC_PICKUP\",\n  POTION_PICKUP: \"POTION_PICKUP\",\n  DRINK_POTION: \"DRINK_POTION\",\n  ASSIGN_SHOP_PRICES: \"ASSIGN_SHOP_PRICES\",\n  REST: \"REST\",\n  COMBAT_START: \"COMBAT_START\",\n  POPULATE_PATHS: \"POPULATE_PATHS\",\n});\nconst PATHS = Object.freeze({\n  EASY_FIGHT: \"easy fight\",\n  MEDIUM_FIGHT: \"medium fight\",\n  HARD_FIGHT: \"hard fight\",\n  BOSS_FIGHT: \"boss fight\",\n  REST: \"rest\",\n  SHOP: \"shop\",\n  RELIC_OFFERING: \"relicOffering\",\n  GEM_OFFERING: \"gemOffering\",\n  CARD_OFFERING: \"cardOffering\",\n  ENCHANT: \"ENCHANT\",\n  POTION_OFFERING: \"potionOffering\",\n  HOARD: \"hoard\",\n  PURGE: \"purge\",\n  TRANSMUTE: \"transmute\",\n});\nconst SCREENS = Object.freeze({\n  MAIN: \"main view\",\n  DECK: \"inspect deck\",\n  RELICS: \"inspect relic belt\",\n  SETTINGS: \"settings\",\n  MOD: \"modscreen\",\n});\nconst RARITIES = Object.freeze({\n  BASIC_POLY: \"basic-poly\", // basic poly cards, several of which go in the starter deck.\n  BASIC_MONO: \"basic-mono\", // basic mono cards, only one goes in the starter deck.\n  COMMON: \"common\", // common cards\n  UNCOMMON: \"uncommon\", // uncommon cards\n  RARE: \"rare\", // rare cards\n  MYTHIC: \"mythic\", // mythic cards\n  LEGENDARY: \"legendary\", // legendary cards\n});\nconst PHASES = Object.freeze({\n  MAIN_MENU: \"main menu\",\n  DIFFICULTY_SELECTION: \"difficulty selection\",\n  MYTHIC_RELIC_OFFERING: \"mythic relic offering\",\n  RELIC_OFFERING: \"relic offering\",\n  CARD_OFFERING: \"card offering\",\n  GEM_OFFERING: \"gem offering\",\n  POTION_OFFERING: \"potion offering\",\n  COMBAT_END: \"combat end\",\n  SOCKET_GEM: \"socket gem\",\n  SHOP: \"shop\",\n  PATH_SELECTION: \"path selection\",\n  REST: \"rest\",\n  ENCHANT: \"ENCHANT\",\n  TRANSMUTE: \"transmute\",\n  COMBAT: \"combat\",\n  DEATH: \"death\",\n  VICTORY: \"victory\",\n  PURGE: \"purge\",\n  HOARD: \"hoard\",\n});\nconst ACTIONS = Object.freeze({\n  NEW_GAME: \"NEW_GAME\",\n  SET_DIFFICULTY: \"SET_DIFFICULTY\",\n  GENERATE_STARTER_DECK: \"GENERATE_STARTER_DECK\",\n  APPLY_DIFFICULTY_MODIFIERS: \"APPLY_DIFFICULTY_MODIFIERS\",\n  ADVANCE_PHASE: \"ADVANCE_PHASE\",\n  LOG_MESSAGE: \"LOG_MESSAGE\",\n  CREATE_CARD_INSTANCE: \"CREATE_CARD_INSTANCE\",\n  POPULATE_RELIC_OFFERINGS: \"POPULATE_RELIC_OFFERINGS\",\n  PICK_RELIC: \"PICK_RELIC\",\n  POPULATE_PATH_OFFERINGS: \"POPULATE_PATH_OFFERINGS\",\n  PICK_PATH: \"PICK_PATH\",\n  POPULATE_CARD_OFFERINGS: \"POPULATE_CARD_OFFERINGS\",\n  PICK_CARD: \"PICK_CARD\",\n  POPULATE_POTION_OFFERINGS: \"POPULATE_POTION_OFFERINGS\",\n  PICK_POTION: \"PICK_POTION\",\n  DRINK_POTION: \"DRINK_POTION\",\n  POPULATE_GEM_OFFERINGS: \"POPULATE_GEM_OFFERINGS\",\n  OPEN_MOD_SCREEN: \"OPEN_MOD_SCREEN\",\n  APPLY_CARD_MOD: \"APPLY_CARD_MOD\",\n  SCREEN_CHANGE: \"SCREEN_CHANGE\",\n  POPULATE_SHOPFRONT: \"POPULATE_SHOPFRONT\",\n  INCREASE_BASE_BUNNIES: \"INCREASE_BASE_BUNNIES\",\n  GAIN_GOLD: \"GAIN_GOLD\",\n  PRACTICE_WANDWORK: \"PRACTICE_WANDWORK\",\n  LOOT_HOARD: \"LOOT_HOARD\",\n  REST: \"REST\",\n});\nconst CARD_TYPES = Object.freeze({\n  INSTANT: \"instant\", // resolves immediately when played, does not go to the spellbook.\n  SPELL: \"spell\", // goes to the spellbook when played, resolves when the spellbook is cast.\n});\nconst REST_OPTIONS = Object.freeze({\n  HEAL: \"heal\",\n  PRACTICE: \"practice\",\n  ENCHANT: \"enchant\",\n});\n//#endregion enums\n//#region data maps\nconst difficultyModifiersMap = Object.freeze({\n  [DIFFICULTIES.EASY]: {\n    maxHealthModifier: 100,\n    goldModifier: 20,\n    basicCardCountModifier: 5,\n    luckModifier: 2,\n    shopPriceMultiplierModifier: -0.2, // 20% cheaper shop prices\n    restHealthRestoreModifier: 30, // heal 30 health when resting\n  },\n  [DIFFICULTIES.MEDIUM]: {\n    maxHealthModifier: 75,\n    goldModifier: 10,\n    basicCardCountModifier: 8,\n    luckModifier: 1,\n    shopPriceMultiplierModifier: 0, // normal shop prices\n    restHealthRestoreModifier: 25, // heal 20 health when resting\n  },\n  [DIFFICULTIES.HARD]: {\n    maxHealthModifier: 50,\n    goldModifier: 0,\n    basicCardCountModifier: 11,\n    luckModifier: 0,\n    shopPriceMultiplierModifier: 0.2, // 20% more expensive shop prices\n    restHealthRestoreModifier: 20, // heal 20 health when resting\n  },\n});\nconst pathMap = Object.freeze({\n  [PATHS.EASY_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n  },\n  [PATHS.MEDIUM_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n  },\n  [PATHS.HARD_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n  },\n  [PATHS.BOSS_FIGHT]: {\n    rarity: RARITIES.SPECIAL,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n  },\n  [PATHS.REST]: { rarity: RARITIES.RARE, leadsTo: PHASES.REST },\n  [PATHS.SHOP]: { rarity: RARITIES.RARE, leadsTo: PHASES.SHOP },\n  [PATHS.RELIC_OFFERING]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.RELIC_OFFERING,\n  },\n  [PATHS.GEM_OFFERING]: { rarity: RARITIES.RARE, leadsTo: PHASES.GEM_OFFERING },\n  [PATHS.CARD_OFFERING]: {\n    rarity: RARITIES.UNCOMMON,\n    leadsTo: PHASES.CARD_OFFERING,\n  },\n  [PATHS.ENCHANT]: { rarity: RARITIES.RARE, leadsTo: PHASES.ENCHANT },\n  [PATHS.POTION_OFFERING]: {\n    rarity: RARITIES.RARE,\n    leadsTo: PHASES.POTION_OFFERING,\n  },\n  [PATHS.HOARD]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.HOARD,\n  },\n  [PATHS.PURGE]: { rarity: RARITIES.RARE, leadsTo: PHASES.PURGE },\n  [PATHS.TRANSMUTE]: { rarity: RARITIES.RARE, leadsTo: PHASES.TRANSMUTE },\n});\n\n//#endregion data maps\n//#region data arrays of game objects\nconst cardList = [\n  {\n    name: \"Bunnymancy\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    cost: 1,\n    bunnyAdd: 5,\n  },\n  {\n    name: \"Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    cost: 2,\n    bunnyMult: 2,\n  },\n  {\n    name: \"Fairy Gold\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    cost: 1,\n    goldAdd: 3,\n  },\n  {\n    name: \"Enchant\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    cost: 2,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ponder\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    cost: 1,\n    cardDraw: 3,\n  },\n  {\n    name: \"Inkswell\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    cost: 1,\n    inkAdd: 2,\n  },\n  {\n    name: \"Cloudfluff Conjuration\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 0,\n    bunnyAdd: 4,\n  },\n  {\n    name: \"Cloudfluff Boon\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    cost: 0,\n    bunnyAdd: 2,\n  },\n  {\n    name: \"Midas Touch\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    goldAdd: 12,\n  },\n  {\n    name: \"Enchanted Twilight\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    permanentlyUpgradeRandomCardsInDeck: 2,\n  },\n  {\n    name: \"Dusk Lotus\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    cost: 0,\n    inkAdd: 3,\n    healthCost: 3,\n    exile: true, // Exile this card after use\n  },\n  {\n    name: \"Weasel's Bargain\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.UNCOMMON,\n    cost: 0,\n    healthCost: 2,\n    goldAdd: 6,\n  },\n  {\n    name: \"Carrot Festival\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 2,\n    bunnyAdd: 14,\n  },\n  {\n    name: \"Mega Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 2,\n    bunnyMult: 4,\n  },\n  {\n    name: \"Empower\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    cost: 1,\n    permanentlyUpgradeRandomCardsInHand: 1,\n  },\n  {\n    name: \"Mass Empower\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    permanentlyUpgradeRandomCardsInHand: 7,\n  },\n  {\n    name: \"Wisdom of the Warrens\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    cost: 0,\n    cardDraw: 1,\n  },\n];\nconst gemList = [\n  {\n    name: \"Amethyst\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 2,\n  },\n  {\n    name: \"Lapis Lazuli\",\n    rarity: RARITIES.COMMON,\n    bunnyMult: 1.5,\n  },\n  {\n    name: \"Sapphire\",\n    rarity: RARITIES.UNCOMMON,\n    cardDraw: 1,\n  },\n  {\n    name: \"Topaz\",\n    rarity: RARITIES.RARE,\n    goldAdd: 5,\n  },\n  {\n    name: \"Ruby\",\n    rarity: RARITIES.MYTHIC,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n];\nconst relicList = [\n  {\n    name: \"Magic Scroll\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusPages: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Wand\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBaseBunnies: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Egg\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusGold: 100,\n      },\n    },\n  },\n  {\n    name: \"Healing Stone\",\n    rarity: RARITIES.COMMON,\n    // not a pickup trigger — save for future COMBAT_VICTORY event\n    bonusHealthOnCombatVictory: 10,\n  },\n  {\n    name: \"Protective Amulet\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHealth: 10,\n      },\n    },\n  },\n  {\n    name: \"Magic Encyclopedia\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Inkpot\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Wand\",\n    rarity: RARITIES.MYTHIC,\n    // not triggered on pickup — belongs to CARD_CAST or similar\n    bunnyAddOnCast: 5,\n  },\n  {\n    name: \"Magic Keys\",\n    rarity: RARITIES.MYTHIC,\n    // not a pickup effect — save for COMBAT_VICTORY\n    goldAddOnCombatVictory: 10,\n  },\n  {\n    name: \"Magic Quill\",\n    rarity: RARITIES.LEGENDARY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 2,\n      },\n    },\n  },\n  {\n    name: \"Gold Bag\",\n    rarity: RARITIES.BASIC_POLY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusGold: 25,\n      },\n    },\n  },\n  {\n    name: \"Whetstone\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        upgradeCard: true,\n      },\n    },\n  },\n  {\n    name: \"Witch's Cauldron\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.POTION_PICKUP]: {\n        upgradePotion: true,\n      },\n    },\n  },\n  {\n    name: \"Crystal Vial\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.DRINK_POTION]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Discount Voucher\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.ASSIGN_SHOP_PRICES]: {\n        shopPriceMultiplier: 0.8, // 20% cheaper shop prices\n      },\n    },\n  },\n  {\n    name: \"Sleeping Bag\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        healPlayer: 20, // heal 20 health when resting\n      },\n    },\n  },\n  {\n    name: \"Toothfairy's Charm\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        goldAdd: 10, // gain 10 gold when resting\n      },\n    },\n  },\n  {\n    name: \"Planetarium Mobile\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        permanentlyUpgradeRandomCardsInDeck: 1, // upgrade a random card in the deck when resting\n      },\n    },\n  },\n  {\n    name: \"Dousing Rod\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.POPULATE_PATHS]: {\n        revealAnonymousPaths: true,\n      },\n    },\n  },\n];\nconst potionList = [\n  {\n    name: \"Lesser Healing Potion\",\n    rarity: RARITIES.COMMON,\n    healthRestore: 10,\n  },\n  {\n    name: \"Healing Potion\",\n    rarity: RARITIES.UNCOMMON,\n    healthRestore: 15,\n  },\n  {\n    name: \"Greater Healing Potion\",\n    rarity: RARITIES.RARE,\n    healthRestore: 20,\n  },\n  {\n    name: \"Elixir of Life\",\n    rarity: RARITIES.MYTHIC,\n    healthRestore: 50,\n  },\n];\nconst enemyList = [\n  {\n    name: \"Lettuce Goblin\",\n    level: 1,\n    difficulty: DIFFICULTIES.EASY,\n    health: 10,\n    goldRewardChance: 0.5,\n    gemRewardChance: 0.1,\n    potionRewardChance: 0.1,\n    relicRewardChance: 0.01,\n  },\n];\n//#endregion\n//#region utility functions\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\nfunction weightedRandomChoice(weightedMap) {\n  const entries = Object.entries(weightedMap);\n  const totalWeight = entries.reduce((sum, [_, weight]) => sum + weight, 0);\n  const r = Math.random() * totalWeight;\n  let cumulative = 0;\n\n  for (const [key, weight] of entries) {\n    cumulative += weight;\n    if (r <= cumulative) return key;\n  }\n}\nfunction screenChange(state, targetScreen) {\n  return {\n    ...state,\n    currentScreen: targetScreen,\n    log: [`Screen changed to ${targetScreen}.`, ...state.log],\n  };\n}\nfunction assignShopPrices(state) {\n  const globalMultiplier = state.shopPriceMultiplier || 1;\n\n  const basePrices = {\n    card: 10,\n    potion: 20,\n    gem: 30,\n    relic: 100,\n  };\n\n  const rarityMultipliers = {\n    common: 1,\n    uncommon: 1.2,\n    rare: 1.4,\n    mythic: 1.6,\n    legendary: 2,\n  };\n\n  const updatedShopfront = state.offerings.shopfront.map((entry) => {\n    const { type, item } = entry;\n\n    const basePrice = basePrices[type] || 0;\n    const upgrades = item.upgrades || 0;\n    const upgradeCost = [\"card\", \"potion\"].includes(type) ? upgrades * 5 : 0;\n\n    const rarity = item.rarity?.toLowerCase?.() || \"common\";\n    const rarityMultiplier = rarityMultipliers[rarity] || 1;\n\n    const cost = Math.round(\n      (basePrice + upgradeCost) * rarityMultiplier * globalMultiplier\n    );\n\n    return {\n      ...entry,\n      item: {\n        ...item,\n        cost,\n      },\n    };\n  });\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: updatedShopfront,\n    },\n    log: [`Assigned prices to shop items.`, ...state.log],\n  };\n}\nfunction anonymizeObject(obj) {\n  return {\n    ...obj,\n    anonymousNameDisplay: true,\n  };\n}\n\n//#endregion\n//#region reducer-action handlers\nfunction generateStarterDeck(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\n      \"Cannot generate starter deck: invalid difficulty:\",\n      difficulty\n    );\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n  const deck = [];\n\n  // 1. Add one of each basic mono card\n  const basicMonoCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_MONO\n  );\n  for (const card of basicMonoCards) {\n    deck.push(createCardInstance(card.name));\n  }\n\n  // 2. Add 3 of each basic poly card\n  const basicPolyCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_POLY\n  );\n  for (const card of basicPolyCards) {\n    for (let i = 0; i < 3; i++) {\n      deck.push(createCardInstance(card.name));\n    }\n  }\n\n  // 3. Add additional random basic poly cards based on difficulty\n  for (let i = 0; i < modifiers.basicCardCountModifier; i++) {\n    const card = generateRandomCard(state, { rarity: RARITIES.BASIC_POLY });\n    if (card) deck.push(card);\n  }\n\n  // 4. Shuffle the deck\n  shuffle(deck);\n\n  // 5. Return new state with updated campaign.deck\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck,\n    },\n    log: [`Generated starter deck (${deck.length} cards).`, ...state.log],\n  };\n}\nfunction applyDifficultyModifiers(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\"Invalid or missing difficulty:\", difficulty);\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n\n  return {\n    ...state,\n    gold: state.gold + modifiers.goldModifier,\n    basicCardCount: state.basicCardCount + modifiers.basicCardCountModifier,\n    luck: (state.luck || 0) + (modifiers.luckModifier || 0),\n    shopPriceMultiplier:\n      (state.shopPriceMultiplier || 1) +\n      (modifiers.shopPriceMultiplierModifier || 0),\n    restHealthRestore:\n      (state.restHealthRestore || 0) +\n      (modifiers.restHealthRestoreModifier || 0),\n    maxHealth: state.maxHealth + modifiers.maxHealthModifier,\n    health: state.health + modifiers.maxHealthModifier,\n    log: [`Applied difficulty modifiers for ${difficulty}.`, ...state.log],\n  };\n}\n\nfunction advancePhaseTo(state, phaseAdvancedTo) {\n  if (!Object.values(PHASES).includes(phaseAdvancedTo)) {\n    console.error(\"Invalid phase passed to advancePhaseTo:\", phaseAdvancedTo);\n    return state;\n  }\n\n  return {\n    ...state,\n    currentPhase: phaseAdvancedTo,\n    log: [`Advanced to phase: ${phaseAdvancedTo}`, ...state.log],\n  };\n}\nfunction handlePhaseTransitions(state) {\n  const phase = state.currentPhase;\n\n  switch (phase) {\n    case PHASES.DIFFICULTY_SELECTION:\n      return {\n        ...state,\n        log: [\"Choose your difficulty.\", ...state.log],\n      };\n\n    case PHASES.PATH_SELECTION:\n      console.log(\">> Entering PHASES.PATH_SELECTION\");\n      return populatePathOfferings(state);\n\n    case PHASES.CARD_OFFERING:\n      console.log(\">> Entering PHASES.CARD_OFFERING\");\n      return populateCardOfferings(state);\n\n    case PHASES.MYTHIC_RELIC_OFFERING:\n      console.log(\">> Entering PHASES.MYTHIC_RELIC_OFFERING .\");\n      return populateRelicOfferings(state, RARITIES.MYTHIC);\n\n    case PHASES.RELIC_OFFERING:\n      console.log(\">> Entering PHASES.RELIC_OFFERING.\");\n      return populateRelicOfferings(state);\n\n    case PHASES.POTION_OFFERING:\n      console.log(\">> Entering POTION_OFFERING phase.\");\n      return populatePotionOfferings(state);\n\n    case PHASES.GEM_OFFERING:\n      console.log(\">> Entering GEM_OFFERING phase.\");\n      return populateGemOfferings(state);\n\n    case PHASES.SHOP:\n      return populateShopfront(state);\n\n    default:\n      return state;\n  }\n}\nfunction pickPath(state, index) {\n  const paths = state.offerings.paths;\n\n  if (!paths || index < 0 || index >= paths.length) {\n    console.error(\"Invalid path index:\", index);\n    return state;\n  }\n\n  const chosenPath = paths[index];\n  const pathKey = chosenPath.path;\n  const pathData = pathMap[pathKey];\n\n  if (!pathData || !pathData.leadsTo) {\n    console.error(\"Path has no destination phase:\", pathKey);\n    return state;\n  }\n\n  return handlePhaseTransitions({\n    ...state,\n    level: (state.level ?? 0) + 1,\n    currentPhase: pathData.leadsTo,\n    log: [`Chose path: ${pathKey}`, ...state.log],\n    offerings: {\n      ...state.offerings,\n      paths: [], // clear after pick\n    },\n  });\n}\nfunction populateCardOfferings(state) {\n  const newCards = [];\n\n  while (newCards.length < 3) {\n    const card = generateRandomCard(state);\n    if (!card) continue;\n    if (newCards.some((existing) => existing.name === card.name)) continue;\n    newCards.push(card);\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      cards: newCards,\n    },\n    log: [`Populated card offerings.`, ...state.log],\n  };\n}\nfunction populatePotionOfferings(state) {\n  const selectedPotions = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedPotions.length < 3 && attempts < 50) {\n    attempts++;\n\n    const potion = generateRandomPotion(state);\n    if (!potion) continue;\n\n    if (usedNames.has(potion.name)) continue;\n\n    selectedPotions.push(potion);\n    usedNames.add(potion.name);\n  }\n\n  if (selectedPotions.length < 3) {\n    console.warn(\"Not enough unique potions to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      potions: selectedPotions,\n    },\n    log: [`Populated potion offerings.`, ...state.log],\n  };\n}\nfunction populateRelicOfferings(state, rarity = null) {\n  const selected = [];\n  const maxRelics = 3;\n\n  while (selected.length < maxRelics) {\n    const relic = generateRandomRelic(state, { rarity });\n\n    // Ensure uniqueness by name\n    if (selected.some((r) => r.name === relic.name)) continue;\n\n    selected.push(relic);\n  }\n\n  console.log(\"Selected relic offerings:\", selected);\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      relics: selected,\n    },\n    log: [`Populated relic offerings.`, ...state.log],\n  };\n}\nfunction populateGemOfferings(state) {\n  const selectedGems = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedGems.length < 3 && attempts < 50) {\n    attempts++;\n\n    const gem = generateRandomGem(state);\n    if (!gem) continue;\n\n    if (usedNames.has(gem.name)) continue;\n\n    selectedGems.push(gem);\n    usedNames.add(gem.name);\n  }\n\n  if (selectedGems.length < 3) {\n    console.warn(\"Not enough unique gems to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      gems: selectedGems,\n    },\n    log: [`Populated gem offerings.`, ...state.log],\n  };\n}\nfunction populatePathOfferings(state) {\n  const luck = state.luck || 0;\n  const misery = state.misery || 0;\n  const level = state.level || 0;\n\n  // === Step 0: Boss override ===\n  if ([15, 30, 45].includes(level)) {\n    const bossPath = {\n      path: PATHS.BOSS_FIGHT,\n      ...pathMap[PATHS.BOSS_FIGHT],\n    };\n    return {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        paths: [bossPath, bossPath, bossPath],\n      },\n      log: [`Boss floor! All paths lead to a boss fight.`, ...state.log],\n    };\n  }\n\n  // === Step 1: Always pick 1 fight path ===\n  const fightWeights = {\n    [PATHS.EASY_FIGHT]: 3,\n    [PATHS.MEDIUM_FIGHT]: 2,\n    [PATHS.HARD_FIGHT]: 1,\n  };\n  const fightPathKey = weightedRandomChoice(fightWeights);\n  const fightPath = {\n    path: fightPathKey,\n    ...pathMap[fightPathKey],\n  };\n\n  // === Step 2: Create a pool of all valid paths (excluding duplicate of picked fight) ===\n  const allPaths = Object.entries(pathMap)\n    .filter(([key]) => key !== fightPathKey)\n    .map(([path, data]) => ({ path, ...data }));\n\n  // === Step 2a: Exclude GEM_OFFERING if all cards are socketed ===\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null);\n\n  const filteredPaths = allPaths.filter((pathObj) => {\n    if (pathObj.path === PATHS.GEM_OFFERING && allCardsSocketed) return false;\n    return true;\n  });\n\n  // === Step 3: Pick first two paths using rarity weights ===\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const chosenRarities = [\n    weightedRandomChoice(rarityWeights),\n    weightedRandomChoice(rarityWeights),\n  ];\n\n  const chosenPaths = [];\n  const usedPaths = new Set([fightPathKey]);\n\n  for (const rarity of chosenRarities) {\n    const candidates = filteredPaths.filter(\n      (p) => p.rarity === rarity && !usedPaths.has(p.path)\n    );\n    if (candidates.length > 0) {\n      const pick = candidates[Math.floor(Math.random() * candidates.length)];\n      usedPaths.add(pick.path);\n      chosenPaths.push(pick);\n    }\n  }\n\n  // === Step 4: Fill in missing 2nd path if needed\n  const remainingPool = filteredPaths.filter((p) => !usedPaths.has(p.path));\n  while (chosenPaths.length < 2 && remainingPool.length > 0) {\n    const idx = Math.floor(Math.random() * remainingPool.length);\n    const pick = remainingPool.splice(idx, 1)[0];\n    usedPaths.add(pick.path);\n    chosenPaths.push(pick);\n  }\n\n  // === Step 5: Optional override for 3rd path using misery + luck if both are fights\n  const firstTwoAreFights = chosenPaths.every((p) => p.isFight);\n  let finalPaths = [fightPath, ...chosenPaths];\n  let newMisery = misery;\n\n  if (firstTwoAreFights && misery > 0 && remainingPool.length > 0) {\n    const thirdOptions = remainingPool.filter((p) => !usedPaths.has(p.path));\n    if (thirdOptions.length > 0) {\n      const nonFights = thirdOptions.filter((p) => !p.isFight);\n      const fights = thirdOptions.filter((p) => p.isFight);\n\n      const weightedPool = [];\n      nonFights.forEach((p) => {\n        for (let i = 0; i < misery + luck; i++) weightedPool.push(p);\n      });\n      fights.forEach((p) => {\n        weightedPool.push(p); // 1 weight each\n      });\n\n      if (weightedPool.length > 0) {\n        const pick =\n          weightedPool[Math.floor(Math.random() * weightedPool.length)];\n        usedPaths.add(pick.path);\n        finalPaths[2] = pick;\n        if (!pick.isFight) newMisery = misery - 1;\n      }\n    }\n  }\n\n  // === Step 6: Check again if all 3 are fights and increment misery\n  const allFights = finalPaths.every((p) => p.isFight);\n  if (allFights) newMisery++;\n\n  console.log(\"Populated path options:\", finalPaths);\n\n  // === Step 6.5: Randomly anonymize one path based on (50% - luck) chance\n  const anonChance = Math.max(0, 0.5 - (state.luck || 0) * 0.01); // luck is per % point\n  const anonIndex = Math.floor(Math.random() * finalPaths.length);\n\n  if (Math.random() < anonChance) {\n    finalPaths[anonIndex] = anonymizeObject(finalPaths[anonIndex]);\n  }\n\n  // === Step 7: Apply relic triggers for POPULATE_PATH\n  const triggerResult = checkRelicTriggers(\n    state,\n    TRIGGER_EVENTS.POPULATE_PATH,\n    {\n      payload: finalPaths,\n    }\n  );\n  const updatedPaths = triggerResult.result || finalPaths;\n  const updatedState = { ...triggerResult };\n\n  return {\n    ...updatedState,\n    misery: newMisery,\n    offerings: {\n      ...updatedState.offerings,\n      paths: updatedPaths,\n    },\n    log: [\n      allFights\n        ? `Populated path options (all fights — misery increased to ${newMisery}).`\n        : `Populated path options.`,\n      ...updatedState.log,\n    ],\n  };\n}\n\nfunction pickCard(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  let sourceArrayName = null;\n\n  if (offerings.cards && index < offerings.cards.length) {\n    sourceArrayName = \"cards\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid card index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap if from shop\n  const pickedCard = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedCard) {\n    console.error(\"No card found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const cost = entry.cost || 20;\n    const charged = chargeGoldCost(state, cost, \"card\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  // === 3. Add to campaign deck ===\n  const updatedCampaign = {\n    ...updatedState.campaign,\n    deck: [...updatedState.campaign.deck, pickedCard],\n  };\n\n  // === 4. Remove from offerings ===\n  const updatedOfferings = {\n    ...updatedState.offerings,\n    [sourceArrayName]: sourceArray.filter((_, i) => i !== index),\n  };\n\n  // === 5. Apply triggers ===\n  let newState = {\n    ...updatedState,\n    campaign: updatedCampaign,\n    offerings: updatedOfferings,\n    log: [`Picked card: ${pickedCard.name}`, ...updatedState.log],\n  };\n\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.CARD_PICKUP, {\n    payload: pickedCard,\n  });\n\n  // === 6. Trash unchosen cards if from offering ===\n  if (phase === PHASES.CARD_OFFERING) {\n    const trashed = sourceArray.filter((_, i) => i !== index);\n\n    newState = {\n      ...newState,\n      trashPile: [...(newState.trashPile || []), ...trashed],\n      offerings: {\n        ...newState.offerings,\n        [sourceArrayName]: [],\n      },\n    };\n\n    newState = handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\nfunction pickRelic(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  if (offerings.relics && index < offerings.relics.length) {\n    sourceArrayName = \"relics\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid relic index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap relic from shopfront if needed\n  const pickedRelic = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedRelic) {\n    console.error(\"No relic found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const relicCost = entry.cost || 50;\n    const chargedState = chargeGoldCost(state, relicCost, \"relic\");\n    if (chargedState === state) return state; // not enough gold\n    updatedState = chargedState;\n  }\n\n  // === 3. Add relic to belt ===\n  updatedState = {\n    ...updatedState,\n    relicBelt: [...updatedState.relicBelt, pickedRelic],\n  };\n\n  // === 4. Remove the picked relic from offerings ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 5. Trash unchosen relics if from offering phase ===\n  const isOfferingPhase = [\n    PHASES.MYTHIC_RELIC_OFFERING,\n    PHASES.RELIC_OFFERING,\n  ].includes(phase);\n\n  let updatedTrashPile = updatedState.trashPile;\n  if (isOfferingPhase) {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.relics.filter((_, i) => i !== index),\n    ];\n    offerings.relics = [];\n  }\n\n  // === 6. Build the new state ===\n  const newState = {\n    ...updatedState,\n    trashPile: updatedTrashPile, // ✅ Root-level trash pile\n    offerings,\n    log: [`Picked relic: ${pickedRelic.name}`, ...updatedState.log],\n  };\n\n  // === 7. Trigger relic effects\n  const triggeredState = checkRelicTriggers(\n    newState,\n    TRIGGER_EVENTS.RELIC_PICKUP,\n    { relic: pickedRelic }\n  );\n\n  // === 8. Advance phase if in offering\n  if (isOfferingPhase) {\n    return handlePhaseTransitions(\n      advancePhaseTo(triggeredState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return triggeredState;\n}\n\nfunction pickPotion(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  if (offerings.potions && index < offerings.potions.length) {\n    sourceArrayName = \"potions\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else {\n    console.error(\"Invalid potion index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap the potion if it came from the shop\n  const pickedPotion = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedPotion) {\n    console.error(\"No potion found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge cost if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const cost = entry.cost || 30;\n    const charged = chargeGoldCost(state, cost, \"potion\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  // === 3. Apply pickup relic triggers (may upgrade the potion) ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.POTION_PICKUP,\n    { payload: pickedPotion }\n  );\n  const triggeredPotion = triggerResult.result;\n  updatedState = { ...triggerResult }; // ensures any other state changes are included\n\n  // === 4. Add to top-level potion belt ===\n  const updatedPotionBelt = [...updatedState.potionBelt, triggeredPotion];\n\n  // === 5. Remove the picked potion from the offerings ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 6. Trash unchosen potions if from offering ===\n  let updatedTrashPile = updatedState.trashPile;\n  if (phase === PHASES.POTION_OFFERING) {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.potions.filter((_, i) => i !== index),\n    ];\n    offerings.potions = [];\n  }\n\n  // === 7. Build the new state ===\n  const newState = {\n    ...updatedState,\n    potionBelt: updatedPotionBelt,\n    trashPile: updatedTrashPile, // ✅ Root-level trash pile\n    offerings,\n    log: [`Picked potion: ${pickedPotion.name}`, ...updatedState.log],\n  };\n\n  // === 8. Advance if from offering ===\n  if (phase === PHASES.POTION_OFFERING) {\n    return handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\n\nfunction drinkPotion(state, potion) {\n  if (!potion) {\n    console.error(\"No potion passed to drinkPotion\");\n    return state;\n  }\n\n  let updatedState = { ...state };\n\n  // === 1. Apply effects ===\n  if (potion.healthRestore) {\n    updatedState = heal(updatedState, potion.healthRestore);\n  }\n\n  // === 2. Remove potion from potionBelt and add to trash ===\n  const newPotionBelt = updatedState.potionBelt.filter((p) => p !== potion);\n  const newTrash = [...updatedState.trashPile, potion];\n\n  updatedState = {\n    ...updatedState,\n    campaign: {\n      ...updatedState.campaign,\n      potionBelt: newPotionBelt,\n      trashPile: newTrash,\n    },\n    log: [`Drank potion: ${potion.name}`, ...updatedState.log],\n  };\n\n  // === 3. Check relic triggers ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.DRINK_POTION,\n    { potion }\n  );\n\n  return {\n    ...triggerResult,\n    log: triggerResult.log || updatedState.log,\n  };\n}\nfunction openModScreen(state, mod, originPhase = null) {\n  const validKeys = [\"upgrade\", \"gem\", \"purge\", \"transmute\"];\n  const keys = Object.keys(mod || {});\n  if (keys.length !== 1 || !validKeys.includes(keys[0])) {\n    console.error(\"Invalid mod passed to openModScreen:\", mod);\n    return state;\n  }\n\n  // === GEM LOGIC: Discard unchosen gems only if from gem offering ===\n  if (mod.gem && (state.offerings.gems?.length || 0) > 0) {\n    const chosenGemName = mod.gem.name;\n\n    const discardedGems = state.offerings.gems.filter(\n      (g) => g.name !== chosenGemName\n    );\n\n    state = {\n      ...state,\n      campaign: {\n        ...state.campaign,\n        trashPile: [...state.trashPile, ...discardedGems],\n      },\n      offerings: {\n        ...state.offerings,\n        gems: [], // clear offering gems\n      },\n      log: [`Discarded ${discardedGems.length} unchosen gem(s).`, ...state.log],\n    };\n  }\n\n  // === Charge gold if in shop ===\n  if (state.currentPhase === PHASES.SHOP) {\n    let cost = 50;\n    if (mod?.gem?.cost !== undefined) {\n      cost = mod.gem.cost;\n    }\n\n    const charged = chargeGoldCost(state, cost, \"card modification\");\n    if (charged === state) return state; // insufficient gold\n    state = charged;\n  }\n\n  return {\n    ...state,\n    currentScreen: SCREENS.MOD,\n    modData: {\n      mod,\n      origin: originPhase || state.currentPhase,\n    },\n    log: [`Opened mod screen (${keys[0]}).`, ...state.log],\n  };\n}\nfunction increaseBaseBunnies(state, amount) {\n  const newAmount = Math.max(0, (state.baseBunnies || 0) + amount);\n\n  return {\n    ...state,\n    baseBunnies: newAmount,\n    log: [`Base bunnies increased by ${amount}.`, ...state.log],\n  };\n}\nfunction applyModToCard(state, card) {\n  const mod = state.modData?.mod;\n  const origin = state.modData?.origin;\n\n  if (!mod || !card) {\n    console.warn(\"applyModToCard called without a valid mod or card.\");\n    return state;\n  }\n\n  let updatedDeck = [...state.campaign.deck];\n  const cardIndex = updatedDeck.findIndex((c) => c === card);\n\n  if (cardIndex === -1) {\n    console.warn(\"Card not found in campaign deck.\");\n    return state;\n  }\n\n  // Apply mod\n  let modifiedCard = { ...card };\n  if (mod.upgrade) {\n    modifiedCard = upgradeCard(modifiedCard, mod.upgrade);\n  } else if (mod.gem) {\n    modifiedCard = socketCardWithGem(modifiedCard, mod.gem);\n  } else if (mod.purge) {\n    updatedDeck.splice(cardIndex, 1); // Remove the card\n  } else if (mod.transmute) {\n    modifiedCard = transmuteCard(modifiedCard);\n  }\n\n  // Replace modified card if not purged\n  if (!mod.purge) {\n    updatedDeck[cardIndex] = modifiedCard;\n  }\n\n  // Determine next phase\n  const nextPhase =\n    origin === PHASES.SHOP || origin === PHASES.COMBAT_END\n      ? origin\n      : PHASES.PATH_SELECTION;\n\n  const updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n    },\n    modData: null,\n    currentScreen: SCREENS.MAIN,\n    currentPhase: nextPhase,\n    log: [`Applied mod to ${card.name}.`, ...state.log],\n  };\n\n  // If transitioning to path selection, trigger path population\n  return nextPhase === PHASES.PATH_SELECTION\n    ? handlePhaseTransitions(updatedState)\n    : updatedState;\n}\nfunction populateShopfront(state) {\n  const shopfrontTypes = [];\n  // === Clear existing shop items into trash ===\n  const previousItems = state.offerings.shopfront || [];\n  const discardedItems = previousItems.map((entry) => entry.item);\n  const updatedTrash = [...(state.trashPile || []), ...discardedItems];\n  // === Step 1: Ensure 1 of each type ===\n  const guaranteedTypes = [\"relic\", \"potion\", \"card\", \"gem\"];\n  guaranteedTypes.forEach((type) => shopfrontTypes.push(type));\n\n  // === Step 2: Fill remaining 8 items using weighted choice ===\n  const weights = {\n    card: 12,\n    potion: 3,\n    gem: 1,\n    relic: 1,\n  };\n\n  const weightedPool = Object.entries(weights).flatMap(([type, weight]) =>\n    Array(weight).fill(type)\n  );\n\n  let safetyCounter = 0;\n  while (shopfrontTypes.length < 12 && safetyCounter < 100) {\n    safetyCounter++;\n    const chosen =\n      weightedPool[Math.floor(Math.random() * weightedPool.length)];\n    shopfrontTypes.push(chosen);\n  }\n\n  // === Step 3: Generate actual items, avoiding duplicates ===\n  const generatedItems = [];\n  const usedKeys = new Set();\n\n  for (let type of shopfrontTypes) {\n    let item = null;\n    let attempt = 0;\n\n    while (attempt < 20) {\n      attempt++;\n      try {\n        switch (type) {\n          case \"card\":\n            item = generateRandomCard(state);\n            break;\n          case \"potion\":\n            item = generateRandomPotion(state);\n            break;\n          case \"gem\":\n            item = generateRandomGem(state);\n            break;\n          case \"relic\":\n            item = generateRandomRelic(state);\n            break;\n          default:\n            item = null;\n        }\n\n        if (!item) continue;\n\n        const key = `${type}-${item.name}`;\n        if (usedKeys.has(key)) continue;\n\n        usedKeys.add(key);\n        generatedItems.push({ type, item });\n        break; // done\n      } catch (e) {\n        console.warn(\"Shop item generation failed:\", type, e);\n      }\n    }\n  }\n\n  // === Step 4: Insert shopfront and assign prices ===\n  let updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      trashPile: updatedTrash,\n    },\n    offerings: {\n      ...state.offerings,\n      shopfront: generatedItems,\n    },\n  };\n\n  updatedState = assignShopPrices(updatedState);\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.ASSIGN_SHOP_PRICES\n  );\n\n  return {\n    ...updatedState,\n    log: [\n      `Populated shopfront with ${generatedItems.length} unique items.`,\n      ...updatedState.log,\n    ],\n  };\n}\nfunction gainGold(state, amount) {\n  const newGold = (state.gold || 0) + amount;\n\n  return {\n    ...state,\n    gold: newGold,\n    log: [`Gained ${amount} gold.`, ...state.log],\n  };\n}\nfunction practiceWandwork(state) {\n  // Step 1: Increase base bunnies by 1\n  let newState = increaseBaseBunnies(state, 1);\n\n  // Step 2: Advance to path selection\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  // Step 3: Handle the transition (populate offerings)\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\nfunction lootHoard(state) {\n  const baseGold = 10;\n  const levelBonus = state.level || 0;\n  const enemiesDefeated = state.defeatedEnemies?.length || 0;\n  const luck = state.luck || 0;\n\n  const enemyBonus = enemiesDefeated * 5;\n  const luckBonus = luck * 2;\n\n  const totalGold = baseGold + levelBonus + enemyBonus + luckBonus;\n\n  // Step 1: Gain gold\n  let newState = gainGold(state, totalGold);\n\n  // Step 2: Track hoards looted\n  const hoardsLooted = (newState.hoardsLooted || 0) + 1;\n  newState = {\n    ...newState,\n    hoardsLooted,\n    log: [`Looted a hoard! (${totalGold}g)`, ...newState.log],\n  };\n\n  // Step 3: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction rest(state) {\n  const amountToHeal = state.restHealthRestore || 0;\n  const currentHealth = state.health || 0;\n\n  // Step 1: Heal the player\n  let newState = heal(state, amountToHeal);\n  const healedAmount = newState.health - currentHealth;\n\n  // Step 2: Check relic triggers for REST\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.REST);\n\n  // Step 3: Add one summary log line\n  newState = {\n    ...newState,\n    log: [\n      `Rested at the fire and recovered ${healedAmount} HP.`,\n      ...newState.log.filter((msg) => !msg.startsWith(\"Healed\")),\n    ],\n  };\n\n  // Step 4: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  // ✅ Step 5: Populate offerings for the new phase\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\n//#endregion\n//#region state setup and game initialization\nfunction createInitialState() {\n  return {\n    log: [],\n    currentScreen: SCREENS.MAIN,\n    currentPhase: PHASES.MAIN_MENU,\n\n    basicCardCount: 5,\n    restHealthRestore: 10,\n    shopPriceMultiplier: 1,\n    difficulty: null,\n\n    maxHealth: 0,\n    health: 0,\n    baseBunnies: 0,\n\n    gold: 0,\n\n    luck: 0,\n    level: 0,\n    misery: 0,\n\n    hoardsLooted: 0,\n    defeatedEnemies: [],\n    trashPile: [],\n\n    relicBelt: [],\n    potionBelt: [],\n\n    campaign: {\n      deck: [],\n      ink: 3,\n      books: 1,\n      pages: 3,\n      handSize: 5,\n    },\n    combat: {\n      deck: [],\n      hand: [],\n      graveyard: [],\n      exile: [],\n      spellbook: [],\n\n      baseBunnies: 0,\n      ink: 0,\n      maxInk: 0,\n      books: 0,\n      maxBooks: 0,\n      pages: 0,\n      bunnies: 0,\n      maxPages: 0,\n      handSize: 5,\n\n      enemy: null,\n    },\n    offerings: {\n      difficulties: [],\n      shopfront: [],\n      cards: [],\n      potions: [],\n      gems: [],\n      relics: [],\n      paths: [],\n      combatRewards: [],\n      restOptions: [],\n    },\n  };\n}\nfunction selectDifficultyAndBeginGame(dispatch, difficulty) {\n  dispatch({ type: ACTIONS.SET_DIFFICULTY, payload: difficulty });\n  dispatch({ type: ACTIONS.GENERATE_STARTER_DECK });\n  dispatch({ type: ACTIONS.APPLY_DIFFICULTY_MODIFIERS });\n  dispatch({\n    type: ACTIONS.ADVANCE_PHASE,\n    payload: PHASES.MYTHIC_RELIC_OFFERING,\n  });\n}\nfunction createGameApp(initialState, reducer, renderFn) {\n  let state = initialState;\n  function dispatch(action) {\n    state = reducer(state, action);\n    renderFn(state, dispatch); // pass dispatch so buttons etc. can use it\n  }\n  // Start the game\n  dispatch({ type: ACTIONS.NEW_GAME });\n  return { dispatch };\n}\n\n//#endregion\n//#region game mechanics\nfunction createCardInstance(\n  cardName = null,\n  rarity = null,\n  upgrades = 0,\n  gem = null\n) {\n  let card;\n  if (rarity) {\n    console.log(\"🔍 createCardInstance got rarity:\", rarity);\n  }\n  if (cardName) {\n    const found = cardList.find((c) => c.name === cardName);\n    if (!found) {\n      console.error(`Card not found: ${cardName}`);\n      return null;\n    }\n    card = { ...found };\n  } else if (rarity) {\n    const candidates = cardList.filter((c) => c.rarity === rarity);\n    if (candidates.length === 0) {\n      console.error(`No cards found with rarity: ${rarity}`);\n      return null;\n    }\n    card = { ...candidates[Math.floor(Math.random() * candidates.length)] };\n  } else {\n    console.error(\"createCardInstance requires either a cardName or a rarity.\");\n    return null;\n  }\n\n  // Apply upgrades if needed\n  if (upgrades > 0) {\n    card = upgradeCard(card, upgrades); // this should set .upgrades itself\n  }\n\n  // Apply gem if needed\n  if (gem) {\n    card = socketCardWithGem(card, gem);\n  }\n\n  return card;\n}\n\nfunction createRelicInstance(relicName) {\n  const found = relicList.find((r) => r.name === relicName);\n  if (!found) {\n    console.error(`Relic not found: ${relicName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction createPotionInstance(potionName, upgrades = 0) {\n  const found = potionList.find((p) => p.name === potionName);\n  if (!found) {\n    console.error(`Potion not found: ${potionName}`);\n    return null;\n  }\n\n  let potion = { ...found };\n\n  if (upgrades > 0) {\n    potion = upgradePotion(potion, upgrades);\n  }\n\n  return potion;\n}\nfunction createGemInstance(gemName) {\n  const found = gemList.find((g) => g.name === gemName);\n  if (!found) {\n    console.error(`Gem not found: ${gemName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction generateRandomRelic(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const ownedRelics = new Set([\n    ...state.relicBelt.map((r) => r.name),\n    ...state.trashPile.map((r) => r.name),\n  ]);\n\n  const GOLD_BAG = \"Gold Bag\";\n\n  // Exclude Gold Bag and duplicate high-rarity relics\n  let candidates = relicList.filter((r) => {\n    if (r.name === GOLD_BAG) return false;\n    if (\n      (r.rarity === RARITIES.MYTHIC || r.rarity === RARITIES.LEGENDARY) &&\n      ownedRelics.has(r.name)\n    ) {\n      return false;\n    }\n    return true;\n  });\n\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  const filtered = candidates.filter((r) => r.rarity === rarity);\n  if (filtered.length === 0) {\n    console.warn(`No relics found for rarity: ${rarity}`);\n    return createRelicInstance(GOLD_BAG);\n  }\n\n  const chosen = filtered[Math.floor(Math.random() * filtered.length)];\n  return { ...chosen };\n}\nfunction generateRandomCard(\n  state,\n  { rarity = null, upgrades = undefined, gem = null } = {}\n) {\n  const luck = state.luck || 0;\n\n  const finalRarity =\n    rarity || weightedRandomChoice(getLuckAdjustedRarityWeights(luck));\n\n  const upgradeWeights = {\n    0: Math.max(0, 100 - luck),\n    1: 3 + luck,\n    2: 2 + luck,\n    3: 1 + luck,\n    4: 0 + luck,\n  };\n\n  const finalUpgrades =\n    upgrades !== undefined\n      ? upgrades\n      : Number(weightedRandomChoice(upgradeWeights));\n\n  const defeatedCount = state.defeatedEnemies?.length || 0;\n  const maxUpgrades = Math.min(4, Math.floor(defeatedCount / 3));\n  const cappedUpgrades = Math.min(finalUpgrades, maxUpgrades);\n\n  return createCardInstance(undefined, finalRarity, cappedUpgrades, gem);\n}\nfunction generateRandomPotion(state, { rarity = null, upgrades = null } = {}) {\n  const luck = state.luck || 0;\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const upgradeWeights = {\n    0: Math.max(0, 100 - luck),\n    1: 3 + luck,\n    2: 2 + luck,\n    3: 1 + luck,\n    4: 0 + luck,\n  };\n\n  // === Choose rarity if not provided ===\n  if (!rarity) {\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // === Fallback in case rarity yields no results ===\n  const candidates = potionList.filter((p) => p.rarity === rarity);\n  let basePotion;\n  if (candidates.length === 0) {\n    console.warn(\n      `No potions found for rarity: ${rarity}. Falling back to Lesser Healing Potion.`\n    );\n    basePotion = potionList.find((p) => p.name === \"Lesser Healing Potion\");\n    if (!basePotion) {\n      console.error(\n        \"Fallback potion 'Lesser Healing Potion' not found in potionList.\"\n      );\n      return null;\n    }\n    upgrades = 0; // ensure fallback is always unupgraded\n  } else {\n    basePotion = candidates[Math.floor(Math.random() * candidates.length)];\n\n    // === Choose upgrade level if not provided ===\n    if (upgrades === null) {\n      upgrades = Number(weightedRandomChoice(upgradeWeights));\n    }\n    upgrades = Math.min(upgrades, 4);\n  }\n\n  return createPotionInstance(basePotion.name, upgrades);\n}\nfunction generateRandomGem(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const fallbackGem = createGemInstance(\"Amethyst\");\n\n  // Choose rarity based on luck if not specified\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // Filter by rarity\n  const candidates = gemList.filter((gem) => gem.rarity === rarity);\n\n  if (candidates.length === 0) {\n    console.warn(\n      `No gems found for rarity: ${rarity}, returning fallback gem.`\n    );\n    return fallbackGem;\n  }\n\n  const chosenGem = candidates[Math.floor(Math.random() * candidates.length)];\n  return { ...chosenGem };\n}\nfunction upgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to upgradeCard:\", card);\n    return card;\n  }\n\n  // Clone the card to avoid mutating the original\n  const upgradedCard = { ...card };\n\n  let upgradable = false;\n\n  if (\"bunnyAdd\" in upgradedCard) {\n    upgradedCard.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedCard) {\n    upgradedCard.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"goldAdd\" in upgradedCard) {\n    upgradedCard.goldAdd += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInDeck += level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInHand\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInHand += level;\n    upgradable = true;\n  }\n\n  if (\"cardDraw\" in upgradedCard) {\n    upgradedCard.cardDraw += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"inkAdd\" in upgradedCard) {\n    upgradedCard.inkAdd += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"healthCost\" in upgradedCard) {\n    upgradedCard.healthCost -= 1 * level; // reduce health cost\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Card cannot be upgraded: ${card.name}`);\n    return card;\n  }\n\n  // Add or increment the upgrade level\n  upgradedCard.upgrades = (upgradedCard.upgrades || 0) + level;\n\n  // Rename the card to reflect its upgrade level\n  upgradedCard.name =\n    card.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedCard.upgrades}`;\n\n  return upgradedCard;\n}\nfunction upgradePotion(potion, level = 1) {\n  if (!potion || typeof potion !== \"object\") {\n    console.error(\"Invalid potion passed to upgradePotion:\", potion);\n    return potion;\n  }\n\n  // Clone the potion to avoid mutating the original\n  const upgradedPotion = { ...potion };\n\n  let upgradable = false;\n\n  // === Upgradeable Effects ===\n  if (\"healthRestore\" in upgradedPotion) {\n    upgradedPotion.healthRestore += 2 * level;\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Potion cannot be upgraded: ${potion.name}`);\n    return potion;\n  }\n\n  // === Track upgrade level ===\n  upgradedPotion.upgrades = (upgradedPotion.upgrades || 0) + level;\n\n  // === Update potion name to reflect upgrades ===\n  upgradedPotion.name =\n    potion.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedPotion.upgrades}`;\n\n  return upgradedPotion;\n}\nfunction socketCardWithGem(card, gem) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to socketCardWithGem:\", card);\n    return card;\n  }\n\n  if (!gem || typeof gem !== \"object\" || !gem.name) {\n    console.error(\"Invalid gem passed to socketCardWithGem:\", gem);\n    return card;\n  }\n\n  // Clone the card to avoid mutation\n  const socketedCard = { ...card };\n\n  // Apply gem effects\n  if (\"bunnyAdd\" in gem) {\n    socketedCard.bunnyAdd = (socketedCard.bunnyAdd || 0) + gem.bunnyAdd;\n  }\n\n  // Save the gem reference\n  socketedCard.gem = gem;\n\n  // Rename the card to include the gem name as a prefix\n  socketedCard.name = `${gem.name} ${card.name}`;\n\n  return socketedCard;\n}\nfunction getLuckAdjustedRarityWeights(luck = 0) {\n  return {\n    [RARITIES.COMMON]: Math.max(20, 60 - luck * 2),\n    [RARITIES.UNCOMMON]: Math.max(20, 40 - luck),\n    [RARITIES.RARE]: Math.min(20, 5 + luck),\n    [RARITIES.MYTHIC]: Math.min(10, 2 + Math.ceil(luck / 2)),\n    [RARITIES.LEGENDARY]: Math.min(5, 1 + Math.ceil(luck / 3)),\n  };\n}\nfunction chargeGoldCost(state, cost, context = \"purchase\") {\n  if (state.gold < cost) {\n    console.warn(`Not enough gold for ${context}!`);\n    return state; // return unmodified state\n  }\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      gold: state.gold - cost,\n    },\n    log: [`Spent ${cost} gold on ${context}.`, ...state.log],\n  };\n}\nfunction checkRelicTriggers(state, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  let result = context.payload || null;\n\n  for (const relic of updatedState.relicBelt) {\n    const effect = relic.triggers?.[triggerEvent];\n    if (!effect) continue;\n\n    // === handle DRINK_POTION effects ===\n    if (triggerEvent === TRIGGER_EVENTS.DRINK_POTION && context.potion) {\n      if (effect.healPlayer) {\n        updatedState = heal(updatedState, effect.healPlayer);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} healed you for ${effect.healPlayer} HP on potion use.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    // === Handle POTION_PICKUP effects ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.POTION_PICKUP &&\n      effect.upgradePotion &&\n      result\n    ) {\n      result = upgradePotion(result, 1);\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} upgraded a potion on pickup!`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    // === Handle CARD_PICKUP effects ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.CARD_PICKUP &&\n      effect.upgradeCard &&\n      result\n    ) {\n      result = upgradeCard(result, 1);\n      updatedState = {\n        ...updatedState,\n        log: [`${relic.name} upgraded a card on pickup!`, ...updatedState.log],\n      };\n    }\n\n    // === Handle RELIC_PICKUP effects ===\n    if (triggerEvent === TRIGGER_EVENTS.RELIC_PICKUP && context.relic) {\n      const campaign = { ...updatedState.campaign };\n      let newHealth = updatedState.health;\n      let newMaxHealth = updatedState.maxHealth;\n\n      if (effect.bonusPages) campaign.pages += effect.bonusPages;\n      if (effect.bonusInk) campaign.ink += effect.bonusInk;\n      if (effect.bonusBooks) campaign.books += effect.bonusBooks;\n      if (effect.bonusHealth) {\n        newHealth += effect.bonusHealth;\n        newMaxHealth += effect.bonusHealth;\n      }\n      if (effect.bonusGold) {\n        updatedState = gainGold(updatedState, effect.bonusGold);\n      }\n      if (effect.bonusBaseBunnies) {\n        updatedState = increaseBaseBunnies(\n          updatedState,\n          effect.bonusBaseBunnies\n        );\n      }\n\n      updatedState = {\n        ...updatedState,\n        campaign,\n        health: newHealth,\n        maxHealth: newMaxHealth,\n        log: [\n          `${relic.name} granted bonuses on relic pickup.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    // === Handle SHOP PRICE ADJUSTMENT ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.ASSIGN_SHOP_PRICES &&\n      effect.shopPriceMultiplier\n    ) {\n      updatedState = {\n        ...updatedState,\n        offerings: {\n          ...updatedState.offerings,\n          shopfront: updatedState.offerings.shopfront.map((entry) => {\n            const adjustedCost = Math.round(\n              entry.item.cost * effect.shopPriceMultiplier\n            );\n            return {\n              ...entry,\n              item: {\n                ...entry.item,\n                cost: adjustedCost,\n              },\n            };\n          }),\n        },\n        log: [\n          `Applied shop price multiplier (${effect.shopPriceMultiplier})`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    // === Handle REST effects ===\n    if (triggerEvent === TRIGGER_EVENTS.REST) {\n      if (effect.healPlayer) {\n        updatedState = heal(updatedState, effect.healPlayer);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} healed you for ${effect.healPlayer} HP while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.goldAdd) {\n        updatedState = gainGold(updatedState, effect.goldAdd);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} gave you ${effect.goldAdd} gold while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.permanentlyUpgradeRandomCardsInDeck > 0) {\n        const { deck } = updatedState.campaign;\n        const numToUpgrade = Math.min(\n          effect.permanentlyUpgradeRandomCardsInDeck,\n          deck.length\n        );\n\n        const shuffled = [...deck].sort(() => Math.random() - 0.5);\n        const toUpgrade = shuffled.slice(0, numToUpgrade);\n        const upgraded = toUpgrade.map((card) => upgradeCard(card, 1));\n\n        const upgradedDeck = deck.map((card) =>\n          toUpgrade.includes(card) ? upgraded[toUpgrade.indexOf(card)] : card\n        );\n\n        updatedState = {\n          ...updatedState,\n          campaign: {\n            ...updatedState.campaign,\n            deck: upgradedDeck,\n          },\n          log: [\n            `${relic.name} permanently upgraded ${numToUpgrade} card(s) while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    // === Handle POPULATE PATH effects ===\n\n    if (\n      event === TRIGGER_EVENTS.POPULATE_PATHS &&\n      triggerData.revealAnonymousPaths\n    ) {\n      const updatedPaths = state.offerings.paths.map((path) =>\n        path.anonymousNameDisplay\n          ? { ...path, anonymousNameDisplay: false }\n          : path\n      );\n\n      state = {\n        ...state,\n        offerings: {\n          ...state.offerings,\n          paths: updatedPaths,\n        },\n        log: [`${relic.name} revealed a hidden path.`, ...state.log],\n      };\n    }\n  }\n\n  return {\n    ...updatedState,\n    result,\n  };\n}\n\nfunction heal(state, amount) {\n  const current = state.health || 0;\n  const max = state.maxHealth || 0;\n  const newHealth = Math.min(current + amount, max);\n  const healedAmount = newHealth - current;\n\n  return {\n    ...state,\n    health: newHealth,\n    log: [`Healed ${healedAmount} HP.`, ...state.log],\n  };\n}\nfunction transmuteCard(card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to transmuteCard:\", card);\n    return null;\n  }\n\n  const alternatives = cardList.filter(\n    (c) => c.name !== card.name && !c.unchoosableByTransmute\n  );\n\n  if (alternatives.length === 0) {\n    console.warn(\n      `No valid alternatives found to transmute ${card.name}. Returning original.`\n    );\n    return { ...card };\n  }\n\n  const newBase = alternatives[Math.floor(Math.random() * alternatives.length)];\n  return createCardInstance(newBase.name, null, card.upgrades, card.gem);\n}\nfunction purgeCard(state, card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to purgeCard:\", card);\n    return state;\n  }\n\n  const updatedDeck = state.campaign.deck.filter((c) => c !== card);\n  const updatedTrash = [...(state.trashPile || []), card];\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n      trashPile: updatedTrash,\n    },\n    log: [`Purged card: ${card.name}`, ...state.log],\n  };\n}\n//#endregion\n//#region game reducer\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.NEW_GAME:\n      return {\n        ...createInitialState(),\n        log: [\"New game started.\"],\n      };\n\n    case ACTIONS.SET_DIFFICULTY: {\n      if (state.difficulty === action.payload) {\n        console.log(\"Difficulty already set to\", action.payload);\n        return state;\n      }\n      console.log(`Difficulty set to ${action.payload}`);\n      return {\n        ...state,\n        difficulty: action.payload, // ✅ store at root\n        log: [`Difficulty set to ${action.payload}.`, ...state.log],\n      };\n    }\n\n    case ACTIONS.GENERATE_STARTER_DECK:\n      return generateStarterDeck(state);\n\n    case ACTIONS.APPLY_DIFFICULTY_MODIFIERS:\n      return applyDifficultyModifiers(state);\n\n    case ACTIONS.ADVANCE_PHASE:\n      const newState = advancePhaseTo(state, action.payload);\n      return handlePhaseTransitions(newState);\n\n    case ACTIONS.CREATE_CARD_INSTANCE: {\n      const newCard = createCardInstance(\n        action.payload.cardName,\n        action.payload.rarity,\n        action.payload.upgrades,\n        action.payload.gem\n      );\n      return {\n        ...state,\n        campaign: {\n          ...state.campaign,\n          deck: [...state.campaign.deck, newCard],\n        },\n        log: [`Created card: ${newCard.name}`, ...state.log],\n      };\n    }\n\n    case ACTIONS.POPULATE_RELIC_OFFERINGS:\n      return populateRelicOfferings(state, action.payload?.rarity);\n\n    case ACTIONS.PICK_RELIC:\n      return pickRelic(state, action.payload);\n\n    case ACTIONS.POPULATE_PATH_OFFERINGS:\n      return populatePathOfferings(state);\n\n    case ACTIONS.PICK_PATH:\n      return pickPath(state, action.payload);\n\n    case ACTIONS.POPULATE_CARD_OFFERINGS:\n      return populateCardOfferings(state);\n\n    case ACTIONS.PICK_CARD:\n      return pickCard(state, action.payload);\n\n    case ACTIONS.POPULATE_POTION_OFFERINGS:\n      return populatePotionOfferings(state);\n\n    case ACTIONS.PICK_POTION:\n      return pickPotion(state, action.payload);\n\n    case ACTIONS.DRINK_POTION: {\n      const potionIndex = action.payload;\n      const potionToDrink = state.potionBelt[potionIndex];\n      if (!potionToDrink) {\n        console.error(\"Invalid potion index:\", potionIndex);\n        return state;\n      }\n      return drinkPotion(state, potionToDrink);\n    }\n\n    case ACTIONS.POPULATE_GEM_OFFERINGS:\n      return populateGemOfferings(state);\n\n    case ACTIONS.OPEN_MOD_SCREEN:\n      return openModScreen(state, action.payload.mod, action.payload.origin);\n\n    case ACTIONS.APPLY_CARD_MOD:\n      return applyModToCard(state, action.payload); // payload = selected card\n\n    case ACTIONS.SCREEN_CHANGE:\n      return screenChange(state, action.payload);\n\n    case ACTIONS.POPULATE_SHOPFRONT:\n      return populateShopfront(state);\n\n    case ACTIONS.INCREASE_BASE_BUNNIES:\n      return increaseBaseBunnies(state, action.payload);\n\n    case ACTIONS.GAIN_GOLD:\n      return gainGold(state, action.payload);\n\n    case ACTIONS.PRACTICE_WANDWORK:\n      return practiceWandwork(state);\n\n    case ACTIONS.LOOT_HOARD:\n      return lootHoard(state);\n\n    case ACTIONS.REST:\n      return rest(state);\n\n    case ACTIONS.LOG_MESSAGE:\n      return {\n        ...state,\n        log: [action.payload, ...state.log],\n      };\n\n    default:\n      console.warn(\"Unknown action type:\", action.type);\n      return state;\n  }\n}\n//#endregion\n//#region render function\nfunction render(state, dispatch) {\n  // Get or create output div\n  let output = document.getElementById(\"output\");\n  if (!output) {\n    output = document.createElement(\"div\");\n    output.id = \"output\";\n    document.body.appendChild(output);\n  }\n  output.innerHTML = \"\"; // Clear previous contents\n\n  // render utility function\n  function renderModPhaseEntry(phase, label, modKey) {\n    if (state.currentPhase === phase && state.currentScreen !== SCREENS.MOD) {\n      const modBtn = document.createElement(\"button\");\n      modBtn.textContent = label;\n      modBtn.style.fontSize = \"1.5rem\";\n      modBtn.style.padding = \"1rem 2rem\";\n      modBtn.onclick = () => {\n        modBtn.disabled = true; // prevent double click\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { [modKey]: true },\n            origin: phase,\n          },\n        });\n      };\n      output.appendChild(modBtn);\n    }\n  }\n\n  // === Game Info ===\n  const info = document.createElement(\"div\");\n  info.innerHTML = `\n  <h2>Game Info</h2>\n  <p><strong>Current Screen:</strong> ${state.currentScreen}</p>\n  <p><strong>Phase:</strong> ${\n    state.currentPhase\n  } &nbsp;&nbsp; <strong>Level:</strong> ${state.level ?? 0}</p>\n  <p><strong>Gold:</strong> ${state.gold}</p>\n  <p><strong>Health:</strong> ${state.health}/${state.maxHealth}</p>\n  <p><strong>Deck Size:</strong> ${state.campaign.deck.length}</p>\n  <p><strong>Relics:</strong> ${\n    state.relicBelt.map((r) => r.name).join(\", \") || \"None\"\n  }</p>\n`;\n  output.appendChild(info);\n\n  // === Log ===\n  const log = document.createElement(\"div\");\n  log.innerHTML = `<h3>Log</h3><ul>${state.log\n    .slice(0, 5)\n    .map((msg) => `<li>${msg}</li>`)\n    .join(\"\")}</ul>`;\n  output.appendChild(log);\n\n  // === Main Menu ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.MAIN_MENU\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = \"New Game\";\n    button.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.DIFFICULTY_SELECTION,\n      });\n    };\n    output.appendChild(button);\n  }\n\n  // === Difficulty Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.DIFFICULTY_SELECTION\n  ) {\n    const difficulties = [\n      DIFFICULTIES.EASY,\n      DIFFICULTIES.MEDIUM,\n      DIFFICULTIES.HARD,\n    ];\n    difficulties.forEach((difficulty) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `Start ${difficulty} Game`;\n      btn.onclick = () => selectDifficultyAndBeginGame(dispatch, difficulty);\n      output.appendChild(btn);\n    });\n  }\n\n  // === Relic Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.relics &&\n    state.offerings.relics.length > 0\n  ) {\n    const relicSection = document.createElement(\"div\");\n    relicSection.innerHTML = `<h3>Relic Offerings</h3>`;\n    state.offerings.relics.forEach((relic, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${relic.name} (${relic.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n      relicSection.appendChild(btn);\n    });\n    output.appendChild(relicSection);\n  }\n  // === Path Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.paths &&\n    state.offerings.paths.length > 0\n  ) {\n    const pathSection = document.createElement(\"div\");\n    pathSection.innerHTML = `<h3>Choose a Path</h3>`;\n\n    state.offerings.paths.forEach((path, index) => {\n      const btn = document.createElement(\"button\");\n\n      // === Conditionally render based on anonymity ===\n      if (path.anonymousNameDisplay) {\n        btn.textContent = `???`;\n      } else {\n        btn.textContent = `${path.path} (${path.rarity})${\n          path.isFight ? \" [FIGHT]\" : \"\"\n        }`;\n      }\n\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_PATH, payload: index });\n\n      pathSection.appendChild(btn);\n    });\n\n    output.appendChild(pathSection);\n  }\n\n  // === Card Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.cards &&\n    state.offerings.cards.length > 0\n  ) {\n    const cardSection = document.createElement(\"div\");\n    cardSection.innerHTML = `<h3>Choose a Card</h3>`;\n\n    state.offerings.cards.forEach((card, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.cost})${\n        card.upgrades ? ` +${card.upgrades}` : \"\"\n      }${card.gem ? ` [Gem: ${card.gem.name}]` : \"\"}`;\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n      cardSection.appendChild(btn);\n    });\n\n    output.appendChild(cardSection);\n  }\n\n  // === Potion Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.POTION_OFFERING &&\n    state.offerings.potions &&\n    state.offerings.potions.length > 0\n  ) {\n    const potionSection = document.createElement(\"div\");\n    potionSection.innerHTML = `<h3>Choose a Potion</h3>`;\n\n    state.offerings.potions.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${potion.name} (${potion.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n      potionSection.appendChild(btn);\n    });\n\n    output.appendChild(potionSection);\n  }\n\n  // ==== Gem Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentScreen === SCREENS.MAIN &&\n    state.currentPhase === PHASES.GEM_OFFERING &&\n    state.offerings.gems &&\n    state.offerings.gems.length > 0\n  ) {\n    const gemSection = document.createElement(\"div\");\n    gemSection.innerHTML = `<h3>Choose a Gem</h3>`;\n\n    state.offerings.gems.forEach((gem, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${gem.name} (${gem.rarity})`;\n\n      btn.onclick = () =>\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { gem },\n            origin: PHASES.GEM_OFFERING,\n          },\n        });\n\n      gemSection.appendChild(btn);\n    });\n\n    output.appendChild(gemSection);\n  }\n  // === Shopfront Display ===\n\n  if (\n    state.currentPhase === PHASES.SHOP &&\n    state.currentScreen !== SCREENS.MOD &&\n    state.offerings.shopfront.length > 0\n  ) {\n    const shopSection = document.createElement(\"div\");\n    shopSection.innerHTML = `<h3>Shop Inventory</h3>`;\n\n    const list = document.createElement(\"ul\");\n    state.offerings.shopfront.forEach((entry, index) => {\n      if (!entry || !entry.item || !entry.item.name) return;\n\n      const li = document.createElement(\"li\");\n\n      const btn = document.createElement(\"button\");\n      const cost = entry.item?.cost ?? 0;\n      const playerGold = state.gold ?? 0;\n      const disabled = cost > playerGold;\n\n      btn.textContent = `${entry.type.toUpperCase()}: ${\n        entry.item.name\n      } (${cost}g)`;\n      if (disabled) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      // Bind correct function based on type\n      btn.onclick = () => {\n        switch (entry.type) {\n          case \"card\":\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n            break;\n          case \"potion\":\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n            break;\n          case \"gem\":\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: entry.item },\n                origin: PHASES.SHOP,\n              },\n            });\n          case \"relic\":\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n            break;\n          default:\n            console.warn(\"Unknown shop item type:\", entry.type);\n        }\n      };\n\n      li.appendChild(btn);\n      list.appendChild(li);\n    });\n\n    // Exit Shop Button (for future logic)\n    const exitBtn = document.createElement(\"button\");\n    exitBtn.textContent = \"Exit Shop\";\n    exitBtn.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.PATH_SELECTION,\n      });\n    };\n    shopSection.appendChild(list);\n    shopSection.appendChild(exitBtn);\n    output.appendChild(shopSection);\n  }\n\n  // === Mod Screen ===\n  if (state.currentScreen === SCREENS.MOD && state.modData?.mod) {\n    const modSection = document.createElement(\"div\");\n    modSection.innerHTML = `<h3>Choose a card to modify</h3>`;\n\n    const mod = state.modData.mod;\n    const isGemMod = !!mod.gem;\n\n    state.campaign.deck.forEach((card) => {\n      // If it's a gem mod, skip cards that already have a gem\n      if (isGemMod && card.gem) return;\n\n      const btn = document.createElement(\"button\");\n      btn.textContent =\n        `${card.name} (Cost: ${card.cost})` +\n        (card.upgrades ? ` +${card.upgrades}` : \"\") +\n        (card.gem ? ` [Gem: ${card.gem.name}]` : \"\");\n\n      btn.onclick = () => {\n        dispatch({ type: ACTIONS.APPLY_CARD_MOD, payload: card });\n      };\n\n      modSection.appendChild(btn);\n    });\n\n    output.appendChild(modSection);\n  }\n\n  // ======= render purge, transmute, and enchant phases (AKA mod phases) ======\n\n  renderModPhaseEntry(PHASES.PURGE, \"Lethian Font\", \"purge\");\n  renderModPhaseEntry(PHASES.TRANSMUTE, \"Metamorphosis\", \"transmute\");\n  renderModPhaseEntry(PHASES.ENCHANT, \"Enchanted Dolmen\", \"upgrade\");\n\n  // ====== render hoard phase= ======\n  if (state.currentPhase === PHASES.HOARD) {\n    const btn = document.createElement(\"button\");\n    btn.textContent = \"Loot Hoard\";\n    btn.style.fontSize = \"1.5rem\";\n    btn.style.padding = \"1rem 2rem\";\n    btn.onclick = () => {\n      // Placeholder until lootHoard is implemented\n      dispatch({ type: \"LOOT_HOARD\" }); // or just console.log(\"Loot Hoard\")\n    };\n    output.appendChild(btn);\n  }\n  // ====== rest phase rendering ======\n  if (state.currentPhase === PHASES.REST) {\n    const restBtn = document.createElement(\"button\");\n    restBtn.textContent = \"Fireside Rest\";\n    restBtn.style.fontSize = \"1.5rem\";\n    restBtn.style.padding = \"1rem 2rem\";\n    restBtn.onclick = () => {\n      dispatch({ type: \"REST\" }); // Placeholder\n    };\n\n    const practiceBtn = document.createElement(\"button\");\n    practiceBtn.textContent = \"Practice Wandwork\";\n    practiceBtn.style.fontSize = \"1.5rem\";\n    practiceBtn.style.padding = \"1rem 2rem\";\n    practiceBtn.onclick = () => {\n      dispatch({ type: \"PRACTICE_WANDWORK\" }); // Placeholder\n    };\n\n    output.appendChild(restBtn);\n    output.appendChild(practiceBtn);\n  }\n  // === Deck Inspect / Return Button ===\n  //deck inspect button\n  if (\n    (state.currentScreen === SCREENS.MAIN ||\n      state.currentScreen === SCREENS.DECK) &&\n    state.campaign.deck.length > 0\n  ) {\n    const deckBtn = document.createElement(\"button\");\n    deckBtn.textContent =\n      state.currentScreen === SCREENS.MAIN ? \"Inspect Deck\" : \"Return\";\n    deckBtn.onclick = () => {\n      const nextScreen =\n        state.currentScreen === SCREENS.MAIN ? SCREENS.DECK : SCREENS.MAIN;\n      dispatch({\n        type: ACTIONS.SCREEN_CHANGE,\n        payload: nextScreen,\n      });\n    };\n    output.appendChild(deckBtn);\n  }\n  // deck inspect screen\n  if (state.currentScreen === SCREENS.DECK) {\n    const deckView = document.createElement(\"div\");\n    deckView.innerHTML = `<h3>Campaign Deck</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    state.campaign.deck.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    deckView.appendChild(ul);\n    output.appendChild(deckView);\n  }\n\n  // === Always-Visible Potion Belt ===\n\n  // === Always-Visible Potion Belt ===\n  if (state.potionBelt && state.potionBelt.length > 0) {\n    const beltSection = document.createElement(\"div\");\n    beltSection.innerHTML = `<h3>Your Potions</h3>`;\n\n    state.potionBelt.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = potion.name;\n      btn.onclick = () => {\n        dispatch({ type: ACTIONS.DRINK_POTION, payload: index });\n      };\n      beltSection.appendChild(btn);\n    });\n\n    output.appendChild(beltSection);\n  }\n}\n// #endregion\n\n// Initialize the game app\nwindow.onload = () => {\n  createGameApp(createInitialState(), gameReducer, render);\n};\n\n//#region WIP\n// //------------------------------------------------WIP functions for MVP ------------------------------------------------\n\n// //@@@@@@@@@@@@ combat functions @@@@@@@@@@@@\n\n// edits needed to render function:\n// should display the enemy HP in a big square box in big font, the spellbook (effectively a row of grey squares, with one square per state.combat.pages), a \"cast spellbook\" button and a \"BUNNIES:\" display that can show numnbers on the same row, and the player's hand (a row of cards)(in that order).\n\n// function initializeCombatPhase(state, path) {\n// this function handles the start of combat. It should be called in the phase transition handler, when the the player selects one of the four combat paths (easy, medium, hard, or boss).\n// the function will generate an enemy by calling the generateenemy funciton.\n// then, it will prepare the combat deck. This is a deep, exact copy of the campaign deck.\n// next, it will set the combat state, copying all corresponding values over from the campaign state and rest of state.\n\n// specifically, the campaign values of:\n// (campaign)   ink: 3, =====>  (combat) ink: 0, maxInk: 0,\n// books: 1, =====>  books: 0, maxBooks: 0,\n// pages: 3, ====>   pages: 0,maxPages: 0,\n// handSize: 5, ====> handSize: 5,\n// also, the state.baseBunnies vlaue gets copied over to combat.baseBunnies.\n\n//\n\n// finally, it will check for any combat start triggers.\n//}\n\n// function generateEnemy(state, path) {\n//   // generates an enemy based on the path's difficulty and game level.\n// first checks the path\n//  // enemies are objects with these properties: name, health, loot.\n//  names are created by combining one word from each of these two lists:\nconst vegetables = [\n  \"carrot\",\n  \"broccoli\",\n  \"spinach\",\n  \"kale\",\n  \"zucchini\",\n  \"eggplant\",\n  \"cauliflower\",\n  \"cabbage\",\n  \"lettuce\",\n  \"beet\",\n  \"radish\",\n  \"turnip\",\n  \"peas\",\n  \"green bean\",\n  \"asparagus\",\n  \"sweet potato\",\n  \"pumpkin\",\n  \"bell pepper\",\n  \"celery\",\n  \"onion\",\n];\n// and\n\n//   // assigns the enemy to state.combat.enemy based on the path name and game level.\n// }\n\n// function newBook(state) {\n//   //effectively a new 'turn'\n//   // populaets a new spellbook, with the appropriate number of blank pages.\n//   // calls 'newHand' to draw a new hand of cards.\n//   // calls 'refillInkpot' to refresh the player's ink.\n// }\n\n// function newHand(state) {\n//   // draws a hand of cards based on the player's hand size.\n// }\n\n// function drawCard(state) {\n//   // draws a card from the player's deck into their hand.\n// }\n\n// function checkDrawCardTriggers(state, card) {\n//   // Checks if the drawn card has any triggers that need to be applied\n// }\n\n// function refillInkpot(state) {\n//   // refreshes the player's ink to the maximum ink amount.\n// }\n\n// function playCard(state, card) {\n//   // triggered by clicking on a card in hand.\n//   // plays a card from the player's hand, applying its effects.\n//   // deducts the card's ink cost from ink.\n//   // determines where the card moves to: spellbook, graveyard, exile, or into the deck.\n//   // checks for any play card triggers.\n//   // calls \"resolveCardEffects\" to apply the card's effects.\n//   // note: If there's no space in the spellbook or the player has insufficient ink, the card cannot be played and will be displayed as grey and unselectable.\n// }\n\n// function checkPlayCardTriggers(state, card) {\n//   // Checks if the played card has any triggers that need to be applied\n//   // This could include effects that trigger on play, such as drawing cards, gaining gold, etc.\n// }\n\n// function castSpellbook(state) {\n//   // called when the player clicks the \"cast spellbook\" button, or when the spellbook is full.\n//   // casts the spellbook, sequentially casting each of the cards in the spellbook.\n//   // checks for any spellbook triggers.\n//   // checks to see if combat has ended.\n//   // clears the spellbook after casting, moving all its cards to the graveyard.\n//   // discards the player's hand to the graveyard.\n//   // calls the 'new book' function if combat hasn't ended.\n// }\n\n// function checkCastSpellbookTriggers(state) {\n//   // Checks if there are any triggers that need to be applied when casting the spellbook.\n// }\n\n// function discardCard(state, card) {\n//   // discards a card from the player's hand to the graveyard.\n// }\n\n// function checkDiscardCardTriggers(state, card) {\n//   // Checks if the discarded card has any triggers that need to be applied\n// }\n\n// function castSpell(state, spell) {\n//   // applies the effects of a spell card from the spellbook.\n//   // checks for any spell triggers.\n//   // moves the spell card to the appropriate zone after casting.\n// }\n\n// function checkCastSpellTriggers(state, spell) {\n//   // Checks if the spell has any triggers that need to be applied when a specific spell is cast.\n// }\n\n// function checkCombatEnd(state) {\n//   // checks if combat has ended.\n// }\n\n// function combatEnd(state) {\n//   // Handles the end phase after combat, such as displaying the end screen, player losing HP, allowing the player to choose rewards, or advancing to the next path.\n//   // also cleans up the battle state, such as clearing the spellbook, hand, and graveyard.\n// }\n\n// function checkCombatEndTriggers(state) {\n//   // handles combat end triggers\n// }\n\n// function openCombatEndScreen(state) {\n//   // opens the combat end screen, showing results, rewards, etc.\n// }\n\n// function populateCombatRewards(state) {\n//   // populates the combat rewards based on the combat results.\n//   // generates a list of rewards, such as cards, relics, potions, etc.\n//   // ensures that the rewards are appropriate for the difficulty and type of combat.\n//   // returns the populated rewards list.\n// }\n\n// function checkPopulateCombatRewardsTriggers(state) {\n//   // Checks if there are any triggers that modify the combat rewards, such as relics or cards.\n// }\n\n// function pickCombatReward(state, reward) {\n//   // handles the selection of a reward after combat.\n//   // triggered by the player clicking on a reward in the combat end screen.\n// }\n\n// function closeCombatEndScreen(state) {\n//   // closes the combat end screen and advances the game phase to the next phase.\n// }\n\n// //@@@@@@@@@@@@ death and victory functions @@@@@@@@@@@@\n// function checkDeath(state) {\n//   //checks if the player has died, and if so, advances to the death phase.\n// }\n// function death(state) {\n//   // Handles the death phase, such as displaying a death screen, allowing the player to restart or return to the main menu.\n// }\n// function victory(state) {\n//   // Handles the victory phase, such as displaying a victory screen, allowing the player to continue to the next phase or return to the main menu.\n// }\n"]}