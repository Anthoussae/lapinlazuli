{"version":3,"sources":["main.js"],"names":["_Object$freeze2","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","r","e","t","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","a","u","call","next","return","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","from","_arrayLikeToArray","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","toString","slice","name","test","l","i","_toPropertyKey","configurable","writable","_toPrimitive","toPrimitive","String","Number","DIFFICULTIES","freeze","EASY","MEDIUM","HARD","TRIGGER_EVENTS","CARD_PICKUP","RELIC_PICKUP","POTION_PICKUP","DRINK_POTION","ASSIGN_SHOP_PRICES","PATHS","EASY_FIGHT","MEDIUM_FIGHT","HARD_FIGHT","REST","SHOP","RELIC_OFFERING","GEM_OFFERING","CARD_OFFERING","FORGE","POTION_OFFERING","HOARD","PURGE","SCREENS","MAIN","DECK","RELICS","SETTINGS","MOD","RARITIES","BASIC_POLY","BASIC_MONO","COMMON","UNCOMMON","RARE","MYTHIC","LEGENDARY","PHASES","MAIN_MENU","DIFFICULTY_SELECTION","MYTHIC_RELIC_OFFERING","COMBAT_END","SOCKET_GEM","UPGRADE_CARD","PATH_SELECTION","COMBAT","DEATH","VICTORY","ACTIONS","NEW_GAME","SET_DIFFICULTY","GENERATE_STARTER_DECK","APPLY_DIFFICULTY_MODIFIERS","ADVANCE_PHASE","LOG_MESSAGE","CREATE_CARD_INSTANCE","POPULATE_RELIC_OFFERINGS","PICK_RELIC","POPULATE_PATH_OFFERINGS","PICK_PATH","POPULATE_CARD_OFFERINGS","PICK_CARD","POPULATE_POTION_OFFERINGS","PICK_POTION","POPULATE_GEM_OFFERINGS","OPEN_MOD_SCREEN","APPLY_CARD_MOD","SCREEN_CHANGE","POPULATE_SHOPFRONT","CARD_TYPES","INSTANT","SPELL","difficultyModifiersMap","maxHealthModifier","goldModifier","basicCardCountModifier","luckModifier","shopPriceMultiplier","pathMap","rarity","isFight","leadsTo","cardList","cardType","cost","bunnyAdd","bunnyMult","goldAdd","permanentlyUpgradeRandomCardsInDeck","cardDraw","inkAdd","healthCost","permanentlyUpgradeRandomCardsInHand","gemList","relicList","triggers","bonusPages","bonusGold","bonusHealthOnCombatVictory","bonusHealth","bonusBooks","bonusInk","bunnyAddOnCast","goldAddOnCombatVictory","upgradeCard","upgradePotion","healPlayer","potionList","healthRestore","enemyList","level","difficulty","health","goldRewardChance","gemRewardChance","potionRewardChance","relicRewardChance","shuffle","array","j","Math","floor","random","_ref","weightedRandomChoice","weightedMap","entries","totalWeight","reduce","sum","_ref2","_ref3","_","weight","cumulative","_i","_entries","_entries$_i","key","screenChange","state","targetScreen","currentScreen","log","concat","assignShopPrices","_difficultyModifiersM","campaign","difficultyMultiplier","relicMultiplier","relicBelt","relic","_relic$triggers","trigger","finalMultiplier","basePrices","card","potion","gem","rarityMultipliers","common","uncommon","rare","mythic","legendary","updatedShopfront","offerings","shopfront","map","entry","_item$rarity","_item$rarity$toLowerC","type","item","basePrice","upgrades","upgradeCost","includes","toLowerCase","rarityMultiplier","round","generateStarterDeck","console","error","deck","basicMonoCards","_iterator","_step","createCardInstance","err","basicPolyCards","_iterator2","_step2","extraCount","generateRandomCard","applyDifficultyModifiers","modifiers","newCampaign","gold","basicCardCount","luck","maxHealth","advancePhaseTo","phaseAdvancedTo","values","currentPhase","handlePhaseTransitions","phase","populatePathOfferings","populateCardOfferings","populateRelicOfferings","populatePotionOfferings","populateGemOfferings","populateShopfront","pickPath","index","paths","chosenPath","pathKey","path","pathData","newCards","_loop","some","existing","_ret","cards","selectedPotions","usedNames","Set","attempts","generateRandomPotion","has","add","warn","potions","undefined","selected","maxRelics","_loop2","generateRandomRelic","relics","selectedGems","generateRandomGem","gems","_state$campaign$deck","fightWeights","fightPathKey","fightPath","nonFightPaths","_ref4","_ref5","data","_ref6","_ref7","allCardsSocketed","every","filteredNonFightPaths","pathObj","rarityWeights","getLuckAdjustedRarityWeights","chosenRarities","chosenPaths","usedPaths","_loop3","_chosenRarities","_i3","candidates","p","pick","remainingPool","idx","splice","pickCard","sourceArrayName","combatRewards","sourceArray","pickedCard","updatedState","charged","chargeGoldCost","updatedDeck","updatedOfferings","newState","triggerResult","checkRelicTriggers","payload","trashPile","pickRelic","pickedRelic","relicCost","chargedState","isOfferingPhase","triggeredState","pickPotion","pickedPotion","triggeredPotion","result","updatedPotionBelt","potionBelt","drinkPotion","heal","newPotionBelt","newTrash","openModScreen","mod","_state$offerings$gems","originPhase","validKeys","chosenGemName","discardedGems","g","_mod$gem","modData","origin","applyModToCard","_state$modData","_state$modData2","cardIndex","findIndex","c","modifiedCard","upgrade","socketCardWithGem","purge","transmute","transmuteCard","nextPhase","shopfrontTypes","previousItems","discardedItems","updatedTrash","guaranteedTypes","weights","weightedPool","flatMap","_ref8","_ref9","fill","safetyCounter","chosen","generatedItems","usedKeys","_i4","_shopfrontTypes","attempt","createInitialState","defeatedEnemies","ink","books","pages","handSize","enemy","battle","hand","graveyard","exile","spellbook","maxInk","maxBooks","maxPages","difficulties","selectDifficultyAndBeginGame","dispatch","createGameApp","initialState","reducer","renderFn","action","cardName","found","find","createRelicInstance","relicName","createPotionInstance","potionName","createGemInstance","gemName","_ref0","_ref0$rarity","ownedRelics","GOLD_BAG","filtered","_state$defeatedEnemie","_ref1","_ref1$rarity","_ref1$upgrades","_ref1$gem","finalRarity","upgradeWeights","max","finalUpgrades","defeatedCount","maxUpgrades","min","cappedUpgrades","_ref10","_ref10$rarity","_ref10$upgrades","basePotion","_ref11","_ref11$rarity","fallbackGem","chosenGem","upgradedCard","upgradable","replace","upgradedPotion","socketedCard","ceil","context","triggerEvent","_iterator3","_step3","_loop4","_relic$triggers2","effect","newHealth","newMaxHealth","adjustedCost","amount","alternatives","unchoosableByTransmute","newBase","purgeCard","gameReducer","_action$payload","newCard","potionIndex","potionToDrink","render","_state$modData3","output","document","getElementById","createElement","id","body","appendChild","innerHTML","info","join","msg","button","textContent","onclick","btn","relicSection","pathSection","cardSection","potionSection","gemSection","shopSection","list","_entry$cost","_state$campaign$gold","li","playerGold","disabled","toUpperCase","style","opacity","cursor","exitBtn","modSection","isGemMod","deckBtn","nextScreen","deckView","ul","beltSection","window","onload"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n//note to self: most functions that create a new gamestate (reducer actions) will require:\n\n// 1) the function itself\n// 2) adding to the action enum.\n// 3) adding to the reducer switch statement\n// 4) adding to the render function.\n// 5) possibly adding to the phase transition handler.\n\n//#region enums\nconst DIFFICULTIES = Object.freeze({\n  EASY: \"easy\",\n  MEDIUM: \"medium\",\n  HARD: \"hard\",\n});\nconst TRIGGER_EVENTS = Object.freeze({\n  CARD_PICKUP: \"CARD_PICKUP\",\n  RELIC_PICKUP: \"RELIC_PICKUP\",\n  POTION_PICKUP: \"POTION_PICKUP\",\n  DRINK_POTION: \"DRINK_POTION\",\n  ASSIGN_SHOP_PRICES: \"ASSIGN_SHOP_PRICES\",\n});\nconst PATHS = Object.freeze({\n  EASY_FIGHT: \"easy fight\",\n  MEDIUM_FIGHT: \"medium fight\",\n  HARD_FIGHT: \"hard fight\",\n  REST: \"rest\",\n  SHOP: \"shop\",\n  RELIC_OFFERING: \"relicOffering\",\n  GEM_OFFERING: \"gemOffering\",\n  CARD_OFFERING: \"cardOffering\",\n  FORGE: \"forge\",\n  POTION_OFFERING: \"potionOffering\",\n  HOARD: \"hoard\",\n  PURGE: \"purge\",\n});\nconst SCREENS = Object.freeze({\n  MAIN: \"main view\",\n  DECK: \"inspect deck\",\n  RELICS: \"inspect relic belt\",\n  SETTINGS: \"settings\",\n  MOD: \"modscreen\",\n});\nconst RARITIES = Object.freeze({\n  BASIC_POLY: \"basic-poly\", // basic poly cards, several of which go in the starter deck.\n  BASIC_MONO: \"basic-mono\", // basic mono cards, only one goes in the starter deck.\n  COMMON: \"common\", // common cards\n  UNCOMMON: \"uncommon\", // uncommon cards\n  RARE: \"rare\", // rare cards\n  MYTHIC: \"mythic\", // mythic cards\n  LEGENDARY: \"legendary\", // legendary cards\n});\nconst PHASES = Object.freeze({\n  MAIN_MENU: \"main menu\",\n  DIFFICULTY_SELECTION: \"difficulty selection\",\n  MYTHIC_RELIC_OFFERING: \"mythic relic offering\",\n  RELIC_OFFERING: \"relic offering\",\n  CARD_OFFERING: \"card offering\",\n  GEM_OFFERING: \"gem offering\",\n  POTION_OFFERING: \"potion offering\",\n  COMBAT_END: \"combat end\",\n  SOCKET_GEM: \"socket gem\",\n  UPGRADE_CARD: \"upgrade card\",\n  SHOP: \"shop\",\n  PATH_SELECTION: \"path selection\",\n  REST: \"rest\",\n  FORGE: \"forge\",\n  COMBAT: \"combat\",\n  DEATH: \"death\",\n  VICTORY: \"victory\",\n});\nconst ACTIONS = Object.freeze({\n  NEW_GAME: \"NEW_GAME\",\n  SET_DIFFICULTY: \"SET_DIFFICULTY\",\n  GENERATE_STARTER_DECK: \"GENERATE_STARTER_DECK\",\n  APPLY_DIFFICULTY_MODIFIERS: \"APPLY_DIFFICULTY_MODIFIERS\",\n  ADVANCE_PHASE: \"ADVANCE_PHASE\",\n  LOG_MESSAGE: \"LOG_MESSAGE\",\n  CREATE_CARD_INSTANCE: \"CREATE_CARD_INSTANCE\",\n  POPULATE_RELIC_OFFERINGS: \"POPULATE_RELIC_OFFERINGS\",\n  PICK_RELIC: \"PICK_RELIC\",\n  POPULATE_PATH_OFFERINGS: \"POPULATE_PATH_OFFERINGS\",\n  PICK_PATH: \"PICK_PATH\",\n  POPULATE_CARD_OFFERINGS: \"POPULATE_CARD_OFFERINGS\",\n  PICK_CARD: \"PICK_CARD\",\n  POPULATE_POTION_OFFERINGS: \"POPULATE_POTION_OFFERINGS\",\n  PICK_POTION: \"PICK_POTION\",\n  DRINK_POTION: \"DRINK_POTION\",\n  POPULATE_GEM_OFFERINGS: \"POPULATE_GEM_OFFERINGS\",\n  OPEN_MOD_SCREEN: \"OPEN_MOD_SCREEN\",\n  APPLY_CARD_MOD: \"APPLY_CARD_MOD\",\n  SCREEN_CHANGE: \"SCREEN_CHANGE\",\n  POPULATE_SHOPFRONT: \"POPULATE_SHOPFRONT\",\n});\nconst CARD_TYPES = Object.freeze({\n  INSTANT: \"instant\", // resolves immediately when played, does not go to the spellbook.\n  SPELL: \"spell\", // goes to the spellbook when played, resolves when the spellbook is cast.\n});\n//#endregion enums\n//#region data maps\nconst difficultyModifiersMap = Object.freeze({\n  [DIFFICULTIES.EASY]: {\n    maxHealthModifier: 100,\n    goldModifier: 20,\n    basicCardCountModifier: 5,\n    luckModifier: 2,\n    shopPriceMultiplier: 0.8, // 20% cheaper shop prices\n  },\n  [DIFFICULTIES.MEDIUM]: {\n    maxHealthModifier: 75,\n    goldModifier: 10,\n    basicCardCountModifier: 8,\n    luckModifier: 1,\n    shopPriceMultiplier: 1, // normal shop prices\n  },\n  [DIFFICULTIES.HARD]: {\n    maxHealthModifier: 50,\n    goldModifier: 0,\n    basicCardCountModifier: 11,\n    luckModifier: 0,\n    shopPriceMultiplier: 1.2, // 20% more expensive shop prices\n  },\n});\nconst pathMap = Object.freeze({\n  [PATHS.EASY_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n  },\n  [PATHS.MEDIUM_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n  },\n  [PATHS.HARD_FIGHT]: {\n    rarity: RARITIES.UNCOMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n  },\n  [PATHS.REST]: { rarity: RARITIES.RARE, leadsTo: PHASES.REST },\n  [PATHS.SHOP]: { rarity: RARITIES.COMMON, leadsTo: PHASES.SHOP },\n  [PATHS.RELIC_OFFERING]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.RELIC_OFFERING,\n  },\n  [PATHS.GEM_OFFERING]: { rarity: RARITIES.RARE, leadsTo: PHASES.GEM_OFFERING },\n  [PATHS.CARD_OFFERING]: {\n    rarity: RARITIES.UNCOMMON,\n    leadsTo: PHASES.CARD_OFFERING,\n  },\n  [PATHS.FORGE]: { rarity: RARITIES.RARE, leadsTo: PHASES.FORGE },\n  [PATHS.POTION_OFFERING]: {\n    rarity: RARITIES.UNCOMMON,\n    leadsTo: PHASES.POTION_OFFERING,\n  },\n  [PATHS.HOARD]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.MYTHIC_RELIC_OFFERING,\n  },\n  [PATHS.PURGE]: { rarity: RARITIES.RARE, leadsTo: PHASES.PURGE },\n});\n\n//#endregion data maps\n//#region data arrays of game objects\nconst cardList = [\n  {\n    name: \"Bunnymancy\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    cost: 1,\n    bunnyAdd: 5,\n  },\n  {\n    name: \"Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    cost: 2,\n    bunnyMult: 2,\n  },\n  {\n    name: \"Gold Conjuration\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    cost: 1,\n    goldAdd: 3,\n  },\n  {\n    name: \"Enchant\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    cost: 2,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ponder\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    cost: 1,\n    cardDraw: 3,\n  },\n  {\n    name: \"Inkswell\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    cost: 1,\n    inkAdd: 2,\n  },\n  {\n    name: \"Cloudfluff Conjuration\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 0,\n    bunnyAdd: 4,\n  },\n  {\n    name: \"Cloudfluff Boon\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    cost: 0,\n    bunnyAdd: 2,\n  },\n  {\n    name: \"Midas Touch\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    goldAdd: 12,\n  },\n  {\n    name: \"Enchanted Twilight\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    permanentlyUpgradeRandomCardsInDeck: 2,\n  },\n  {\n    name: \"Dusk Lotus\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    cost: 0,\n    inkAdd: 3,\n    healthCost: 3,\n  },\n  {\n    name: \"Weasel's Bargain\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.UNCOMMON,\n    cost: 0,\n    healthCost: 2,\n    goldAdd: 6,\n  },\n  {\n    name: \"Carrot Festival\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 2,\n    bunnyAdd: 14,\n  },\n  {\n    name: \"Mega Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 2,\n    bunnyMult: 4,\n  },\n  {\n    name: \"Empower\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    cost: 1,\n    permanentlyUpgradeRandomCardsInHand: 1,\n  },\n  {\n    name: \"Mass Empower\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    permanentlyUpgradeRandomCardsInHand: 7,\n  },\n  {\n    name: \"Wisdom of the Warrens\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    cost: 0,\n    cardDraw: 1,\n  },\n];\nconst gemList = [\n  {\n    name: \"Amethyst\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 2,\n  },\n  {\n    name: \"Lapis Lazuli\",\n    rarity: RARITIES.COMMON,\n    bunnyMult: 1.5,\n  },\n  {\n    name: \"Sapphire\",\n    rarity: RARITIES.UNCOMMON,\n    cardDraw: 1,\n  },\n  {\n    name: \"Topaz\",\n    rarity: RARITIES.RARE,\n    goldAdd: 5,\n  },\n  {\n    name: \"Ruby\",\n    rarity: RARITIES.MYTHIC,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n];\nconst relicList = [\n  {\n    name: \"Magic Scroll\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusPages: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Egg\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusGold: 100,\n      },\n    },\n  },\n  {\n    name: \"Healing Stone\",\n    rarity: RARITIES.COMMON,\n    // not a pickup trigger — save for future COMBAT_VICTORY event\n    bonusHealthOnCombatVictory: 10,\n  },\n  {\n    name: \"Protective Amulet\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHealth: 10,\n      },\n    },\n  },\n  {\n    name: \"Magic Encyclopedia\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Inkpot\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Wand\",\n    rarity: RARITIES.MYTHIC,\n    // not triggered on pickup — belongs to CARD_CAST or similar\n    bunnyAddOnCast: 5,\n  },\n  {\n    name: \"Magic Keys\",\n    rarity: RARITIES.MYTHIC,\n    // not a pickup effect — save for COMBAT_VICTORY\n    goldAddOnCombatVictory: 10,\n  },\n  {\n    name: \"Magic Feather\",\n    rarity: RARITIES.LEGENDARY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 2,\n      },\n    },\n  },\n  {\n    name: \"Gold Bag\",\n    rarity: RARITIES.BASIC_POLY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusGold: 25,\n      },\n    },\n  },\n  {\n    name: \"Whetstone\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        upgradeCard: true,\n      },\n    },\n  },\n  {\n    name: \"Witch's Cauldron\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.POTION_PICKUP]: {\n        upgradePotion: true,\n      },\n    },\n  },\n  {\n    name: \"Crystal Vial\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.DRINK_POTION]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Discount Voucher\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.ASSIGN_SHOP_PRICES]: {\n        shopPriceMultiplier: 0.8, // 20% cheaper shop prices\n      },\n    },\n  },\n];\n\nconst potionList = [\n  {\n    name: \"Lesser Healing Potion\",\n    rarity: RARITIES.COMMON,\n    healthRestore: 20,\n  },\n  {\n    name: \"Healing Potion\",\n    rarity: RARITIES.UNCOMMON,\n    healthRestore: 40,\n  },\n  {\n    name: \"Greater Healing Potion\",\n    rarity: RARITIES.RARE,\n    healthRestore: 60,\n  },\n  {\n    name: \"Elixir of Life\",\n    rarity: RARITIES.MYTHIC,\n    healthRestore: 100,\n  },\n];\nconst enemyList = [\n  {\n    name: \"Lettuce Goblin\",\n    level: 1,\n    difficulty: DIFFICULTIES.EASY,\n    health: 10,\n    goldRewardChance: 0.5,\n    gemRewardChance: 0.1,\n    potionRewardChance: 0.1,\n    relicRewardChance: 0.01,\n  },\n];\n//#endregion\n//#region utility functions\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\nfunction weightedRandomChoice(weightedMap) {\n  const entries = Object.entries(weightedMap);\n  const totalWeight = entries.reduce((sum, [_, weight]) => sum + weight, 0);\n  const r = Math.random() * totalWeight;\n  let cumulative = 0;\n\n  for (const [key, weight] of entries) {\n    cumulative += weight;\n    if (r <= cumulative) return key;\n  }\n}\nfunction screenChange(state, targetScreen) {\n  return {\n    ...state,\n    currentScreen: targetScreen,\n    log: [`Screen changed to ${targetScreen}.`, ...state.log],\n  };\n}\nfunction assignShopPrices(state) {\n  const difficulty = state.campaign.difficulty || DIFFICULTIES.MEDIUM;\n  const difficultyMultiplier =\n    difficultyModifiersMap[difficulty]?.shopPriceMultiplier || 1;\n\n  // Check if any relics apply modifiers\n  let relicMultiplier = 1;\n  state.campaign.relicBelt.forEach((relic) => {\n    const trigger = relic.triggers?.[TRIGGER_EVENTS.ASSIGN_SHOP_PRICES];\n    if (trigger?.shopPriceMultiplier) {\n      relicMultiplier *= trigger.shopPriceMultiplier;\n    }\n  });\n\n  // Final global price multiplier\n  const finalMultiplier = difficultyMultiplier * relicMultiplier;\n\n  const basePrices = {\n    card: 10,\n    potion: 20,\n    gem: 30,\n    relic: 100,\n  };\n\n  const rarityMultipliers = {\n    common: 1,\n    uncommon: 1.2,\n    rare: 1.4,\n    mythic: 1.6,\n    legendary: 2,\n  };\n\n  const updatedShopfront = state.offerings.shopfront.map((entry) => {\n    const { type, item } = entry;\n\n    const basePrice = basePrices[type] || 0;\n    const upgrades = item.upgrades || 0;\n    const upgradeCost = [\"card\", \"potion\"].includes(type) ? upgrades * 5 : 0;\n\n    const rarity = item.rarity?.toLowerCase?.() || \"common\";\n    const rarityMultiplier = rarityMultipliers[rarity] || 1;\n\n    const cost = Math.round(\n      (basePrice + upgradeCost) * rarityMultiplier * finalMultiplier\n    );\n\n    return {\n      ...entry,\n      cost,\n    };\n  });\n\n  // const updatedShopfront = state.offerings.shopfront.map((entry) => {\n  //   const { type, item } = entry;\n\n  //   const basePrice = basePrices[type] || 0;\n  //   const upgrades = item.upgrades || 0;\n  //   const upgradeCost = [\"card\", \"potion\"].includes(type) ? upgrades * 5 : 0;\n\n  //   const rarity = item.rarity?.toLowerCase?.() || \"common\";\n  //   const rarityMultiplier = rarityMultipliers[rarity] || 1;\n\n  //   const cost = Math.round(\n  //     (basePrice + upgradeCost) * rarityMultiplier * finalMultiplier\n  //   );\n\n  //   console.log(\n  //     `[PRICE DEBUG] ${type.toUpperCase()} - Name: ${\n  //       item.name\n  //     }, Rarity: ${rarity}, Upgrades: ${upgrades}, Base: ${basePrice}, UpgradeCost: ${upgradeCost}, RarityMult: ${rarityMultiplier}, FinalMult: ${finalMultiplier}, FinalCost: ${cost}`\n  //   );\n\n  //   return {\n  //     ...entry,\n  //     cost,\n  //   };\n  // });\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: updatedShopfront,\n    },\n    log: [`Assigned prices to shop items.`, ...state.log],\n  };\n}\n//#endregion\n//#region reducer-action handlers\nfunction generateStarterDeck(state) {\n  const difficulty = state.campaign.difficulty;\n  if (!difficulty) {\n    console.error(\"Cannot generate starter deck without difficulty set.\");\n    return state;\n  }\n\n  const deck = [];\n\n  // 1. Add one of each basic mono card\n  const basicMonoCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_MONO\n  );\n  for (const card of basicMonoCards) {\n    deck.push(createCardInstance(card.name));\n  }\n\n  // 2. Add 3 of each basic poly card\n  const basicPolyCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_POLY\n  );\n  for (const card of basicPolyCards) {\n    for (let i = 0; i < 3; i++) {\n      deck.push(createCardInstance(card.name));\n    }\n  }\n\n  // 3. Add additional random basic poly cards based on difficulty\n  const extraCount = difficultyModifiersMap[difficulty].basicCardCountModifier;\n  for (let i = 0; i < extraCount; i++) {\n    const card = generateRandomCard(state, { rarity: RARITIES.BASIC_POLY });\n    if (card) deck.push(card);\n  }\n\n  // 4. Shuffle the deck\n  shuffle(deck);\n\n  // 5. Return new state with updated campaign.deck\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck,\n    },\n    log: [`Generated starter deck (${deck.length} cards).`, ...state.log],\n  };\n}\nfunction applyDifficultyModifiers(state) {\n  const difficulty = state.campaign.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\"Invalid or missing difficulty:\", difficulty);\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n\n  const newCampaign = {\n    ...state.campaign,\n    gold: state.campaign.gold + modifiers.goldModifier,\n    basicCardCount:\n      state.campaign.basicCardCount + modifiers.basicCardCountModifier,\n    luck: (state.campaign.luck || 0) + (modifiers.luckModifier || 0),\n  };\n\n  return {\n    ...state,\n    maxHealth: state.maxHealth + modifiers.maxHealthModifier,\n    health: state.health + modifiers.maxHealthModifier,\n    campaign: newCampaign,\n    log: [`Applied difficulty modifiers for ${difficulty}.`, ...state.log],\n  };\n}\nfunction advancePhaseTo(state, phaseAdvancedTo) {\n  if (!Object.values(PHASES).includes(phaseAdvancedTo)) {\n    console.error(\"Invalid phase passed to advancePhaseTo:\", phaseAdvancedTo);\n    return state;\n  }\n\n  return {\n    ...state,\n    currentPhase: phaseAdvancedTo,\n    log: [`Advanced to phase: ${phaseAdvancedTo}`, ...state.log],\n  };\n}\nfunction handlePhaseTransitions(state) {\n  const phase = state.currentPhase;\n\n  switch (phase) {\n    case PHASES.DIFFICULTY_SELECTION:\n      return {\n        ...state,\n        log: [\"Choose your difficulty.\", ...state.log],\n      };\n\n    case PHASES.PATH_SELECTION:\n      console.log(\">> Entering PHASES.PATH_SELECTION\");\n      return populatePathOfferings(state);\n\n    case PHASES.CARD_OFFERING:\n      console.log(\">> Entering PHASES.CARD_OFFERING\");\n      return populateCardOfferings(state);\n\n    case PHASES.MYTHIC_RELIC_OFFERING:\n      console.log(\">> Entering PHASES.MYTHIC_RELIC_OFFERING .\");\n      return populateRelicOfferings(state, RARITIES.MYTHIC);\n\n    case PHASES.RELIC_OFFERING:\n      console.log(\">> Entering PHASES.RELIC_OFFERING.\");\n      return populateRelicOfferings(state);\n\n    case PHASES.POTION_OFFERING:\n      console.log(\">> Entering POTION_OFFERING phase.\");\n      return populatePotionOfferings(state);\n\n    case PHASES.GEM_OFFERING:\n      console.log(\">> Entering GEM_OFFERING phase.\");\n      return populateGemOfferings(state);\n\n    case PHASES.SHOP:\n      return populateShopfront(state);\n\n    default:\n      return state;\n  }\n}\nfunction pickPath(state, index) {\n  const paths = state.offerings.paths;\n\n  if (!paths || index < 0 || index >= paths.length) {\n    console.error(\"Invalid path index:\", index);\n    return state;\n  }\n\n  const chosenPath = paths[index];\n  const pathKey = chosenPath.path;\n  const pathData = pathMap[pathKey];\n\n  if (!pathData || !pathData.leadsTo) {\n    console.error(\"Path has no destination phase:\", pathKey);\n    return state;\n  }\n\n  const newCampaign = {\n    ...state.campaign,\n    level: state.campaign.level + 1,\n  };\n\n  return handlePhaseTransitions({\n    ...state,\n    campaign: newCampaign,\n    currentPhase: pathData.leadsTo,\n    log: [`Chose path: ${pathKey}`, ...state.log],\n    offerings: {\n      ...state.offerings,\n      paths: [], // clear after pick\n    },\n  });\n}\nfunction populateCardOfferings(state) {\n  const newCards = [];\n\n  while (newCards.length < 3) {\n    const card = generateRandomCard(state);\n    if (!card) continue;\n    if (newCards.some((existing) => existing.name === card.name)) continue;\n    newCards.push(card);\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      cards: newCards,\n    },\n    log: [`Populated card offerings.`, ...state.log],\n  };\n}\nfunction populatePotionOfferings(state) {\n  const selectedPotions = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedPotions.length < 3 && attempts < 50) {\n    attempts++;\n\n    const potion = generateRandomPotion(state);\n    if (!potion) continue;\n\n    if (usedNames.has(potion.name)) continue;\n\n    selectedPotions.push(potion);\n    usedNames.add(potion.name);\n  }\n\n  if (selectedPotions.length < 3) {\n    console.warn(\"Not enough unique potions to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      potions: selectedPotions,\n    },\n    log: [`Populated potion offerings.`, ...state.log],\n  };\n}\nfunction populateRelicOfferings(state, rarity = null) {\n  const selected = [];\n  const maxRelics = 3;\n\n  while (selected.length < maxRelics) {\n    const relic = generateRandomRelic(state, { rarity });\n\n    // Ensure uniqueness by name\n    if (selected.some((r) => r.name === relic.name)) continue;\n\n    selected.push(relic);\n  }\n\n  console.log(\"Selected relic offerings:\", selected);\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      relics: selected,\n    },\n    log: [`Populated relic offerings.`, ...state.log],\n  };\n}\nfunction populateGemOfferings(state) {\n  const selectedGems = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedGems.length < 3 && attempts < 50) {\n    attempts++;\n\n    const gem = generateRandomGem(state);\n    if (!gem) continue;\n\n    if (usedNames.has(gem.name)) continue;\n\n    selectedGems.push(gem);\n    usedNames.add(gem.name);\n  }\n\n  if (selectedGems.length < 3) {\n    console.warn(\"Not enough unique gems to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      gems: selectedGems,\n    },\n    log: [`Populated gem offerings.`, ...state.log],\n  };\n}\nfunction populatePathOfferings(state) {\n  const luck = state.campaign.luck || 0;\n\n  // Step 1: Pick the fight path\n  const fightWeights = {\n    [PATHS.EASY_FIGHT]: 3,\n    [PATHS.MEDIUM_FIGHT]: 2,\n    [PATHS.HARD_FIGHT]: 1,\n  };\n  const fightPathKey = weightedRandomChoice(fightWeights);\n  const fightPath = {\n    path: fightPathKey,\n    ...pathMap[fightPathKey],\n  };\n\n  // Step 2: Create a pool of available non-fight paths\n  const nonFightPaths = Object.entries(pathMap)\n    .filter(([key, data]) => !data.isFight && key !== fightPathKey)\n    .map(([path, data]) => ({ path, ...data }));\n\n  // Step 2a: If all cards are socketed, exclude GEM_OFFERING\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null);\n\n  const filteredNonFightPaths = nonFightPaths.filter((pathObj) => {\n    if (pathObj.path === PATHS.GEM_OFFERING && allCardsSocketed) return false;\n    return true;\n  });\n  // Step 3: Pick two rarities based on player luck\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const chosenRarities = [\n    weightedRandomChoice(rarityWeights),\n    weightedRandomChoice(rarityWeights),\n  ];\n\n  // Step 4: For each rarity, pick a path from the pool\n  const chosenPaths = [];\n  const usedPaths = new Set([fightPathKey]);\n\n  for (const rarity of chosenRarities) {\n    const candidates = filteredNonFightPaths.filter(\n      (p) => p.rarity === rarity && !usedPaths.has(p.path)\n    );\n    if (candidates.length > 0) {\n      const pick = candidates[Math.floor(Math.random() * candidates.length)];\n      usedPaths.add(pick.path);\n      chosenPaths.push(pick);\n    }\n  }\n\n  // Step 5: Fallback – if fewer than 2 non-fight paths were picked, fill from remaining\n  const remainingPool = filteredNonFightPaths.filter(\n    (p) => !usedPaths.has(p.path)\n  );\n  while (chosenPaths.length < 2 && remainingPool.length > 0) {\n    const idx = Math.floor(Math.random() * remainingPool.length);\n    const pick = remainingPool.splice(idx, 1)[0];\n    usedPaths.add(pick.path);\n    chosenPaths.push(pick);\n  }\n\n  const paths = [fightPath, ...chosenPaths];\n  console.log(\"Populated path options:\", paths);\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      paths,\n    },\n    log: [`Populated path options.`, ...state.log],\n  };\n}\nfunction pickCard(state, index) {\n  const phase = state.currentPhase;\n  const offerings = state.offerings;\n  const campaign = state.campaign;\n\n  let sourceArrayName = null;\n\n  if (offerings.cards && index < offerings.cards.length) {\n    sourceArrayName = \"cards\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid card index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Fix: unwrap the card object if we're in shopfront\n  const pickedCard = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedCard) {\n    console.error(\"No card found at index:\", index);\n    return state;\n  }\n\n  // === 2. If in shop, charge gold ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const cost = entry.cost || 20;\n    const charged = chargeGoldCost(state, cost, \"card\");\n    if (charged === state) {\n      return state; // not enough gold\n    }\n    updatedState = charged;\n  }\n\n  // === 3. Add to campaign deck ===\n  const updatedDeck = [...updatedState.campaign.deck, pickedCard];\n\n  // === 4. Remove from source array ===\n  const updatedOfferings = {\n    ...updatedState.offerings,\n    [sourceArrayName]: sourceArray.filter((_, i) => i !== index),\n  };\n\n  // === 5. Apply triggers\n  let newState = {\n    ...updatedState,\n    campaign: {\n      ...updatedState.campaign,\n      deck: updatedDeck,\n    },\n    offerings: updatedOfferings,\n    log: [`Picked card: ${pickedCard.name}`, ...updatedState.log],\n  };\n\n  const triggerResult = checkRelicTriggers(\n    newState,\n    TRIGGER_EVENTS.CARD_PICKUP,\n    {\n      payload: pickedCard,\n    }\n  );\n\n  newState = triggerResult;\n\n  // === 6. Advance phase if in card offering ===\n  if (phase === PHASES.CARD_OFFERING) {\n    newState = {\n      ...newState,\n      campaign: {\n        ...newState.campaign,\n        trashPile: [\n          ...(newState.campaign.trashPile || []),\n          ...sourceArray.filter((_, i) => i !== index),\n        ],\n      },\n      offerings: {\n        ...newState.offerings,\n        [sourceArrayName]: [],\n      },\n    };\n\n    newState = handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\nfunction pickRelic(state, index) {\n  const phase = state.currentPhase;\n  const campaign = { ...state.campaign };\n  const offerings = { ...state.offerings };\n\n  // Determine the source array\n  let sourceArrayName = null;\n  if (offerings.relics && index < offerings.relics.length) {\n    sourceArrayName = \"relics\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid relic index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Fix: unwrap relic from entry if it's from shopfront\n  const pickedRelic = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedRelic) {\n    console.error(\"No relic found at index:\", index);\n    return state;\n  }\n\n  // === Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const relicCost = entry.cost || 50;\n    const chargedState = chargeGoldCost(state, relicCost, \"relic\");\n\n    if (chargedState === state) {\n      return state; // not enough gold\n    }\n\n    updatedState = chargedState;\n  }\n\n  // === Add to relic belt ===\n  campaign.relicBelt = [...updatedState.campaign.relicBelt, pickedRelic];\n\n  // === Remove from source array ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === Trash rest if in offering phase ===\n  const isOfferingPhase = [\n    PHASES.MYTHIC_RELIC_OFFERING,\n    PHASES.RELIC_OFFERING,\n  ].includes(phase);\n\n  if (isOfferingPhase) {\n    campaign.trashPile = [\n      ...campaign.trashPile,\n      ...offerings.relics.filter((_, i) => i !== index),\n    ];\n    offerings.relics = [];\n  }\n\n  const newState = {\n    ...updatedState,\n    campaign,\n    offerings,\n    log: [`Picked relic: ${pickedRelic.name}`, ...updatedState.log],\n  };\n\n  // === Apply relic pickup triggers ===\n  const triggeredState = checkRelicTriggers(\n    newState,\n    TRIGGER_EVENTS.RELIC_PICKUP,\n    {\n      relic: pickedRelic,\n    }\n  );\n\n  // === Advance phase if needed ===\n  if (isOfferingPhase) {\n    console.log(\"Advancing to path selection after picking relic\");\n    return handlePhaseTransitions(\n      advancePhaseTo(triggeredState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return triggeredState;\n}\nfunction pickPotion(state, index) {\n  const phase = state.currentPhase;\n  const campaign = { ...state.campaign };\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  if (offerings.potions && index < offerings.potions.length) {\n    sourceArrayName = \"potions\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else {\n    console.error(\"Invalid potion index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Fix: unwrap the potion object if from shopfront\n  const pickedPotion = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedPotion) {\n    console.error(\"No potion found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge cost if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const cost = entry.cost || 30;\n    const charged = chargeGoldCost(state, cost, \"potion\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.POTION_PICKUP,\n    {\n      payload: pickedPotion,\n    }\n  );\n  const triggeredPotion = triggerResult.result;\n\n  const updatedPotionBelt = [\n    ...updatedState.campaign.potionBelt,\n    triggeredPotion,\n  ];\n\n  // === 4. Remove from source ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 5. Discard rest if in offering ===\n  if (phase === PHASES.POTION_OFFERING) {\n    campaign.trashPile = [\n      ...campaign.trashPile,\n      ...offerings.potions.filter((_, i) => i !== index),\n    ];\n    offerings.potions = [];\n  }\n\n  const newState = {\n    ...updatedState,\n    campaign: {\n      ...updatedState.campaign,\n      potionBelt: updatedPotionBelt,\n      trashPile: campaign.trashPile || updatedState.campaign.trashPile,\n    },\n    offerings,\n    log: [`Picked potion: ${pickedPotion.name}`, ...updatedState.log],\n  };\n\n  // === 6. Advance phase if in offering ===\n  if (phase === PHASES.POTION_OFFERING) {\n    return handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\nfunction drinkPotion(state, potion) {\n  if (!potion) {\n    console.error(\"No potion passed to drinkPotion\");\n    return state;\n  }\n\n  let updatedState = { ...state };\n\n  // === 1. Apply effects ===\n  if (potion.healthRestore) {\n    updatedState = heal(updatedState, potion.healthRestore);\n  }\n\n  // === 2. Remove potion from potionBelt and add to trash ===\n  const newPotionBelt = updatedState.campaign.potionBelt.filter(\n    (p) => p !== potion\n  );\n  const newTrash = [...updatedState.campaign.trashPile, potion];\n\n  updatedState = {\n    ...updatedState,\n    campaign: {\n      ...updatedState.campaign,\n      potionBelt: newPotionBelt,\n      trashPile: newTrash,\n    },\n    log: [`Drank potion: ${potion.name}`, ...updatedState.log],\n  };\n\n  // === 3. Check relic triggers ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.DRINK_POTION,\n    { potion }\n  );\n\n  return {\n    ...triggerResult,\n    log: triggerResult.log || updatedState.log,\n  };\n}\nfunction openModScreen(state, mod, originPhase = null) {\n  const validKeys = [\"upgrade\", \"gem\", \"purge\", \"transmute\"];\n  const keys = Object.keys(mod || {});\n  if (keys.length !== 1 || !validKeys.includes(keys[0])) {\n    console.error(\"Invalid mod passed to openModScreen:\", mod);\n    return state;\n  }\n\n  // === GEM LOGIC: Discard unchosen gems only if from gem offering ===\n  if (mod.gem && (state.offerings.gems?.length || 0) > 0) {\n    const chosenGemName = mod.gem.name;\n\n    const discardedGems = state.offerings.gems.filter(\n      (g) => g.name !== chosenGemName\n    );\n\n    state = {\n      ...state,\n      campaign: {\n        ...state.campaign,\n        trashPile: [...state.campaign.trashPile, ...discardedGems],\n      },\n      offerings: {\n        ...state.offerings,\n        gems: [], // clear offering gems\n      },\n      log: [`Discarded ${discardedGems.length} unchosen gem(s).`, ...state.log],\n    };\n  }\n\n  // === Charge gold if in shop ===\n  if (state.currentPhase === PHASES.SHOP) {\n    let cost = 50;\n    if (mod?.gem?.cost !== undefined) {\n      cost = mod.gem.cost;\n    }\n\n    const charged = chargeGoldCost(state, cost, \"card modification\");\n    if (charged === state) return state; // insufficient gold\n    state = charged;\n  }\n\n  return {\n    ...state,\n    currentScreen: SCREENS.MOD,\n    modData: {\n      mod,\n      origin: originPhase || state.currentPhase,\n    },\n    log: [`Opened mod screen (${keys[0]}).`, ...state.log],\n  };\n}\n\nfunction applyModToCard(state, card) {\n  const mod = state.modData?.mod;\n  const origin = state.modData?.origin;\n\n  if (!mod || !card) {\n    console.warn(\"applyModToCard called without a valid mod or card.\");\n    return state;\n  }\n\n  let updatedDeck = [...state.campaign.deck];\n  const cardIndex = updatedDeck.findIndex((c) => c === card);\n\n  if (cardIndex === -1) {\n    console.warn(\"Card not found in campaign deck.\");\n    return state;\n  }\n\n  // Apply mod\n  let modifiedCard = { ...card };\n  if (mod.upgrade) {\n    modifiedCard = upgradeCard(modifiedCard, mod.upgrade);\n  } else if (mod.gem) {\n    modifiedCard = socketCardWithGem(modifiedCard, mod.gem);\n  } else if (mod.purge) {\n    updatedDeck.splice(cardIndex, 1); // Remove the card\n  } else if (mod.transmute) {\n    modifiedCard = transmuteCard(modifiedCard);\n  }\n\n  // Replace modified card if not purged\n  if (!mod.purge) {\n    updatedDeck[cardIndex] = modifiedCard;\n  }\n\n  // Determine next phase\n  const nextPhase =\n    origin === PHASES.SHOP || origin === PHASES.COMBAT_END\n      ? origin\n      : PHASES.PATH_SELECTION;\n\n  const updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n    },\n    modData: null,\n    currentScreen: SCREENS.MAIN,\n    currentPhase: nextPhase,\n    log: [`Applied mod to ${card.name}.`, ...state.log],\n  };\n\n  // If transitioning to path selection, trigger path population\n  return nextPhase === PHASES.PATH_SELECTION\n    ? handlePhaseTransitions(updatedState)\n    : updatedState;\n}\nfunction populateShopfront(state) {\n  const shopfrontTypes = [];\n  // === Clear existing shop items into trash ===\n  const previousItems = state.offerings.shopfront || [];\n  const discardedItems = previousItems.map((entry) => entry.item);\n  const updatedTrash = [...(state.campaign.trashPile || []), ...discardedItems];\n  // === Step 1: Ensure 1 of each type ===\n  const guaranteedTypes = [\"relic\", \"potion\", \"card\", \"gem\"];\n  guaranteedTypes.forEach((type) => shopfrontTypes.push(type));\n\n  // === Step 2: Fill remaining 8 items using weighted choice ===\n  const weights = {\n    card: 12,\n    potion: 3,\n    gem: 1,\n    relic: 1,\n  };\n\n  const weightedPool = Object.entries(weights).flatMap(([type, weight]) =>\n    Array(weight).fill(type)\n  );\n\n  let safetyCounter = 0;\n  while (shopfrontTypes.length < 12 && safetyCounter < 100) {\n    safetyCounter++;\n    const chosen =\n      weightedPool[Math.floor(Math.random() * weightedPool.length)];\n    shopfrontTypes.push(chosen);\n  }\n\n  // === Step 3: Generate actual items, avoiding duplicates ===\n  const generatedItems = [];\n  const usedKeys = new Set();\n\n  for (let type of shopfrontTypes) {\n    let item = null;\n    let attempt = 0;\n\n    while (attempt < 20) {\n      attempt++;\n      try {\n        switch (type) {\n          case \"card\":\n            item = generateRandomCard(state);\n            break;\n          case \"potion\":\n            item = generateRandomPotion(state);\n            break;\n          case \"gem\":\n            item = generateRandomGem(state);\n            break;\n          case \"relic\":\n            item = generateRandomRelic(state);\n            break;\n          default:\n            item = null;\n        }\n\n        if (!item) continue;\n\n        const key = `${type}-${item.name}`;\n        if (usedKeys.has(key)) continue;\n\n        usedKeys.add(key);\n        generatedItems.push({ type, item });\n        break; // done\n      } catch (e) {\n        console.warn(\"Shop item generation failed:\", type, e);\n      }\n    }\n  }\n\n  // === Step 4: Insert shopfront and assign prices ===\n  let updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      trashPile: updatedTrash,\n    },\n    offerings: {\n      ...state.offerings,\n      shopfront: generatedItems,\n    },\n  };\n\n  updatedState = assignShopPrices(updatedState);\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.ASSIGN_SHOP_PRICES\n  );\n\n  return {\n    ...updatedState,\n    log: [\n      `Populated shopfront with ${generatedItems.length} unique items.`,\n      ...updatedState.log,\n    ],\n  };\n}\n\n//#endregion\n//#region state setup and game initialization\nfunction createInitialState() {\n  return {\n    log: [],\n    currentScreen: SCREENS.MAIN,\n    currentPhase: PHASES.MAIN_MENU,\n    maxHealth: 0,\n    health: 0,\n    campaign: {\n      difficulty: null,\n\n      deck: [],\n      relicBelt: [],\n      potionBelt: [],\n      trashPile: [],\n      defeatedEnemies: [],\n\n      gold: 100,\n      level: 0,\n      luck: 0,\n\n      basicCardCount: 5,\n\n      ink: 3,\n      books: 1,\n      pages: 3,\n      handSize: 5,\n\n      enemy: null,\n    },\n    battle: {\n      deck: [],\n      hand: [],\n      graveyard: [],\n      exile: [],\n      spellbook: [],\n\n      relicBelt: [],\n      potionBelt: [],\n\n      ink: 0,\n      maxInk: 0,\n      books: 0,\n      maxBooks: 0,\n      pages: 0,\n      maxPages: 0,\n      handSize: 5,\n\n      enemy: null,\n    },\n    offerings: {\n      difficulties: [],\n      shopfront: [],\n      cards: [],\n      potions: [],\n      gems: [],\n      relics: [],\n      paths: [],\n      combatRewards: [],\n    },\n  };\n}\nfunction selectDifficultyAndBeginGame(dispatch, difficulty) {\n  dispatch({ type: ACTIONS.SET_DIFFICULTY, payload: difficulty });\n  dispatch({ type: ACTIONS.GENERATE_STARTER_DECK });\n  dispatch({ type: ACTIONS.APPLY_DIFFICULTY_MODIFIERS });\n  dispatch({\n    type: ACTIONS.ADVANCE_PHASE,\n    payload: PHASES.MYTHIC_RELIC_OFFERING,\n  });\n}\nfunction createGameApp(initialState, reducer, renderFn) {\n  let state = initialState;\n  function dispatch(action) {\n    state = reducer(state, action);\n    renderFn(state, dispatch); // pass dispatch so buttons etc. can use it\n  }\n  // Start the game\n  dispatch({ type: ACTIONS.NEW_GAME });\n  return { dispatch };\n}\n\n//#endregion\n//#region game mechanics\nfunction createCardInstance(\n  cardName = null,\n  rarity = null,\n  upgrades = 0,\n  gem = null\n) {\n  let card;\n  if (rarity) {\n    console.log(\"🔍 createCardInstance got rarity:\", rarity);\n  }\n  if (cardName) {\n    const found = cardList.find((c) => c.name === cardName);\n    if (!found) {\n      console.error(`Card not found: ${cardName}`);\n      return null;\n    }\n    card = { ...found };\n  } else if (rarity) {\n    const candidates = cardList.filter((c) => c.rarity === rarity);\n    if (candidates.length === 0) {\n      console.error(`No cards found with rarity: ${rarity}`);\n      return null;\n    }\n    card = { ...candidates[Math.floor(Math.random() * candidates.length)] };\n  } else {\n    console.error(\"createCardInstance requires either a cardName or a rarity.\");\n    return null;\n  }\n\n  // Apply upgrades if needed\n  if (upgrades > 0) {\n    card = upgradeCard(card, upgrades); // this should set .upgrades itself\n  }\n\n  // Apply gem if needed\n  if (gem) {\n    card = socketCardWithGem(card, gem);\n  }\n\n  return card;\n}\n\nfunction createRelicInstance(relicName) {\n  const found = relicList.find((r) => r.name === relicName);\n  if (!found) {\n    console.error(`Relic not found: ${relicName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction createPotionInstance(potionName, upgrades = 0) {\n  const found = potionList.find((p) => p.name === potionName);\n  if (!found) {\n    console.error(`Potion not found: ${potionName}`);\n    return null;\n  }\n\n  let potion = { ...found };\n\n  if (upgrades > 0) {\n    potion = upgradePotion(potion, upgrades);\n  }\n\n  return potion;\n}\nfunction createGemInstance(gemName) {\n  const found = gemList.find((g) => g.name === gemName);\n  if (!found) {\n    console.error(`Gem not found: ${gemName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction generateRandomRelic(state, { rarity = null } = {}) {\n  const luck = state.campaign.luck || 0;\n  const ownedRelics = new Set([\n    ...state.campaign.relicBelt.map((r) => r.name),\n    ...state.campaign.trashPile.map((r) => r.name),\n  ]);\n\n  const GOLD_BAG = \"Gold Bag\";\n\n  // Exclude Gold Bag and duplicate high-rarity relics\n  let candidates = relicList.filter((r) => {\n    if (r.name === GOLD_BAG) return false;\n    if (\n      (r.rarity === RARITIES.MYTHIC || r.rarity === RARITIES.LEGENDARY) &&\n      ownedRelics.has(r.name)\n    ) {\n      return false;\n    }\n    return true;\n  });\n\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  const filtered = candidates.filter((r) => r.rarity === rarity);\n  if (filtered.length === 0) {\n    console.warn(`No relics found for rarity: ${rarity}`);\n    return createRelicInstance(GOLD_BAG);\n  }\n\n  const chosen = filtered[Math.floor(Math.random() * filtered.length)];\n  return { ...chosen };\n}\nfunction generateRandomCard(\n  state,\n  { rarity = null, upgrades = undefined, gem = null } = {}\n) {\n  const luck = state.campaign.luck || 0;\n\n  const finalRarity =\n    rarity || weightedRandomChoice(getLuckAdjustedRarityWeights(luck));\n\n  const upgradeWeights = {\n    0: Math.max(0, 100 - luck),\n    1: 3 + luck,\n    2: 2 + luck,\n    3: 1 + luck,\n    4: 0 + luck,\n  };\n\n  const finalUpgrades =\n    upgrades !== undefined\n      ? upgrades\n      : Number(weightedRandomChoice(upgradeWeights));\n\n  const defeatedCount = state.defeatedEnemies?.length || 0;\n  const maxUpgrades = Math.min(4, Math.floor(defeatedCount / 3));\n  const cappedUpgrades = Math.min(finalUpgrades, maxUpgrades);\n\n  return createCardInstance(undefined, finalRarity, cappedUpgrades, gem);\n}\nfunction generateRandomPotion(state, { rarity = null, upgrades = null } = {}) {\n  const luck = state.campaign.luck || 0;\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const upgradeWeights = {\n    0: Math.max(0, 100 - luck),\n    1: 3 + luck,\n    2: 2 + luck,\n    3: 1 + luck,\n    4: 0 + luck,\n  };\n\n  // === Choose rarity if not provided ===\n  if (!rarity) {\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // === Fallback in case rarity yields no results ===\n  const candidates = potionList.filter((p) => p.rarity === rarity);\n  let basePotion;\n  if (candidates.length === 0) {\n    console.warn(\n      `No potions found for rarity: ${rarity}. Falling back to Lesser Healing Potion.`\n    );\n    basePotion = potionList.find((p) => p.name === \"Lesser Healing Potion\");\n    if (!basePotion) {\n      console.error(\n        \"Fallback potion 'Lesser Healing Potion' not found in potionList.\"\n      );\n      return null;\n    }\n    upgrades = 0; // ensure fallback is always unupgraded\n  } else {\n    basePotion = candidates[Math.floor(Math.random() * candidates.length)];\n\n    // === Choose upgrade level if not provided ===\n    if (upgrades === null) {\n      upgrades = Number(weightedRandomChoice(upgradeWeights));\n    }\n    upgrades = Math.min(upgrades, 4);\n  }\n\n  return createPotionInstance(basePotion.name, upgrades);\n}\nfunction generateRandomGem(state, { rarity = null } = {}) {\n  const luck = state.campaign.luck || 0;\n  const fallbackGem = createGemInstance(\"Amethyst\");\n\n  // Choose rarity based on luck if not specified\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // Filter by rarity\n  const candidates = gemList.filter((gem) => gem.rarity === rarity);\n\n  if (candidates.length === 0) {\n    console.warn(\n      `No gems found for rarity: ${rarity}, returning fallback gem.`\n    );\n    return fallbackGem;\n  }\n\n  const chosenGem = candidates[Math.floor(Math.random() * candidates.length)];\n  return { ...chosenGem };\n}\nfunction upgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to upgradeCard:\", card);\n    return card;\n  }\n\n  // Clone the card to avoid mutating the original\n  const upgradedCard = { ...card };\n\n  let upgradable = false;\n\n  if (\"bunnyAdd\" in upgradedCard) {\n    upgradedCard.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedCard) {\n    upgradedCard.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"goldAdd\" in upgradedCard) {\n    upgradedCard.goldAdd += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInDeck += level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInHand\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInHand += level;\n    upgradable = true;\n  }\n\n  if (\"cardDraw\" in upgradedCard) {\n    upgradedCard.cardDraw += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"inkAdd\" in upgradedCard) {\n    upgradedCard.inkAdd += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"healthCost\" in upgradedCard) {\n    upgradedCard.healthCost -= 1 * level; // reduce health cost\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Card cannot be upgraded: ${card.name}`);\n    return card;\n  }\n\n  // Add or increment the upgrade level\n  upgradedCard.upgrades = (upgradedCard.upgrades || 0) + level;\n\n  // Rename the card to reflect its upgrade level\n  upgradedCard.name =\n    card.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedCard.upgrades}`;\n\n  return upgradedCard;\n}\nfunction upgradePotion(potion, level = 1) {\n  if (!potion || typeof potion !== \"object\") {\n    console.error(\"Invalid potion passed to upgradePotion:\", potion);\n    return potion;\n  }\n\n  // Clone the potion to avoid mutating the original\n  const upgradedPotion = { ...potion };\n\n  let upgradable = false;\n\n  // === Upgradeable Effects ===\n  if (\"healthRestore\" in upgradedPotion) {\n    upgradedPotion.healthRestore += 5 * level;\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Potion cannot be upgraded: ${potion.name}`);\n    return potion;\n  }\n\n  // === Track upgrade level ===\n  upgradedPotion.upgrades = (upgradedPotion.upgrades || 0) + level;\n\n  // === Update potion name to reflect upgrades ===\n  upgradedPotion.name =\n    potion.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedPotion.upgrades}`;\n\n  return upgradedPotion;\n}\nfunction socketCardWithGem(card, gem) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to socketCardWithGem:\", card);\n    return card;\n  }\n\n  if (!gem || typeof gem !== \"object\" || !gem.name) {\n    console.error(\"Invalid gem passed to socketCardWithGem:\", gem);\n    return card;\n  }\n\n  // Clone the card to avoid mutation\n  const socketedCard = { ...card };\n\n  // Apply gem effects\n  if (\"bunnyAdd\" in gem) {\n    socketedCard.bunnyAdd = (socketedCard.bunnyAdd || 0) + gem.bunnyAdd;\n  }\n\n  // Save the gem reference\n  socketedCard.gem = gem;\n\n  // Rename the card to include the gem name as a prefix\n  socketedCard.name = `${gem.name} ${card.name}`;\n\n  return socketedCard;\n}\nfunction getLuckAdjustedRarityWeights(luck = 0) {\n  return {\n    [RARITIES.COMMON]: Math.max(20, 60 - luck * 2),\n    [RARITIES.UNCOMMON]: Math.max(20, 40 - luck),\n    [RARITIES.RARE]: Math.min(20, 5 + luck),\n    [RARITIES.MYTHIC]: Math.min(10, 2 + Math.ceil(luck / 2)),\n    [RARITIES.LEGENDARY]: Math.min(5, 1 + Math.ceil(luck / 3)),\n  };\n}\nfunction chargeGoldCost(state, cost, context = \"purchase\") {\n  if (state.campaign.gold < cost) {\n    console.warn(`Not enough gold for ${context}!`);\n    return state; // return unmodified state\n  }\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      gold: state.campaign.gold - cost,\n    },\n    log: [`Spent ${cost} gold on ${context}.`, ...state.log],\n  };\n}\nfunction checkRelicTriggers(state, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  let result = context.payload || null;\n\n  for (const relic of updatedState.campaign.relicBelt) {\n    const effect = relic.triggers?.[triggerEvent];\n    if (!effect) continue;\n\n    // === handle DRINK_POTION effects ===\n    if (triggerEvent === TRIGGER_EVENTS.DRINK_POTION && context.potion) {\n      if (effect.healPlayer) {\n        updatedState = heal(updatedState, effect.healPlayer);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} healed you for ${effect.healPlayer} HP on potion use.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    // === Handle POTION_PICKUP effects ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.POTION_PICKUP &&\n      effect.upgradePotion &&\n      result\n    ) {\n      result = upgradePotion(result, 1);\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} upgraded a potion on pickup!`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    // === Handle CARD_PICKUP effects ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.CARD_PICKUP &&\n      effect.upgradeCard &&\n      result\n    ) {\n      result = upgradeCard(result, 1);\n      updatedState = {\n        ...updatedState,\n        log: [`${relic.name} upgraded a card on pickup!`, ...updatedState.log],\n      };\n    }\n\n    // === Handle RELIC_PICKUP effects ===\n    if (triggerEvent === TRIGGER_EVENTS.RELIC_PICKUP && context.relic) {\n      const campaign = { ...updatedState.campaign };\n      let newHealth = updatedState.health;\n      let newMaxHealth = updatedState.maxHealth;\n\n      if (effect.bonusPages) {\n        campaign.pages += effect.bonusPages;\n      }\n      if (effect.bonusGold) {\n        campaign.gold += effect.bonusGold;\n      }\n      if (effect.bonusHealth) {\n        newHealth += effect.bonusHealth;\n        newMaxHealth += effect.bonusHealth;\n      }\n      if (effect.bonusInk) {\n        campaign.ink += effect.bonusInk;\n      }\n      if (effect.bonusBooks) {\n        campaign.books += effect.bonusBooks;\n      }\n\n      // handle ASSIGN_SHOP_PRICES effects\n\n      if (triggerEvent === TRIGGER_EVENTS.ASSIGN_SHOP_PRICES) {\n        if (effect.shopPriceMultiplier) {\n          state = {\n            ...state,\n            offerings: {\n              ...state.offerings,\n              shopfront: state.offerings.shopfront.map((entry) => {\n                const adjustedCost = Math.round(\n                  entry.item.cost * effect.shopPriceMultiplier\n                );\n                return {\n                  ...entry,\n                  item: {\n                    ...entry.item,\n                    cost: adjustedCost,\n                  },\n                };\n              }),\n            },\n            log: [\n              `Applied shop price multiplier (${effect.shopPriceMultiplier})`,\n              ...state.log,\n            ],\n          };\n        }\n      }\n\n      updatedState = {\n        ...updatedState,\n        campaign,\n        health: newHealth,\n        maxHealth: newMaxHealth,\n        log: [\n          `${relic.name} granted bonuses on relic pickup.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n  }\n\n  return {\n    ...updatedState,\n    result,\n  };\n}\nfunction heal(state, amount) {\n  const newHealth = Math.min(\n    (state.health || 0) + amount,\n    state.maxHealth || 0\n  );\n  return {\n    ...state,\n    health: newHealth,\n    log: [`Healed ${amount} HP.`, ...state.log],\n  };\n}\nfunction transmuteCard(card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to transmuteCard:\", card);\n    return null;\n  }\n\n  const alternatives = cardList.filter(\n    (c) => c.name !== card.name && !c.unchoosableByTransmute\n  );\n\n  if (alternatives.length === 0) {\n    console.warn(\n      `No valid alternatives found to transmute ${card.name}. Returning original.`\n    );\n    return { ...card };\n  }\n\n  const newBase = alternatives[Math.floor(Math.random() * alternatives.length)];\n  return createCardInstance(newBase.name, null, card.upgrades, card.gem);\n}\nfunction purgeCard(state, card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to purgeCard:\", card);\n    return state;\n  }\n\n  const updatedDeck = state.campaign.deck.filter((c) => c !== card);\n  const updatedTrash = [...(state.campaign.trashPile || []), card];\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n      trashPile: updatedTrash,\n    },\n    log: [`Purged card: ${card.name}`, ...state.log],\n  };\n}\n//#endregion\n//#region game reducer\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.NEW_GAME:\n      return {\n        ...createInitialState(),\n        log: [\"New game started.\"],\n      };\n\n    case ACTIONS.SET_DIFFICULTY: {\n      if (state.campaign.difficulty === action.payload) {\n        console.log(\"Difficulty already set to\", action.payload);\n        return state;\n      }\n      console.log(`Difficulty set to ${action.payload}`);\n      return {\n        ...state,\n        campaign: {\n          ...state.campaign,\n          difficulty: action.payload,\n        },\n        log: [`Difficulty set to ${action.payload}.`, ...state.log],\n      };\n    }\n\n    case ACTIONS.GENERATE_STARTER_DECK:\n      return generateStarterDeck(state);\n\n    case ACTIONS.APPLY_DIFFICULTY_MODIFIERS:\n      return applyDifficultyModifiers(state);\n\n    case ACTIONS.ADVANCE_PHASE:\n      const newState = advancePhaseTo(state, action.payload);\n      return handlePhaseTransitions(newState);\n\n    case ACTIONS.CREATE_CARD_INSTANCE: {\n      const newCard = createCardInstance(\n        action.payload.cardName,\n        action.payload.rarity,\n        action.payload.upgrades,\n        action.payload.gem\n      );\n      return {\n        ...state,\n        campaign: {\n          ...state.campaign,\n          deck: [...state.campaign.deck, newCard],\n        },\n        log: [`Created card: ${newCard.name}`, ...state.log],\n      };\n    }\n\n    case ACTIONS.POPULATE_RELIC_OFFERINGS:\n      return populateRelicOfferings(state, action.payload?.rarity);\n\n    case ACTIONS.PICK_RELIC:\n      return pickRelic(state, action.payload);\n\n    case ACTIONS.POPULATE_PATH_OFFERINGS:\n      return populatePathOfferings(state);\n\n    case ACTIONS.PICK_PATH:\n      return pickPath(state, action.payload);\n\n    case ACTIONS.POPULATE_CARD_OFFERINGS:\n      return populateCardOfferings(state);\n\n    case ACTIONS.PICK_CARD:\n      return pickCard(state, action.payload);\n\n    case ACTIONS.POPULATE_POTION_OFFERINGS:\n      return populatePotionOfferings(state);\n\n    case ACTIONS.PICK_POTION:\n      return pickPotion(state, action.payload);\n\n    case ACTIONS.DRINK_POTION: {\n      const potionIndex = action.payload;\n      const potionToDrink = state.campaign.potionBelt[potionIndex];\n      if (!potionToDrink) {\n        console.error(\"Invalid potion index:\", potionIndex);\n        return state;\n      }\n      return drinkPotion(state, potionToDrink);\n    }\n\n    case ACTIONS.POPULATE_GEM_OFFERINGS:\n      return populateGemOfferings(state);\n\n    case ACTIONS.OPEN_MOD_SCREEN:\n      return openModScreen(state, action.payload.mod, action.payload.origin);\n\n    case ACTIONS.APPLY_CARD_MOD:\n      return applyModToCard(state, action.payload); // payload = selected card\n\n    case ACTIONS.SCREEN_CHANGE:\n      return screenChange(state, action.payload);\n\n    case ACTIONS.POPULATE_SHOPFRONT:\n      return populateShopfront(state);\n\n    case ACTIONS.LOG_MESSAGE:\n      return {\n        ...state,\n        log: [action.payload, ...state.log],\n      };\n\n    default:\n      console.warn(\"Unknown action type:\", action.type);\n      return state;\n  }\n}\n//#endregion\n//#region render function\n// mockup of render function - proper function pending\nfunction render(state, dispatch) {\n  // Get or create output div\n  let output = document.getElementById(\"output\");\n  if (!output) {\n    output = document.createElement(\"div\");\n    output.id = \"output\";\n    document.body.appendChild(output);\n  }\n  output.innerHTML = \"\"; // Clear previous contents\n\n  // === Game Info ===\n  const info = document.createElement(\"div\");\n  info.innerHTML = `\n    <h2>Game Info</h2>\n    <p><strong>Current Screen:</strong> ${state.currentScreen}</p>\n    <p><strong>Current Phase:</strong> ${state.currentPhase}</p>\n    <p><strong>Gold:</strong> ${state.campaign.gold}</p>\n    <p><strong>Health:</strong> ${state.health}/${state.maxHealth}</p>\n    <p><strong>Deck Size:</strong> ${state.campaign.deck.length}</p>\n    <p><strong>Relics:</strong> ${\n      state.campaign.relicBelt.map((r) => r.name).join(\", \") || \"None\"\n    }</p>\n  `;\n  output.appendChild(info);\n\n  // === Log ===\n  const log = document.createElement(\"div\");\n  log.innerHTML = `<h3>Log</h3><ul>${state.log\n    .slice(0, 5)\n    .map((msg) => `<li>${msg}</li>`)\n    .join(\"\")}</ul>`;\n  output.appendChild(log);\n\n  // === Main Menu ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.MAIN_MENU\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = \"New Game\";\n    button.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.DIFFICULTY_SELECTION,\n      });\n    };\n    output.appendChild(button);\n  }\n\n  // === Difficulty Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.DIFFICULTY_SELECTION\n  ) {\n    const difficulties = [\n      DIFFICULTIES.EASY,\n      DIFFICULTIES.MEDIUM,\n      DIFFICULTIES.HARD,\n    ];\n    difficulties.forEach((difficulty) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `Start ${difficulty} Game`;\n      btn.onclick = () => selectDifficultyAndBeginGame(dispatch, difficulty);\n      output.appendChild(btn);\n    });\n  }\n\n  // === Relic Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.relics &&\n    state.offerings.relics.length > 0\n  ) {\n    const relicSection = document.createElement(\"div\");\n    relicSection.innerHTML = `<h3>Relic Offerings</h3>`;\n    state.offerings.relics.forEach((relic, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${relic.name} (${relic.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n      relicSection.appendChild(btn);\n    });\n    output.appendChild(relicSection);\n  }\n  // === Path Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.paths &&\n    state.offerings.paths.length > 0\n  ) {\n    const pathSection = document.createElement(\"div\");\n    pathSection.innerHTML = `<h3>Choose a Path</h3>`;\n    state.offerings.paths.forEach((path, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${path.path} (${path.rarity})${\n        path.isFight ? \" [FIGHT]\" : \"\"\n      }`;\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_PATH, payload: index });\n      pathSection.appendChild(btn);\n    });\n    output.appendChild(pathSection);\n  }\n\n  // === Card Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.cards &&\n    state.offerings.cards.length > 0\n  ) {\n    const cardSection = document.createElement(\"div\");\n    cardSection.innerHTML = `<h3>Choose a Card</h3>`;\n\n    state.offerings.cards.forEach((card, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.cost})${\n        card.upgrades ? ` +${card.upgrades}` : \"\"\n      }${card.gem ? ` [Gem: ${card.gem.name}]` : \"\"}`;\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n      cardSection.appendChild(btn);\n    });\n\n    output.appendChild(cardSection);\n  }\n\n  // === Potion Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.POTION_OFFERING &&\n    state.offerings.potions &&\n    state.offerings.potions.length > 0\n  ) {\n    const potionSection = document.createElement(\"div\");\n    potionSection.innerHTML = `<h3>Choose a Potion</h3>`;\n\n    state.offerings.potions.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${potion.name} (${potion.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n      potionSection.appendChild(btn);\n    });\n\n    output.appendChild(potionSection);\n  }\n\n  // ==== Gem Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentScreen === SCREENS.MAIN &&\n    state.currentPhase === PHASES.GEM_OFFERING &&\n    state.offerings.gems &&\n    state.offerings.gems.length > 0\n  ) {\n    const gemSection = document.createElement(\"div\");\n    gemSection.innerHTML = `<h3>Choose a Gem</h3>`;\n\n    state.offerings.gems.forEach((gem, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${gem.name} (${gem.rarity})`;\n\n      btn.onclick = () =>\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { gem },\n            origin: PHASES.GEM_OFFERING,\n          },\n        });\n\n      gemSection.appendChild(btn);\n    });\n\n    output.appendChild(gemSection);\n  }\n  // === Shopfront Display ===\n  console.log(\"🔍 Rendering shopfront:\", state.offerings.shopfront);\n\n  if (\n    state.currentPhase === PHASES.SHOP &&\n    state.currentScreen !== SCREENS.MOD &&\n    state.offerings.shopfront.length > 0\n  ) {\n    const shopSection = document.createElement(\"div\");\n    shopSection.innerHTML = `<h3>Shop Inventory</h3>`;\n\n    const list = document.createElement(\"ul\");\n    state.offerings.shopfront.forEach((entry, index) => {\n      if (!entry || !entry.item || !entry.item.name) return;\n\n      const li = document.createElement(\"li\");\n\n      const btn = document.createElement(\"button\");\n      const cost = entry.cost ?? 0;\n      const playerGold = state.campaign.gold ?? 0;\n      const disabled = cost > playerGold;\n\n      btn.textContent = `${entry.type.toUpperCase()}: ${\n        entry.item.name\n      } (${cost}g)`;\n      if (disabled) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      // Bind correct function based on type\n      btn.onclick = () => {\n        switch (entry.type) {\n          case \"card\":\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n            break;\n          case \"potion\":\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n            break;\n          case \"gem\":\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: entry.item },\n                origin: PHASES.SHOP,\n              },\n            });\n          case \"relic\":\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n            break;\n          default:\n            console.warn(\"Unknown shop item type:\", entry.type);\n        }\n      };\n\n      li.appendChild(btn);\n      list.appendChild(li);\n    });\n\n    // Exit Shop Button (for future logic)\n    const exitBtn = document.createElement(\"button\");\n    exitBtn.textContent = \"Exit Shop\";\n    exitBtn.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.PATH_SELECTION,\n      });\n    };\n    shopSection.appendChild(list);\n    shopSection.appendChild(exitBtn);\n    output.appendChild(shopSection);\n  }\n\n  // === Mod Screen ===\n  if (state.currentScreen === SCREENS.MOD && state.modData?.mod) {\n    const modSection = document.createElement(\"div\");\n    modSection.innerHTML = `<h3>Choose a card to modify</h3>`;\n\n    const mod = state.modData.mod;\n    const isGemMod = !!mod.gem;\n\n    state.campaign.deck.forEach((card) => {\n      // If it's a gem mod, skip cards that already have a gem\n      if (isGemMod && card.gem) return;\n\n      const btn = document.createElement(\"button\");\n      btn.textContent =\n        `${card.name} (Cost: ${card.cost})` +\n        (card.upgrades ? ` +${card.upgrades}` : \"\") +\n        (card.gem ? ` [Gem: ${card.gem.name}]` : \"\");\n\n      btn.onclick = () => {\n        dispatch({ type: ACTIONS.APPLY_CARD_MOD, payload: card });\n      };\n\n      modSection.appendChild(btn);\n    });\n\n    output.appendChild(modSection);\n  }\n\n  // === Deck Inspect / Return Button ===\n  //deck inspect button\n  if (\n    (state.currentScreen === SCREENS.MAIN ||\n      state.currentScreen === SCREENS.DECK) &&\n    state.campaign.deck.length > 0\n  ) {\n    const deckBtn = document.createElement(\"button\");\n    deckBtn.textContent =\n      state.currentScreen === SCREENS.MAIN ? \"Inspect Deck\" : \"Return\";\n    deckBtn.onclick = () => {\n      const nextScreen =\n        state.currentScreen === SCREENS.MAIN ? SCREENS.DECK : SCREENS.MAIN;\n      dispatch({\n        type: ACTIONS.SCREEN_CHANGE,\n        payload: nextScreen,\n      });\n    };\n    output.appendChild(deckBtn);\n  }\n  // deck inspect screen\n  if (state.currentScreen === SCREENS.DECK) {\n    const deckView = document.createElement(\"div\");\n    deckView.innerHTML = `<h3>Campaign Deck</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    state.campaign.deck.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    deckView.appendChild(ul);\n    output.appendChild(deckView);\n  }\n\n  // === Always-Visible Potion Belt ===\n  if (state.campaign.potionBelt && state.campaign.potionBelt.length > 0) {\n    const beltSection = document.createElement(\"div\");\n    beltSection.innerHTML = `<h3>Your Potions</h3>`;\n\n    state.campaign.potionBelt.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = potion.name;\n      btn.onclick = () => {\n        // We'll implement this next\n        dispatch({ type: ACTIONS.DRINK_POTION, payload: index });\n      };\n      beltSection.appendChild(btn);\n    });\n\n    output.appendChild(beltSection);\n  }\n}\n// #endregion\n\n// Initialize the game app\nwindow.onload = () => {\n  createGameApp(createInitialState(), gameReducer, render);\n};\n\n// //------------------------------------------------WIP functions------------------------------------------------\n\n// //@@@@@@@@@@@@ rest functions @@@@@@@@@@@@\n// function beginRest(state) {\n//   // heals the player the appropriate amount based on the player's max health.\n//   //checks rest triggers.\n//   //displays the rest phase\n// }\n\n// function checkRestTriggers(state) {\n//   // Checks if the rest has any triggers that need to be applied\n// }\n\n// function endRest(state) {\n//   //closes the rest phase and advances the game state to the next phase.\n// }\n\n// function randomlyUpgradeCards(state, numberOfUpgrades) {\n//   // randomly upgrades a number of cards in the player's deck based on the number of upgrades.\n// }\n\n// //@@@@@@@@@@@@ combat functions @@@@@@@@@@@@\n\n// function generateEnemy(state, path) {\n//   // assigns an enemy to the path based on the path's difficulty and type.\n// }\n\n// function startCombat(state, enemy) {\n//   // initializes the battle phase with the selected enemy.\n//   // sets up the battle stats, including health, deck, hand, etc.\n//   // advances the game state to the battle phase.\n//   // creates a new spellbook (effectively a 'turn')\n//   //checks for any combat start triggers.\n//   console.log(\"Combat started against:\", enemy.name);\n//   state.battle.phase = \"battle\";\n//   state.battle.enemy = enemy;\n// }\n\n// function checkStartCombatTriggers(state) {\n//   // Checks if the enemy has any combat start triggers that need to be applied\n// }\n\n// function newBook(state) {\n//   //effectively a new 'turn'\n//   // populaets a new spellbook, with the appropriate number of blank pages.\n//   // calls 'newHand' to draw a new hand of cards.\n//   // calls 'refillInkpot' to refresh the player's ink.\n// }\n\n// function newHand(state) {\n//   // draws a hand of cards based on the player's hand size.\n// }\n\n// function drawCard(state) {\n//   // draws a card from the player's deck into their hand.\n// }\n\n// function checkDrawCardTriggers(state, card) {\n//   // Checks if the drawn card has any triggers that need to be applied\n// }\n\n// function refillInkpot(state) {\n//   // refreshes the player's ink to the maximum ink amount.\n// }\n\n// function playCard(state, card) {\n//   // triggered by clicking on a card in hand.\n//   // plays a card from the player's hand, applying its effects.\n//   // deducts the card's ink cost from ink.\n//   // determines where the card moves to: spellbook, graveyard, exile, or into the deck.\n//   // checks for any play card triggers.\n//   // calls \"resolveCardEffects\" to apply the card's effects.\n//   // note: If there's no space in the spellbook or the player has insufficient ink, the card cannot be played and will be displayed as grey and unselectable.\n// }\n\n// function checkPlayCardTriggers(state, card) {\n//   // Checks if the played card has any triggers that need to be applied\n//   // This could include effects that trigger on play, such as drawing cards, gaining gold, etc.\n// }\n\n// function castSpellbook(state) {\n//   // called when the player clicks the \"cast spellbook\" button, or when the spellbook is full.\n//   // casts the spellbook, sequentially casting each of the cards in the spellbook.\n//   // checks for any spellbook triggers.\n//   // checks to see if combat has ended.\n//   // clears the spellbook after casting, moving all its cards to the graveyard.\n//   // discards the player's hand to the graveyard.\n//   // calls the 'new book' function if combat hasn't ended.\n// }\n\n// function checkCastSpellbookTriggers(state) {\n//   // Checks if there are any triggers that need to be applied when casting the spellbook.\n// }\n\n// function discardCard(state, card) {\n//   // discards a card from the player's hand to the graveyard.\n// }\n\n// function checkDiscardCardTriggers(state, card) {\n//   // Checks if the discarded card has any triggers that need to be applied\n// }\n\n// function castSpell(state, spell) {\n//   // applies the effects of a spell card from the spellbook.\n//   // checks for any spell triggers.\n//   // moves the spell card to the appropriate zone after casting.\n// }\n\n// function checkCastSpellTriggers(state, spell) {\n//   // Checks if the spell has any triggers that need to be applied when a specific spell is cast.\n// }\n\n// function checkCombatEnd(state) {\n//   // checks if combat has ended.\n// }\n\n// function combatEnd(state) {\n//   // Handles the end phase after combat, such as displaying the end screen, player losing HP, allowing the player to choose rewards, or advancing to the next path.\n//   // also cleans up the battle state, such as clearing the spellbook, hand, and graveyard.\n// }\n\n// function checkCombatEndTriggers(state) {\n//   // handles combat end triggers\n// }\n\n// function openCombatEndScreen(state) {\n//   // opens the combat end screen, showing results, rewards, etc.\n// }\n\n// function populateCombatRewards(state) {\n//   // populates the combat rewards based on the combat results.\n//   // generates a list of rewards, such as cards, relics, potions, etc.\n//   // ensures that the rewards are appropriate for the difficulty and type of combat.\n//   // returns the populated rewards list.\n// }\n\n// function checkPopulateCombatRewardsTriggers(state) {\n//   // Checks if there are any triggers that modify the combat rewards, such as relics or cards.\n// }\n\n// function pickCombatReward(state, reward) {\n//   // handles the selection of a reward after combat.\n//   // triggered by the player clicking on a reward in the combat end screen.\n// }\n\n// function closeCombatEndScreen(state) {\n//   // closes the combat end screen and advances the game phase to the next phase.\n// }\n\n// //@@@@@@@@@@@@ death and victory functions @@@@@@@@@@@@\n// function checkDeath(state) {\n//   //checks if the player has died, and if so, advances to the death phase.\n// }\n// function death(state) {\n//   // Handles the death phase, such as displaying a death screen, allowing the player to restart or return to the main menu.\n// }\n// function victory(state) {\n//   // Handles the victory phase, such as displaying a victory screen, allowing the player to continue to the next phase or return to the main menu.\n// }\n\n// // Render function - placeholder for UI rendering logic\n"]}