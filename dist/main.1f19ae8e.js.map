{"version":3,"sources":["main.js"],"names":["_Object$freeze2","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","r","e","t","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","a","u","call","next","return","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","from","_arrayLikeToArray","ownKeys","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","toString","slice","name","test","l","i","_toPropertyKey","configurable","writable","_toPrimitive","toPrimitive","String","Number","DIFFICULTIES","freeze","EASY","MEDIUM","HARD","TRIGGER_EVENTS","CARD_PICKUP","RELIC_PICKUP","POTION_PICKUP","DRINK_POTION","ASSIGN_SHOP_PRICES","REST","PATHS","EASY_FIGHT","MEDIUM_FIGHT","HARD_FIGHT","SHOP","RELIC_OFFERING","GEM_OFFERING","CARD_OFFERING","ENCHANT","POTION_OFFERING","HOARD","PURGE","TRANSMUTE","SCREENS","MAIN","DECK","RELICS","SETTINGS","MOD","RARITIES","BASIC_POLY","BASIC_MONO","COMMON","UNCOMMON","RARE","MYTHIC","LEGENDARY","PHASES","MAIN_MENU","DIFFICULTY_SELECTION","MYTHIC_RELIC_OFFERING","COMBAT_END","SOCKET_GEM","PATH_SELECTION","COMBAT","DEATH","VICTORY","ACTIONS","NEW_GAME","SET_DIFFICULTY","GENERATE_STARTER_DECK","APPLY_DIFFICULTY_MODIFIERS","ADVANCE_PHASE","LOG_MESSAGE","CREATE_CARD_INSTANCE","POPULATE_RELIC_OFFERINGS","PICK_RELIC","POPULATE_PATH_OFFERINGS","PICK_PATH","POPULATE_CARD_OFFERINGS","PICK_CARD","POPULATE_POTION_OFFERINGS","PICK_POTION","POPULATE_GEM_OFFERINGS","OPEN_MOD_SCREEN","APPLY_CARD_MOD","SCREEN_CHANGE","POPULATE_SHOPFRONT","INCREASE_BASE_BUNNIES","GAIN_GOLD","PRACTICE_WANDWORK","LOOT_HOARD","CARD_TYPES","INSTANT","SPELL","REST_OPTIONS","HEAL","PRACTICE","difficultyModifiersMap","maxHealthModifier","goldModifier","basicCardCountModifier","luckModifier","shopPriceMultiplierModifier","restHealthRestoreModifier","pathMap","rarity","isFight","leadsTo","cardList","cardType","cost","bunnyAdd","bunnyMult","goldAdd","permanentlyUpgradeRandomCardsInDeck","cardDraw","inkAdd","healthCost","exile","permanentlyUpgradeRandomCardsInHand","gemList","relicList","triggers","bonusPages","bonusBaseBunnies","bonusGold","bonusHealthOnCombatVictory","bonusHealth","bonusBooks","bonusInk","bunnyAddOnCast","goldAddOnCombatVictory","upgradeCard","upgradePotion","healPlayer","shopPriceMultiplier","potionList","healthRestore","enemyList","level","difficulty","health","goldRewardChance","gemRewardChance","potionRewardChance","relicRewardChance","shuffle","array","j","Math","floor","random","_ref","weightedRandomChoice","weightedMap","entries","totalWeight","reduce","sum","_ref2","_ref3","_","weight","cumulative","_i","_entries","_entries$_i","key","screenChange","state","targetScreen","currentScreen","log","concat","assignShopPrices","globalMultiplier","basePrices","card","potion","gem","relic","rarityMultipliers","common","uncommon","rare","mythic","legendary","updatedShopfront","offerings","shopfront","map","entry","_item$rarity","_item$rarity$toLowerC","type","item","basePrice","upgrades","upgradeCost","includes","toLowerCase","rarityMultiplier","round","generateStarterDeck","campaign","console","error","deck","basicMonoCards","_iterator","_step","createCardInstance","err","basicPolyCards","_iterator2","_step2","extraCount","generateRandomCard","applyDifficultyModifiers","modifiers","newCampaign","gold","basicCardCount","luck","restHealthRestore","maxHealth","advancePhaseTo","phaseAdvancedTo","values","currentPhase","handlePhaseTransitions","phase","populatePathOfferings","populateCardOfferings","populateRelicOfferings","populatePotionOfferings","populateGemOfferings","populateShopfront","pickPath","index","_state$level","paths","chosenPath","pathKey","path","pathData","newCards","_loop","some","existing","_ret","cards","selectedPotions","usedNames","Set","attempts","generateRandomPotion","has","add","warn","potions","undefined","selected","maxRelics","_loop2","generateRandomRelic","relics","selectedGems","generateRandomGem","gems","_state$campaign$deck","fightWeights","fightPathKey","fightPath","nonFightPaths","_ref4","_ref5","data","_ref6","_ref7","allCardsSocketed","every","filteredNonFightPaths","pathObj","rarityWeights","getLuckAdjustedRarityWeights","chosenRarities","chosenPaths","usedPaths","_loop3","_chosenRarities","_i3","candidates","p","pick","remainingPool","idx","splice","pickCard","sourceArrayName","combatRewards","sourceArray","pickedCard","updatedState","charged","chargeGoldCost","updatedDeck","updatedOfferings","newState","triggerResult","checkRelicTriggers","payload","trashPile","pickRelic","pickedRelic","relicCost","chargedState","relicBelt","isOfferingPhase","triggeredState","pickPotion","pickedPotion","triggeredPotion","result","updatedPotionBelt","potionBelt","drinkPotion","heal","newPotionBelt","newTrash","openModScreen","mod","_state$offerings$gems","originPhase","validKeys","chosenGemName","discardedGems","g","_mod$gem","modData","origin","increaseBaseBunnies","amount","newAmount","max","baseBunnies","applyModToCard","_state$modData","_state$modData2","cardIndex","findIndex","c","modifiedCard","upgrade","socketCardWithGem","purge","transmute","transmuteCard","nextPhase","shopfrontTypes","previousItems","discardedItems","updatedTrash","guaranteedTypes","weights","weightedPool","flatMap","_ref8","_ref9","fill","safetyCounter","chosen","generatedItems","usedKeys","_i4","_shopfrontTypes","attempt","gainGold","newGold","practiceWandwork","lootHoard","_state$defeatedEnemie","baseGold","levelBonus","enemiesDefeated","defeatedEnemies","enemyBonus","luckBonus","totalGold","hoardsLooted","rest","amountToHeal","currentHealth","healedAmount","msg","startsWith","createInitialState","ink","books","pages","handSize","enemy","battle","hand","graveyard","spellbook","maxInk","maxBooks","bunnies","maxPages","difficulties","restOptions","selectDifficultyAndBeginGame","dispatch","createGameApp","initialState","reducer","renderFn","action","cardName","found","find","createRelicInstance","relicName","createPotionInstance","potionName","createGemInstance","gemName","_ref0","_ref0$rarity","ownedRelics","GOLD_BAG","filtered","_state$defeatedEnemie2","_ref1","_ref1$rarity","_ref1$upgrades","_ref1$gem","finalRarity","upgradeWeights","finalUpgrades","defeatedCount","maxUpgrades","min","cappedUpgrades","_ref10","_ref10$rarity","_ref10$upgrades","basePotion","_ref11","_ref11$rarity","fallbackGem","chosenGem","upgradedCard","upgradable","replace","upgradedPotion","socketedCard","ceil","context","triggerEvent","_iterator3","_step3","_loop4","_relic$triggers","effect","newHealth","newMaxHealth","adjustedCost","numToUpgrade","shuffled","sort","toUpgrade","upgraded","upgradedDeck","indexOf","current","alternatives","unchoosableByTransmute","newBase","purgeCard","gameReducer","_action$payload","newCard","potionIndex","potionToDrink","render","_state$level2","_state$modData3","output","document","getElementById","createElement","id","body","appendChild","innerHTML","renderModPhaseEntry","label","modKey","modBtn","textContent","style","fontSize","padding","onclick","disabled","info","join","button","btn","relicSection","pathSection","cardSection","potionSection","gemSection","shopSection","list","_entry$item$cost","_entry$item","_state$gold","li","playerGold","toUpperCase","opacity","cursor","exitBtn","modSection","isGemMod","restBtn","practiceBtn","deckBtn","nextScreen","deckView","ul","beltSection","window","onload"],"mappings":"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AAW,EAAEK,MAAM,CAAC;AAC1D,CAAC;;AAED;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n//note to self: most functions that create a new gamestate (reducer actions) will require:\n\n// 1) the function itself\n// 2) adding to the action enum.\n// 3) adding to the reducer switch statement\n// 4) adding to the render function.\n// 5) possibly adding to the phase transition handler.\n\n//#region enums\nconst DIFFICULTIES = Object.freeze({\n  EASY: \"easy\",\n  MEDIUM: \"medium\",\n  HARD: \"hard\",\n});\nconst TRIGGER_EVENTS = Object.freeze({\n  CARD_PICKUP: \"CARD_PICKUP\",\n  RELIC_PICKUP: \"RELIC_PICKUP\",\n  POTION_PICKUP: \"POTION_PICKUP\",\n  DRINK_POTION: \"DRINK_POTION\",\n  ASSIGN_SHOP_PRICES: \"ASSIGN_SHOP_PRICES\",\n  REST: \"REST\",\n});\nconst PATHS = Object.freeze({\n  EASY_FIGHT: \"easy fight\",\n  MEDIUM_FIGHT: \"medium fight\",\n  HARD_FIGHT: \"hard fight\",\n  REST: \"rest\",\n  SHOP: \"shop\",\n  RELIC_OFFERING: \"relicOffering\",\n  GEM_OFFERING: \"gemOffering\",\n  CARD_OFFERING: \"cardOffering\",\n  ENCHANT: \"ENCHANT\",\n  POTION_OFFERING: \"potionOffering\",\n  HOARD: \"hoard\",\n  PURGE: \"purge\",\n  TRANSMUTE: \"transmute\",\n});\nconst SCREENS = Object.freeze({\n  MAIN: \"main view\",\n  DECK: \"inspect deck\",\n  RELICS: \"inspect relic belt\",\n  SETTINGS: \"settings\",\n  MOD: \"modscreen\",\n});\nconst RARITIES = Object.freeze({\n  BASIC_POLY: \"basic-poly\", // basic poly cards, several of which go in the starter deck.\n  BASIC_MONO: \"basic-mono\", // basic mono cards, only one goes in the starter deck.\n  COMMON: \"common\", // common cards\n  UNCOMMON: \"uncommon\", // uncommon cards\n  RARE: \"rare\", // rare cards\n  MYTHIC: \"mythic\", // mythic cards\n  LEGENDARY: \"legendary\", // legendary cards\n});\nconst PHASES = Object.freeze({\n  MAIN_MENU: \"main menu\",\n  DIFFICULTY_SELECTION: \"difficulty selection\",\n  MYTHIC_RELIC_OFFERING: \"mythic relic offering\",\n  RELIC_OFFERING: \"relic offering\",\n  CARD_OFFERING: \"card offering\",\n  GEM_OFFERING: \"gem offering\",\n  POTION_OFFERING: \"potion offering\",\n  COMBAT_END: \"combat end\",\n  SOCKET_GEM: \"socket gem\",\n  SHOP: \"shop\",\n  PATH_SELECTION: \"path selection\",\n  REST: \"rest\",\n  ENCHANT: \"ENCHANT\",\n  TRANSMUTE: \"transmute\",\n  COMBAT: \"combat\",\n  DEATH: \"death\",\n  VICTORY: \"victory\",\n  PURGE: \"purge\",\n  HOARD: \"hoard\",\n});\nconst ACTIONS = Object.freeze({\n  NEW_GAME: \"NEW_GAME\",\n  SET_DIFFICULTY: \"SET_DIFFICULTY\",\n  GENERATE_STARTER_DECK: \"GENERATE_STARTER_DECK\",\n  APPLY_DIFFICULTY_MODIFIERS: \"APPLY_DIFFICULTY_MODIFIERS\",\n  ADVANCE_PHASE: \"ADVANCE_PHASE\",\n  LOG_MESSAGE: \"LOG_MESSAGE\",\n  CREATE_CARD_INSTANCE: \"CREATE_CARD_INSTANCE\",\n  POPULATE_RELIC_OFFERINGS: \"POPULATE_RELIC_OFFERINGS\",\n  PICK_RELIC: \"PICK_RELIC\",\n  POPULATE_PATH_OFFERINGS: \"POPULATE_PATH_OFFERINGS\",\n  PICK_PATH: \"PICK_PATH\",\n  POPULATE_CARD_OFFERINGS: \"POPULATE_CARD_OFFERINGS\",\n  PICK_CARD: \"PICK_CARD\",\n  POPULATE_POTION_OFFERINGS: \"POPULATE_POTION_OFFERINGS\",\n  PICK_POTION: \"PICK_POTION\",\n  DRINK_POTION: \"DRINK_POTION\",\n  POPULATE_GEM_OFFERINGS: \"POPULATE_GEM_OFFERINGS\",\n  OPEN_MOD_SCREEN: \"OPEN_MOD_SCREEN\",\n  APPLY_CARD_MOD: \"APPLY_CARD_MOD\",\n  SCREEN_CHANGE: \"SCREEN_CHANGE\",\n  POPULATE_SHOPFRONT: \"POPULATE_SHOPFRONT\",\n  INCREASE_BASE_BUNNIES: \"INCREASE_BASE_BUNNIES\",\n  GAIN_GOLD: \"GAIN_GOLD\",\n  PRACTICE_WANDWORK: \"PRACTICE_WANDWORK\",\n  LOOT_HOARD: \"LOOT_HOARD\",\n  REST: \"REST\",\n});\nconst CARD_TYPES = Object.freeze({\n  INSTANT: \"instant\", // resolves immediately when played, does not go to the spellbook.\n  SPELL: \"spell\", // goes to the spellbook when played, resolves when the spellbook is cast.\n});\nconst REST_OPTIONS = Object.freeze({\n  HEAL: \"heal\",\n  PRACTICE: \"practice\",\n  ENCHANT: \"enchant\",\n});\n//#endregion enums\n//#region data maps\nconst difficultyModifiersMap = Object.freeze({\n  [DIFFICULTIES.EASY]: {\n    maxHealthModifier: 100,\n    goldModifier: 20,\n    basicCardCountModifier: 5,\n    luckModifier: 2,\n    shopPriceMultiplierModifier: -0.2, // 20% cheaper shop prices\n    restHealthRestoreModifier: 30, // heal 30 health when resting\n  },\n  [DIFFICULTIES.MEDIUM]: {\n    maxHealthModifier: 75,\n    goldModifier: 10,\n    basicCardCountModifier: 8,\n    luckModifier: 1,\n    shopPriceMultiplierModifier: 0, // normal shop prices\n    restHealthRestoreModifier: 25, // heal 20 health when resting\n  },\n  [DIFFICULTIES.HARD]: {\n    maxHealthModifier: 50,\n    goldModifier: 0,\n    basicCardCountModifier: 11,\n    luckModifier: 0,\n    shopPriceMultiplierModifier: 0.2, // 20% more expensive shop prices\n    restHealthRestoreModifier: 20, // heal 20 health when resting\n  },\n});\nconst pathMap = Object.freeze({\n  [PATHS.EASY_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n  },\n  [PATHS.MEDIUM_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n  },\n  [PATHS.HARD_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n  },\n  [PATHS.REST]: { rarity: RARITIES.RARE, leadsTo: PHASES.REST },\n  [PATHS.SHOP]: { rarity: RARITIES.RARE, leadsTo: PHASES.SHOP },\n  [PATHS.RELIC_OFFERING]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.RELIC_OFFERING,\n  },\n  [PATHS.GEM_OFFERING]: { rarity: RARITIES.RARE, leadsTo: PHASES.GEM_OFFERING },\n  [PATHS.CARD_OFFERING]: {\n    rarity: RARITIES.UNCOMMON,\n    leadsTo: PHASES.CARD_OFFERING,\n  },\n  [PATHS.ENCHANT]: { rarity: RARITIES.RARE, leadsTo: PHASES.ENCHANT },\n  [PATHS.POTION_OFFERING]: {\n    rarity: RARITIES.RARE,\n    leadsTo: PHASES.POTION_OFFERING,\n  },\n  [PATHS.HOARD]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.HOARD,\n  },\n  [PATHS.PURGE]: { rarity: RARITIES.RARE, leadsTo: PHASES.PURGE },\n  [PATHS.TRANSMUTE]: { rarity: RARITIES.RARE, leadsTo: PHASES.TRANSMUTE },\n});\n\n//#endregion data maps\n//#region data arrays of game objects\nconst cardList = [\n  {\n    name: \"Bunnymancy\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    cost: 1,\n    bunnyAdd: 5,\n  },\n  {\n    name: \"Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    cost: 2,\n    bunnyMult: 2,\n  },\n  {\n    name: \"Fairy Gold\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    cost: 1,\n    goldAdd: 3,\n  },\n  {\n    name: \"Enchant\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    cost: 2,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ponder\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    cost: 1,\n    cardDraw: 3,\n  },\n  {\n    name: \"Inkswell\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    cost: 1,\n    inkAdd: 2,\n  },\n  {\n    name: \"Cloudfluff Conjuration\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 0,\n    bunnyAdd: 4,\n  },\n  {\n    name: \"Cloudfluff Boon\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    cost: 0,\n    bunnyAdd: 2,\n  },\n  {\n    name: \"Midas Touch\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    goldAdd: 12,\n  },\n  {\n    name: \"Enchanted Twilight\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    permanentlyUpgradeRandomCardsInDeck: 2,\n  },\n  {\n    name: \"Dusk Lotus\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    cost: 0,\n    inkAdd: 3,\n    healthCost: 3,\n    exile: true, // Exile this card after use\n  },\n  {\n    name: \"Weasel's Bargain\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.UNCOMMON,\n    cost: 0,\n    healthCost: 2,\n    goldAdd: 6,\n  },\n  {\n    name: \"Carrot Festival\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 2,\n    bunnyAdd: 14,\n  },\n  {\n    name: \"Mega Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    cost: 2,\n    bunnyMult: 4,\n  },\n  {\n    name: \"Empower\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    cost: 1,\n    permanentlyUpgradeRandomCardsInHand: 1,\n  },\n  {\n    name: \"Mass Empower\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    cost: 3,\n    permanentlyUpgradeRandomCardsInHand: 7,\n  },\n  {\n    name: \"Wisdom of the Warrens\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    cost: 0,\n    cardDraw: 1,\n  },\n];\nconst gemList = [\n  {\n    name: \"Amethyst\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 2,\n  },\n  {\n    name: \"Lapis Lazuli\",\n    rarity: RARITIES.COMMON,\n    bunnyMult: 1.5,\n  },\n  {\n    name: \"Sapphire\",\n    rarity: RARITIES.UNCOMMON,\n    cardDraw: 1,\n  },\n  {\n    name: \"Topaz\",\n    rarity: RARITIES.RARE,\n    goldAdd: 5,\n  },\n  {\n    name: \"Ruby\",\n    rarity: RARITIES.MYTHIC,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n];\nconst relicList = [\n  {\n    name: \"Magic Scroll\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusPages: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Wand\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBaseBunnies: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Egg\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusGold: 100,\n      },\n    },\n  },\n  {\n    name: \"Healing Stone\",\n    rarity: RARITIES.COMMON,\n    // not a pickup trigger — save for future COMBAT_VICTORY event\n    bonusHealthOnCombatVictory: 10,\n  },\n  {\n    name: \"Protective Amulet\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHealth: 10,\n      },\n    },\n  },\n  {\n    name: \"Magic Encyclopedia\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Inkpot\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Wand\",\n    rarity: RARITIES.MYTHIC,\n    // not triggered on pickup — belongs to CARD_CAST or similar\n    bunnyAddOnCast: 5,\n  },\n  {\n    name: \"Magic Keys\",\n    rarity: RARITIES.MYTHIC,\n    // not a pickup effect — save for COMBAT_VICTORY\n    goldAddOnCombatVictory: 10,\n  },\n  {\n    name: \"Magic Feather\",\n    rarity: RARITIES.LEGENDARY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 2,\n      },\n    },\n  },\n  {\n    name: \"Gold Bag\",\n    rarity: RARITIES.BASIC_POLY,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusGold: 25,\n      },\n    },\n  },\n  {\n    name: \"Whetstone\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        upgradeCard: true,\n      },\n    },\n  },\n  {\n    name: \"Witch's Cauldron\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.POTION_PICKUP]: {\n        upgradePotion: true,\n      },\n    },\n  },\n  {\n    name: \"Crystal Vial\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.DRINK_POTION]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Discount Voucher\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.ASSIGN_SHOP_PRICES]: {\n        shopPriceMultiplier: 0.8, // 20% cheaper shop prices\n      },\n    },\n  },\n  {\n    name: \"Sleeping Bag\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        healPlayer: 20, // heal 20 health when resting\n      },\n    },\n  },\n  {\n    name: \"Toothfairy's Charm\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        goldAdd: 10, // gain 10 gold when resting\n      },\n    },\n  },\n  {\n    name: \"Planetarium Mobile\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.REST]: {\n        permanentlyUpgradeRandomCardsInDeck: 1, // upgrade a random card in the deck when resting\n      },\n    },\n  },\n];\nconst potionList = [\n  {\n    name: \"Lesser Healing Potion\",\n    rarity: RARITIES.COMMON,\n    healthRestore: 10,\n  },\n  {\n    name: \"Healing Potion\",\n    rarity: RARITIES.UNCOMMON,\n    healthRestore: 15,\n  },\n  {\n    name: \"Greater Healing Potion\",\n    rarity: RARITIES.RARE,\n    healthRestore: 20,\n  },\n  {\n    name: \"Elixir of Life\",\n    rarity: RARITIES.MYTHIC,\n    healthRestore: 50,\n  },\n];\nconst enemyList = [\n  {\n    name: \"Lettuce Goblin\",\n    level: 1,\n    difficulty: DIFFICULTIES.EASY,\n    health: 10,\n    goldRewardChance: 0.5,\n    gemRewardChance: 0.1,\n    potionRewardChance: 0.1,\n    relicRewardChance: 0.01,\n  },\n];\n//#endregion\n//#region utility functions\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\nfunction weightedRandomChoice(weightedMap) {\n  const entries = Object.entries(weightedMap);\n  const totalWeight = entries.reduce((sum, [_, weight]) => sum + weight, 0);\n  const r = Math.random() * totalWeight;\n  let cumulative = 0;\n\n  for (const [key, weight] of entries) {\n    cumulative += weight;\n    if (r <= cumulative) return key;\n  }\n}\nfunction screenChange(state, targetScreen) {\n  return {\n    ...state,\n    currentScreen: targetScreen,\n    log: [`Screen changed to ${targetScreen}.`, ...state.log],\n  };\n}\nfunction assignShopPrices(state) {\n  const globalMultiplier = state.shopPriceMultiplier || 1;\n\n  const basePrices = {\n    card: 10,\n    potion: 20,\n    gem: 30,\n    relic: 100,\n  };\n\n  const rarityMultipliers = {\n    common: 1,\n    uncommon: 1.2,\n    rare: 1.4,\n    mythic: 1.6,\n    legendary: 2,\n  };\n\n  const updatedShopfront = state.offerings.shopfront.map((entry) => {\n    const { type, item } = entry;\n\n    const basePrice = basePrices[type] || 0;\n    const upgrades = item.upgrades || 0;\n    const upgradeCost = [\"card\", \"potion\"].includes(type) ? upgrades * 5 : 0;\n\n    const rarity = item.rarity?.toLowerCase?.() || \"common\";\n    const rarityMultiplier = rarityMultipliers[rarity] || 1;\n\n    const cost = Math.round(\n      (basePrice + upgradeCost) * rarityMultiplier * globalMultiplier\n    );\n\n    return {\n      ...entry,\n      item: {\n        ...item,\n        cost,\n      },\n    };\n  });\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: updatedShopfront,\n    },\n    log: [`Assigned prices to shop items.`, ...state.log],\n  };\n}\n//#endregion\n//#region reducer-action handlers\nfunction generateStarterDeck(state) {\n  const difficulty = state.campaign.difficulty;\n  if (!difficulty) {\n    console.error(\"Cannot generate starter deck without difficulty set.\");\n    return state;\n  }\n\n  const deck = [];\n\n  // 1. Add one of each basic mono card\n  const basicMonoCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_MONO\n  );\n  for (const card of basicMonoCards) {\n    deck.push(createCardInstance(card.name));\n  }\n\n  // 2. Add 3 of each basic poly card\n  const basicPolyCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_POLY\n  );\n  for (const card of basicPolyCards) {\n    for (let i = 0; i < 3; i++) {\n      deck.push(createCardInstance(card.name));\n    }\n  }\n\n  // 3. Add additional random basic poly cards based on difficulty\n  const extraCount = difficultyModifiersMap[difficulty].basicCardCountModifier;\n  for (let i = 0; i < extraCount; i++) {\n    const card = generateRandomCard(state, { rarity: RARITIES.BASIC_POLY });\n    if (card) deck.push(card);\n  }\n\n  // 4. Shuffle the deck\n  shuffle(deck);\n\n  // 5. Return new state with updated campaign.deck\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck,\n    },\n    log: [`Generated starter deck (${deck.length} cards).`, ...state.log],\n  };\n}\nfunction applyDifficultyModifiers(state) {\n  const difficulty = state.campaign.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\"Invalid or missing difficulty:\", difficulty);\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n\n  const newCampaign = {\n    ...state.campaign,\n    gold: state.gold + modifiers.goldModifier,\n    basicCardCount:\n      state.campaign.basicCardCount + modifiers.basicCardCountModifier,\n    luck: (state.luck || 0) + (modifiers.luckModifier || 0),\n    shopPriceMultiplier:\n      (state.shopPriceMultiplier || 1) +\n      (modifiers.shopPriceMultiplierModifier || 0),\n    restHealthRestore:\n      (state.restHealthRestore || 0) +\n      (modifiers.restHealthRestoreModifier || 0),\n  };\n\n  return {\n    ...state,\n    maxHealth: state.maxHealth + modifiers.maxHealthModifier,\n    health: state.health + modifiers.maxHealthModifier,\n    campaign: newCampaign,\n    log: [`Applied difficulty modifiers for ${difficulty}.`, ...state.log],\n  };\n}\nfunction advancePhaseTo(state, phaseAdvancedTo) {\n  if (!Object.values(PHASES).includes(phaseAdvancedTo)) {\n    console.error(\"Invalid phase passed to advancePhaseTo:\", phaseAdvancedTo);\n    return state;\n  }\n\n  return {\n    ...state,\n    currentPhase: phaseAdvancedTo,\n    log: [`Advanced to phase: ${phaseAdvancedTo}`, ...state.log],\n  };\n}\nfunction handlePhaseTransitions(state) {\n  const phase = state.currentPhase;\n\n  switch (phase) {\n    case PHASES.DIFFICULTY_SELECTION:\n      return {\n        ...state,\n        log: [\"Choose your difficulty.\", ...state.log],\n      };\n\n    case PHASES.PATH_SELECTION:\n      console.log(\">> Entering PHASES.PATH_SELECTION\");\n      return populatePathOfferings(state);\n\n    case PHASES.CARD_OFFERING:\n      console.log(\">> Entering PHASES.CARD_OFFERING\");\n      return populateCardOfferings(state);\n\n    case PHASES.MYTHIC_RELIC_OFFERING:\n      console.log(\">> Entering PHASES.MYTHIC_RELIC_OFFERING .\");\n      return populateRelicOfferings(state, RARITIES.MYTHIC);\n\n    case PHASES.RELIC_OFFERING:\n      console.log(\">> Entering PHASES.RELIC_OFFERING.\");\n      return populateRelicOfferings(state);\n\n    case PHASES.POTION_OFFERING:\n      console.log(\">> Entering POTION_OFFERING phase.\");\n      return populatePotionOfferings(state);\n\n    case PHASES.GEM_OFFERING:\n      console.log(\">> Entering GEM_OFFERING phase.\");\n      return populateGemOfferings(state);\n\n    case PHASES.SHOP:\n      return populateShopfront(state);\n\n    default:\n      return state;\n  }\n}\nfunction pickPath(state, index) {\n  const paths = state.offerings.paths;\n\n  if (!paths || index < 0 || index >= paths.length) {\n    console.error(\"Invalid path index:\", index);\n    return state;\n  }\n\n  const chosenPath = paths[index];\n  const pathKey = chosenPath.path;\n  const pathData = pathMap[pathKey];\n\n  if (!pathData || !pathData.leadsTo) {\n    console.error(\"Path has no destination phase:\", pathKey);\n    return state;\n  }\n\n  return handlePhaseTransitions({\n    ...state,\n    level: (state.level ?? 0) + 1,\n    currentPhase: pathData.leadsTo,\n    log: [`Chose path: ${pathKey}`, ...state.log],\n    offerings: {\n      ...state.offerings,\n      paths: [], // clear after pick\n    },\n  });\n}\nfunction populateCardOfferings(state) {\n  const newCards = [];\n\n  while (newCards.length < 3) {\n    const card = generateRandomCard(state);\n    if (!card) continue;\n    if (newCards.some((existing) => existing.name === card.name)) continue;\n    newCards.push(card);\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      cards: newCards,\n    },\n    log: [`Populated card offerings.`, ...state.log],\n  };\n}\nfunction populatePotionOfferings(state) {\n  const selectedPotions = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedPotions.length < 3 && attempts < 50) {\n    attempts++;\n\n    const potion = generateRandomPotion(state);\n    if (!potion) continue;\n\n    if (usedNames.has(potion.name)) continue;\n\n    selectedPotions.push(potion);\n    usedNames.add(potion.name);\n  }\n\n  if (selectedPotions.length < 3) {\n    console.warn(\"Not enough unique potions to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      potions: selectedPotions,\n    },\n    log: [`Populated potion offerings.`, ...state.log],\n  };\n}\nfunction populateRelicOfferings(state, rarity = null) {\n  const selected = [];\n  const maxRelics = 3;\n\n  while (selected.length < maxRelics) {\n    const relic = generateRandomRelic(state, { rarity });\n\n    // Ensure uniqueness by name\n    if (selected.some((r) => r.name === relic.name)) continue;\n\n    selected.push(relic);\n  }\n\n  console.log(\"Selected relic offerings:\", selected);\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      relics: selected,\n    },\n    log: [`Populated relic offerings.`, ...state.log],\n  };\n}\nfunction populateGemOfferings(state) {\n  const selectedGems = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedGems.length < 3 && attempts < 50) {\n    attempts++;\n\n    const gem = generateRandomGem(state);\n    if (!gem) continue;\n\n    if (usedNames.has(gem.name)) continue;\n\n    selectedGems.push(gem);\n    usedNames.add(gem.name);\n  }\n\n  if (selectedGems.length < 3) {\n    console.warn(\"Not enough unique gems to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      gems: selectedGems,\n    },\n    log: [`Populated gem offerings.`, ...state.log],\n  };\n}\nfunction populatePathOfferings(state) {\n  const luck = state.luck || 0;\n\n  // Step 1: Pick the fight path\n  const fightWeights = {\n    [PATHS.EASY_FIGHT]: 3,\n    [PATHS.MEDIUM_FIGHT]: 2,\n    [PATHS.HARD_FIGHT]: 1,\n  };\n  const fightPathKey = weightedRandomChoice(fightWeights);\n  const fightPath = {\n    path: fightPathKey,\n    ...pathMap[fightPathKey],\n  };\n\n  // Step 2: Create a pool of available non-fight paths\n  const nonFightPaths = Object.entries(pathMap)\n    .filter(([key, data]) => !data.isFight && key !== fightPathKey)\n    .map(([path, data]) => ({ path, ...data }));\n\n  // Step 2a: If all cards are socketed, exclude GEM_OFFERING\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null);\n\n  const filteredNonFightPaths = nonFightPaths.filter((pathObj) => {\n    if (pathObj.path === PATHS.GEM_OFFERING && allCardsSocketed) return false;\n    return true;\n  });\n  // Step 3: Pick two rarities based on player luck\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const chosenRarities = [\n    weightedRandomChoice(rarityWeights),\n    weightedRandomChoice(rarityWeights),\n  ];\n\n  // Step 4: For each rarity, pick a path from the pool\n  const chosenPaths = [];\n  const usedPaths = new Set([fightPathKey]);\n\n  for (const rarity of chosenRarities) {\n    const candidates = filteredNonFightPaths.filter(\n      (p) => p.rarity === rarity && !usedPaths.has(p.path)\n    );\n    if (candidates.length > 0) {\n      const pick = candidates[Math.floor(Math.random() * candidates.length)];\n      usedPaths.add(pick.path);\n      chosenPaths.push(pick);\n    }\n  }\n\n  // Step 5: Fallback – if fewer than 2 non-fight paths were picked, fill from remaining\n  const remainingPool = filteredNonFightPaths.filter(\n    (p) => !usedPaths.has(p.path)\n  );\n  while (chosenPaths.length < 2 && remainingPool.length > 0) {\n    const idx = Math.floor(Math.random() * remainingPool.length);\n    const pick = remainingPool.splice(idx, 1)[0];\n    usedPaths.add(pick.path);\n    chosenPaths.push(pick);\n  }\n\n  const paths = [fightPath, ...chosenPaths];\n  console.log(\"Populated path options:\", paths);\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      paths,\n    },\n    log: [`Populated path options.`, ...state.log],\n  };\n}\nfunction pickCard(state, index) {\n  const phase = state.currentPhase;\n  const offerings = state.offerings;\n  const campaign = state.campaign;\n\n  let sourceArrayName = null;\n\n  if (offerings.cards && index < offerings.cards.length) {\n    sourceArrayName = \"cards\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid card index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Fix: unwrap the card object if we're in shopfront\n  const pickedCard = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedCard) {\n    console.error(\"No card found at index:\", index);\n    return state;\n  }\n\n  // === 2. If in shop, charge gold ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const cost = entry.cost || 20;\n    const charged = chargeGoldCost(state, cost, \"card\");\n    if (charged === state) {\n      return state; // not enough gold\n    }\n    updatedState = charged;\n  }\n\n  // === 3. Add to campaign deck ===\n  const updatedDeck = [...updatedState.campaign.deck, pickedCard];\n\n  // === 4. Remove from source array ===\n  const updatedOfferings = {\n    ...updatedState.offerings,\n    [sourceArrayName]: sourceArray.filter((_, i) => i !== index),\n  };\n\n  // === 5. Apply triggers\n  let newState = {\n    ...updatedState,\n    campaign: {\n      ...updatedState.campaign,\n      deck: updatedDeck,\n    },\n    offerings: updatedOfferings,\n    log: [`Picked card: ${pickedCard.name}`, ...updatedState.log],\n  };\n\n  const triggerResult = checkRelicTriggers(\n    newState,\n    TRIGGER_EVENTS.CARD_PICKUP,\n    {\n      payload: pickedCard,\n    }\n  );\n\n  newState = triggerResult;\n\n  // === 6. Advance phase if in card offering ===\n  if (phase === PHASES.CARD_OFFERING) {\n    newState = {\n      ...newState,\n      campaign: {\n        ...newState.campaign,\n        trashPile: [\n          ...(newState.campaign.trashPile || []),\n          ...sourceArray.filter((_, i) => i !== index),\n        ],\n      },\n      offerings: {\n        ...newState.offerings,\n        [sourceArrayName]: [],\n      },\n    };\n\n    newState = handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\nfunction pickRelic(state, index) {\n  const phase = state.currentPhase;\n  const campaign = { ...state.campaign };\n  const offerings = { ...state.offerings };\n\n  // Determine the source array\n  let sourceArrayName = null;\n  if (offerings.relics && index < offerings.relics.length) {\n    sourceArrayName = \"relics\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid relic index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Fix: unwrap relic from entry if it's from shopfront\n  const pickedRelic = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedRelic) {\n    console.error(\"No relic found at index:\", index);\n    return state;\n  }\n\n  // === Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const relicCost = entry.cost || 50;\n    const chargedState = chargeGoldCost(state, relicCost, \"relic\");\n\n    if (chargedState === state) {\n      return state; // not enough gold\n    }\n\n    updatedState = chargedState;\n  }\n\n  // === Add to relic belt ===\n  campaign.relicBelt = [...updatedState.campaign.relicBelt, pickedRelic];\n\n  // === Remove from source array ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === Trash rest if in offering phase ===\n  const isOfferingPhase = [\n    PHASES.MYTHIC_RELIC_OFFERING,\n    PHASES.RELIC_OFFERING,\n  ].includes(phase);\n\n  if (isOfferingPhase) {\n    campaign.trashPile = [\n      ...campaign.trashPile,\n      ...offerings.relics.filter((_, i) => i !== index),\n    ];\n    offerings.relics = [];\n  }\n\n  const newState = {\n    ...updatedState,\n    campaign,\n    offerings,\n    log: [`Picked relic: ${pickedRelic.name}`, ...updatedState.log],\n  };\n\n  // === Apply relic pickup triggers ===\n  const triggeredState = checkRelicTriggers(\n    newState,\n    TRIGGER_EVENTS.RELIC_PICKUP,\n    {\n      relic: pickedRelic,\n    }\n  );\n\n  // === Advance phase if needed ===\n  if (isOfferingPhase) {\n    console.log(\"Advancing to path selection after picking relic\");\n    return handlePhaseTransitions(\n      advancePhaseTo(triggeredState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return triggeredState;\n}\nfunction pickPotion(state, index) {\n  const phase = state.currentPhase;\n  const campaign = { ...state.campaign };\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  if (offerings.potions && index < offerings.potions.length) {\n    sourceArrayName = \"potions\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else {\n    console.error(\"Invalid potion index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Fix: unwrap the potion object if from shopfront\n  const pickedPotion = sourceArrayName === \"shopfront\" ? entry.item : entry;\n\n  if (!pickedPotion) {\n    console.error(\"No potion found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge cost if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const cost = entry.cost || 30;\n    const charged = chargeGoldCost(state, cost, \"potion\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.POTION_PICKUP,\n    {\n      payload: pickedPotion,\n    }\n  );\n  const triggeredPotion = triggerResult.result;\n\n  const updatedPotionBelt = [\n    ...updatedState.campaign.potionBelt,\n    triggeredPotion,\n  ];\n\n  // === 4. Remove from source ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 5. Discard rest if in offering ===\n  if (phase === PHASES.POTION_OFFERING) {\n    campaign.trashPile = [\n      ...campaign.trashPile,\n      ...offerings.potions.filter((_, i) => i !== index),\n    ];\n    offerings.potions = [];\n  }\n\n  const newState = {\n    ...updatedState,\n    campaign: {\n      ...updatedState.campaign,\n      potionBelt: updatedPotionBelt,\n      trashPile: campaign.trashPile || updatedState.campaign.trashPile,\n    },\n    offerings,\n    log: [`Picked potion: ${pickedPotion.name}`, ...updatedState.log],\n  };\n\n  // === 6. Advance phase if in offering ===\n  if (phase === PHASES.POTION_OFFERING) {\n    return handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\nfunction drinkPotion(state, potion) {\n  if (!potion) {\n    console.error(\"No potion passed to drinkPotion\");\n    return state;\n  }\n\n  let updatedState = { ...state };\n\n  // === 1. Apply effects ===\n  if (potion.healthRestore) {\n    updatedState = heal(updatedState, potion.healthRestore);\n  }\n\n  // === 2. Remove potion from potionBelt and add to trash ===\n  const newPotionBelt = updatedState.campaign.potionBelt.filter(\n    (p) => p !== potion\n  );\n  const newTrash = [...updatedState.campaign.trashPile, potion];\n\n  updatedState = {\n    ...updatedState,\n    campaign: {\n      ...updatedState.campaign,\n      potionBelt: newPotionBelt,\n      trashPile: newTrash,\n    },\n    log: [`Drank potion: ${potion.name}`, ...updatedState.log],\n  };\n\n  // === 3. Check relic triggers ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.DRINK_POTION,\n    { potion }\n  );\n\n  return {\n    ...triggerResult,\n    log: triggerResult.log || updatedState.log,\n  };\n}\nfunction openModScreen(state, mod, originPhase = null) {\n  const validKeys = [\"upgrade\", \"gem\", \"purge\", \"transmute\"];\n  const keys = Object.keys(mod || {});\n  if (keys.length !== 1 || !validKeys.includes(keys[0])) {\n    console.error(\"Invalid mod passed to openModScreen:\", mod);\n    return state;\n  }\n\n  // === GEM LOGIC: Discard unchosen gems only if from gem offering ===\n  if (mod.gem && (state.offerings.gems?.length || 0) > 0) {\n    const chosenGemName = mod.gem.name;\n\n    const discardedGems = state.offerings.gems.filter(\n      (g) => g.name !== chosenGemName\n    );\n\n    state = {\n      ...state,\n      campaign: {\n        ...state.campaign,\n        trashPile: [...state.campaign.trashPile, ...discardedGems],\n      },\n      offerings: {\n        ...state.offerings,\n        gems: [], // clear offering gems\n      },\n      log: [`Discarded ${discardedGems.length} unchosen gem(s).`, ...state.log],\n    };\n  }\n\n  // === Charge gold if in shop ===\n  if (state.currentPhase === PHASES.SHOP) {\n    let cost = 50;\n    if (mod?.gem?.cost !== undefined) {\n      cost = mod.gem.cost;\n    }\n\n    const charged = chargeGoldCost(state, cost, \"card modification\");\n    if (charged === state) return state; // insufficient gold\n    state = charged;\n  }\n\n  return {\n    ...state,\n    currentScreen: SCREENS.MOD,\n    modData: {\n      mod,\n      origin: originPhase || state.currentPhase,\n    },\n    log: [`Opened mod screen (${keys[0]}).`, ...state.log],\n  };\n}\nfunction increaseBaseBunnies(state, amount) {\n  const newAmount = Math.max(0, (state.baseBunnies || 0) + amount);\n\n  return {\n    ...state,\n    baseBunnies: newAmount,\n    log: [`Base bunnies increased by ${amount}.`, ...state.log],\n  };\n}\nfunction applyModToCard(state, card) {\n  const mod = state.modData?.mod;\n  const origin = state.modData?.origin;\n\n  if (!mod || !card) {\n    console.warn(\"applyModToCard called without a valid mod or card.\");\n    return state;\n  }\n\n  let updatedDeck = [...state.campaign.deck];\n  const cardIndex = updatedDeck.findIndex((c) => c === card);\n\n  if (cardIndex === -1) {\n    console.warn(\"Card not found in campaign deck.\");\n    return state;\n  }\n\n  // Apply mod\n  let modifiedCard = { ...card };\n  if (mod.upgrade) {\n    modifiedCard = upgradeCard(modifiedCard, mod.upgrade);\n  } else if (mod.gem) {\n    modifiedCard = socketCardWithGem(modifiedCard, mod.gem);\n  } else if (mod.purge) {\n    updatedDeck.splice(cardIndex, 1); // Remove the card\n  } else if (mod.transmute) {\n    modifiedCard = transmuteCard(modifiedCard);\n  }\n\n  // Replace modified card if not purged\n  if (!mod.purge) {\n    updatedDeck[cardIndex] = modifiedCard;\n  }\n\n  // Determine next phase\n  const nextPhase =\n    origin === PHASES.SHOP || origin === PHASES.COMBAT_END\n      ? origin\n      : PHASES.PATH_SELECTION;\n\n  const updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n    },\n    modData: null,\n    currentScreen: SCREENS.MAIN,\n    currentPhase: nextPhase,\n    log: [`Applied mod to ${card.name}.`, ...state.log],\n  };\n\n  // If transitioning to path selection, trigger path population\n  return nextPhase === PHASES.PATH_SELECTION\n    ? handlePhaseTransitions(updatedState)\n    : updatedState;\n}\nfunction populateShopfront(state) {\n  const shopfrontTypes = [];\n  // === Clear existing shop items into trash ===\n  const previousItems = state.offerings.shopfront || [];\n  const discardedItems = previousItems.map((entry) => entry.item);\n  const updatedTrash = [...(state.campaign.trashPile || []), ...discardedItems];\n  // === Step 1: Ensure 1 of each type ===\n  const guaranteedTypes = [\"relic\", \"potion\", \"card\", \"gem\"];\n  guaranteedTypes.forEach((type) => shopfrontTypes.push(type));\n\n  // === Step 2: Fill remaining 8 items using weighted choice ===\n  const weights = {\n    card: 12,\n    potion: 3,\n    gem: 1,\n    relic: 1,\n  };\n\n  const weightedPool = Object.entries(weights).flatMap(([type, weight]) =>\n    Array(weight).fill(type)\n  );\n\n  let safetyCounter = 0;\n  while (shopfrontTypes.length < 12 && safetyCounter < 100) {\n    safetyCounter++;\n    const chosen =\n      weightedPool[Math.floor(Math.random() * weightedPool.length)];\n    shopfrontTypes.push(chosen);\n  }\n\n  // === Step 3: Generate actual items, avoiding duplicates ===\n  const generatedItems = [];\n  const usedKeys = new Set();\n\n  for (let type of shopfrontTypes) {\n    let item = null;\n    let attempt = 0;\n\n    while (attempt < 20) {\n      attempt++;\n      try {\n        switch (type) {\n          case \"card\":\n            item = generateRandomCard(state);\n            break;\n          case \"potion\":\n            item = generateRandomPotion(state);\n            break;\n          case \"gem\":\n            item = generateRandomGem(state);\n            break;\n          case \"relic\":\n            item = generateRandomRelic(state);\n            break;\n          default:\n            item = null;\n        }\n\n        if (!item) continue;\n\n        const key = `${type}-${item.name}`;\n        if (usedKeys.has(key)) continue;\n\n        usedKeys.add(key);\n        generatedItems.push({ type, item });\n        break; // done\n      } catch (e) {\n        console.warn(\"Shop item generation failed:\", type, e);\n      }\n    }\n  }\n\n  // === Step 4: Insert shopfront and assign prices ===\n  let updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      trashPile: updatedTrash,\n    },\n    offerings: {\n      ...state.offerings,\n      shopfront: generatedItems,\n    },\n  };\n\n  updatedState = assignShopPrices(updatedState);\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.ASSIGN_SHOP_PRICES\n  );\n\n  return {\n    ...updatedState,\n    log: [\n      `Populated shopfront with ${generatedItems.length} unique items.`,\n      ...updatedState.log,\n    ],\n  };\n}\nfunction gainGold(state, amount) {\n  const newGold = (state.gold || 0) + amount;\n\n  return {\n    ...state,\n    gold: newGold,\n    log: [`Gained ${amount} gold.`, ...state.log],\n  };\n}\nfunction practiceWandwork(state) {\n  // Step 1: Increase base bunnies by 1\n  let newState = increaseBaseBunnies(state, 1);\n\n  // Step 2: Advance to path selection\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  // Step 3: Handle the transition (populate offerings)\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\nfunction lootHoard(state) {\n  const baseGold = 10;\n  const levelBonus = state.level || 0;\n  const enemiesDefeated = state.defeatedEnemies?.length || 0;\n  const luck = state.luck || 0;\n\n  const enemyBonus = enemiesDefeated * 5;\n  const luckBonus = luck * 2;\n\n  const totalGold = baseGold + levelBonus + enemyBonus + luckBonus;\n\n  // Step 1: Gain gold\n  let newState = gainGold(state, totalGold);\n\n  // Step 2: Track hoards looted\n  const hoardsLooted = (newState.hoardsLooted || 0) + 1;\n  newState = {\n    ...newState,\n    hoardsLooted,\n    log: [`Looted a hoard! (${totalGold}g)`, ...newState.log],\n  };\n\n  // Step 3: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction rest(state) {\n  const amountToHeal = state.restHealthRestore || 0;\n  const currentHealth = state.health || 0;\n\n  // Step 1: Heal the player\n  let newState = heal(state, amountToHeal);\n  const healedAmount = newState.health - currentHealth;\n\n  // Step 2: Check relic triggers for REST\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.REST);\n\n  // Step 3: Add one summary log line\n  newState = {\n    ...newState,\n    log: [\n      `Rested at the fire and recovered ${healedAmount} HP.`,\n      ...newState.log.filter((msg) => !msg.startsWith(\"Healed\")),\n    ],\n  };\n\n  // Step 4: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  // ✅ Step 5: Populate offerings for the new phase\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\n//#endregion\n//#region state setup and game initialization\nfunction createInitialState() {\n  return {\n    log: [],\n    currentScreen: SCREENS.MAIN,\n    currentPhase: PHASES.MAIN_MENU,\n    maxHealth: 0,\n    health: 0,\n    baseBunnies: 0,\n    gold: 0,\n    shopPriceMultiplier: 1,\n    restHealthRestore: 10,\n    hoardsLooted: 0,\n    luck: 0,\n    level: 0,\n    defeatedEnemies: [],\n\n    campaign: {\n      difficulty: null,\n\n      deck: [],\n      relicBelt: [],\n      potionBelt: [],\n      trashPile: [],\n\n      basicCardCount: 5,\n\n      ink: 3,\n      books: 1,\n      pages: 3,\n      handSize: 5,\n\n      enemy: null,\n    },\n    battle: {\n      deck: [],\n      hand: [],\n      graveyard: [],\n      exile: [],\n      spellbook: [],\n\n      relicBelt: [],\n      potionBelt: [],\n\n      ink: 0,\n      maxInk: 0,\n      books: 0,\n      maxBooks: 0,\n      pages: 0,\n      bunnies: 0,\n      maxPages: 0,\n      handSize: 5,\n\n      enemy: null,\n    },\n    offerings: {\n      difficulties: [],\n      shopfront: [],\n      cards: [],\n      potions: [],\n      gems: [],\n      relics: [],\n      paths: [],\n      combatRewards: [],\n      restOptions: [],\n    },\n  };\n}\nfunction selectDifficultyAndBeginGame(dispatch, difficulty) {\n  dispatch({ type: ACTIONS.SET_DIFFICULTY, payload: difficulty });\n  dispatch({ type: ACTIONS.GENERATE_STARTER_DECK });\n  dispatch({ type: ACTIONS.APPLY_DIFFICULTY_MODIFIERS });\n  dispatch({\n    type: ACTIONS.ADVANCE_PHASE,\n    payload: PHASES.MYTHIC_RELIC_OFFERING,\n  });\n}\nfunction createGameApp(initialState, reducer, renderFn) {\n  let state = initialState;\n  function dispatch(action) {\n    state = reducer(state, action);\n    renderFn(state, dispatch); // pass dispatch so buttons etc. can use it\n  }\n  // Start the game\n  dispatch({ type: ACTIONS.NEW_GAME });\n  return { dispatch };\n}\n\n//#endregion\n//#region game mechanics\nfunction createCardInstance(\n  cardName = null,\n  rarity = null,\n  upgrades = 0,\n  gem = null\n) {\n  let card;\n  if (rarity) {\n    console.log(\"🔍 createCardInstance got rarity:\", rarity);\n  }\n  if (cardName) {\n    const found = cardList.find((c) => c.name === cardName);\n    if (!found) {\n      console.error(`Card not found: ${cardName}`);\n      return null;\n    }\n    card = { ...found };\n  } else if (rarity) {\n    const candidates = cardList.filter((c) => c.rarity === rarity);\n    if (candidates.length === 0) {\n      console.error(`No cards found with rarity: ${rarity}`);\n      return null;\n    }\n    card = { ...candidates[Math.floor(Math.random() * candidates.length)] };\n  } else {\n    console.error(\"createCardInstance requires either a cardName or a rarity.\");\n    return null;\n  }\n\n  // Apply upgrades if needed\n  if (upgrades > 0) {\n    card = upgradeCard(card, upgrades); // this should set .upgrades itself\n  }\n\n  // Apply gem if needed\n  if (gem) {\n    card = socketCardWithGem(card, gem);\n  }\n\n  return card;\n}\n\nfunction createRelicInstance(relicName) {\n  const found = relicList.find((r) => r.name === relicName);\n  if (!found) {\n    console.error(`Relic not found: ${relicName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction createPotionInstance(potionName, upgrades = 0) {\n  const found = potionList.find((p) => p.name === potionName);\n  if (!found) {\n    console.error(`Potion not found: ${potionName}`);\n    return null;\n  }\n\n  let potion = { ...found };\n\n  if (upgrades > 0) {\n    potion = upgradePotion(potion, upgrades);\n  }\n\n  return potion;\n}\nfunction createGemInstance(gemName) {\n  const found = gemList.find((g) => g.name === gemName);\n  if (!found) {\n    console.error(`Gem not found: ${gemName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction generateRandomRelic(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const ownedRelics = new Set([\n    ...state.campaign.relicBelt.map((r) => r.name),\n    ...state.campaign.trashPile.map((r) => r.name),\n  ]);\n\n  const GOLD_BAG = \"Gold Bag\";\n\n  // Exclude Gold Bag and duplicate high-rarity relics\n  let candidates = relicList.filter((r) => {\n    if (r.name === GOLD_BAG) return false;\n    if (\n      (r.rarity === RARITIES.MYTHIC || r.rarity === RARITIES.LEGENDARY) &&\n      ownedRelics.has(r.name)\n    ) {\n      return false;\n    }\n    return true;\n  });\n\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  const filtered = candidates.filter((r) => r.rarity === rarity);\n  if (filtered.length === 0) {\n    console.warn(`No relics found for rarity: ${rarity}`);\n    return createRelicInstance(GOLD_BAG);\n  }\n\n  const chosen = filtered[Math.floor(Math.random() * filtered.length)];\n  return { ...chosen };\n}\nfunction generateRandomCard(\n  state,\n  { rarity = null, upgrades = undefined, gem = null } = {}\n) {\n  const luck = state.luck || 0;\n\n  const finalRarity =\n    rarity || weightedRandomChoice(getLuckAdjustedRarityWeights(luck));\n\n  const upgradeWeights = {\n    0: Math.max(0, 100 - luck),\n    1: 3 + luck,\n    2: 2 + luck,\n    3: 1 + luck,\n    4: 0 + luck,\n  };\n\n  const finalUpgrades =\n    upgrades !== undefined\n      ? upgrades\n      : Number(weightedRandomChoice(upgradeWeights));\n\n  const defeatedCount = state.defeatedEnemies?.length || 0;\n  const maxUpgrades = Math.min(4, Math.floor(defeatedCount / 3));\n  const cappedUpgrades = Math.min(finalUpgrades, maxUpgrades);\n\n  return createCardInstance(undefined, finalRarity, cappedUpgrades, gem);\n}\nfunction generateRandomPotion(state, { rarity = null, upgrades = null } = {}) {\n  const luck = state.luck || 0;\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const upgradeWeights = {\n    0: Math.max(0, 100 - luck),\n    1: 3 + luck,\n    2: 2 + luck,\n    3: 1 + luck,\n    4: 0 + luck,\n  };\n\n  // === Choose rarity if not provided ===\n  if (!rarity) {\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // === Fallback in case rarity yields no results ===\n  const candidates = potionList.filter((p) => p.rarity === rarity);\n  let basePotion;\n  if (candidates.length === 0) {\n    console.warn(\n      `No potions found for rarity: ${rarity}. Falling back to Lesser Healing Potion.`\n    );\n    basePotion = potionList.find((p) => p.name === \"Lesser Healing Potion\");\n    if (!basePotion) {\n      console.error(\n        \"Fallback potion 'Lesser Healing Potion' not found in potionList.\"\n      );\n      return null;\n    }\n    upgrades = 0; // ensure fallback is always unupgraded\n  } else {\n    basePotion = candidates[Math.floor(Math.random() * candidates.length)];\n\n    // === Choose upgrade level if not provided ===\n    if (upgrades === null) {\n      upgrades = Number(weightedRandomChoice(upgradeWeights));\n    }\n    upgrades = Math.min(upgrades, 4);\n  }\n\n  return createPotionInstance(basePotion.name, upgrades);\n}\nfunction generateRandomGem(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const fallbackGem = createGemInstance(\"Amethyst\");\n\n  // Choose rarity based on luck if not specified\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // Filter by rarity\n  const candidates = gemList.filter((gem) => gem.rarity === rarity);\n\n  if (candidates.length === 0) {\n    console.warn(\n      `No gems found for rarity: ${rarity}, returning fallback gem.`\n    );\n    return fallbackGem;\n  }\n\n  const chosenGem = candidates[Math.floor(Math.random() * candidates.length)];\n  return { ...chosenGem };\n}\nfunction upgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to upgradeCard:\", card);\n    return card;\n  }\n\n  // Clone the card to avoid mutating the original\n  const upgradedCard = { ...card };\n\n  let upgradable = false;\n\n  if (\"bunnyAdd\" in upgradedCard) {\n    upgradedCard.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedCard) {\n    upgradedCard.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"goldAdd\" in upgradedCard) {\n    upgradedCard.goldAdd += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInDeck += level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInHand\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInHand += level;\n    upgradable = true;\n  }\n\n  if (\"cardDraw\" in upgradedCard) {\n    upgradedCard.cardDraw += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"inkAdd\" in upgradedCard) {\n    upgradedCard.inkAdd += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"healthCost\" in upgradedCard) {\n    upgradedCard.healthCost -= 1 * level; // reduce health cost\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Card cannot be upgraded: ${card.name}`);\n    return card;\n  }\n\n  // Add or increment the upgrade level\n  upgradedCard.upgrades = (upgradedCard.upgrades || 0) + level;\n\n  // Rename the card to reflect its upgrade level\n  upgradedCard.name =\n    card.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedCard.upgrades}`;\n\n  return upgradedCard;\n}\nfunction upgradePotion(potion, level = 1) {\n  if (!potion || typeof potion !== \"object\") {\n    console.error(\"Invalid potion passed to upgradePotion:\", potion);\n    return potion;\n  }\n\n  // Clone the potion to avoid mutating the original\n  const upgradedPotion = { ...potion };\n\n  let upgradable = false;\n\n  // === Upgradeable Effects ===\n  if (\"healthRestore\" in upgradedPotion) {\n    upgradedPotion.healthRestore += 2 * level;\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Potion cannot be upgraded: ${potion.name}`);\n    return potion;\n  }\n\n  // === Track upgrade level ===\n  upgradedPotion.upgrades = (upgradedPotion.upgrades || 0) + level;\n\n  // === Update potion name to reflect upgrades ===\n  upgradedPotion.name =\n    potion.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedPotion.upgrades}`;\n\n  return upgradedPotion;\n}\nfunction socketCardWithGem(card, gem) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to socketCardWithGem:\", card);\n    return card;\n  }\n\n  if (!gem || typeof gem !== \"object\" || !gem.name) {\n    console.error(\"Invalid gem passed to socketCardWithGem:\", gem);\n    return card;\n  }\n\n  // Clone the card to avoid mutation\n  const socketedCard = { ...card };\n\n  // Apply gem effects\n  if (\"bunnyAdd\" in gem) {\n    socketedCard.bunnyAdd = (socketedCard.bunnyAdd || 0) + gem.bunnyAdd;\n  }\n\n  // Save the gem reference\n  socketedCard.gem = gem;\n\n  // Rename the card to include the gem name as a prefix\n  socketedCard.name = `${gem.name} ${card.name}`;\n\n  return socketedCard;\n}\nfunction getLuckAdjustedRarityWeights(luck = 0) {\n  return {\n    [RARITIES.COMMON]: Math.max(20, 60 - luck * 2),\n    [RARITIES.UNCOMMON]: Math.max(20, 40 - luck),\n    [RARITIES.RARE]: Math.min(20, 5 + luck),\n    [RARITIES.MYTHIC]: Math.min(10, 2 + Math.ceil(luck / 2)),\n    [RARITIES.LEGENDARY]: Math.min(5, 1 + Math.ceil(luck / 3)),\n  };\n}\nfunction chargeGoldCost(state, cost, context = \"purchase\") {\n  if (state.gold < cost) {\n    console.warn(`Not enough gold for ${context}!`);\n    return state; // return unmodified state\n  }\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      gold: state.gold - cost,\n    },\n    log: [`Spent ${cost} gold on ${context}.`, ...state.log],\n  };\n}\nfunction checkRelicTriggers(state, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  let result = context.payload || null;\n\n  for (const relic of updatedState.campaign.relicBelt) {\n    const effect = relic.triggers?.[triggerEvent];\n    if (!effect) continue;\n\n    // === handle DRINK_POTION effects ===\n    if (triggerEvent === TRIGGER_EVENTS.DRINK_POTION && context.potion) {\n      if (effect.healPlayer) {\n        updatedState = heal(updatedState, effect.healPlayer);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} healed you for ${effect.healPlayer} HP on potion use.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n\n    // === Handle POTION_PICKUP effects ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.POTION_PICKUP &&\n      effect.upgradePotion &&\n      result\n    ) {\n      result = upgradePotion(result, 1);\n      updatedState = {\n        ...updatedState,\n        log: [\n          `${relic.name} upgraded a potion on pickup!`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    // === Handle CARD_PICKUP effects ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.CARD_PICKUP &&\n      effect.upgradeCard &&\n      result\n    ) {\n      result = upgradeCard(result, 1);\n      updatedState = {\n        ...updatedState,\n        log: [`${relic.name} upgraded a card on pickup!`, ...updatedState.log],\n      };\n    }\n\n    // === Handle RELIC_PICKUP effects ===\n    if (triggerEvent === TRIGGER_EVENTS.RELIC_PICKUP && context.relic) {\n      const campaign = { ...updatedState.campaign };\n      let newHealth = updatedState.health;\n      let newMaxHealth = updatedState.maxHealth;\n\n      if (effect.bonusPages) campaign.pages += effect.bonusPages;\n      if (effect.bonusInk) campaign.ink += effect.bonusInk;\n      if (effect.bonusBooks) campaign.books += effect.bonusBooks;\n      if (effect.bonusHealth) {\n        newHealth += effect.bonusHealth;\n        newMaxHealth += effect.bonusHealth;\n      }\n      if (effect.bonusGold) {\n        updatedState = gainGold(updatedState, effect.bonusGold);\n      }\n      if (effect.bonusBaseBunnies) {\n        updatedState = increaseBaseBunnies(\n          updatedState,\n          effect.bonusBaseBunnies\n        );\n      }\n\n      updatedState = {\n        ...updatedState,\n        campaign,\n        health: newHealth,\n        maxHealth: newMaxHealth,\n        log: [\n          `${relic.name} granted bonuses on relic pickup.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    // === Handle SHOP PRICE ADJUSTMENT ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.ASSIGN_SHOP_PRICES &&\n      effect.shopPriceMultiplier\n    ) {\n      updatedState = {\n        ...updatedState,\n        offerings: {\n          ...updatedState.offerings,\n          shopfront: updatedState.offerings.shopfront.map((entry) => {\n            const adjustedCost = Math.round(\n              entry.item.cost * effect.shopPriceMultiplier\n            );\n            return {\n              ...entry,\n              item: {\n                ...entry.item,\n                cost: adjustedCost,\n              },\n            };\n          }),\n        },\n        log: [\n          `Applied shop price multiplier (${effect.shopPriceMultiplier})`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    // === Handle REST effects ===\n    if (triggerEvent === TRIGGER_EVENTS.REST) {\n      if (effect.healPlayer) {\n        updatedState = heal(updatedState, effect.healPlayer);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} healed you for ${effect.healPlayer} HP while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.goldAdd) {\n        updatedState = gainGold(updatedState, effect.goldAdd);\n        updatedState = {\n          ...updatedState,\n          log: [\n            `${relic.name} gave you ${effect.goldAdd} gold while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      if (effect.permanentlyUpgradeRandomCardsInDeck > 0) {\n        const { deck } = updatedState.campaign;\n        const numToUpgrade = Math.min(\n          effect.permanentlyUpgradeRandomCardsInDeck,\n          deck.length\n        );\n\n        const shuffled = [...deck].sort(() => Math.random() - 0.5);\n        const toUpgrade = shuffled.slice(0, numToUpgrade);\n        const upgraded = toUpgrade.map((card) => upgradeCard(card, 1));\n\n        const upgradedDeck = deck.map((card) =>\n          toUpgrade.includes(card) ? upgraded[toUpgrade.indexOf(card)] : card\n        );\n\n        updatedState = {\n          ...updatedState,\n          campaign: {\n            ...updatedState.campaign,\n            deck: upgradedDeck,\n          },\n          log: [\n            `${relic.name} permanently upgraded ${numToUpgrade} card(s) while resting.`,\n            ...updatedState.log,\n          ],\n        };\n      }\n    }\n  }\n\n  return {\n    ...updatedState,\n    result,\n  };\n}\n\nfunction heal(state, amount) {\n  const current = state.health || 0;\n  const max = state.maxHealth || 0;\n  const newHealth = Math.min(current + amount, max);\n  const healedAmount = newHealth - current;\n\n  return {\n    ...state,\n    health: newHealth,\n    log: [`Healed ${healedAmount} HP.`, ...state.log],\n  };\n}\nfunction transmuteCard(card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to transmuteCard:\", card);\n    return null;\n  }\n\n  const alternatives = cardList.filter(\n    (c) => c.name !== card.name && !c.unchoosableByTransmute\n  );\n\n  if (alternatives.length === 0) {\n    console.warn(\n      `No valid alternatives found to transmute ${card.name}. Returning original.`\n    );\n    return { ...card };\n  }\n\n  const newBase = alternatives[Math.floor(Math.random() * alternatives.length)];\n  return createCardInstance(newBase.name, null, card.upgrades, card.gem);\n}\nfunction purgeCard(state, card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to purgeCard:\", card);\n    return state;\n  }\n\n  const updatedDeck = state.campaign.deck.filter((c) => c !== card);\n  const updatedTrash = [...(state.campaign.trashPile || []), card];\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n      trashPile: updatedTrash,\n    },\n    log: [`Purged card: ${card.name}`, ...state.log],\n  };\n}\n//#endregion\n//#region game reducer\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.NEW_GAME:\n      return {\n        ...createInitialState(),\n        log: [\"New game started.\"],\n      };\n\n    case ACTIONS.SET_DIFFICULTY: {\n      if (state.campaign.difficulty === action.payload) {\n        console.log(\"Difficulty already set to\", action.payload);\n        return state;\n      }\n      console.log(`Difficulty set to ${action.payload}`);\n      return {\n        ...state,\n        campaign: {\n          ...state.campaign,\n          difficulty: action.payload,\n        },\n        log: [`Difficulty set to ${action.payload}.`, ...state.log],\n      };\n    }\n\n    case ACTIONS.GENERATE_STARTER_DECK:\n      return generateStarterDeck(state);\n\n    case ACTIONS.APPLY_DIFFICULTY_MODIFIERS:\n      return applyDifficultyModifiers(state);\n\n    case ACTIONS.ADVANCE_PHASE:\n      const newState = advancePhaseTo(state, action.payload);\n      return handlePhaseTransitions(newState);\n\n    case ACTIONS.CREATE_CARD_INSTANCE: {\n      const newCard = createCardInstance(\n        action.payload.cardName,\n        action.payload.rarity,\n        action.payload.upgrades,\n        action.payload.gem\n      );\n      return {\n        ...state,\n        campaign: {\n          ...state.campaign,\n          deck: [...state.campaign.deck, newCard],\n        },\n        log: [`Created card: ${newCard.name}`, ...state.log],\n      };\n    }\n\n    case ACTIONS.POPULATE_RELIC_OFFERINGS:\n      return populateRelicOfferings(state, action.payload?.rarity);\n\n    case ACTIONS.PICK_RELIC:\n      return pickRelic(state, action.payload);\n\n    case ACTIONS.POPULATE_PATH_OFFERINGS:\n      return populatePathOfferings(state);\n\n    case ACTIONS.PICK_PATH:\n      return pickPath(state, action.payload);\n\n    case ACTIONS.POPULATE_CARD_OFFERINGS:\n      return populateCardOfferings(state);\n\n    case ACTIONS.PICK_CARD:\n      return pickCard(state, action.payload);\n\n    case ACTIONS.POPULATE_POTION_OFFERINGS:\n      return populatePotionOfferings(state);\n\n    case ACTIONS.PICK_POTION:\n      return pickPotion(state, action.payload);\n\n    case ACTIONS.DRINK_POTION: {\n      const potionIndex = action.payload;\n      const potionToDrink = state.campaign.potionBelt[potionIndex];\n      if (!potionToDrink) {\n        console.error(\"Invalid potion index:\", potionIndex);\n        return state;\n      }\n      return drinkPotion(state, potionToDrink);\n    }\n\n    case ACTIONS.POPULATE_GEM_OFFERINGS:\n      return populateGemOfferings(state);\n\n    case ACTIONS.OPEN_MOD_SCREEN:\n      return openModScreen(state, action.payload.mod, action.payload.origin);\n\n    case ACTIONS.APPLY_CARD_MOD:\n      return applyModToCard(state, action.payload); // payload = selected card\n\n    case ACTIONS.SCREEN_CHANGE:\n      return screenChange(state, action.payload);\n\n    case ACTIONS.POPULATE_SHOPFRONT:\n      return populateShopfront(state);\n\n    case ACTIONS.INCREASE_BASE_BUNNIES:\n      return increaseBaseBunnies(state, action.payload);\n\n    case ACTIONS.GAIN_GOLD:\n      return gainGold(state, action.payload);\n\n    case ACTIONS.PRACTICE_WANDWORK:\n      return practiceWandwork(state);\n\n    case ACTIONS.LOOT_HOARD:\n      return lootHoard(state);\n\n    case ACTIONS.REST:\n      return rest(state);\n\n    case ACTIONS.LOG_MESSAGE:\n      return {\n        ...state,\n        log: [action.payload, ...state.log],\n      };\n\n    default:\n      console.warn(\"Unknown action type:\", action.type);\n      return state;\n  }\n}\n//#endregion\n//#region render function\nfunction render(state, dispatch) {\n  // Get or create output div\n  let output = document.getElementById(\"output\");\n  if (!output) {\n    output = document.createElement(\"div\");\n    output.id = \"output\";\n    document.body.appendChild(output);\n  }\n  output.innerHTML = \"\"; // Clear previous contents\n\n  // render utility function\n  function renderModPhaseEntry(phase, label, modKey) {\n    if (state.currentPhase === phase && state.currentScreen !== SCREENS.MOD) {\n      const modBtn = document.createElement(\"button\");\n      modBtn.textContent = label;\n      modBtn.style.fontSize = \"1.5rem\";\n      modBtn.style.padding = \"1rem 2rem\";\n      modBtn.onclick = () => {\n        modBtn.disabled = true; // prevent double click\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { [modKey]: true },\n            origin: phase,\n          },\n        });\n      };\n      output.appendChild(modBtn);\n    }\n  }\n\n  // === Game Info ===\n  const info = document.createElement(\"div\");\n  info.innerHTML = `\n    <h2>Game Info</h2>\n    <p><strong>Current Screen:</strong> ${state.currentScreen}</p>\n    <p><strong>Phase:</strong> ${\n      state.currentPhase\n    } &nbsp;&nbsp; <strong>Level:</strong> ${state.level ?? 0}</p>\n    <p><strong>Gold:</strong> ${state.gold}</p>\n    <p><strong>Health:</strong> ${state.health}/${state.maxHealth}</p>\n    <p><strong>Deck Size:</strong> ${state.campaign.deck.length}</p>\n    <p><strong>Relics:</strong> ${\n      state.campaign.relicBelt.map((r) => r.name).join(\", \") || \"None\"\n    }</p>\n  `;\n\n  output.appendChild(info);\n\n  // === Log ===\n  const log = document.createElement(\"div\");\n  log.innerHTML = `<h3>Log</h3><ul>${state.log\n    .slice(0, 5)\n    .map((msg) => `<li>${msg}</li>`)\n    .join(\"\")}</ul>`;\n  output.appendChild(log);\n\n  // === Main Menu ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.MAIN_MENU\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = \"New Game\";\n    button.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.DIFFICULTY_SELECTION,\n      });\n    };\n    output.appendChild(button);\n  }\n\n  // === Difficulty Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.DIFFICULTY_SELECTION\n  ) {\n    const difficulties = [\n      DIFFICULTIES.EASY,\n      DIFFICULTIES.MEDIUM,\n      DIFFICULTIES.HARD,\n    ];\n    difficulties.forEach((difficulty) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `Start ${difficulty} Game`;\n      btn.onclick = () => selectDifficultyAndBeginGame(dispatch, difficulty);\n      output.appendChild(btn);\n    });\n  }\n\n  // === Relic Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.relics &&\n    state.offerings.relics.length > 0\n  ) {\n    const relicSection = document.createElement(\"div\");\n    relicSection.innerHTML = `<h3>Relic Offerings</h3>`;\n    state.offerings.relics.forEach((relic, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${relic.name} (${relic.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n      relicSection.appendChild(btn);\n    });\n    output.appendChild(relicSection);\n  }\n  // === Path Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.paths &&\n    state.offerings.paths.length > 0\n  ) {\n    const pathSection = document.createElement(\"div\");\n    pathSection.innerHTML = `<h3>Choose a Path</h3>`;\n    state.offerings.paths.forEach((path, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${path.path} (${path.rarity})${\n        path.isFight ? \" [FIGHT]\" : \"\"\n      }`;\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_PATH, payload: index });\n      pathSection.appendChild(btn);\n    });\n    output.appendChild(pathSection);\n  }\n\n  // === Card Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.cards &&\n    state.offerings.cards.length > 0\n  ) {\n    const cardSection = document.createElement(\"div\");\n    cardSection.innerHTML = `<h3>Choose a Card</h3>`;\n\n    state.offerings.cards.forEach((card, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.cost})${\n        card.upgrades ? ` +${card.upgrades}` : \"\"\n      }${card.gem ? ` [Gem: ${card.gem.name}]` : \"\"}`;\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n      cardSection.appendChild(btn);\n    });\n\n    output.appendChild(cardSection);\n  }\n\n  // === Potion Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.POTION_OFFERING &&\n    state.offerings.potions &&\n    state.offerings.potions.length > 0\n  ) {\n    const potionSection = document.createElement(\"div\");\n    potionSection.innerHTML = `<h3>Choose a Potion</h3>`;\n\n    state.offerings.potions.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${potion.name} (${potion.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n      potionSection.appendChild(btn);\n    });\n\n    output.appendChild(potionSection);\n  }\n\n  // ==== Gem Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentScreen === SCREENS.MAIN &&\n    state.currentPhase === PHASES.GEM_OFFERING &&\n    state.offerings.gems &&\n    state.offerings.gems.length > 0\n  ) {\n    const gemSection = document.createElement(\"div\");\n    gemSection.innerHTML = `<h3>Choose a Gem</h3>`;\n\n    state.offerings.gems.forEach((gem, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${gem.name} (${gem.rarity})`;\n\n      btn.onclick = () =>\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { gem },\n            origin: PHASES.GEM_OFFERING,\n          },\n        });\n\n      gemSection.appendChild(btn);\n    });\n\n    output.appendChild(gemSection);\n  }\n  // === Shopfront Display ===\n\n  if (\n    state.currentPhase === PHASES.SHOP &&\n    state.currentScreen !== SCREENS.MOD &&\n    state.offerings.shopfront.length > 0\n  ) {\n    const shopSection = document.createElement(\"div\");\n    shopSection.innerHTML = `<h3>Shop Inventory</h3>`;\n\n    const list = document.createElement(\"ul\");\n    state.offerings.shopfront.forEach((entry, index) => {\n      if (!entry || !entry.item || !entry.item.name) return;\n\n      const li = document.createElement(\"li\");\n\n      const btn = document.createElement(\"button\");\n      const cost = entry.item?.cost ?? 0;\n      const playerGold = state.gold ?? 0;\n      const disabled = cost > playerGold;\n\n      btn.textContent = `${entry.type.toUpperCase()}: ${\n        entry.item.name\n      } (${cost}g)`;\n      if (disabled) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      // Bind correct function based on type\n      btn.onclick = () => {\n        switch (entry.type) {\n          case \"card\":\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n            break;\n          case \"potion\":\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n            break;\n          case \"gem\":\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: entry.item },\n                origin: PHASES.SHOP,\n              },\n            });\n          case \"relic\":\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n            break;\n          default:\n            console.warn(\"Unknown shop item type:\", entry.type);\n        }\n      };\n\n      li.appendChild(btn);\n      list.appendChild(li);\n    });\n\n    // Exit Shop Button (for future logic)\n    const exitBtn = document.createElement(\"button\");\n    exitBtn.textContent = \"Exit Shop\";\n    exitBtn.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.PATH_SELECTION,\n      });\n    };\n    shopSection.appendChild(list);\n    shopSection.appendChild(exitBtn);\n    output.appendChild(shopSection);\n  }\n\n  // === Mod Screen ===\n  if (state.currentScreen === SCREENS.MOD && state.modData?.mod) {\n    const modSection = document.createElement(\"div\");\n    modSection.innerHTML = `<h3>Choose a card to modify</h3>`;\n\n    const mod = state.modData.mod;\n    const isGemMod = !!mod.gem;\n\n    state.campaign.deck.forEach((card) => {\n      // If it's a gem mod, skip cards that already have a gem\n      if (isGemMod && card.gem) return;\n\n      const btn = document.createElement(\"button\");\n      btn.textContent =\n        `${card.name} (Cost: ${card.cost})` +\n        (card.upgrades ? ` +${card.upgrades}` : \"\") +\n        (card.gem ? ` [Gem: ${card.gem.name}]` : \"\");\n\n      btn.onclick = () => {\n        dispatch({ type: ACTIONS.APPLY_CARD_MOD, payload: card });\n      };\n\n      modSection.appendChild(btn);\n    });\n\n    output.appendChild(modSection);\n  }\n\n  // ======= render purge, transmute, and enchant phases (AKA mod phases) ======\n\n  renderModPhaseEntry(PHASES.PURGE, \"Lethian Font\", \"purge\");\n  renderModPhaseEntry(PHASES.TRANSMUTE, \"Metamorphosis\", \"transmute\");\n  renderModPhaseEntry(PHASES.ENCHANT, \"Enchanted Dolmen\", \"upgrade\");\n\n  // ====== render hoard phase= ======\n  if (state.currentPhase === PHASES.HOARD) {\n    const btn = document.createElement(\"button\");\n    btn.textContent = \"Loot Hoard\";\n    btn.style.fontSize = \"1.5rem\";\n    btn.style.padding = \"1rem 2rem\";\n    btn.onclick = () => {\n      // Placeholder until lootHoard is implemented\n      dispatch({ type: \"LOOT_HOARD\" }); // or just console.log(\"Loot Hoard\")\n    };\n    output.appendChild(btn);\n  }\n  // ====== rest phase rendering ======\n  if (state.currentPhase === PHASES.REST) {\n    const restBtn = document.createElement(\"button\");\n    restBtn.textContent = \"Fireside Rest\";\n    restBtn.style.fontSize = \"1.5rem\";\n    restBtn.style.padding = \"1rem 2rem\";\n    restBtn.onclick = () => {\n      dispatch({ type: \"REST\" }); // Placeholder\n    };\n\n    const practiceBtn = document.createElement(\"button\");\n    practiceBtn.textContent = \"Practice Wandwork\";\n    practiceBtn.style.fontSize = \"1.5rem\";\n    practiceBtn.style.padding = \"1rem 2rem\";\n    practiceBtn.onclick = () => {\n      dispatch({ type: \"PRACTICE_WANDWORK\" }); // Placeholder\n    };\n\n    output.appendChild(restBtn);\n    output.appendChild(practiceBtn);\n  }\n  // === Deck Inspect / Return Button ===\n  //deck inspect button\n  if (\n    (state.currentScreen === SCREENS.MAIN ||\n      state.currentScreen === SCREENS.DECK) &&\n    state.campaign.deck.length > 0\n  ) {\n    const deckBtn = document.createElement(\"button\");\n    deckBtn.textContent =\n      state.currentScreen === SCREENS.MAIN ? \"Inspect Deck\" : \"Return\";\n    deckBtn.onclick = () => {\n      const nextScreen =\n        state.currentScreen === SCREENS.MAIN ? SCREENS.DECK : SCREENS.MAIN;\n      dispatch({\n        type: ACTIONS.SCREEN_CHANGE,\n        payload: nextScreen,\n      });\n    };\n    output.appendChild(deckBtn);\n  }\n  // deck inspect screen\n  if (state.currentScreen === SCREENS.DECK) {\n    const deckView = document.createElement(\"div\");\n    deckView.innerHTML = `<h3>Campaign Deck</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    state.campaign.deck.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    deckView.appendChild(ul);\n    output.appendChild(deckView);\n  }\n\n  // === Always-Visible Potion Belt ===\n  if (state.campaign.potionBelt && state.campaign.potionBelt.length > 0) {\n    const beltSection = document.createElement(\"div\");\n    beltSection.innerHTML = `<h3>Your Potions</h3>`;\n\n    state.campaign.potionBelt.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = potion.name;\n      btn.onclick = () => {\n        // We'll implement this next\n        dispatch({ type: ACTIONS.DRINK_POTION, payload: index });\n      };\n      beltSection.appendChild(btn);\n    });\n\n    output.appendChild(beltSection);\n  }\n}\n// #endregion\n\n// Initialize the game app\nwindow.onload = () => {\n  createGameApp(createInitialState(), gameReducer, render);\n};\n\n//#region WIP\n// //------------------------------------------------WIP functions------------------------------------------------\n\n// //@@@@@@@@@@@@ combat functions @@@@@@@@@@@@\n\n// function generateEnemy(state, path) {\n//   // assigns an enemy to the path based on the path's difficulty and type.\n// }\n\n// function startCombat(state, enemy) {\n//   // initializes the battle phase with the selected enemy.\n//   // sets up the battle stats, including health, deck, hand, etc.\n//   // advances the game state to the battle phase.\n//   // creates a new spellbook (effectively a 'turn')\n//   //checks for any combat start triggers.\n//   console.log(\"Combat started against:\", enemy.name);\n//   state.battle.phase = \"battle\";\n//   state.battle.enemy = enemy;\n// }\n\n// function checkStartCombatTriggers(state) {\n//   // Checks if the enemy has any combat start triggers that need to be applied\n// }\n\n// function newBook(state) {\n//   //effectively a new 'turn'\n//   // populaets a new spellbook, with the appropriate number of blank pages.\n//   // calls 'newHand' to draw a new hand of cards.\n//   // calls 'refillInkpot' to refresh the player's ink.\n// }\n\n// function newHand(state) {\n//   // draws a hand of cards based on the player's hand size.\n// }\n\n// function drawCard(state) {\n//   // draws a card from the player's deck into their hand.\n// }\n\n// function checkDrawCardTriggers(state, card) {\n//   // Checks if the drawn card has any triggers that need to be applied\n// }\n\n// function refillInkpot(state) {\n//   // refreshes the player's ink to the maximum ink amount.\n// }\n\n// function playCard(state, card) {\n//   // triggered by clicking on a card in hand.\n//   // plays a card from the player's hand, applying its effects.\n//   // deducts the card's ink cost from ink.\n//   // determines where the card moves to: spellbook, graveyard, exile, or into the deck.\n//   // checks for any play card triggers.\n//   // calls \"resolveCardEffects\" to apply the card's effects.\n//   // note: If there's no space in the spellbook or the player has insufficient ink, the card cannot be played and will be displayed as grey and unselectable.\n// }\n\n// function checkPlayCardTriggers(state, card) {\n//   // Checks if the played card has any triggers that need to be applied\n//   // This could include effects that trigger on play, such as drawing cards, gaining gold, etc.\n// }\n\n// function castSpellbook(state) {\n//   // called when the player clicks the \"cast spellbook\" button, or when the spellbook is full.\n//   // casts the spellbook, sequentially casting each of the cards in the spellbook.\n//   // checks for any spellbook triggers.\n//   // checks to see if combat has ended.\n//   // clears the spellbook after casting, moving all its cards to the graveyard.\n//   // discards the player's hand to the graveyard.\n//   // calls the 'new book' function if combat hasn't ended.\n// }\n\n// function checkCastSpellbookTriggers(state) {\n//   // Checks if there are any triggers that need to be applied when casting the spellbook.\n// }\n\n// function discardCard(state, card) {\n//   // discards a card from the player's hand to the graveyard.\n// }\n\n// function checkDiscardCardTriggers(state, card) {\n//   // Checks if the discarded card has any triggers that need to be applied\n// }\n\n// function castSpell(state, spell) {\n//   // applies the effects of a spell card from the spellbook.\n//   // checks for any spell triggers.\n//   // moves the spell card to the appropriate zone after casting.\n// }\n\n// function checkCastSpellTriggers(state, spell) {\n//   // Checks if the spell has any triggers that need to be applied when a specific spell is cast.\n// }\n\n// function checkCombatEnd(state) {\n//   // checks if combat has ended.\n// }\n\n// function combatEnd(state) {\n//   // Handles the end phase after combat, such as displaying the end screen, player losing HP, allowing the player to choose rewards, or advancing to the next path.\n//   // also cleans up the battle state, such as clearing the spellbook, hand, and graveyard.\n// }\n\n// function checkCombatEndTriggers(state) {\n//   // handles combat end triggers\n// }\n\n// function openCombatEndScreen(state) {\n//   // opens the combat end screen, showing results, rewards, etc.\n// }\n\n// function populateCombatRewards(state) {\n//   // populates the combat rewards based on the combat results.\n//   // generates a list of rewards, such as cards, relics, potions, etc.\n//   // ensures that the rewards are appropriate for the difficulty and type of combat.\n//   // returns the populated rewards list.\n// }\n\n// function checkPopulateCombatRewardsTriggers(state) {\n//   // Checks if there are any triggers that modify the combat rewards, such as relics or cards.\n// }\n\n// function pickCombatReward(state, reward) {\n//   // handles the selection of a reward after combat.\n//   // triggered by the player clicking on a reward in the combat end screen.\n// }\n\n// function closeCombatEndScreen(state) {\n//   // closes the combat end screen and advances the game phase to the next phase.\n// }\n\n// //@@@@@@@@@@@@ death and victory functions @@@@@@@@@@@@\n// function checkDeath(state) {\n//   //checks if the player has died, and if so, advances to the death phase.\n// }\n// function death(state) {\n//   // Handles the death phase, such as displaying a death screen, allowing the player to restart or return to the main menu.\n// }\n// function victory(state) {\n//   // Handles the victory phase, such as displaying a victory screen, allowing the player to continue to the next phase or return to the main menu.\n// }\n"]}