{"version":3,"sources":["main.js"],"names":["_excluded","_Object$freeze3","_toArray","r","_arrayWithHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableRest","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","e","t","Array","isArray","length","_n","F","s","n","done","value","f","TypeError","a","u","call","next","return","_objectWithoutProperties","i","_objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","indexOf","propertyIsEnumerable","hasOwnProperty","ownKeys","keys","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_slicedToArray","_iterableToArrayLimit","l","_toConsumableArray","_arrayWithoutHoles","_nonIterableSpread","_arrayLikeToArray","toString","slice","name","from","test","_toPropertyKey","configurable","writable","_toPrimitive","toPrimitive","String","Number","ENEMY_ABILITIES","freeze","INK_DRINK","INCREASE_HEALTH","HAND_SIZE_REDUCTION","ADD_PEBBLES","ADD_MERCURY","ADD_CLUTTER","DOWNGRADE_CARDS","DAMAGE_TYPES","BUNNY","FIRE","LIGHTNING","POISON","SPECIAL_CARD_SUBTYPES","CURSE","UNIQUE","STATUS","DIFFICULTIES","EASY","MEDIUM","HARD","TRIGGER_EVENTS","CARD_PICKUP","RELIC_PICKUP","POTION_PICKUP","DRINK_POTION","ASSIGN_SHOP_PRICES","REST","COMBAT_START","POPULATE_PATHS","SHUFFLE_GRAVEYARD_INTO_DECK","PLAY_CARD","CAST_SPELLBOOK","COMBAT_END","DEAL_DAMAGE","DRAW_CARD","PATHS","EASY_FIGHT","MEDIUM_FIGHT","HARD_FIGHT","BOSS_FIGHT","SHOP","RELIC_OFFERING","GEM_OFFERING","CARD_OFFERING","ENCHANT","POTION_OFFERING","HOARD","PURGE","TRANSMUTE","SCREENS","MAIN","DECK","SETTINGS","MOD","COMBAT_DECK","GRAVEYARD","EXILE","RARITIES","BASIC_POLY","BASIC_MONO","COMMON","UNCOMMON","RARE","MYTHIC","LEGENDARY","PHASES","MAIN_MENU","DIFFICULTY_SELECTION","MYTHIC_RELIC_OFFERING","SOCKET_GEM","PATH_SELECTION","COMBAT","GAME_OVER","ACTIONS","NEW_GAME","SET_DIFFICULTY","GENERATE_STARTER_DECK","APPLY_DIFFICULTY_MODIFIERS","ADVANCE_PHASE","LOG_MESSAGE","CREATE_CARD_INSTANCE","POPULATE_RELIC_OFFERINGS","PICK_RELIC","POPULATE_PATH_OFFERINGS","PICK_PATH","POPULATE_CARD_OFFERINGS","PICK_CARD","POPULATE_POTION_OFFERINGS","PICK_POTION","POPULATE_GEM_OFFERINGS","OPEN_MOD_SCREEN","APPLY_CARD_MOD","SCREEN_CHANGE","POPULATE_SHOPFRONT","INCREASE_BASE_BUNNIES","GAIN_GOLD","PRACTICE_WANDWORK","LOOT_HOARD","START_TURN","CARD_TYPES","INSTANT","SPELL","REST_OPTIONS","HEAL","PRACTICE","difficultyModifiersMap","maxHealthModifier","goldModifier","basicCardCountModifier","luckModifier","shopPriceMultiplierModifier","restHealthRestoreModifier","enemyHealthMultiplierModifier","pathMap","rarity","isFight","leadsTo","difficulty","SPECIAL","enemyAbilityDataMap","baseValue","incrementValue","description","prefix","cardList","cardType","inkCost","bunnyAdd","bunnyMult","goldAdd","permanentlyUpgradeRandomCardsInDeck","cardDraw","exileOnCast","inkAdd","goldAddPerCardInDeck","bunnyAddPerCardInDeck","permanentlyUpgradeRandomCardsInHand","healPerCardInDeck","damage","inkCostIncreasePerLevel","damageMultiplierPerLevel","damageTypes","upgradesOnCast","damageRoll","dice","sides","flatBonus","heal","weakenEnemyHpPercent","unupgradable","unsocketable","uncastable","specialSubtype","gemList","relicList","triggers","bonusPages","bonusBaseBunnies","bonusHealth","BonusMulligans","bonusBooks","bonusInk","upgradeCard","bonusGold","upgradePotion","healPlayer","revealAnonymousPaths","nonDuplicable","bossOnly","damageTypeTrigger","multiplyDamage","ifLightningDrawCards","bonusHandSize","potionList","healthRestore","drinkableOutOfCombat","increaseMaxHp","capitalize","word","charAt","toUpperCase","shuffleArray","originalArray","array","j","Math","floor","random","_ref","weightedRandomChoice","weightedMap","entries","totalWeight","reduce","sum","_ref2","_ref3","_","weight","cumulative","_i","_entries","_entries$_i","key","changeScreen","dispatch","screen","type","payload","inspectDeck","inspectCombatDeck","inspectGraveyard","inspectExile","returnToMain","assignShopPrices","state","globalMultiplier","shopPriceMultiplier","basePrices","card","potion","gem","relic","rarityMultipliers","common","uncommon","rare","mythic","legendary","updatedShopfront","offerings","shopfront","map","entry","_item$rarity","_item$rarity$toLowerC","item","console","warn","basePrice","upgrades","upgradeCost","includes","toLowerCase","rarityMultiplier","price","round","log","concat","anonymizeObject","obj","anonymousNameDisplay","paths","path","rest","generateStarterDeck","error","modifiers","deck","basicMonoCards","_iterator","_step","createCardInstance","err","basicPolyCards","_iterator2","_step2","generateRandomCard","shuffledDeck","campaign","applyDifficultyModifiers","gold","basicCardCount","luck","restHealthRestore","maxHealth","health","enemyHealthMultiplier","advancePhaseTo","phaseAdvancedTo","values","currentPhase","handlePhaseTransitions","phase","populatePathOfferings","populateCardOfferings","populateRelicOfferings","populatePotionOfferings","populateGemOfferings","populateShopfront","initializeCombatPhase","currentPath","pickPath","index","_state$level","chosenPath","pathKey","pathData","level","newCards","_loop","some","existing","_ret","cards","selectedPotions","usedNames","Set","attempts","generateRandomPotion","has","add","potions","undefined","selected","maxRelics","_loop2","generateRandomRelic","relics","selectedGems","generateRandomGem","gems","_state$campaign$deck","_state$campaign$deck2","_triggerResult$result","misery","bossPath","fightWeights","fightPathKey","fightPath","allPaths","_ref4","_ref5","_ref6","_ref7","data","bossLevels","isBossLevel","allCardsSocketed","every","allCardsUnupgradable","filteredPaths","pathObj","rarityWeights","getLuckAdjustedRarityWeights","chosenRarities","chosenPaths","usedPaths","_loop3","_chosenRarities","_i3","candidates","p","pick","remainingPool","idx","splice","firstTwoAreFights","finalPaths","newMisery","thirdOptions","nonFights","fights","weightedPool","allFights","shopIndex","findIndex","replaceableOptions","ENCHANT_OFFERING","existingPaths","replacements","replacement","replacementData","anonChance","max","anonIndex","pathsAfterAnonymize","triggerResult","checkRelicTriggers","updatedPaths","result","updatedState","_iterator3","_step3","pickCard","sourceArrayName","combatRewards","sourceArray","pickedCard","_entry$item","charged","chargeGoldPrice","upgradedCard","updatedCampaign","updatedOfferings","newState","trashed","trashPile","pickRelic","pickedRelic","_entry$item$price","_entry$item2","relicPrice","chargedState","relicBelt","isOfferingPhase","updatedTrashPile","triggeredState","pickPotion","_offerings$combatRewa","pickedPotion","_entry$item$price2","_entry$item3","triggeredPotion","updatedPotionBelt","potionBelt","drinkPotion","combat","ink","amount","upgradeCardsInHand","hand","upgradable","numToUpgrade","min","shuffled","sort","toUpgrade","newHand","drawCard","addBunnies","multiplyBunnies","belt","newPotionBelt","newTrash","triggered","openModScreen","mod","_state$offerings$gems","originPhase","validKeys","chosenGemName","discardedGems","g","updatedRewards","reward","_mod$gem$price","_mod$gem","currentScreen","modData","origin","increaseBaseBunnies","newAmount","baseBunnies","applyModToCard","_state$modData","_state$modData2","updatedDeck","cardIndex","c","modifiedCard","upgrade","socketCardWithGem","purge","transmute","transmuteCard","nextPhase","shopfrontTypes","previousItems","discardedItems","updatedTrash","typeCounts","_i4","_Object$entries","_Object$entries$_i","count","generatedItems","usedKeys","_i5","_shopfrontTypes","attempt","gainGold","newGold","practiceWandwork","lootHoard","_state$defeatedEnemie","baseGold","levelBonus","enemiesDefeated","defeatedEnemies","enemyBonus","luckBonus","totalGold","hoardsLooted","amountToHeal","currentHealth","healedAmount","msg","startsWith","toggleDeckInspect","isInspectingDeck","returnTo","previousScreen","createInitialState","stage","mulligans","books","pages","handSize","graveyard","exile","spellbook","combatEnded","maxInk","maxBooks","bunnies","maxPages","enemy","difficulties","restOptions","selectDifficultyAndBeginGame","createGameApp","initialState","reducer","renderFn","action","cardName","found","find","createRelicInstance","relicName","createPotionInstance","potionName","createGemInstance","gemName","getRandomBossRelic","bossRelics","chosen","_ref8","_ref8$rarity","ownedRelics","HEARTSTONE","filtered","_state$level2","_state$defeatedEnemie2","_ref9","_ref9$rarity","_ref9$upgrades","_ref9$gem","finalRarity","totalFortune","upgradeWeights","finalUpgrades","defeatedCount","maxUpgrades","cappedUpgrades","_state$level3","_ref0","_ref0$rarity","_ref0$upgrades","basePotion","_ref1","_ref1$rarity","fallbackGem","chosenGem","healthCost","pow","baseName","replace","_upgradedCard$damageR","_upgradedCard$damageR2","_upgradedCard$damageR3","downgradeCard","undowngradable","downgradedCard","originalLevel","newLevel","levelDiff","applyHalvedBase","ceil","_downgradedCard$damag","_downgradedCard$damag2","_downgradedCard$damag3","upgradedPotion","socketedCard","upgradeLevel","applyEffect","baseAmount","perUpgrade","damageType","_iterator4","_step4","dmgType","_socketedCard$damageR","_socketedCard$damageR2","_socketedCard$damageR3","gemRoll","baseDice","baseSides","baseBonus","nameSuffix","_socketedCard$damageR4","context","triggerEvent","_relic$triggers","_updatedState$offerin","effect","newHealth","newMaxHealth","reduceInkCostOfFireCardsInDeck","modifiedCount","unshift","_campaign$mulligans","newMultiplier","getShopPriceMultiplier","_item$rarity2","_item$rarity2$toLower","_iterator5","_step5","_relic$triggers2","allTriggerKeys","isLightning","upgraded","weakenEnemyByPercent","cardToUpgrade","currentPaths","checkEnemyTriggers","_updatedState$combat","abilities","logMessages","newMaxInk","newInk","multiplier","enemyHp","hp","downgradable","toDowngrade","addCardToCombatDeck","modifyCombatInk","_state$combat$ink","_state$combat","_state$combat$maxInk","_state$combat2","current","actualChange","excludedSubtypes","alternatives","unchoosableByTransmute","newBase","purgeCard","_state$level4","_state$stage","_state$campaign$mulli","_state$baseBunnies","modifyEnemyAbilityPower","_ref11","currentValue","generateEnemy","deepDeckCopy","JSON","parse","stringify","newCombat","startTurn","_pathMap$path$path","_state$level5","_state$stage2","_state$enemyHealthMul","_baseHealthMap$diffic","_perLevelIncrement$di","_perStageMultiplier$s","isBoss","baseHealthMap","easy","medium","hard","boss","perLevelIncrement","perStageMultiplier","base","increment","stageMultiplier","allAbilities","selectedAbilities","numAbilities","_state$luck","bonusChance","size","ability","_iterator6","_step6","_data$baseValue","_data$incrementValue","_state$stage3","enemyLevel","smallMonsters","mediumMonsters","largeMonsters","vegetables","bossNames","_state$defeatedEnemie3","defeated","remainingBosses","monsterList","vegetable","monster","prefixes","_enemyAbilityDataMap$","Boolean","join","loot","generateEnemyLoot","_state$luck2","_state$level6","_state$campaign$deck3","_state$campaign","allGemmedOrUnsocketable","weights","dropsRemaining","chanceTwo","chanceThree","usedTypes","guaranteedGold","bossRelic","available","_ref12","_ref13","_ref14","_ref15","w","roll","_iterator7","_step7","_step7$value","_easy$medium$hard$dif","goldAmount","_card$name","_relic$name","color","numUpgrades","upgradableCards","upgradedCards","_state$combat3","newCard","combatDeck","insertIndex","gameReducer","_action$payload","potionIndex","potionToDrink","CLOSE_COMBAT_REWARDS","closeCombatRewards","MULLIGAN","mulligan","CLAIM_GOLD_REWARD","_action$payload2","newRewards","playCard","castSpellbook","EXIT_SHOP","exitShop","render","_state$campaign$deck4","_state$level7","_state$modData3","output","document","getElementById","createElement","id","body","appendChild","innerHTML","renderCardList","title","section","ul","li","textContent","renderModPhaseEntry","label","modKey","modBtn","style","fontSize","padding","onclick","disabled","info","acc","_ref16","_ref17","isCombatInspectScreen","combatSection","border","margin","_state$combat4","_state$combat$mulliga","_state$combat5","enemyBox","display","justifyContent","alignItems","fontWeight","marginBottom","nameSpan","hpSpan","gap","page","pageDiv","width","height","backgroundColor","spellbookLabel","castRow","allPagesBlank","castButton","bunnyDisplay","mulliganBtn","remaining","cursor","resourcesRow","inkDisplay","booksDisplay","handRow","flexWrap","_card$inkCost","cardBtn","cardCost","canAfford","isUncastable","costText","opacity","empty","handLabel","inspectRow","marginTop","_ref18","btn","inspectZoneLabel","_state$combat6","_state$combat7","_state$combat8","button","relicSection","pathSection","cardSection","potionSection","gemSection","shopSection","list","_entry$item$price3","_entry$item4","_state$gold","playerGold","isGem","exitBtn","modSection","isGemMod","restBtn","practiceBtn","_state$offerings","combatEndSection","hasUnclaimedLoot","rewardSection","shouldDisable","gameOverSection","classList","banner","gameOverResult","summary","newGameBtn","deckBtn","nextScreen","deckView","beltSection","isCombatPhase","isGameOver","isDrinkableNow","setupHotkeys","window","onload","onkeydown","_state$offerings$path","_state$offerings$comb","isPathSelection","parseInt","isNaN","isCombat","_state$combat$mulliga2","_state$combat9","_state$combat$hand","_card$inkCost2","preventDefault","toggleCombatInspect","relicIndex","isCombatEnd","_state$offerings$comb2","_state$combat$baseBun","newBook","fill","refillInkpot","shuffleGraveyardIntoDeck","_state$combat$graveya","_state$combat0","_state$combat$deck","_state$combat1","combinedDeck","checkCombatEndViaDeath","_state$combat$maxInk2","_state$combat10","_state$combat11","playerDead","enemyDead","combatEnd","currentCombat","takeDamage","skipDeathCheck","_currentCombat$deck","drawnCard","remainingDeck","checkCardTriggers","_card$triggers","_state$combat$bunnies","_state$combat$bunnies2","dmg","_options$skipDeathChe","options","trace","dealDamage","_options$isBonus","isBonus","newEnemyHp","_iterator8","_step8","checkGameOver","_card$inkCost3","resolveSpell","firstBlank","_updatedState$combat2","_iterator9","_step9","releaseBunnies","_state$combat$bunnies3","bunnyDamage","endTurn","remainingHand","updatedGraveyard","effects","deckSize","bunnyAmount","healAmount","upgradedDeck","upgradedHand","_updatedState$combat$","percent","baseHp","poisonDamage","types","_card$damageRoll","_card$damageRoll$flat","rollDice","typeList","upgradeSpecificCardInCampaignDeck","destination","updatedSpellbook","trashpile","_context$result","_updatedState$combat3","victory","_updatedState$combat$2","_enemy$loot","_updatedState$defeate","rewards","_updatedState$stage","newStage","_enemy$maxHp","_updatedState$combat$3","_updatedState$combat4","enemyMaxHp","maxHp","enemyCurrentHp","remainingEnemyHp","_enemy$name","_enemy$name2","cleanedCombat","finalState","_state$offerings2","logEntry","pathState","defeatedBosses","gameOver","gameResult","cleanedState","numDice","sidesPerDie","total","_state$campaign2","_relic$triggers3","_state$combat12"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n\n//#region enums\nconst ENEMY_ABILITIES = Object.freeze({\n  INK_DRINK: \"inkDrink\",\n  INCREASE_HEALTH: \"increaseHealth\",\n  HAND_SIZE_REDUCTION: \"handSizeReduction\",\n  ADD_PEBBLES: \"addOnePebble\",\n  ADD_MERCURY: \"addTwoMercury\",\n  ADD_CLUTTER: \"addThreeClutter\",\n  DOWNGRADE_CARDS: \"downgradeCards\",\n});\nconst DAMAGE_TYPES = Object.freeze({\n  BUNNY: \"Bunny\",\n  FIRE: \"Fire\",\n  LIGHTNING: \"Lightning\",\n  POISON: \"Poison\",\n});\nconst SPECIAL_CARD_SUBTYPES = Object.freeze({\n  CURSE: \"curse\",\n  UNIQUE: \"unique\",\n  STATUS: \"status\",\n});\nconst DIFFICULTIES = Object.freeze({\n  EASY: \"easy\",\n  MEDIUM: \"medium\",\n  HARD: \"hard\",\n});\nconst TRIGGER_EVENTS = Object.freeze({\n  CARD_PICKUP: \"CARD_PICKUP\",\n  RELIC_PICKUP: \"RELIC_PICKUP\",\n  POTION_PICKUP: \"POTION_PICKUP\",\n  DRINK_POTION: \"DRINK_POTION\",\n  ASSIGN_SHOP_PRICES: \"ASSIGN_SHOP_PRICES\",\n  REST: \"REST\",\n  COMBAT_START: \"COMBAT_START\",\n  POPULATE_PATHS: \"POPULATE_PATHS\",\n  SHUFFLE_GRAVEYARD_INTO_DECK: \"SHUFFLE_GRAVEYARD_INTO_DECK\",\n  PLAY_CARD: \"PLAY_CARD\",\n  CAST_SPELLBOOK: \"CAST_SPELLBOOK\",\n  COMBAT_END: \"COMBAT_END\",\n  DEAL_DAMAGE: \"DEAL_DAMAGE\",\n  DRAW_CARD: \"DRAW_CARD\",\n});\nconst PATHS = Object.freeze({\n  EASY_FIGHT: \"Easy Fight\",\n  MEDIUM_FIGHT: \"Medium Fight\",\n  HARD_FIGHT: \"Hard Fight\",\n  BOSS_FIGHT: \"Boss Fight\",\n  REST: \"Rest\",\n  SHOP: \"Shop\",\n  RELIC_OFFERING: \"Relic Offering\",\n  GEM_OFFERING: \"Gem Offering\",\n  CARD_OFFERING: \"Card Offering\",\n  ENCHANT: \"Enchant\",\n  POTION_OFFERING: \"Potion Offering\",\n  HOARD: \"Hoard\",\n  PURGE: \"Purge\",\n  TRANSMUTE: \"Transmute\",\n});\nconst SCREENS = Object.freeze({\n  MAIN: \"main view\",\n  DECK: \"inspect deck\",\n  SETTINGS: \"settings\",\n  MOD: \"modscreen\",\n  COMBAT_DECK: \"combat deck\",\n  GRAVEYARD: \"graveyard\",\n  EXILE: \"exile\",\n});\nconst RARITIES = Object.freeze({\n  BASIC_POLY: \"basic-poly\", // basic poly cards, several of which go in the starter deck.\n  BASIC_MONO: \"basic-mono\", // basic mono cards, only one goes in the starter deck.\n  COMMON: \"common\",\n  UNCOMMON: \"uncommon\",\n  RARE: \"rare\",\n  MYTHIC: \"mythic\",\n  LEGENDARY: \"legendary\",\n});\nconst PHASES = Object.freeze({\n  MAIN_MENU: \"main menu\",\n  DIFFICULTY_SELECTION: \"difficulty selection\",\n  MYTHIC_RELIC_OFFERING: \"mythic relic offering\",\n  RELIC_OFFERING: \"relic offering\",\n  CARD_OFFERING: \"card offering\",\n  GEM_OFFERING: \"gem offering\",\n  POTION_OFFERING: \"potion offering\",\n  COMBAT_END: \"combat end\",\n  SOCKET_GEM: \"socket gem\",\n  SHOP: \"shop\",\n  PATH_SELECTION: \"path selection\",\n  REST: \"rest\",\n  ENCHANT: \"ENCHANT\",\n  TRANSMUTE: \"transmute\",\n  COMBAT: \"combat\",\n  GAME_OVER: \"game over\",\n  PURGE: \"purge\",\n  HOARD: \"hoard\",\n});\nconst ACTIONS = Object.freeze({\n  NEW_GAME: \"NEW_GAME\",\n  SET_DIFFICULTY: \"SET_DIFFICULTY\",\n  GENERATE_STARTER_DECK: \"GENERATE_STARTER_DECK\",\n  APPLY_DIFFICULTY_MODIFIERS: \"APPLY_DIFFICULTY_MODIFIERS\",\n  ADVANCE_PHASE: \"ADVANCE_PHASE\",\n  LOG_MESSAGE: \"LOG_MESSAGE\",\n  CREATE_CARD_INSTANCE: \"CREATE_CARD_INSTANCE\",\n  POPULATE_RELIC_OFFERINGS: \"POPULATE_RELIC_OFFERINGS\",\n  PICK_RELIC: \"PICK_RELIC\",\n  POPULATE_PATH_OFFERINGS: \"POPULATE_PATH_OFFERINGS\",\n  PICK_PATH: \"PICK_PATH\",\n  POPULATE_CARD_OFFERINGS: \"POPULATE_CARD_OFFERINGS\",\n  PICK_CARD: \"PICK_CARD\",\n  POPULATE_POTION_OFFERINGS: \"POPULATE_POTION_OFFERINGS\",\n  PICK_POTION: \"PICK_POTION\",\n  DRINK_POTION: \"DRINK_POTION\",\n  POPULATE_GEM_OFFERINGS: \"POPULATE_GEM_OFFERINGS\",\n  OPEN_MOD_SCREEN: \"OPEN_MOD_SCREEN\",\n  APPLY_CARD_MOD: \"APPLY_CARD_MOD\",\n  SCREEN_CHANGE: \"SCREEN_CHANGE\",\n  POPULATE_SHOPFRONT: \"POPULATE_SHOPFRONT\",\n  INCREASE_BASE_BUNNIES: \"INCREASE_BASE_BUNNIES\",\n  GAIN_GOLD: \"GAIN_GOLD\",\n  PRACTICE_WANDWORK: \"PRACTICE_WANDWORK\",\n  LOOT_HOARD: \"LOOT_HOARD\",\n  REST: \"REST\",\n  START_TURN: \"START_TURN\",\n  DRAW_CARD: \"DRAW_CARD\", // triggered when a card is drawn\n  PICK_CARD: \"PICK_CARD\", // triggered when a card is added to your deck\n  CLOSE_COMBAT_REWARDS: \"CLOSE_COMBAT_REWARDS\",\n  CLAIM_GOLD_REWARD: \"CLAIM_GOLD_REWARD\",\n  PLAY_CARD: \"PLAY_CARD\", // triggered when a card is played\n  CAST_SPELLBOOK: \"CAST_SPELLBOOK\", // triggered when the spellbook is cast\n  EXIT_SHOP: \"EXIT_SHOP\",\n  MULLIGAN: \"MULLIGAN\",\n});\nconst CARD_TYPES = Object.freeze({\n  INSTANT: \"instant\", // resolves immediately when played, does not go to the spellbook.\n  SPELL: \"spell\", // goes to the spellbook when played, resolves when the spellbook is cast.\n  CURSE: \"curse\", // negative card that can be removed or purged.\n  STATUS: \"status\", // temporary effect card, like a buff or debuff.\n});\nconst REST_OPTIONS = Object.freeze({\n  HEAL: \"heal\",\n  PRACTICE: \"practice\",\n  ENCHANT: \"enchant\",\n});\n//#endregion enums\n//#region data maps\nconst difficultyModifiersMap = Object.freeze({\n  [DIFFICULTIES.EASY]: {\n    maxHealthModifier: 100,\n    goldModifier: 20,\n    basicCardCountModifier: 5,\n    luckModifier: 2,\n    shopPriceMultiplierModifier: -0.2, // 20% cheaper shop prices\n    restHealthRestoreModifier: 30, // heal 30 health when resting\n    enemyHealthMultiplierModifier: -0.2, // 20% less health for enemies\n  },\n  [DIFFICULTIES.MEDIUM]: {\n    maxHealthModifier: 75,\n    goldModifier: 10,\n    basicCardCountModifier: 8,\n    luckModifier: 1,\n    shopPriceMultiplierModifier: 0, // normal shop prices\n    restHealthRestoreModifier: 25, // heal 20 health when resting\n    enemyHealthMultiplierModifier: 0,\n  },\n  [DIFFICULTIES.HARD]: {\n    maxHealthModifier: 50,\n    goldModifier: 0,\n    basicCardCountModifier: 11,\n    luckModifier: 0,\n    shopPriceMultiplierModifier: 0.2, // 20% more expensive shop prices\n    restHealthRestoreModifier: 20, // heal 20 health when resting\n    enemyHealthMultiplierModifier: 0.2, // 20% more health for enemies\n  },\n});\nconst pathMap = Object.freeze({\n  [PATHS.EASY_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.EASY,\n  },\n  [PATHS.MEDIUM_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.MEDIUM,\n  },\n  [PATHS.HARD_FIGHT]: {\n    rarity: RARITIES.COMMON,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: DIFFICULTIES.HARD,\n  },\n  [PATHS.BOSS_FIGHT]: {\n    rarity: RARITIES.SPECIAL,\n    isFight: true,\n    leadsTo: PHASES.COMBAT,\n    difficulty: \"boss\",\n  },\n  [PATHS.REST]: { rarity: RARITIES.UNCOMMON, leadsTo: PHASES.REST },\n  [PATHS.SHOP]: { rarity: RARITIES.UNCOMMON, leadsTo: PHASES.SHOP },\n  [PATHS.RELIC_OFFERING]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.RELIC_OFFERING,\n  },\n  [PATHS.GEM_OFFERING]: { rarity: RARITIES.RARE, leadsTo: PHASES.GEM_OFFERING },\n  [PATHS.CARD_OFFERING]: {\n    rarity: RARITIES.UNCOMMON,\n    leadsTo: PHASES.CARD_OFFERING,\n  },\n  [PATHS.ENCHANT]: { rarity: RARITIES.RARE, leadsTo: PHASES.ENCHANT },\n  [PATHS.POTION_OFFERING]: {\n    rarity: RARITIES.RARE,\n    leadsTo: PHASES.POTION_OFFERING,\n  },\n  [PATHS.HOARD]: {\n    rarity: RARITIES.MYTHIC,\n    leadsTo: PHASES.HOARD,\n  },\n  [PATHS.PURGE]: { rarity: RARITIES.RARE, leadsTo: PHASES.PURGE },\n  [PATHS.TRANSMUTE]: { rarity: RARITIES.RARE, leadsTo: PHASES.TRANSMUTE },\n});\nconst enemyAbilityDataMap = {\n  [ENEMY_ABILITIES.INK_DRINK]: {\n    baseValue: 1,\n    incrementValue: 1,\n    description: \"Reduces player's ink at combat start\",\n    prefix: \"Inkdrinking\",\n  },\n  [ENEMY_ABILITIES.INCREASE_HEALTH]: {\n    baseValue: 1.5,\n    incrementValue: 0.5,\n    description: \"Increases enemy HP\",\n    prefix: \"Tanky\",\n  },\n  [ENEMY_ABILITIES.HAND_SIZE_REDUCTION]: {\n    baseValue: 2,\n    incrementValue: 1,\n    description: \"Reduces player's hand size at combat start\",\n    prefix: \"Maddening\",\n  },\n  [ENEMY_ABILITIES.ADD_PEBBLES]: {\n    baseValue: 1,\n    incrementValue: 2,\n    description: \"Adds Sisyphus' Pebble to your deck at combat start\",\n    prefix: \"Sisyphean\",\n  },\n  [ENEMY_ABILITIES.ADD_MERCURY]: {\n    baseValue: 2,\n    incrementValue: 2,\n    description: \"Adds Mercury Droplets to your deck at combat start\",\n    prefix: \"Mercurial\",\n  },\n  [ENEMY_ABILITIES.ADD_CLUTTER]: {\n    baseValue: 3,\n    incrementValue: 2,\n    description: \"Adds Clutter cards to your deck at combat start\",\n    prefix: \"Messy\",\n  },\n  [ENEMY_ABILITIES.DOWNGRADE_CARDS]: {\n    baseValue: 3,\n    incrementValue: 2,\n    description: \"Downgrades random cards in your combat deck at combat start\",\n    prefix: \"Withering\",\n  },\n};\n\n//#endregion data maps\n//#region data arrays of game objects\nconst cardList = [\n  {\n    name: \"Bunnymancy\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    inkCost: 1,\n    bunnyAdd: 6,\n  },\n  {\n    name: \"Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_POLY,\n    inkCost: 1,\n    bunnyMult: 2,\n  },\n  {\n    name: \"Fairy Gold\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    inkCost: 1,\n    goldAdd: 8,\n  },\n  {\n    name: \"Enchant Bookshelf\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.BASIC_MONO,\n    inkCost: 1,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ponder\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    cardDraw: 3,\n    exileOnCast: true,\n  },\n  {\n    name: \"Inkswell\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 1,\n    inkAdd: 2,\n    exileOnCast: true,\n  },\n  {\n    name: \"Cloudfluff Conjuration\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 0,\n    bunnyAdd: 8,\n  },\n  {\n    name: \"Cloudfluff Boon\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.RARE,\n    inkCost: 0,\n    bunnyAdd: 4,\n    exileOnCast: true,\n  },\n  {\n    name: \"Midas Touch\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    inkCost: 1,\n    goldAddPerCardInDeck: 1,\n  },\n  // {\n  //   name: \"Enchant Library\",\n  //   cardType: CARD_TYPES.SPELL,\n  //   rarity: RARITIES.RARE,\n  //   inkCost: 2,\n  //   permanentlyUpgradeRandomCardsInDeck: 3,\n  // },\n  {\n    name: \"Dusk Lotus\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    inkCost: 0,\n    inkAdd: 3,\n    exileOnCast: true,\n  },\n  {\n    name: \"Weasel's Bargain\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 0,\n    goldAdd: 8,\n    exileOnCast: true,\n  },\n  {\n    name: \"Carrot Festival\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    bunnyAddPerCardInDeck: 1,\n  },\n  {\n    name: \"Mega Bunnyplication\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.COMMON,\n    inkCost: 2,\n    bunnyMult: 3.5,\n  },\n  {\n    name: \"Enchant Fingertips\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 1,\n    permanentlyUpgradeRandomCardsInHand: 1,\n    exileOnCast: true,\n  },\n  {\n    name: \"Healing Light\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    inkCost: 1,\n    healPerCardInDeck: 1,\n  },\n  // {\n  //   name: \"Enchant Hands\",\n  //   cardType: CARD_TYPES.INSTANT,\n  //   rarity: RARITIES.RARE,\n  //   inkCost: 2,\n  //   permanentlyUpgradeRandomCardsInHand: 7,\n  // },\n  {\n    name: \"Wisdom of the Warrens\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.MYTHIC,\n    inkCost: 0,\n    cardDraw: 1,\n    exileOnCast: true,\n  },\n  {\n    name: \"Magic Missile\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    damage: 6,\n    inkCostIncreasePerLevel: 1,\n    damageMultiplierPerLevel: 2,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n  },\n  {\n    name: \"Fireball\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 3,\n    damage: 30,\n    inkCostIncreasePerLevel: 1,\n    damageMultiplierPerLevel: 2,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n  },\n  {\n    name: \"Lightning Bolt 1d4\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.COMMON,\n    inkCost: 1,\n    upgradesOnCast: 1,\n    exileOnCast: true,\n    damageTypes: [DAMAGE_TYPES.LIGHTNING],\n    damageRoll: {\n      dice: 1,\n      sides: 4,\n      flatBonus: 0,\n    },\n  },\n  {\n    name: \"Thunderstrike 2d2\",\n    cardType: CARD_TYPES.INSTANT,\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 2,\n    upgradesOnCast: 2,\n    exileOnCast: true,\n    damageTypes: [DAMAGE_TYPES.LIGHTNING],\n    damageRoll: {\n      dice: 2,\n      sides: 2,\n      flatBonus: 0,\n    },\n  },\n  {\n    name: \"Vampire Bunnies\",\n    cardType: CARD_TYPES.SPELL,\n    rarity: RARITIES.RARE,\n    inkCost: 1,\n    heal: 5,\n    bunnyAdd: 5,\n  },\n  {\n    name: \"Weaken\",\n    rarity: RARITIES.UNCOMMON,\n    inkCost: 1,\n    cardType: CARD_TYPES.SPELL,\n    damageTypes: [DAMAGE_TYPES.POISON],\n    weakenEnemyHpPercent: 0.15, // 15% max HP as bonus poison damage\n  },\n  // === Curses ===\n  {\n    name: \"Sisyphus' Pebble\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    uncastable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    // No effect; added to deck via events, not in loot pool\n  },\n  {\n    name: \"Clutter\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    uncastable: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n    // Added to combat deck by enemies; no effect\n  },\n  {\n    name: \"Mirage\",\n    cardType: CARD_TYPES.CURSE,\n    unupgradable: true,\n    unsocketable: true,\n    inkCost: 0,\n    exileOnCast: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n  },\n  {\n    name: \"Mercury Droplet\",\n    cardType: CARD_TYPES.INSTANT,\n    inkCost: 1,\n    unupgradable: true,\n    unsocketable: true,\n    exileOnCast: true,\n    specialSubtype: SPECIAL_CARD_SUBTYPES.CURSE,\n  },\n];\nconst gemList = [\n  {\n    name: \"Amethyst\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 3,\n  },\n  {\n    name: \"Lapis Lazuli\",\n    rarity: RARITIES.COMMON,\n    bunnyMult: 1.5,\n  },\n  // {\n  //   name: \"Sapphire\",\n  //   rarity: RARITIES.UNCOMMON,\n  //   cardDrawOnDraw: 1,\n  // },\n  {\n    name: \"Topaz\",\n    rarity: RARITIES.COMMON,\n    goldAdd: 7,\n  },\n  {\n    name: \"Jet\",\n    rarity: RARITIES.RARE,\n    permanentlyUpgradeRandomCardsInDeck: 1,\n  },\n  {\n    name: \"Ruby\",\n    rarity: RARITIES.RARE,\n    damage: 5,\n    damageTypes: [DAMAGE_TYPES.FIRE],\n    damageMultiplierPerLevel: 2,\n  },\n  // {\n  //   name: \"Amber\",\n  //   rarity: RARITIES.MYTHIC,\n  //   damageRoll: {\n  //     dice: 1,\n  //     sides: 4,\n  //     flatBonus: 0,\n  //   },\n  //   upgradesOnCast: 1,\n  //   damageTypes: [DAMAGE_TYPES.LIGHTNING],\n  // },\n  {\n    name: \"Moonstone\",\n    rarity: RARITIES.UNCOMMON,\n    heal: 10,\n  },\n  {\n    name: \"Emerald\",\n    rarity: RARITIES.UNCOMMON,\n    weakenEnemyHpPercent: 0.1, // Deals bonus damage equal to 10% of enemy max HP\n    damageTypes: [DAMAGE_TYPES.POISON],\n  },\n];\nconst relicList = [\n  {\n    name: \"Magic Scroll\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusPages: 1,\n      },\n    },\n  },\n  {\n    name: \"Magic Wand\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBaseBunnies: 3,\n      },\n    },\n  },\n  // {\n  //   name: \"Fabergé Egg\",\n  //   rarity: RARITIES.COMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       bonusGold: 100,\n  //     },\n  //   },\n  // },\n  {\n    name: \"Heartstone\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHealth: 50,\n      },\n    },\n  },\n  {\n    name: \"Cowbell\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        BonusMulligans: 1,\n      },\n    },\n  },\n  // {\n  //   // fix to reduce damage taken on combat loss.\n  //   name: \"Protective Amulet\",\n  //   rarity: RARITIES.UNCOMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       bonusHealth: 10,\n  //     },\n  //   },\n  // },\n  {\n    name: \"Encyclopedia\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n      },\n    },\n  },\n  {\n    name: \"Inkpot\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusInk: 2,\n      },\n    },\n  },\n  {\n    name: \"Cardsleeves\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        permanentlyUpgradeRandomCardsInDeck: 5,\n      },\n    },\n  },\n  // {\n  //   name: \"Magic Quill\",\n  //   rarity: RARITIES.LEGENDARY,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       bonusInk: 2,\n  //     },\n  //   },\n  // },\n  // {\n  //   name: \"Gold Bag\",\n  //   rarity: RARITIES.BASIC_POLY,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       bonusGold: 25,\n  //     },\n  //   },\n  // },\n  {\n    name: \"Whetstone\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        upgradeCard: true,\n      },\n    },\n  },\n  {\n    name: \"Porcelain Koi\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.CARD_PICKUP]: {\n        bonusGold: 5,\n        bonusHealth: 20,\n      },\n    },\n  },\n\n  {\n    name: \"Witch's Cauldron\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.POTION_PICKUP]: {\n        upgradePotion: true,\n      },\n    },\n  },\n  {\n    name: \"Glittering Vial\",\n    rarity: RARITIES.UNCOMMON,\n    triggers: {\n      [TRIGGER_EVENTS.DRINK_POTION]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  // {\n  //   name: \"Discount Voucher\",\n  //   rarity: RARITIES.COMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.ASSIGN_SHOP_PRICES]: {\n  //       shopPriceMultiplier: 0.8, // 20% cheaper shop prices\n  //     },\n  //   },\n  // },\n  // {\n  //   name: \"Sleeping Bag\",\n  //   rarity: RARITIES.COMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.REST]: {\n  //       healPlayer: 50,\n  //     },\n  //   },\n  // },\n  // {\n  //   name: \"Toothfairy's Charm\",\n  //   rarity: RARITIES.COMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.REST]: {\n  //       goldAdd: 50,\n  //     },\n  //   },\n  // },\n  // {\n  //   name: \"Planetarium Mobile\",\n  //   rarity: RARITIES.UNCOMMON,\n  //   triggers: {\n  //     [TRIGGER_EVENTS.REST]: {\n  //       permanentlyUpgradeRandomCardsInDeck: 2, // upgrade random cards in the deck when resting\n  //     },\n  //   },\n  // },\n  {\n    name: \"Dousing Rod\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.POPULATE_PATHS]: {\n        revealAnonymousPaths: true,\n      },\n    },\n    nonDuplicable: true,\n  },\n  {\n    name: \"Gem of Weakness\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.COMBAT_START]: {\n        weakenEnemyHpPercent: 0.1, // 10% reduction\n      },\n    },\n  },\n  {\n    name: \"Phylactery\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.SHUFFLE_GRAVEYARD_INTO_DECK]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Crystal Ball\",\n    rarity: RARITIES.MYTHIC,\n    triggers: {\n      [TRIGGER_EVENTS.DRAW_CARD]: {\n        bunnyAdd: 1,\n      },\n    },\n  },\n  {\n    name: \"Arcane Brush\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.PLAY_CARD]: {\n        bunnyAdd: 2,\n      },\n    },\n  },\n  {\n    name: \"Golden Carrot\",\n    rarity: RARITIES.LEGENDARY,\n    bossOnly: true,\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusBooks: 1,\n        bonusPages: 1,\n        bonusInk: 1,\n      },\n    },\n  },\n  {\n    name: \"Voynich Manuscript\",\n    rarity: RARITIES.RARE,\n    triggers: {\n      [TRIGGER_EVENTS.CAST_SPELLBOOK]: {\n        healPlayer: 5,\n      },\n    },\n  },\n  {\n    name: \"Corsair's Coin\",\n    rarity: RARITIES.COMMON,\n    triggers: {\n      [TRIGGER_EVENTS.COMBAT_END]: {\n        goldAdd: 25,\n      },\n    },\n  },\n  {\n    name: \"Carrot Staff\",\n    rarity: RARITIES.MYTHIC,\n    description: \"increases all Bunny damage you deal.\",\n    triggers: {\n      [TRIGGER_EVENTS.DEAL_DAMAGE]: {\n        damageTypeTrigger: DAMAGE_TYPES.BUNNY,\n        multiplyDamage: 1.5,\n      },\n    },\n  },\n  {\n    name: \"Lightning Rod\",\n    rarity: RARITIES.MYTHIC,\n    description: \"Whenever you cast a Lightning spell, draw 2 cards.\",\n    triggers: {\n      [TRIGGER_EVENTS.PLAY_CARD]: {\n        ifLightningDrawCards: 2,\n      },\n    },\n  },\n  // {\n  //   name: \"Firemage's Hat\",\n  //   rarity: RARITIES.MYTHIC,\n  //   description: \"All Fire cards cost 1 less ink.\",\n  //   triggers: {\n  //     [TRIGGER_EVENTS.RELIC_PICKUP]: {\n  //       reduceInkCostOfFireCardsInDeck: 1,\n  //     },\n  //     [TRIGGER_EVENTS.CARD_PICKUP]: {\n  //       reduceInkCostIfFire: 1,\n  //     },\n  //   },\n  // },\n  {\n    name: \"Thinking Cap\",\n    rarity: RARITIES.MYTHIC,\n    description: \"Your hand size is permanently increased by 3.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHandSize: 3,\n      },\n    },\n  },\n  {\n    name: \"Silk Gloves\",\n    rarity: RARITIES.COMMON,\n    description: \"Your hand size is permanently increased by 1.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHandSize: 1,\n      },\n    },\n  },\n  {\n    name: \"Ring of Athena\",\n    rarity: RARITIES.RARE,\n    description: \"Your hand size is permanently increased by 2.\",\n    triggers: {\n      [TRIGGER_EVENTS.RELIC_PICKUP]: {\n        bonusHandSize: 2,\n      },\n    },\n  },\n];\nconst potionList = [\n  {\n    name: \"Lesser Healing Potion\",\n    rarity: RARITIES.COMMON,\n    healthRestore: 10,\n  },\n  {\n    name: \"Healing Potion\",\n    rarity: RARITIES.UNCOMMON,\n    healthRestore: 15,\n  },\n  {\n    name: \"Greater Healing Potion\",\n    rarity: RARITIES.RARE,\n    healthRestore: 20,\n  },\n  {\n    name: \"Elixir of Life\",\n    rarity: RARITIES.MYTHIC,\n    healthRestore: 50,\n  },\n  {\n    name: \"Squid Brew\",\n    rarity: RARITIES.UNCOMMON,\n    bonusInk: 1,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Hearty Soup\",\n    rarity: RARITIES.RARE,\n    increaseMaxHp: 10,\n  },\n  {\n    name: \"Coconut Juice\",\n    rarity: RARITIES.COMMON,\n    increaseMaxHp: 2,\n  },\n  {\n    name: \"Ponderous Potion\",\n    rarity: RARITIES.UNCOMMON,\n    cardDraw: 2,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Bunny Brew\",\n    rarity: RARITIES.COMMON,\n    bunnyAdd: 5,\n    drinkableOutOfCombat: false,\n  },\n  {\n    name: \"Warren Elixir\",\n    rarity: RARITIES.RARE,\n    bunnyMult: 2,\n    drinkableOutOfCombat: false,\n  },\n];\n//#endregion\n//#region utility functions\nfunction capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\nfunction shuffleArray(originalArray) {\n  const array = [...originalArray]; // copy to avoid mutation\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction weightedRandomChoice(weightedMap) {\n  const entries = Object.entries(weightedMap);\n  const totalWeight = entries.reduce((sum, [_, weight]) => sum + weight, 0);\n  const r = Math.random() * totalWeight;\n  let cumulative = 0;\n\n  for (const [key, weight] of entries) {\n    cumulative += weight;\n    if (r <= cumulative) return key;\n  }\n}\nfunction changeScreen(dispatch, screen) {\n  dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: screen });\n}\nfunction inspectDeck(dispatch) {\n  changeScreen(dispatch, SCREENS.DECK);\n}\nfunction inspectCombatDeck(dispatch) {\n  changeScreen(dispatch, SCREENS.COMBAT_DECK);\n}\nfunction inspectGraveyard(dispatch) {\n  changeScreen(dispatch, SCREENS.GRAVEYARD);\n}\nfunction inspectExile(dispatch) {\n  changeScreen(dispatch, SCREENS.EXILE);\n}\nfunction returnToMain(dispatch) {\n  changeScreen(dispatch, SCREENS.MAIN);\n}\n\nfunction assignShopPrices(state) {\n  const globalMultiplier = state.shopPriceMultiplier || 1;\n\n  const basePrices = {\n    card: 10,\n    potion: 20,\n    gem: 30,\n    relic: 100,\n  };\n\n  const rarityMultipliers = {\n    common: 1,\n    uncommon: 1.2,\n    rare: 1.4,\n    mythic: 1.6,\n    legendary: 2,\n  };\n\n  const updatedShopfront = state.offerings.shopfront.map((entry) => {\n    const { type, item } = entry;\n\n    if (!item || !item.name) {\n      console.warn(\"Invalid shop item during price assignment:\", entry);\n      return entry;\n    }\n\n    const basePrice = basePrices[type] || 0;\n    const upgrades = item.upgrades || 0;\n    const upgradeCost = [\"card\", \"potion\"].includes(type) ? upgrades * 5 : 0;\n\n    const rarity = item.rarity?.toLowerCase?.() || \"common\";\n    const rarityMultiplier = rarityMultipliers[rarity] || 1;\n\n    const price = Math.round(\n      (basePrice + upgradeCost) * rarityMultiplier * globalMultiplier\n    );\n\n    return {\n      ...entry,\n      item: {\n        ...item,\n        price,\n      },\n    };\n  });\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: updatedShopfront,\n    },\n    log: [`Assigned prices to shop items.`, ...state.log],\n  };\n}\nfunction anonymizeObject(obj) {\n  return {\n    ...obj,\n    anonymousNameDisplay: true,\n  };\n}\nfunction revealAnonymousPaths(paths) {\n  return paths.map((path) => {\n    const { anonymousNameDisplay, ...rest } = path;\n    return rest;\n  });\n}\n\n//#endregion\n//#region reducer-action handlers\nfunction generateStarterDeck(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\n      \"Cannot generate starter deck: invalid difficulty:\",\n      difficulty\n    );\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n  const deck = [];\n\n  // 1. Add one of each basic mono card\n  const basicMonoCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_MONO\n  );\n  for (const card of basicMonoCards) {\n    deck.push(createCardInstance(card.name));\n  }\n\n  // 2. Add 3 of each basic poly card\n  const basicPolyCards = cardList.filter(\n    (card) => card.rarity === RARITIES.BASIC_POLY\n  );\n  for (const card of basicPolyCards) {\n    for (let i = 0; i < 3; i++) {\n      deck.push(createCardInstance(card.name));\n    }\n  }\n\n  // 3. Add additional random basic poly cards based on difficulty\n  for (let i = 0; i < modifiers.basicCardCountModifier; i++) {\n    const card = generateRandomCard(state, { rarity: RARITIES.BASIC_POLY });\n    if (card) deck.push(card);\n  }\n\n  // 4. Shuffle the deck (pure)\n  const shuffledDeck = shuffleArray(deck);\n\n  // 5. Return new state with updated campaign.deck\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: shuffledDeck,\n    },\n    log: [...state.log],\n  };\n}\n\nfunction applyDifficultyModifiers(state) {\n  const difficulty = state.difficulty;\n\n  if (!difficulty || !difficultyModifiersMap[difficulty]) {\n    console.error(\"Invalid or missing difficulty:\", difficulty);\n    return state;\n  }\n\n  const modifiers = difficultyModifiersMap[difficulty];\n\n  return {\n    ...state,\n    gold: state.gold + modifiers.goldModifier,\n    basicCardCount: state.basicCardCount + modifiers.basicCardCountModifier,\n    luck: (state.luck || 0) + (modifiers.luckModifier || 0),\n    shopPriceMultiplier:\n      (state.shopPriceMultiplier || 1) +\n      (modifiers.shopPriceMultiplierModifier || 0),\n    restHealthRestore:\n      (state.restHealthRestore || 0) +\n      (modifiers.restHealthRestoreModifier || 0),\n    maxHealth: state.maxHealth + modifiers.maxHealthModifier,\n    health: state.health + modifiers.maxHealthModifier,\n    enemyHealthMultiplier:\n      (state.enemyHealthMultiplier || 1) +\n      (modifiers.enemyHealthMultiplierModifier || 0),\n  };\n}\n\nfunction advancePhaseTo(state, phaseAdvancedTo) {\n  console.log(\">>> Advancing to phase:\", phaseAdvancedTo);\n\n  if (!Object.values(PHASES).includes(phaseAdvancedTo)) {\n    console.error(\"Invalid phase passed to advancePhaseTo:\", phaseAdvancedTo);\n    return state;\n  }\n\n  return {\n    ...state,\n    currentPhase: phaseAdvancedTo,\n  };\n}\nfunction handlePhaseTransitions(state) {\n  const phase = state.currentPhase;\n\n  switch (phase) {\n    case PHASES.DIFFICULTY_SELECTION:\n      return {\n        ...state,\n        log: [\"Choose your difficulty.\", ...state.log],\n      };\n\n    case PHASES.PATH_SELECTION:\n      console.log(\">> Entering PHASES.PATH_SELECTION\");\n      return populatePathOfferings(state);\n\n    case PHASES.CARD_OFFERING:\n      console.log(\">> Entering PHASES.CARD_OFFERING\");\n      return populateCardOfferings(state);\n\n    case PHASES.MYTHIC_RELIC_OFFERING:\n      console.log(\">> Entering PHASES.MYTHIC_RELIC_OFFERING .\");\n      return populateRelicOfferings(state, RARITIES.MYTHIC);\n\n    case PHASES.RELIC_OFFERING:\n      console.log(\">> Entering PHASES.RELIC_OFFERING.\");\n      return populateRelicOfferings(state);\n\n    case PHASES.POTION_OFFERING:\n      console.log(\">> Entering POTION_OFFERING phase.\");\n      return populatePotionOfferings(state);\n\n    case PHASES.GEM_OFFERING:\n      console.log(\">> Entering GEM_OFFERING phase.\");\n      return populateGemOfferings(state);\n\n    case PHASES.SHOP:\n      return populateShopfront(state);\n\n    case PHASES.COMBAT:\n      return initializeCombatPhase(state, state.currentPath);\n\n    default:\n      return state;\n  }\n}\nfunction pickPath(state, index) {\n  const paths = state.offerings.paths;\n\n  if (!paths || index < 0 || index >= paths.length) {\n    console.error(\"Invalid path index:\", index);\n    return state;\n  }\n\n  const chosenPath = paths[index];\n  const pathKey = chosenPath.path;\n  const pathData = pathMap[pathKey];\n\n  if (!pathData || !pathData.leadsTo) {\n    console.error(\"Path has no destination phase:\", pathKey);\n    return state;\n  }\n\n  return handlePhaseTransitions({\n    ...state,\n    level: (state.level ?? 0) + 1,\n    currentPath: chosenPath, // ✅ store the path here\n    currentPhase: pathData.leadsTo,\n    log: [`Chose path: ${pathKey}`, ...state.log],\n    offerings: {\n      ...state.offerings,\n      paths: [],\n    },\n  });\n}\nfunction populateCardOfferings(state) {\n  const newCards = [];\n\n  while (newCards.length < 3) {\n    const card = generateRandomCard(state);\n    if (!card) continue;\n    if (newCards.some((existing) => existing.name === card.name)) continue;\n    newCards.push(card);\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      cards: newCards,\n    },\n  };\n}\nfunction populatePotionOfferings(state) {\n  const selectedPotions = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedPotions.length < 3 && attempts < 50) {\n    attempts++;\n\n    const potion = generateRandomPotion(state);\n    if (!potion) continue;\n\n    if (usedNames.has(potion.name)) continue;\n\n    selectedPotions.push(potion);\n    usedNames.add(potion.name);\n  }\n\n  if (selectedPotions.length < 3) {\n    console.warn(\"Not enough unique potions to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      potions: selectedPotions,\n    },\n  };\n}\nfunction populateRelicOfferings(state, rarity = null) {\n  const selected = [];\n  const maxRelics = 3;\n\n  while (selected.length < maxRelics) {\n    const relic = generateRandomRelic(state, { rarity });\n\n    // Ensure uniqueness by name\n    if (selected.some((r) => r.name === relic.name)) continue;\n\n    selected.push(relic);\n  }\n\n  console.log(\"Selected relic offerings:\", selected);\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      relics: selected,\n    },\n  };\n}\nfunction populateGemOfferings(state) {\n  const selectedGems = [];\n  const usedNames = new Set();\n  let attempts = 0;\n\n  while (selectedGems.length < 3 && attempts < 50) {\n    attempts++;\n\n    const gem = generateRandomGem(state);\n    if (!gem) continue;\n\n    if (usedNames.has(gem.name)) continue;\n\n    selectedGems.push(gem);\n    usedNames.add(gem.name);\n  }\n\n  if (selectedGems.length < 3) {\n    console.warn(\"Not enough unique gems to populate full offering.\");\n  }\n\n  return {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      gems: selectedGems,\n    },\n  };\n}\nfunction populatePathOfferings(state) {\n  const luck = state.luck || 0;\n  const misery = state.misery || 0;\n  const level = state.level || 0;\n\n  // === Step 0: Boss override ===\n  if ([15, 30, 45].includes(level)) {\n    const bossPath = {\n      path: PATHS.BOSS_FIGHT,\n      ...pathMap[PATHS.BOSS_FIGHT],\n    };\n    return {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        paths: [bossPath, bossPath, bossPath],\n      },\n      log: [`Boss floor! All paths lead to a boss fight.`, ...state.log],\n    };\n  }\n\n  // === Step 1: Always pick 1 fight path ===\n  const fightWeights = {\n    [PATHS.EASY_FIGHT]: 3,\n    [PATHS.MEDIUM_FIGHT]: 2,\n    [PATHS.HARD_FIGHT]: 1,\n  };\n  const fightPathKey = weightedRandomChoice(fightWeights);\n  const fightPath = {\n    path: fightPathKey,\n    ...pathMap[fightPathKey],\n  };\n\n  // === Step 2: Create pool of all valid paths (excluding duplicate of picked fight) ===\n  const allPaths = Object.entries(pathMap)\n    .filter(([key]) => key !== fightPathKey)\n    .map(([path, data]) => ({ path, ...data }));\n\n  const bossLevels = [15, 30, 45];\n  const isBossLevel = bossLevels.includes(level);\n\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null || card.unsocketable);\n\n  const allCardsUnupgradable =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.unupgradable);\n\n  const filteredPaths = allPaths.filter((pathObj) => {\n    if (pathObj.path === PATHS.BOSS_FIGHT && !isBossLevel) return false;\n    if (pathObj.path === PATHS.GEM_OFFERING && allCardsSocketed) return false;\n    if (pathObj.path === PATHS.ENCHANT && allCardsUnupgradable) return false;\n    return true;\n  });\n\n  // === Step 3: Pick first two paths using rarity weights ===\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n  const chosenRarities = [\n    weightedRandomChoice(rarityWeights),\n    weightedRandomChoice(rarityWeights),\n  ];\n\n  const chosenPaths = [];\n  const usedPaths = new Set([fightPathKey]);\n\n  for (const rarity of chosenRarities) {\n    const candidates = filteredPaths.filter(\n      (p) => p.rarity === rarity && !usedPaths.has(p.path)\n    );\n    if (candidates.length > 0) {\n      const pick = candidates[Math.floor(Math.random() * candidates.length)];\n      usedPaths.add(pick.path);\n      chosenPaths.push(pick);\n    }\n  }\n\n  // === Step 4: Fill in missing 2nd path if needed\n  const remainingPool = filteredPaths.filter((p) => !usedPaths.has(p.path));\n  while (chosenPaths.length < 2 && remainingPool.length > 0) {\n    const idx = Math.floor(Math.random() * remainingPool.length);\n    const pick = remainingPool.splice(idx, 1)[0];\n    usedPaths.add(pick.path);\n    chosenPaths.push(pick);\n  }\n\n  // === Step 5: Optional override for 3rd path using misery + luck if both are fights\n  const firstTwoAreFights = chosenPaths.every((p) => p.isFight);\n  let finalPaths = [fightPath, ...chosenPaths];\n  let newMisery = misery;\n\n  if (firstTwoAreFights && misery > 0 && remainingPool.length > 0) {\n    const thirdOptions = remainingPool.filter((p) => !usedPaths.has(p.path));\n    if (thirdOptions.length > 0) {\n      const nonFights = thirdOptions.filter((p) => !p.isFight);\n      const fights = thirdOptions.filter((p) => p.isFight);\n\n      const weightedPool = [];\n      nonFights.forEach((p) => {\n        for (let i = 0; i < misery + luck; i++) weightedPool.push(p);\n      });\n      fights.forEach((p) => {\n        weightedPool.push(p); // 1 weight each\n      });\n\n      if (weightedPool.length > 0) {\n        const pick =\n          weightedPool[Math.floor(Math.random() * weightedPool.length)];\n        usedPaths.add(pick.path);\n        finalPaths[2] = pick;\n        if (!pick.isFight) newMisery = misery - 1;\n      }\n    }\n  }\n\n  // === Step 6: Check again if all 3 are fights and increment misery\n  const allFights = finalPaths.every((p) => p.isFight);\n  if (allFights) newMisery++;\n\n  // === Step 6.5: Replace SHOP if player is broke\n  if (state.gold < 100) {\n    const shopIndex = finalPaths.findIndex((p) => p.path === PATHS.SHOP);\n    if (shopIndex !== -1) {\n      const replaceableOptions = [\n        PATHS.REST,\n        PATHS.PURGE,\n        PATHS.TRANSMUTE,\n        PATHS.CARD_OFFERING,\n        PATHS.RELIC_OFFERING,\n        PATHS.ENCHANT_OFFERING,\n      ];\n      const existingPaths = new Set(finalPaths.map((p) => p.path));\n      const replacements = replaceableOptions.filter(\n        (p) => !existingPaths.has(p)\n      );\n\n      if (replacements.length > 0) {\n        const replacement =\n          replacements[Math.floor(Math.random() * replacements.length)];\n        const replacementData = pathMap[replacement];\n\n        if (replacementData) {\n          finalPaths[shopIndex] = {\n            path: replacement,\n            ...replacementData,\n          };\n          console.log(\n            `💰 Replaced SHOP with ${replacement} because player has < 100 gold.`\n          );\n        } else {\n          console.warn(\n            `⚠️ No data found in pathMap for replacement path: ${replacement}`\n          );\n        }\n      }\n    }\n  }\n\n  // === Step 7: Randomly anonymize one path based on (50% - luck) chance\n  const anonChance = Math.max(0, 0.5 - (state.luck || 0) * 0.01);\n  const anonIndex = Math.floor(Math.random() * finalPaths.length);\n\n  let pathsAfterAnonymize = finalPaths;\n\n  if (Math.random() < anonChance) {\n    pathsAfterAnonymize = finalPaths.map((path, index) =>\n      index === anonIndex ? anonymizeObject(path) : path\n    );\n  }\n\n  // === Step 8: Apply relic triggers\n  const triggerResult = checkRelicTriggers(\n    state,\n    TRIGGER_EVENTS.POPULATE_PATHS,\n    {\n      payload: pathsAfterAnonymize,\n    }\n  );\n\n  const updatedPaths = triggerResult.result?.paths || pathsAfterAnonymize;\n  const updatedState = { ...triggerResult };\n\n  // Final sanity check for undefineds\n  for (const path of updatedPaths) {\n    if (!path || !path.path) {\n      console.warn(\"⚠️ Invalid path in final offerings:\", path);\n    }\n  }\n\n  console.log(\"📍 Populating path offerings with:\", updatedPaths);\n  return {\n    ...updatedState,\n    misery: newMisery,\n    offerings: {\n      ...updatedState.offerings,\n      paths: updatedPaths,\n    },\n  };\n}\n\nfunction pickCard(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  let sourceArrayName = null;\n\n  if (offerings.cards && index < offerings.cards.length) {\n    sourceArrayName = \"cards\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid card index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap\n  const pickedCard =\n    sourceArrayName === \"shopfront\"\n      ? entry.item\n      : sourceArrayName === \"combatRewards\"\n      ? entry.value\n      : entry;\n\n  if (!pickedCard || !pickedCard.name) {\n    console.warn(\"⚠️ Picked card is invalid:\", pickedCard);\n  }\n\n  if (!pickedCard) {\n    console.error(\"No card found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const price = entry.item?.price !== undefined ? entry.item.price : 20;\n    const charged = chargeGoldPrice(state, price, \"card\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  // === 3. Trigger relics BEFORE adding to deck ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.CARD_PICKUP,\n    {\n      payload: pickedCard,\n    }\n  );\n\n  const upgradedCard = triggerResult.result || pickedCard;\n  updatedState = { ...triggerResult, result: undefined };\n\n  // === 4. Add to campaign deck ===\n  const updatedCampaign = {\n    ...updatedState.campaign,\n    deck: [...updatedState.campaign.deck, upgradedCard],\n  };\n\n  // === 5. Remove from offerings ===\n  const updatedOfferings = {\n    ...updatedState.offerings,\n    [sourceArrayName]: sourceArray.filter((_, i) => i !== index),\n  };\n\n  // === 6. Build new state ===\n  let newState = {\n    ...updatedState,\n    campaign: updatedCampaign,\n    offerings: updatedOfferings,\n    log: [`Picked card: ${upgradedCard.name}`, ...updatedState.log],\n  };\n\n  // === 7. Trash if from offering ===\n  if (phase === PHASES.CARD_OFFERING) {\n    const trashed = sourceArray.filter((_, i) => i !== index);\n    newState = {\n      ...newState,\n      trashPile: [...(newState.trashPile || []), ...trashed],\n      offerings: {\n        ...newState.offerings,\n        [sourceArrayName]: [],\n      },\n    };\n\n    newState = handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\nfunction pickRelic(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  if (offerings.relics && index < offerings.relics.length) {\n    sourceArrayName = \"relics\";\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n  } else if (\n    offerings.combatRewards &&\n    index < offerings.combatRewards.length\n  ) {\n    sourceArrayName = \"combatRewards\";\n  } else {\n    console.error(\"Invalid relic index:\", index);\n    return state;\n  }\n\n  const sourceArray = offerings[sourceArrayName];\n  const entry = sourceArray[index];\n\n  // 🛠️ Unwrap relic from shopfront if needed\n  const pickedRelic =\n    sourceArrayName === \"shopfront\"\n      ? entry.item\n      : sourceArrayName === \"combatRewards\"\n      ? entry.value\n      : entry;\n  if (!pickedRelic) {\n    console.error(\"No relic found at index:\", index);\n    return state;\n  }\n\n  // === 2. Charge gold if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const relicPrice = entry.item?.price ?? 50;\n    const chargedState = chargeGoldPrice(state, relicPrice, \"relic\");\n    if (chargedState === state) return state; // not enough gold\n    updatedState = chargedState;\n  }\n\n  // === 3. Add relic to belt ===\n  updatedState = {\n    ...updatedState,\n    relicBelt: [...updatedState.relicBelt, pickedRelic],\n  };\n\n  // === 4. Remove the picked relic from offerings ===\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 5. Trash unchosen relics if from offering phase ===\n  const isOfferingPhase = [\n    PHASES.MYTHIC_RELIC_OFFERING,\n    PHASES.RELIC_OFFERING,\n  ].includes(phase);\n\n  let updatedTrashPile = updatedState.trashPile;\n  if (isOfferingPhase) {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.relics.filter((_, i) => i !== index),\n    ];\n    offerings.relics = [];\n  }\n\n  // === 6. Build the new state ===\n  const newState = {\n    ...updatedState,\n    trashPile: updatedTrashPile, // ✅ Root-level trash pile\n    offerings,\n    log: [`Picked relic: ${pickedRelic.name}`, ...updatedState.log],\n  };\n\n  // === 7. Trigger relic effects\n  const triggeredState = checkRelicTriggers(\n    newState,\n    TRIGGER_EVENTS.RELIC_PICKUP,\n    { relic: pickedRelic }\n  );\n\n  // === 8. Advance phase if in offering\n  if (isOfferingPhase) {\n    return handlePhaseTransitions(\n      advancePhaseTo(triggeredState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return triggeredState;\n}\n\nfunction pickPotion(state, index) {\n  const phase = state.currentPhase;\n  const offerings = { ...state.offerings };\n\n  // === 1. Determine the source array ===\n  let sourceArrayName = null;\n  let sourceArray = null;\n\n  if (offerings.potions && index < offerings.potions.length) {\n    sourceArrayName = \"potions\";\n    sourceArray = offerings.potions;\n  } else if (offerings.shopfront && index < offerings.shopfront.length) {\n    sourceArrayName = \"shopfront\";\n    sourceArray = offerings.shopfront;\n  } else if (\n    phase === PHASES.COMBAT_END &&\n    offerings.combatRewards &&\n    offerings.combatRewards[index]?.type === \"potion\"\n  ) {\n    sourceArrayName = \"combatRewards\";\n    sourceArray = offerings.combatRewards;\n  } else {\n    console.error(\"Invalid potion index:\", index);\n    return state;\n  }\n\n  const entry = sourceArray[index];\n\n  // === 2. Unwrap the potion if needed ===\n  let pickedPotion;\n  if (sourceArrayName === \"shopfront\") {\n    pickedPotion = entry.item;\n  } else if (sourceArrayName === \"combatRewards\") {\n    pickedPotion = entry.value;\n  } else {\n    pickedPotion = entry;\n  }\n\n  if (!pickedPotion) {\n    console.error(\"No potion found at index:\", index);\n    return state;\n  }\n\n  // === 3. Charge cost if in shop ===\n  let updatedState = state;\n  if (phase === PHASES.SHOP) {\n    const price = entry.item?.price ?? 30;\n    const charged = chargeGoldPrice(state, price, \"potion\");\n    if (charged === state) return state; // not enough gold\n    updatedState = charged;\n  }\n\n  // === 4. Apply pickup relic triggers (may upgrade the potion) ===\n  const triggerResult = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.POTION_PICKUP,\n    { payload: pickedPotion }\n  );\n  const triggeredPotion = triggerResult.result;\n  updatedState = { ...triggerResult }; // includes possible log/relic changes\n\n  // === 5. Add to potion belt ===\n  const updatedPotionBelt = [...updatedState.potionBelt, triggeredPotion];\n\n  // === 6. Remove picked potion from source\n  offerings[sourceArrayName] = sourceArray.filter((_, i) => i !== index);\n\n  // === 7. Trash unchosen potions if from potion offering\n  let updatedTrashPile = updatedState.trashPile;\n  if (phase === PHASES.POTION_OFFERING && sourceArrayName === \"potions\") {\n    updatedTrashPile = [\n      ...(updatedTrashPile || []),\n      ...offerings.potions.filter((_, i) => i !== index),\n    ];\n    offerings.potions = [];\n  }\n\n  // === 8. Build new state\n  const newState = {\n    ...updatedState,\n    potionBelt: updatedPotionBelt,\n    trashPile: updatedTrashPile,\n    offerings,\n    log: [`Picked potion: ${pickedPotion.name}`, ...updatedState.log],\n  };\n\n  // === 9. Advance phase if from potion offering\n  if (phase === PHASES.POTION_OFFERING) {\n    return handlePhaseTransitions(\n      advancePhaseTo(newState, PHASES.PATH_SELECTION)\n    );\n  }\n\n  return newState;\n}\n\nfunction drinkPotion(state, potion) {\n  if (!potion) {\n    console.error(\"No potion passed to drinkPotion\");\n    return state;\n  }\n\n  console.log(\"🧪 Drinking potion:\", potion);\n\n  let updatedState = { ...state };\n\n  // === 1. Apply effects ===\n  if (potion.healthRestore) {\n    updatedState = heal(updatedState, potion.healthRestore);\n  }\n\n  if (potion.bonusInk && state.currentPhase === PHASES.COMBAT) {\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        ink: updatedState.combat.ink + potion.bonusInk,\n      },\n      log: [\n        `Gained ${potion.bonusInk} bonus ink from ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  if (potion.increaseMaxHp) {\n    const amount = potion.increaseMaxHp;\n    updatedState = {\n      ...updatedState,\n      maxHealth: updatedState.maxHealth + amount,\n      health: updatedState.health + amount,\n      log: [\n        `Max and current HP increased by ${amount} from ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  // === Upgrade cards in hand (if applicable) ===\n  if (\n    potion.upgradeCardsInHand &&\n    state.currentPhase === PHASES.COMBAT &&\n    updatedState.combat.hand\n  ) {\n    const hand = [...updatedState.combat.hand];\n    const upgradable = hand.filter(\n      (card) => !card.unupgradable && typeof card.upgrades === \"number\"\n    );\n    const numToUpgrade = Math.min(potion.upgradeCardsInHand, upgradable.length);\n\n    const shuffled = [...upgradable].sort(() => Math.random() - 0.5);\n    const toUpgrade = shuffled.slice(0, numToUpgrade);\n\n    const newHand = hand.map((card) => {\n      if (toUpgrade.includes(card)) {\n        return { ...card, upgrades: card.upgrades + 1 };\n      }\n      return card;\n    });\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        hand: newHand,\n      },\n      log: [\n        `Upgraded ${toUpgrade.length} card(s) in hand with ${potion.name}`,\n        ...updatedState.log,\n      ],\n    };\n  }\n\n  // === Always apply draw, bunnyAdd, bunnyMult if present ===\n  if (potion.cardDraw && state.currentPhase === PHASES.COMBAT) {\n    for (let i = 0; i < potion.cardDraw; i++) {\n      updatedState = drawCard(updatedState);\n    }\n  }\n\n  if (potion.bunnyAdd) {\n    updatedState = addBunnies(updatedState, potion.bunnyAdd);\n  }\n\n  if (potion.bunnyMult) {\n    updatedState = multiplyBunnies(updatedState, potion.bunnyMult);\n  }\n\n  // === 2. Remove potion from belt and add to trash ===\n  const belt = updatedState.potionBelt || [];\n  const index = belt.findIndex((p) => p.name === potion.name);\n  const newPotionBelt =\n    index >= 0 ? [...belt.slice(0, index), ...belt.slice(index + 1)] : belt;\n  const newTrash = [...updatedState.trashPile, potion];\n\n  updatedState = {\n    ...updatedState,\n    potionBelt: newPotionBelt,\n    trashPile: newTrash,\n  };\n\n  // === 3. Trigger relic effects\n  const triggered = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.DRINK_POTION,\n    { potion }\n  );\n\n  return {\n    ...triggered,\n    log: triggered.log || updatedState.log,\n  };\n}\n\nfunction openModScreen(state, mod, originPhase = null) {\n  const validKeys = [\"upgrade\", \"gem\", \"purge\", \"transmute\"];\n  const keys = Object.keys(mod || {});\n  if (keys.length !== 1 || !validKeys.includes(keys[0])) {\n    console.error(\"Invalid mod passed to openModScreen:\", mod);\n    return state;\n  }\n\n  // === GEM LOGIC: Discard unchosen gems only if from gem offering ===\n  if (mod.gem && (state.offerings.gems?.length || 0) > 0) {\n    const chosenGemName = mod.gem.name;\n\n    const discardedGems = state.offerings.gems.filter(\n      (g) => g.name !== chosenGemName\n    );\n\n    state = {\n      ...state,\n      campaign: {\n        ...state.campaign,\n        trashPile: [...state.trashPile, ...discardedGems],\n      },\n      offerings: {\n        ...state.offerings,\n        gems: [], // clear offering gems\n      },\n      log: [`Discarded ${discardedGems.length} unchosen gem(s).`, ...state.log],\n    };\n  }\n\n  // === If the chosen gem came from combat rewards, remove it ===\n  if (\n    mod.gem &&\n    state.currentPhase === PHASES.COMBAT_END &&\n    Array.isArray(state.offerings.combatRewards)\n  ) {\n    const updatedRewards = state.offerings.combatRewards.filter(\n      (reward) => reward.type !== \"gem\" || reward.value.name !== mod.gem.name\n    );\n\n    state = {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        combatRewards: updatedRewards,\n      },\n      log: [`Picked gem: ${mod.gem.name}`, ...state.log],\n    };\n  }\n\n  // === Charge gold if in shop ===\n  if (state.currentPhase === PHASES.SHOP) {\n    const price = mod?.gem?.price ?? 50;\n\n    const charged = chargeGoldPrice(state, price, \"card modification\");\n    if (charged === state) return state; // insufficient gold\n    state = charged;\n  }\n\n  // Remove purchased gem from shopfront\n  if (mod.gem && Array.isArray(state.offerings.shopfront)) {\n    const updatedShopfront = state.offerings.shopfront.filter(\n      (entry) => !(entry.type === \"gem\" && entry.item.name === mod.gem.name)\n    );\n\n    state = {\n      ...state,\n      offerings: {\n        ...state.offerings,\n        shopfront: updatedShopfront,\n      },\n      log: [`Purchased gem: ${mod.gem.name}`, ...state.log],\n    };\n  }\n\n  return {\n    ...state,\n    currentScreen: SCREENS.MOD,\n    modData: {\n      mod,\n      origin: originPhase || state.currentPhase,\n    },\n    log: [`Opened mod screen (${keys[0]}).`, ...state.log],\n  };\n}\n\nfunction increaseBaseBunnies(state, amount) {\n  const newAmount = Math.max(0, (state.baseBunnies || 0) + amount);\n\n  return {\n    ...state,\n    baseBunnies: newAmount,\n    log: [`Base bunnies increased by ${amount}.`, ...state.log],\n  };\n}\nfunction applyModToCard(state, card) {\n  const mod = state.modData?.mod;\n  const origin = state.modData?.origin;\n\n  if (!mod || !card) {\n    console.warn(\"applyModToCard called without a valid mod or card.\");\n    return state;\n  }\n\n  let updatedDeck = [...state.campaign.deck];\n  const cardIndex = updatedDeck.findIndex((c) => c === card);\n\n  if (cardIndex === -1) {\n    console.warn(\"Card not found in campaign deck.\");\n    return state;\n  }\n\n  // Apply mod\n  let modifiedCard = { ...card };\n  if (mod.upgrade) {\n    modifiedCard = upgradeCard(modifiedCard, mod.upgrade);\n  } else if (mod.gem) {\n    modifiedCard = socketCardWithGem(modifiedCard, mod.gem);\n  } else if (mod.purge) {\n    updatedDeck.splice(cardIndex, 1); // Remove the card\n  } else if (mod.transmute) {\n    modifiedCard = transmuteCard(modifiedCard);\n  }\n\n  // Replace modified card if not purged\n  if (!mod.purge) {\n    updatedDeck[cardIndex] = modifiedCard;\n  }\n\n  // Determine next phase\n  const nextPhase =\n    origin === PHASES.SHOP || origin === PHASES.COMBAT_END\n      ? origin\n      : PHASES.PATH_SELECTION;\n\n  const updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n    },\n    modData: null,\n    currentScreen: SCREENS.MAIN,\n    currentPhase: nextPhase,\n    log: [`Applied mod to ${card.name}.`, ...state.log],\n  };\n\n  // If transitioning to path selection, trigger path population\n  return nextPhase === PHASES.PATH_SELECTION\n    ? handlePhaseTransitions(updatedState)\n    : updatedState;\n}\nfunction populateShopfront(state) {\n  const shopfrontTypes = [];\n  // === Clear existing shop items into trash ===\n  const previousItems = state.offerings.shopfront || [];\n  const discardedItems = previousItems.map((entry) => entry.item);\n  const updatedTrash = [...(state.trashPile || []), ...discardedItems];\n  // === Step 1: Populate exactly 3 of each item type ===\n  const typeCounts = {\n    card: 3,\n    potion: 3,\n    gem: 3,\n    relic: 3,\n  };\n\n  for (const [type, count] of Object.entries(typeCounts)) {\n    for (let i = 0; i < count; i++) {\n      shopfrontTypes.push(type);\n    }\n  }\n\n  // === Step 3: Generate actual items, avoiding duplicates ===\n  const generatedItems = [];\n  const usedKeys = new Set();\n\n  for (let type of shopfrontTypes) {\n    let item = null;\n    let attempt = 0;\n\n    while (attempt < 20) {\n      attempt++;\n      try {\n        switch (type) {\n          case \"card\":\n            item = generateRandomCard(state);\n            break;\n          case \"potion\":\n            item = generateRandomPotion(state);\n            break;\n          case \"gem\":\n            item = generateRandomGem(state);\n            break;\n          case \"relic\":\n            item = generateRandomRelic(state);\n            break;\n          default:\n            item = null;\n        }\n\n        if (!item) continue;\n\n        const key = `${type}-${item.name}`;\n        if (usedKeys.has(key)) continue;\n\n        usedKeys.add(key);\n        generatedItems.push({ type, item });\n        break; // done\n      } catch (e) {\n        console.warn(\"Shop item generation failed:\", type, e);\n      }\n    }\n  }\n\n  // === Step 4: Insert shopfront and assign prices ===\n  let updatedState = {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      trashPile: updatedTrash,\n    },\n    offerings: {\n      ...state.offerings,\n      shopfront: generatedItems,\n    },\n  };\n\n  updatedState = assignShopPrices(updatedState);\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.ASSIGN_SHOP_PRICES\n  );\n\n  return {\n    ...updatedState,\n    log: [...updatedState.log],\n  };\n}\nfunction gainGold(state, amount) {\n  const newGold = (state.gold || 0) + amount;\n\n  return {\n    ...state,\n    gold: newGold,\n    log: [`Gained ${amount} gold.`, ...state.log],\n  };\n}\nfunction practiceWandwork(state) {\n  // Step 1: Increase base bunnies by 1\n  let newState = increaseBaseBunnies(state, 1);\n\n  // Step 2: Advance to path selection\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  // Step 3: Handle the transition (populate offerings)\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\nfunction lootHoard(state) {\n  const baseGold = 10;\n  const levelBonus = state.level || 0;\n  const enemiesDefeated = state.defeatedEnemies?.length || 0;\n  const luck = state.luck || 0;\n\n  const enemyBonus = enemiesDefeated * 5;\n  const luckBonus = luck * 2;\n\n  const totalGold = baseGold + levelBonus + enemyBonus + luckBonus;\n\n  // Step 1: Gain gold\n  let newState = gainGold(state, totalGold);\n\n  // Step 2: Track hoards looted\n  const hoardsLooted = (newState.hoardsLooted || 0) + 1;\n  newState = {\n    ...newState,\n    hoardsLooted,\n    log: [`Looted a hoard! (${totalGold}g)`, ...newState.log],\n  };\n\n  // Step 3: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction rest(state) {\n  const amountToHeal = state.restHealthRestore || 0;\n  const currentHealth = state.health || 0;\n\n  // Step 1: Heal the player\n  let newState = heal(state, amountToHeal);\n  const healedAmount = newState.health - currentHealth;\n\n  // Step 2: Check relic triggers for REST\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.REST);\n\n  // Step 3: Add one summary log line\n  newState = {\n    ...newState,\n    log: [\n      `Rested at the fire and recovered ${healedAmount} HP.`,\n      ...newState.log.filter((msg) => !msg.startsWith(\"Healed\")),\n    ],\n  };\n\n  // Step 4: Advance phase\n  newState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n\n  //Step 5: Populate offerings for the new phase\n  newState = handlePhaseTransitions(newState);\n\n  return newState;\n}\n\nfunction toggleDeckInspect(state, dispatch) {\n  const isInspectingDeck = state.currentScreen === SCREENS.DECK;\n  const returnTo = state.previousScreen || SCREENS.MAIN;\n\n  dispatch({\n    type: ACTIONS.SCREEN_CHANGE,\n    payload: isInspectingDeck ? returnTo : SCREENS.DECK,\n  });\n}\n\n//#endregion\n//#region state setup and game initialization\nfunction createInitialState() {\n  return {\n    log: [],\n    currentScreen: SCREENS.MAIN,\n    previousScreen: null,\n    currentPhase: PHASES.MAIN_MENU,\n    currentPath: null,\n\n    basicCardCount: 5,\n    restHealthRestore: 10,\n    shopPriceMultiplier: 1,\n    enemyHealthMultiplier: 1,\n    difficulty: null,\n\n    maxHealth: 0,\n    health: 0,\n    baseBunnies: 10000,\n\n    gold: 100,\n\n    luck: 0,\n    level: 0,\n    stage: 0,\n    misery: 0,\n\n    hoardsLooted: 0,\n    defeatedEnemies: [],\n    trashPile: [],\n\n    relicBelt: [],\n    potionBelt: [],\n\n    campaign: {\n      mulligans: 0,\n      deck: [],\n      ink: 4,\n      books: 1,\n      pages: 4,\n      handSize: 6,\n    },\n    combat: {\n      mulligans: 0,\n      deck: [],\n      hand: [],\n      graveyard: [],\n      exile: [],\n      spellbook: [],\n\n      combatEnded: null,\n\n      baseBunnies: 0,\n      ink: 0,\n      maxInk: 0,\n      books: 0,\n      maxBooks: 0,\n      pages: 0,\n      bunnies: 0,\n      maxPages: 0,\n      handSize: 0,\n\n      enemy: null,\n    },\n    offerings: {\n      difficulties: [],\n      shopfront: [],\n      cards: [],\n      potions: [],\n      gems: [],\n      relics: [],\n      paths: [],\n      combatRewards: [],\n      restOptions: [],\n    },\n  };\n}\nfunction selectDifficultyAndBeginGame(dispatch, difficulty) {\n  dispatch({ type: ACTIONS.SET_DIFFICULTY, payload: difficulty });\n  dispatch({ type: ACTIONS.GENERATE_STARTER_DECK });\n  dispatch({ type: ACTIONS.APPLY_DIFFICULTY_MODIFIERS });\n  dispatch({\n    type: ACTIONS.ADVANCE_PHASE,\n    payload: PHASES.MYTHIC_RELIC_OFFERING,\n  });\n}\nfunction createGameApp(initialState, reducer, renderFn) {\n  let state = initialState;\n  function dispatch(action) {\n    state = reducer(state, action);\n    renderFn(state, dispatch); // ✅ already correct\n  }\n  dispatch({ type: ACTIONS.NEW_GAME });\n  return { dispatch };\n}\n\n//#endregion\n//#region game mechanics\nfunction createCardInstance(\n  cardName = null,\n  rarity = null,\n  upgrades = 0,\n  gem = null\n) {\n  let card;\n  if (rarity) {\n    console.log(\"🔍 createCardInstance got rarity:\", rarity);\n  }\n  if (cardName) {\n    const found = cardList.find((c) => c.name === cardName);\n    if (!found) {\n      console.error(`Card not found: ${cardName}`);\n      return null;\n    }\n    card = { ...found };\n  } else if (rarity) {\n    const candidates = cardList.filter(\n      (c) =>\n        c.rarity === rarity &&\n        ![\"curse\", \"unique\", \"status\"].includes(c.specialSubtype)\n    );\n    if (candidates.length === 0) {\n      console.error(`No cards found with rarity: ${rarity}`);\n      return null;\n    }\n    card = { ...candidates[Math.floor(Math.random() * candidates.length)] };\n  } else {\n    console.error(\"createCardInstance requires either a cardName or a rarity.\");\n    return null;\n  }\n\n  // Apply upgrades if needed\n  if (upgrades > 0) {\n    card = upgradeCard(card, upgrades); // this should set .upgrades itself\n  }\n\n  // Apply gem if needed\n  if (gem) {\n    card = socketCardWithGem(card, gem);\n  }\n\n  return card;\n}\n\nfunction createRelicInstance(relicName) {\n  const found = relicList.find((r) => r.name === relicName);\n  if (!found) {\n    console.error(`Relic not found: ${relicName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction createPotionInstance(potionName, upgrades = 0) {\n  const found = potionList.find((p) => p.name === potionName);\n  if (!found) {\n    console.error(`Potion not found: ${potionName}`);\n    return null;\n  }\n\n  let potion = { ...found };\n\n  if (upgrades > 0) {\n    potion = upgradePotion(potion, upgrades);\n  }\n\n  return potion;\n}\nfunction createGemInstance(gemName) {\n  const found = gemList.find((g) => g.name === gemName);\n  if (!found) {\n    console.error(`Gem not found: ${gemName}`);\n    return null;\n  }\n  return { ...found };\n}\nfunction getRandomBossRelic() {\n  const bossRelics = relicList.filter((r) => r.bossOnly);\n  if (bossRelics.length === 0) return null;\n  const chosen = bossRelics[Math.floor(Math.random() * bossRelics.length)];\n  return { ...chosen };\n}\n\nfunction generateRandomRelic(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const ownedRelics = new Set([\n    ...state.relicBelt.map((r) => r.name),\n    ...state.trashPile.map((r) => r.name),\n  ]);\n\n  const HEARTSTONE = \"Heartstone\";\n\n  // Exclude Heartstone and duplicate high-rarity relics, and respect non-duplicable relics\n  let candidates = relicList.filter((r) => {\n    if (r.name === HEARTSTONE) return false;\n    if (r.bossOnly) return false;\n\n    // Exclude relics that shouldn't be duplicated\n    if (r.nonDuplicable && ownedRelics.has(r.name)) return false;\n\n    // Optional: still exclude duplicate Mythic/Legendary even if not marked\n    if (\n      (r.rarity === RARITIES.MYTHIC || r.rarity === RARITIES.LEGENDARY) &&\n      ownedRelics.has(r.name)\n    ) {\n      return false;\n    }\n\n    return true;\n  });\n\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  const filtered = candidates.filter((r) => r.rarity === rarity);\n  if (filtered.length === 0) {\n    console.warn(`No relics found for rarity: ${rarity}`);\n    return createRelicInstance(HEARTSTONE);\n  }\n\n  const chosen = filtered[Math.floor(Math.random() * filtered.length)];\n  return { ...chosen };\n}\nfunction generateRandomCard(\n  state,\n  { rarity = null, upgrades = undefined, gem = null } = {}\n) {\n  const luck = state.luck || 0;\n\n  const finalRarity =\n    rarity || weightedRandomChoice(getLuckAdjustedRarityWeights(luck));\n\n  const level = state.level ?? 0;\n  const totalFortune = (luck ?? 0) + level;\n\n  const upgradeWeights = {\n    0: Math.max(0, 60 - totalFortune),\n    1: 5 + totalFortune,\n    2: 3 + totalFortune,\n    3: 2 + totalFortune,\n    4: 0 + totalFortune,\n  };\n\n  const finalUpgrades =\n    upgrades !== undefined\n      ? upgrades\n      : Number(weightedRandomChoice(upgradeWeights));\n\n  const defeatedCount = state.defeatedEnemies?.length || 0;\n  const maxUpgrades = Math.min(4, Math.floor(defeatedCount / 3));\n  const cappedUpgrades = Math.min(finalUpgrades, maxUpgrades);\n\n  return createCardInstance(undefined, finalRarity, cappedUpgrades, gem);\n}\nfunction generateRandomPotion(state, { rarity = null, upgrades = null } = {}) {\n  const luck = state.luck || 0;\n  const rarityWeights = getLuckAdjustedRarityWeights(luck);\n\n  const level = state.level ?? 0;\n  const totalFortune = (luck ?? 0) + level;\n\n  const upgradeWeights = {\n    0: Math.max(0, 70 - totalFortune),\n    1: 5 + totalFortune,\n    2: 3 + totalFortune,\n    3: 2 + totalFortune,\n    4: 0 + totalFortune,\n  };\n\n  // === Choose rarity if not provided ===\n  if (!rarity) {\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // === Fallback in case rarity yields no results ===\n  const candidates = potionList.filter((p) => p.rarity === rarity);\n  let basePotion;\n  if (candidates.length === 0) {\n    console.warn(\n      `No potions found for rarity: ${rarity}. Falling back to Lesser Healing Potion.`\n    );\n    basePotion = potionList.find((p) => p.name === \"Lesser Healing Potion\");\n    if (!basePotion) {\n      console.error(\n        \"Fallback potion 'Lesser Healing Potion' not found in potionList.\"\n      );\n      return null;\n    }\n    upgrades = 0; // ensure fallback is always unupgraded\n  } else {\n    basePotion = candidates[Math.floor(Math.random() * candidates.length)];\n\n    // === Choose upgrade level if not provided ===\n    if (upgrades === null) {\n      upgrades = Number(weightedRandomChoice(upgradeWeights));\n    }\n    upgrades = Math.min(upgrades, 4);\n  }\n\n  return createPotionInstance(basePotion.name, upgrades);\n}\nfunction generateRandomGem(state, { rarity = null } = {}) {\n  const luck = state.luck || 0;\n  const fallbackGem = createGemInstance(\"Amethyst\");\n\n  // Choose rarity based on luck if not specified\n  if (!rarity) {\n    const rarityWeights = getLuckAdjustedRarityWeights(luck);\n    rarity = weightedRandomChoice(rarityWeights);\n  }\n\n  // Filter by rarity\n  const candidates = gemList.filter((gem) => gem.rarity === rarity);\n\n  if (candidates.length === 0) {\n    console.warn(\n      `No gems found for rarity: ${rarity}, returning fallback gem.`\n    );\n    return fallbackGem;\n  }\n\n  const chosenGem = candidates[Math.floor(Math.random() * candidates.length)];\n  return { ...chosenGem };\n}\nfunction upgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to upgradeCard:\", card);\n    return card;\n  }\n\n  if (card.unupgradable) {\n    console.warn(`Card ${card.name} is marked unupgradable.`);\n    return card;\n  }\n\n  const upgradedCard = { ...card };\n  let upgradable = false;\n\n  if (\"bunnyAdd\" in upgradedCard) {\n    upgradedCard.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyAddPerCardInDeck\" in upgradedCard) {\n    upgradedCard.bunnyAddPerCardInDeck += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"goldAddPerCardInDeck\" in upgradedCard) {\n    upgradedCard.goldAddPerCardInDeck += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"healPerCardInDeck\" in upgradedCard) {\n    upgradedCard.healPerCardInDeck += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedCard) {\n    upgradedCard.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (\"goldAdd\" in upgradedCard) {\n    upgradedCard.goldAdd += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInDeck += level;\n    upgradable = true;\n  }\n\n  if (\"permanentlyUpgradeRandomCardsInHand\" in upgradedCard) {\n    upgradedCard.permanentlyUpgradeRandomCardsInHand += level;\n    upgradable = true;\n  }\n\n  if (\"cardDraw\" in upgradedCard) {\n    upgradedCard.cardDraw += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"inkAdd\" in upgradedCard) {\n    upgradedCard.inkAdd += 1 * level;\n    upgradable = true;\n  }\n\n  if (\"healthCost\" in upgradedCard) {\n    upgradedCard.healthCost -= 1 * level;\n    upgradable = true;\n  }\n\n  if (\"heal\" in upgradedCard) {\n    upgradedCard.heal += 5 * level;\n    upgradable = true;\n  }\n\n  // ✅ New: Weaken effect scaling\n  if (\"weakenEnemyHpPercent\" in upgradedCard) {\n    upgradedCard.weakenEnemyHpPercent += 0.05 * level;\n    upgradable = true;\n  }\n\n  // === Upgrade damageRoll (any type) ===\n  if (upgradedCard.damageRoll) {\n    upgradedCard.damageRoll = {\n      ...upgradedCard.damageRoll,\n      dice: upgradedCard.damageRoll.dice + level,\n      sides: upgradedCard.damageRoll.sides + level,\n      flatBonus: upgradedCard.damageRoll.flatBonus + level,\n    };\n    upgradable = true;\n  }\n\n  // === Increase inkCost by per-level amount ===\n  if (\n    \"inkCostIncreasePerLevel\" in upgradedCard &&\n    typeof upgradedCard.inkCost === \"number\"\n  ) {\n    upgradedCard.inkCost += upgradedCard.inkCostIncreasePerLevel * level;\n    upgradable = true;\n  }\n\n  // === Multiply base damage by per-level multiplier ===\n  if (\n    \"damageMultiplierPerLevel\" in upgradedCard &&\n    typeof upgradedCard.damage === \"number\"\n  ) {\n    upgradedCard.damage *= Math.pow(\n      upgradedCard.damageMultiplierPerLevel,\n      level\n    );\n    upgradable = true;\n  }\n\n  // Add or increment the upgrade level\n  upgradedCard.upgrades = (upgradedCard.upgrades || 0) + level;\n\n  // === Smart renaming ===\n  const baseName = card.name\n    .replace(/\\s\\+\\d+$/, \"\") // remove trailing \"+3\"\n    .replace(/\\s\\d+d\\d+(\\s?\\+\\d+)?$/, \"\"); // remove \"3d6\" or \"3d6 +3\"\n\n  if (upgradedCard.damageRoll) {\n    const { dice = 1, sides, flatBonus = 0 } = upgradedCard.damageRoll;\n    upgradedCard.name = `${baseName} ${dice}d${sides}${\n      flatBonus > 0 ? `+${flatBonus}` : \"\"\n    }`;\n  } else {\n    upgradedCard.name = `${baseName} +${upgradedCard.upgrades}`;\n  }\n\n  return upgradedCard;\n}\n\nfunction downgradeCard(card, level = 1) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to downgradeCard:\", card);\n    return card;\n  }\n\n  if (card.undowngradable) {\n    console.warn(`Card ${card.name} is marked undowngradable.`);\n    return card;\n  }\n\n  const downgradedCard = { ...card };\n  const originalLevel = downgradedCard.upgrades || 0;\n  const newLevel = Math.max(originalLevel - level, -1);\n  const levelDiff = originalLevel - newLevel;\n\n  const applyHalvedBase = () => {\n    if (\"bunnyAdd\" in card)\n      downgradedCard.bunnyAdd = Math.floor(card.bunnyAdd / 2);\n    if (\"bunnyAddPerCardInDeck\" in card)\n      downgradedCard.bunnyAddPerCardInDeck = 0.5;\n    if (\"bunnyMult\" in card)\n      downgradedCard.bunnyMult = Math.floor(card.bunnyMult / 2);\n    if (\"goldAdd\" in card)\n      downgradedCard.goldAdd = Math.floor(card.goldAdd / 2);\n    if (\"goldAddPerCardInDeck\" in card)\n      downgradedCard.goldAddPerCardInDeck = 0.5;\n    if (\"permanentlyUpgradeRandomCardsInDeck\" in card)\n      downgradedCard.permanentlyUpgradeRandomCardsInDeck = Math.floor(\n        card.permanentlyUpgradeRandomCardsInDeck / 2\n      );\n    if (\"permanentlyUpgradeRandomCardsInHand\" in card)\n      downgradedCard.permanentlyUpgradeRandomCardsInHand = Math.floor(\n        card.permanentlyUpgradeRandomCardsInHand / 2\n      );\n    if (\"cardDraw\" in card)\n      downgradedCard.cardDraw = Math.floor(card.cardDraw / 2);\n    if (\"inkAdd\" in card) downgradedCard.inkAdd = Math.floor(card.inkAdd / 2);\n    if (\"healthCost\" in card)\n      downgradedCard.healthCost = Math.floor(card.healthCost * 1.5);\n    if (\"heal\" in card)\n      downgradedCard.heal = Math.max(1, Math.floor(card.heal / 2));\n    if (\"healPerCardInDeck\" in card) downgradedCard.healPerCardInDeck = 0.5;\n    if (\"weakenEnemyHpPercent\" in card)\n      downgradedCard.weakenEnemyHpPercent = 0.1;\n\n    if (typeof card.damage === \"number\")\n      downgradedCard.damage = Math.ceil(card.damage / 2);\n\n    if (card.damageRoll) {\n      downgradedCard.damageRoll = {\n        dice: Math.max(1, Math.floor(card.damageRoll.dice / 2)),\n        sides: Math.max(1, Math.floor(card.damageRoll.sides / 2)),\n        flatBonus: Math.max(0, Math.floor(card.damageRoll.flatBonus / 2)),\n      };\n    }\n  };\n\n  if (newLevel === -1) {\n    applyHalvedBase();\n  } else {\n    if (\"bunnyAdd\" in downgradedCard) downgradedCard.bunnyAdd -= 3 * levelDiff;\n    if (\"bunnyAddPerCardInDeck\" in downgradedCard) {\n      downgradedCard.bunnyAddPerCardInDeck = Math.max(\n        0.5,\n        downgradedCard.bunnyAddPerCardInDeck - 0.5 * levelDiff\n      );\n    }\n    if (\"bunnyMult\" in downgradedCard)\n      downgradedCard.bunnyMult -= 0.5 * levelDiff;\n    if (\"goldAdd\" in downgradedCard) downgradedCard.goldAdd -= 2 * levelDiff;\n    if (\"goldAddPerCardInDeck\" in downgradedCard) {\n      downgradedCard.goldAddPerCardInDeck = Math.max(\n        0.5,\n        downgradedCard.goldAddPerCardInDeck - 0.5 * levelDiff\n      );\n    }\n    if (\"permanentlyUpgradeRandomCardsInDeck\" in downgradedCard)\n      downgradedCard.permanentlyUpgradeRandomCardsInDeck -= levelDiff;\n    if (\"permanentlyUpgradeRandomCardsInHand\" in downgradedCard)\n      downgradedCard.permanentlyUpgradeRandomCardsInHand -= levelDiff;\n    if (\"cardDraw\" in downgradedCard) downgradedCard.cardDraw -= levelDiff;\n    if (\"inkAdd\" in downgradedCard) downgradedCard.inkAdd -= levelDiff;\n    if (\"healthCost\" in downgradedCard) downgradedCard.healthCost += levelDiff;\n    if (\"heal\" in downgradedCard)\n      downgradedCard.heal = Math.max(1, downgradedCard.heal - 5 * levelDiff);\n    if (\"healPerCardInDeck\" in downgradedCard) {\n      downgradedCard.healPerCardInDeck = Math.max(\n        0.5,\n        downgradedCard.healPerCardInDeck - 0.5 * levelDiff\n      );\n    }\n    if (\"weakenEnemyHpPercent\" in downgradedCard) {\n      downgradedCard.weakenEnemyHpPercent = Math.max(\n        0.1,\n        downgradedCard.weakenEnemyHpPercent - 0.05 * levelDiff\n      );\n    }\n\n    if (\n      \"inkCostIncreasePerLevel\" in downgradedCard &&\n      typeof downgradedCard.inkCost === \"number\"\n    ) {\n      downgradedCard.inkCost -=\n        downgradedCard.inkCostIncreasePerLevel * levelDiff;\n    }\n\n    if (\n      \"damageMultiplierPerLevel\" in downgradedCard &&\n      typeof downgradedCard.damage === \"number\"\n    ) {\n      downgradedCard.damage = Math.ceil(\n        downgradedCard.damage /\n          Math.pow(downgradedCard.damageMultiplierPerLevel, levelDiff)\n      );\n    }\n\n    if (downgradedCard.damageRoll) {\n      downgradedCard.damageRoll = {\n        ...downgradedCard.damageRoll,\n        dice: Math.max(1, downgradedCard.damageRoll.dice - levelDiff),\n        sides: Math.max(1, downgradedCard.damageRoll.sides - levelDiff),\n        flatBonus: Math.max(0, downgradedCard.damageRoll.flatBonus - levelDiff),\n      };\n    }\n  }\n\n  downgradedCard.upgrades = newLevel;\n\n  const baseName = card.name\n    .replace(/\\s\\+\\d+$/, \"\")\n    .replace(/\\s\\d+d\\d+(\\s?\\+\\d+)?$/, \"\");\n\n  if (downgradedCard.damageRoll) {\n    const { dice = 1, sides, flatBonus = 0 } = downgradedCard.damageRoll;\n    downgradedCard.name = `${baseName} ${dice}d${sides}${\n      flatBonus > 0 ? `+${flatBonus}` : \"\"\n    }`;\n  } else if (newLevel > 0) {\n    downgradedCard.name = `${baseName} +${newLevel}`;\n  } else if (newLevel === -1) {\n    downgradedCard.name = `${baseName} -1`;\n  } else {\n    downgradedCard.name = baseName;\n  }\n\n  return downgradedCard;\n}\n\nfunction upgradePotion(potion, level = 1) {\n  if (!potion || typeof potion !== \"object\") {\n    console.error(\"Invalid potion passed to upgradePotion:\", potion);\n    return potion;\n  }\n\n  // Clone the potion to avoid mutating the original\n  const upgradedPotion = { ...potion };\n\n  let upgradable = false;\n\n  // === Upgradeable Effects ===\n  if (\"healthRestore\" in upgradedPotion) {\n    upgradedPotion.healthRestore += 2 * level;\n    upgradable = true;\n  }\n\n  if (\"bonusInk\" in upgradedPotion) {\n    upgradedPotion.bonusInk += level;\n    upgradable = true;\n  }\n\n  if (\"increaseMaxHp\" in upgradedPotion) {\n    upgradedPotion.increaseMaxHp += level * 2;\n    upgradable = true;\n  }\n\n  if (\"upgradeCardsInHand\" in upgradedPotion) {\n    upgradedPotion.upgradeCardsInHand += level;\n    upgradable = true;\n  }\n  if (\"cardDraw\" in upgradedPotion) {\n    upgradedPotion.cardDraw += level;\n    upgradable = true;\n  }\n\n  if (\"bunnyAdd\" in upgradedPotion) {\n    upgradedPotion.bunnyAdd += 3 * level;\n    upgradable = true;\n  }\n\n  if (\"bunnyMult\" in upgradedPotion) {\n    upgradedPotion.bunnyMult += 0.5 * level;\n    upgradable = true;\n  }\n\n  if (!upgradable) {\n    console.error(`Potion cannot be upgraded: ${potion.name}`);\n    return potion;\n  }\n\n  // === Track upgrade level ===\n  upgradedPotion.upgrades = (upgradedPotion.upgrades || 0) + level;\n\n  // === Update potion name to reflect upgrades ===\n  upgradedPotion.name =\n    potion.name.replace(/\\s\\+\\d+$/, \"\") + ` +${upgradedPotion.upgrades}`;\n\n  return upgradedPotion;\n}\n\nfunction socketCardWithGem(card, gem) {\n  if (!card || typeof card !== \"object\") {\n    console.error(\"Invalid card passed to socketCardWithGem:\", card);\n    return card;\n  }\n\n  if (card.unsocketable) {\n    console.warn(`Card ${card.name} is marked unsocketable.`);\n    return card;\n  }\n\n  if (!gem || typeof gem !== \"object\" || !gem.name) {\n    console.error(\"Invalid gem passed to socketCardWithGem:\", gem);\n    return card;\n  }\n\n  const socketedCard = { ...card };\n  const upgradeLevel = socketedCard.upgrades || 0;\n\n  const applyEffect = (key, baseAmount, perUpgrade) => {\n    socketedCard[key] =\n      (socketedCard[key] || 0) + baseAmount + perUpgrade * upgradeLevel;\n  };\n\n  // === Standard effects ===\n\n  if (\"bunnyAdd\" in gem) applyEffect(\"bunnyAdd\", gem.bunnyAdd, 3);\n  if (\"bunnyMult\" in gem) applyEffect(\"bunnyMult\", gem.bunnyMult, 0.5);\n  if (\"goldAdd\" in gem) applyEffect(\"goldAdd\", gem.goldAdd, 2);\n  if (\"permanentlyUpgradeRandomCardsInDeck\" in gem)\n    applyEffect(\n      \"permanentlyUpgradeRandomCardsInDeck\",\n      gem.permanentlyUpgradeRandomCardsInDeck,\n      1\n    );\n  if (\"permanentlyUpgradeRandomCardsInHand\" in gem)\n    applyEffect(\n      \"permanentlyUpgradeRandomCardsInHand\",\n      gem.permanentlyUpgradeRandomCardsInHand,\n      1\n    );\n  if (\"damage\" in gem) applyEffect(\"damage\", gem.damage, 5);\n  if (\"damageType\" in gem) socketedCard.damageType = gem.damageType;\n  if (\"cardDraw\" in gem) applyEffect(\"cardDraw\", gem.cardDraw, 1);\n  if (\"inkAdd\" in gem) applyEffect(\"inkAdd\", gem.inkAdd, 1);\n  if (\"healthCost\" in gem) applyEffect(\"healthCost\", gem.healthCost, -1);\n  if (\"heal\" in gem) applyEffect(\"heal\", gem.heal, 5);\n  if (\"weakenEnemyHpPercent\" in gem) {\n    socketedCard.weakenEnemyHpPercent =\n      (socketedCard.weakenEnemyHpPercent || 0) + gem.weakenEnemyHpPercent;\n  }\n\n  // === Add upgradesOnCast property ===\n  if (\"upgradesOnCast\" in gem) {\n    socketedCard.upgradesOnCast =\n      (socketedCard.upgradesOnCast || 0) + gem.upgradesOnCast;\n  }\n  // === Apply ink cost increase per level (fire effect)\n  if (\"inkCostIncreasePerLevel\" in gem) {\n    socketedCard.inkCostIncreasePerLevel = gem.inkCostIncreasePerLevel;\n    // Apply retroactive increase if inkCost exists\n    if (typeof socketedCard.inkCost === \"number\") {\n      socketedCard.inkCost += gem.inkCostIncreasePerLevel * upgradeLevel;\n    }\n  }\n\n  // === Apply damage multiplier per level (fire effect)\n  if (\"damageMultiplierPerLevel\" in gem) {\n    socketedCard.damageMultiplierPerLevel = gem.damageMultiplierPerLevel;\n    // Apply retroactive multiplier if damage exists\n    if (typeof socketedCard.damage === \"number\") {\n      socketedCard.damage *= Math.pow(\n        gem.damageMultiplierPerLevel,\n        upgradeLevel\n      );\n    }\n  }\n\n  // === Merge damageTypes (if gem has them) ===\n  if (Array.isArray(gem.damageTypes)) {\n    socketedCard.damageTypes = Array.isArray(socketedCard.damageTypes)\n      ? [...socketedCard.damageTypes]\n      : [];\n\n    for (const dmgType of gem.damageTypes) {\n      if (!socketedCard.damageTypes.includes(dmgType)) {\n        socketedCard.damageTypes.push(dmgType);\n      }\n    }\n  }\n\n  // === Add damageRoll support (e.g., Amber) ===\n\n  if (\"damageRoll\" in gem && typeof gem.damageRoll === \"object\") {\n    const gemRoll = gem.damageRoll;\n    const baseDice = gemRoll.dice || 0;\n    const baseSides = gemRoll.sides || 0;\n    const baseBonus = gemRoll.flatBonus || 0;\n\n    socketedCard.damageRoll = {\n      dice: (socketedCard.damageRoll?.dice || 0) + baseDice + upgradeLevel,\n      sides: (socketedCard.damageRoll?.sides || 0) + baseSides + upgradeLevel,\n      flatBonus:\n        (socketedCard.damageRoll?.flatBonus || 0) + baseBonus + upgradeLevel,\n    };\n  }\n\n  // === Attach gem and rename card ===\n\n  socketedCard.gem = gem;\n\n  // Build name suffix if there's a damageRoll\n  let nameSuffix = \"\";\n  if (\n    socketedCard.damageRoll &&\n    typeof socketedCard.damageRoll.dice === \"number\" &&\n    typeof socketedCard.damageRoll.sides === \"number\"\n  ) {\n    const { dice, sides, flatBonus } = socketedCard.damageRoll;\n    nameSuffix = ` ${dice}d${sides}${flatBonus ? `+${flatBonus}` : \"\"}`;\n  }\n\n  // Final name: GemName OriginalName + dice suffix if present\n  socketedCard.name = `${gem.name} ${card.name.replace(\n    /\\s\\d+d\\d+(\\+\\d+)?$/,\n    \"\"\n  )}${nameSuffix}`;\n\n  return socketedCard;\n}\n\nfunction getLuckAdjustedRarityWeights(luck = 0) {\n  return {\n    [RARITIES.COMMON]: Math.max(20, 60 - luck * 2),\n    [RARITIES.UNCOMMON]: Math.max(20, 40 - luck),\n    [RARITIES.RARE]: Math.min(20, 5 + luck),\n    [RARITIES.MYTHIC]: Math.min(10, 2 + Math.ceil(luck / 2)),\n    [RARITIES.LEGENDARY]: Math.min(5, 1 + Math.ceil(luck / 3)),\n  };\n}\nfunction chargeGoldPrice(state, price, context = \"purchase\") {\n  if (state.gold < price) {\n    console.warn(`Not enough gold for ${context}!`);\n    return state; // return unmodified state\n  }\n\n  return {\n    ...state,\n    gold: state.gold - price, // ✅ correct location\n    log: [`Spent ${price} gold on ${context}.`, ...state.log],\n  };\n}\nfunction checkRelicTriggers(\n  state,\n  triggerEvent,\n  context = { damageType: null }\n) {\n  let updatedState = { ...state };\n  let result = context.payload || null;\n\n  if (!Array.isArray(state.relicBelt)) {\n    console.error(\"❌ relicBelt is not an array!\", state.relicBelt);\n  } else {\n    console.log(\n      \"👜 Current relic belt:\",\n      state.relicBelt.map((r) => r.name || r)\n    );\n  }\n\n  // === Special case: Relic is being picked up ===\n  if (triggerEvent === TRIGGER_EVENTS.RELIC_PICKUP && context.relic) {\n    const relic = context.relic;\n    const effect = relic.triggers?.[triggerEvent];\n    if (!effect) return { ...updatedState, result };\n\n    const campaign = { ...updatedState.campaign };\n    let newHealth = updatedState.health;\n    let newMaxHealth = updatedState.maxHealth;\n\n    if (effect.reduceInkCostOfFireCardsInDeck > 0) {\n      let modifiedCount = 0;\n      campaign.deck = campaign.deck.map((card) => {\n        if (\n          Array.isArray(card.damageTypes) &&\n          card.damageTypes.includes(DAMAGE_TYPES.FIRE) &&\n          typeof card.inkCost === \"number\"\n        ) {\n          modifiedCount++;\n          return {\n            ...card,\n            inkCost: Math.max(\n              0,\n              card.inkCost - effect.reduceInkCostOfFireCardsInDeck\n            ),\n          };\n        }\n        return card;\n      });\n      if (modifiedCount > 0) {\n        updatedState.log.unshift(\n          `${relic.name} reduced the ink cost of ${modifiedCount} fire card(s) in your deck.`\n        );\n      }\n    }\n\n    if (effect.bonusPages) {\n      campaign.pages += effect.bonusPages;\n      updatedState.log.unshift(\n        `${relic.name} gave you +${effect.bonusPages} max pages.`\n      );\n    }\n\n    if (effect.BonusMulligans) {\n      campaign.mulligans = (campaign.mulligans ?? 0) + effect.BonusMulligans;\n      updatedState.log.unshift(\n        `${relic.name} gave you +${effect.BonusMulligans} mulligan.`\n      );\n    }\n\n    if (effect.bonusInk) {\n      campaign.ink += effect.bonusInk;\n      updatedState.log.unshift(\n        `${relic.name} gave you +${effect.bonusInk} max ink.`\n      );\n    }\n\n    if (effect.bonusBooks) {\n      campaign.books += effect.bonusBooks;\n      updatedState.log.unshift(\n        `${relic.name} gave you +${effect.bonusBooks} max books.`\n      );\n    }\n\n    if (effect.bonusHandSize) {\n      campaign.handSize += effect.bonusHandSize;\n      updatedState.log.unshift(\n        `${relic.name} increased your hand size by ${effect.bonusHandSize}.`\n      );\n    }\n\n    if (effect.bonusHealth) {\n      newHealth += effect.bonusHealth;\n      newMaxHealth += effect.bonusHealth;\n      updatedState.log.unshift(\n        `${relic.name} increased your max health by ${effect.bonusHealth} HP.`\n      );\n    }\n\n    if (effect.bonusGold) {\n      updatedState = gainGold(updatedState, effect.bonusGold);\n      updatedState.log.unshift(\n        `${relic.name} gave you ${effect.bonusGold} gold.`\n      );\n    }\n\n    if (effect.bonusBaseBunnies) {\n      updatedState = increaseBaseBunnies(updatedState, effect.bonusBaseBunnies);\n      updatedState.log.unshift(\n        `${relic.name} added ${effect.bonusBaseBunnies} base bunnies.`\n      );\n    }\n\n    if (effect.permanentlyUpgradeRandomCardsInDeck > 0) {\n      const { deck } = campaign;\n      const numToUpgrade = Math.min(\n        effect.permanentlyUpgradeRandomCardsInDeck,\n        deck.length\n      );\n      campaign.deck = permanentlyUpgradeRandomCardsInDeck(deck, numToUpgrade);\n      updatedState.log.unshift(\n        `${relic.name} permanently upgraded ${numToUpgrade} card(s) in your deck.`\n      );\n    }\n\n    if (\n      effect.shopPriceMultiplier &&\n      state.currentPhase === PHASES.SHOP &&\n      updatedState.offerings?.shopfront\n    ) {\n      const newMultiplier = getShopPriceMultiplier(updatedState);\n      const updatedShopfront = updatedState.offerings.shopfront.map((entry) => {\n        const { type, item } = entry;\n        const basePrices = { card: 10, potion: 20, gem: 30, relic: 100 };\n        const rarityMultipliers = {\n          common: 1,\n          uncommon: 1.2,\n          rare: 1.4,\n          mythic: 1.6,\n          legendary: 2,\n        };\n        const basePrice = basePrices[type] || 0;\n        const upgrades = item.upgrades || 0;\n        const upgradeCost = [\"card\", \"potion\"].includes(type)\n          ? upgrades * 5\n          : 0;\n        const rarity = item.rarity?.toLowerCase?.() || \"common\";\n        const rarityMultiplier = rarityMultipliers[rarity] || 1;\n        const price = Math.round(\n          (basePrice + upgradeCost) * rarityMultiplier * newMultiplier\n        );\n\n        return {\n          ...entry,\n          item: { ...item, price },\n        };\n      });\n\n      updatedState.offerings.shopfront = updatedShopfront;\n      updatedState.log.unshift(\n        `${relic.name} triggered and updated shop prices.`\n      );\n    }\n\n    updatedState = {\n      ...updatedState,\n      campaign,\n      health: newHealth,\n      maxHealth: newMaxHealth,\n    };\n\n    return { ...updatedState, result };\n  }\n\n  // === General case: loop through all relics and handle triggers ===\n  for (const relic of updatedState.relicBelt) {\n    if (!relic.triggers || typeof relic.triggers !== \"object\") continue;\n\n    const allTriggerKeys = Object.keys(relic.triggers);\n    const effect = relic.triggers?.[triggerEvent];\n\n    if (!effect) continue;\n\n    // === Handle Lightning spell draw trigger\n    if (\n      triggerEvent === TRIGGER_EVENTS.PLAY_CARD &&\n      effect.ifLightningDrawCards > 0\n    ) {\n      const card = context.card || context.payload;\n      const isLightning =\n        Array.isArray(card?.damageTypes) &&\n        card.damageTypes.includes(DAMAGE_TYPES.LIGHTNING);\n\n      if (isLightning) {\n        updatedState.log.unshift(\n          `${relic.name} triggered and drew ${\n            effect.ifLightningDrawCards\n          } card${\n            effect.ifLightningDrawCards > 1 ? \"s\" : \"\"\n          } because you played a Lightning card!`\n        );\n        for (let i = 0; i < effect.ifLightningDrawCards; i++) {\n          updatedState = drawCard(updatedState);\n        }\n      }\n    }\n    // potion pickup triggers\n    if (triggerEvent === TRIGGER_EVENTS.POTION_PICKUP && effect.upgradePotion) {\n      const potion = context.potion || context.payload;\n      if (potion) {\n        const upgraded = upgradePotion(potion, 1);\n        updatedState.log.unshift(\n          `${relic.name} upgraded ${potion.name} into ${upgraded.name}.`\n        );\n        result = upgraded;\n      } else {\n        console.warn(\n          `⚠️ ${relic.name} triggered upgradePotion but no potion provided.`\n        );\n      }\n    }\n\n    // === Other trigger types\n    if (\n      triggerEvent === TRIGGER_EVENTS.COMBAT_START &&\n      effect.weakenEnemyHpPercent > 0\n    ) {\n      updatedState = weakenEnemyByPercent(\n        updatedState,\n        effect.weakenEnemyHpPercent\n      );\n      updatedState.log.unshift(\n        `${relic.name} weakened the enemy by ${\n          effect.weakenEnemyHpPercent * 100\n        }%!`\n      );\n    }\n\n    if (effect.bunnyAdd) {\n      updatedState.combat = {\n        ...updatedState.combat,\n        bunnies: (updatedState.combat.bunnies || 0) + effect.bunnyAdd,\n      };\n      updatedState.log.unshift(\n        `${relic.name} summoned ${effect.bunnyAdd} bunny${\n          effect.bunnyAdd === 1 ? \"\" : \"ies\"\n        }!`\n      );\n    }\n\n    if (effect.permanentlyUpgradeRandomCardsInDeck > 0) {\n      const campaign = { ...updatedState.campaign };\n      const { deck } = campaign;\n      const numToUpgrade = Math.min(\n        effect.permanentlyUpgradeRandomCardsInDeck,\n        deck.length\n      );\n      campaign.deck = permanentlyUpgradeRandomCardsInDeck(deck, numToUpgrade);\n      updatedState.campaign = campaign;\n      updatedState.log.unshift(\n        `${relic.name} permanently upgraded ${numToUpgrade} card(s) in your deck.`\n      );\n    }\n\n    // === Support for Whetstone ===\n    if (triggerEvent === TRIGGER_EVENTS.CARD_PICKUP && effect.upgradeCard) {\n      const cardToUpgrade = context.card || context.payload;\n      if (cardToUpgrade) {\n        console.log(\n          `🪓 ${relic.name} is upgrading a picked-up card: ${cardToUpgrade.name}`\n        );\n        const upgraded = upgradeCard(cardToUpgrade, 1);\n        updatedState.log.unshift(\n          `${relic.name} upgraded ${cardToUpgrade.name} into ${upgraded.name}.`\n        );\n        result = upgraded;\n      } else {\n        console.warn(\n          `⚠️ ${relic.name} triggered upgradeCard but no card was provided.`\n        );\n      }\n    }\n\n    // === Support for Dousing Rod ===\n    if (\n      triggerEvent === TRIGGER_EVENTS.POPULATE_PATHS &&\n      effect.revealAnonymousPaths\n    ) {\n      const currentPaths = context.payload || [];\n      result = {\n        paths: revealAnonymousPaths(currentPaths),\n      };\n      updatedState.log.unshift(`${relic.name} revealed anonymous paths!`);\n    }\n\n    // === Support for Porcelain Koi ===\n    if (triggerEvent === TRIGGER_EVENTS.CARD_PICKUP) {\n      const pickedCard = context.card || context.payload;\n\n      if (effect.bonusHealth) {\n        updatedState.health += effect.bonusHealth;\n        updatedState.maxHealth += effect.bonusHealth;\n        updatedState.log.unshift(\n          `${relic.name} increased your max health by ${effect.bonusHealth}${\n            pickedCard?.name ? ` (from picking ${pickedCard.name})` : \"\"\n          }.`\n        );\n      }\n\n      if (effect.bonusGold) {\n        updatedState = gainGold(updatedState, effect.bonusGold);\n        updatedState.log.unshift(\n          `${relic.name} granted you ${effect.bonusGold} gold${\n            pickedCard?.name ? ` (from picking ${pickedCard.name})` : \"\"\n          }.`\n        );\n      }\n    }\n\n    // === Add additional relic effects here ===\n  }\n\n  return {\n    ...updatedState,\n    result,\n  };\n}\n\nfunction checkEnemyTriggers(state, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  const enemy = updatedState.combat?.enemy;\n  if (!enemy) return updatedState;\n\n  const abilities = enemy.abilities || {};\n  const logMessages = [];\n\n  if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n    // Ink Drink effect\n    if (abilities[ENEMY_ABILITIES.INK_DRINK]) {\n      const amount = abilities[ENEMY_ABILITIES.INK_DRINK];\n\n      const newMaxInk = Math.max(0, updatedState.combat.maxInk - amount);\n      const newInk = Math.min(updatedState.combat.ink, newMaxInk); // Ensure current ink doesn't exceed new max\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          maxInk: newMaxInk,\n          ink: newInk,\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} drained ${amount} max ink at the start of combat!`\n      );\n    }\n\n    // Increase Health effect\n    if (abilities[ENEMY_ABILITIES.INCREASE_HEALTH]) {\n      const multiplier = abilities[ENEMY_ABILITIES.INCREASE_HEALTH]; // e.g., 1.5\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          enemyHp: Math.floor(updatedState.combat.enemyHp * multiplier),\n          enemy: {\n            ...updatedState.combat.enemy,\n            hp: Math.floor(updatedState.combat.enemy.hp * multiplier),\n          },\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} increased its health by ${Math.round(\n          (multiplier - 1) * 100\n        )}%!`\n      );\n    }\n\n    // Downgrade Cards at Combat Start\n    if (abilities[ENEMY_ABILITIES.DOWNGRADE_CARDS]) {\n      const amount = abilities[ENEMY_ABILITIES.DOWNGRADE_CARDS];\n      const deck = [...updatedState.combat.deck];\n      const downgradable = deck.filter((card) => !card.undowngradable);\n\n      const shuffled = [...downgradable].sort(() => Math.random() - 0.5);\n      const toDowngrade = shuffled.slice(0, amount);\n\n      const updatedDeck = deck.map((card) =>\n        toDowngrade.includes(card) ? downgradeCard(card, 1) : card\n      );\n\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          deck: updatedDeck,\n        },\n      };\n\n      logMessages.push(\n        `${enemy.name} downgraded ${toDowngrade.length} card(s) in your deck!`\n      );\n    }\n\n    // Hand Size Reduction\n    if (abilities[ENEMY_ABILITIES.HAND_SIZE_REDUCTION]) {\n      const amount = abilities[ENEMY_ABILITIES.HAND_SIZE_REDUCTION];\n      updatedState = {\n        ...updatedState,\n        combat: {\n          ...updatedState.combat,\n          handSize: Math.max(1, updatedState.combat.handSize - amount),\n        },\n      };\n      logMessages.push(`${enemy.name} reduces your hand size by ${amount}!`);\n    }\n\n    // === Add curses at combat start ===\n    if (triggerEvent === TRIGGER_EVENTS.COMBAT_START) {\n      const abilities = enemy.abilities || {};\n\n      if (abilities[ENEMY_ABILITIES.ADD_PEBBLES]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_PEBBLES];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Sisyphus' Pebble\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Sisyphus' Pebble to your deck!`\n        );\n      }\n\n      if (abilities[ENEMY_ABILITIES.ADD_MERCURY]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_MERCURY];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Mercury Droplet\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Mercury Droplet(s) to your deck!`\n        );\n      }\n\n      if (abilities[ENEMY_ABILITIES.ADD_CLUTTER]) {\n        const amount = abilities[ENEMY_ABILITIES.ADD_CLUTTER];\n        for (let i = 0; i < amount; i++) {\n          updatedState = addCardToCombatDeck(updatedState, \"Clutter\");\n        }\n        logMessages.push(\n          `${enemy.name} added ${amount} Clutter card(s) to your deck!`\n        );\n      }\n    }\n  }\n\n  if (logMessages.length > 0) {\n    updatedState = {\n      ...updatedState,\n      log: [`⚠️ Enemy ability activated!`, ...logMessages, ...updatedState.log],\n    };\n  }\n\n  return updatedState;\n}\n\nfunction modifyCombatInk(state, amount) {\n  const current = state.combat?.ink ?? 0;\n  const max = state.combat?.maxInk ?? 0;\n\n  const newInk = Math.max(0, Math.min(current + amount, max));\n  const actualChange = newInk - current;\n\n  // let changeMessage =\n  //   actualChange === 0\n  //     ? `Ink unchanged.`\n  //     : actualChange > 0\n  //     ? `Gained ${actualChange} ink.`\n  //     : `Spent ${Math.abs(actualChange)} ink.`;\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      ink: newInk,\n    },\n    // log: [changeMessage, ...state.log],\n  };\n}\n\nfunction heal(state, amount) {\n  const current = state.health || 0;\n  const max = state.maxHealth || 0;\n  const newHealth = Math.min(current + amount, max);\n  const healedAmount = newHealth - current;\n\n  return {\n    ...state,\n    health: newHealth,\n    log: [`Healed ${healedAmount} HP.`, ...state.log],\n  };\n}\nfunction transmuteCard(card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to transmuteCard:\", card);\n    return null;\n  }\n\n  // Define excluded subtypes (easily extendable)\n  const excludedSubtypes = new Set([\n    SPECIAL_CARD_SUBTYPES.CURSE,\n    // Add more subtypes here in future\n  ]);\n\n  const alternatives = cardList.filter(\n    (c) =>\n      c.name !== card.name &&\n      !c.unchoosableByTransmute &&\n      (!c.specialSubtype || !excludedSubtypes.has(c.specialSubtype))\n  );\n\n  if (alternatives.length === 0) {\n    console.warn(\n      `No valid alternatives found to transmute ${card.name}. Returning original.`\n    );\n    return { ...card };\n  }\n\n  const newBase = alternatives[Math.floor(Math.random() * alternatives.length)];\n  return createCardInstance(newBase.name, null, card.upgrades, card.gem);\n}\n\nfunction purgeCard(state, card) {\n  if (!card || !card.name) {\n    console.error(\"Invalid card passed to purgeCard:\", card);\n    return state;\n  }\n\n  const updatedDeck = state.campaign.deck.filter((c) => c !== card);\n  const updatedTrash = [...(state.trashPile || []), card];\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck: updatedDeck,\n      trashPile: updatedTrash,\n    },\n    log: [`Purged card: ${card.name}`, ...state.log],\n  };\n}\n\nfunction initializeCombatPhase(state, path) {\n  const level = state.level ?? 1;\n  const stage = state.stage ?? 0;\n\n  // Define ability power modifier based on level\n  const modifyEnemyAbilityPower = ({ currentValue }) => {\n    if (stage === 2) return currentValue + 2;\n    if (stage === 1) return currentValue + 1;\n    return currentValue;\n  };\n\n  const enemy = generateEnemy(state, path, modifyEnemyAbilityPower);\n\n  // Deep copy and shuffle the deck\n  const deepDeckCopy = JSON.parse(JSON.stringify(state.campaign.deck));\n  const shuffledDeck = shuffleArray(deepDeckCopy);\n\n  const newCombat = {\n    enemy,\n    enemyHp: enemy.hp,\n    deck: shuffledDeck,\n    hand: [],\n    graveyard: [], // was 'discard' but rest of code uses 'graveyard'\n    exile: [],\n    mulligans: state.campaign.mulligans ?? 0,\n    ink: state.campaign.ink,\n    maxInk: state.campaign.ink,\n    books: state.campaign.books,\n    maxBooks: state.campaign.books,\n    pages: state.campaign.pages,\n    maxPages: state.campaign.pages,\n    handSize: state.campaign.handSize,\n    baseBunnies: state.baseBunnies ?? 0,\n    bunnies: 0,\n    combatEnded: false,\n  };\n\n  let newState = {\n    ...state,\n    combat: newCombat,\n    log: [`⚔️ Combat begins against ${enemy.name}!`, ...state.log],\n  };\n\n  newState = checkRelicTriggers(newState, TRIGGER_EVENTS.COMBAT_START);\n  newState = checkEnemyTriggers(newState, TRIGGER_EVENTS.COMBAT_START);\n  console.log(\"🛠️ Starting combat with baseBunnies =\", newCombat.baseBunnies);\n\n  // Start the player's turn (draw hand, refill ink, setup spellbook, etc.)\n  newState = startTurn(newState);\n\n  return newState;\n}\n\nfunction generateEnemy(state, path, modifyEnemyAbilityPower = null) {\n  const difficulty = pathMap[path?.path]?.difficulty;\n  console.log(\"Path:\", path?.path, \"| Difficulty:\", difficulty);\n\n  const level = state.level ?? 1;\n  const stage = state.stage ?? 0;\n  console.log(`Generating enemy at stage ${stage}`);\n\n  const multiplier = state.enemyHealthMultiplier ?? 1;\n  const isBoss = difficulty === \"boss\";\n\n  // === Health Calculation ===\n  const baseHealthMap = {\n    easy: 10,\n    medium: 13,\n    hard: 16,\n    boss: 25,\n  };\n\n  const perLevelIncrement = {\n    easy: 4,\n    medium: 5,\n    hard: 6,\n    boss: 10,\n  };\n\n  const perStageMultiplier = {\n    0: 1,\n    1: 2,\n    2: 3,\n  };\n\n  let base = baseHealthMap[difficulty] ?? 10;\n  let increment = perLevelIncrement[difficulty] ?? 3;\n  let stageMultiplier = perStageMultiplier[stage] ?? 1;\n  let health = (base + level * increment) * multiplier * stageMultiplier;\n\n  // === Ability Assignment ===\n  const allAbilities = Object.keys(enemyAbilityDataMap);\n  const selectedAbilities = new Set();\n\n  let numAbilities = 0;\n  if (difficulty === \"medium\") numAbilities = 1;\n  else if (difficulty === \"hard\") numAbilities = 2;\n  if (isBoss) numAbilities = 0;\n\n  if (state.difficulty === DIFFICULTIES.HARD) {\n    const bonusChance = Math.max(0, 0.5 - (state.luck ?? 0));\n    if (Math.random() < bonusChance) numAbilities += 1;\n  }\n\n  numAbilities = Math.min(numAbilities, 3);\n\n  while (selectedAbilities.size < numAbilities) {\n    const ability =\n      allAbilities[Math.floor(Math.random() * allAbilities.length)];\n    selectedAbilities.add(ability);\n  }\n\n  // === Build abilities object ===\n  const abilities = {};\n  for (const key of selectedAbilities) {\n    const data = enemyAbilityDataMap[key];\n    const baseValue = data.baseValue ?? 0;\n    const increment = data.incrementValue ?? 0;\n    const stage = state.stage ?? 0;\n    let value = baseValue + increment * stage;\n    console.log(\n      `→ Ability: ${key} | Base: ${baseValue}, Incr: ${increment}, Stage: ${stage}, Final Value: ${value}`\n    );\n\n    if (typeof modifyEnemyAbilityPower === \"function\") {\n      value = modifyEnemyAbilityPower({\n        ability: key,\n        baseValue,\n        increment,\n        currentValue: value,\n        stage,\n        enemyLevel: level,\n        difficulty,\n        isBoss,\n        state,\n      });\n    }\n\n    abilities[key] = value;\n  }\n  // === Name Generation ===\n  let name;\n  const smallMonsters = [\n    \"goblin\",\n    \"kobold\",\n    \"rat\",\n    \"spider\",\n    \"imp\",\n    \"gremlin\",\n    \"bat\",\n    \"quasit\",\n    \"skeleton\",\n    \"zombie\",\n  ];\n\n  const mediumMonsters = [\n    \"orc\",\n    \"ogre\",\n    \"gnoll\",\n    \"troll\",\n    \"hobgoblin\",\n    \"ghoul\",\n    \"harpy\",\n    \"lizardfolk\",\n    \"wight\",\n    \"mimic\",\n  ];\n\n  const largeMonsters = [\n    \"dragon\",\n    \"manticore\",\n    \"hydra\",\n    \"wyvern\",\n    \"beholder\",\n    \"medusa\",\n    \"chimera\",\n    \"giant\",\n    \"basilisk\",\n    \"banshee\",\n  ];\n  const vegetables = [\n    \"carrot\",\n    \"broccoli\",\n    \"spinach\",\n    \"kale\",\n    \"zucchini\",\n    \"eggplant\",\n    \"cauliflower\",\n    \"cabbage\",\n    \"lettuce\",\n    \"beet\",\n    \"radish\",\n    \"turnip\",\n    \"bokchoi\",\n    \"chilli\",\n    \"nopal\",\n    \"durian\",\n    \"bean\",\n    \"yam\",\n    \"tomato\",\n    \"asparagus\",\n    \"potato\",\n    \"pumpkin\",\n    \"bellpepper\",\n    \"celery\",\n    \"onion\",\n  ];\n  const bossNames = [\"Avatar of the Weasel\", \"Fox Spirit\", \"Beaglesoul\"];\n\n  if (isBoss) {\n    const defeated = state.defeatedEnemies ?? [];\n\n    // Filter out bosses that have already been defeated\n    const remainingBosses = bossNames.filter(\n      (boss) => !defeated.includes(boss)\n    );\n\n    if (remainingBosses.length === 0) {\n      console.warn(\"All bosses have already been defeated!\");\n      name = \"???\"; // or throw an error or return null or fallback enemy\n    } else {\n      name =\n        remainingBosses[Math.floor(Math.random() * remainingBosses.length)];\n    }\n  } else {\n    // Base monster type\n    let monsterList;\n    if (stage === 0) {\n      monsterList = smallMonsters;\n    } else if (stage === 1) {\n      monsterList = mediumMonsters;\n    } else {\n      monsterList = largeMonsters;\n    }\n\n    const vegetable = vegetables[Math.floor(Math.random() * vegetables.length)];\n    const monster = monsterList[Math.floor(Math.random() * monsterList.length)];\n\n    // Prefixes based on abilities\n    const prefixes = Object.keys(abilities)\n      .map((ability) => enemyAbilityDataMap[ability]?.prefix)\n      .filter(Boolean);\n\n    name = [...prefixes, capitalize(vegetable), capitalize(monster)].join(\" \");\n  }\n\n  // === Loot Generation ===\n  const loot = generateEnemyLoot(state, difficulty, numAbilities, isBoss);\n\n  return {\n    name,\n    hp: Math.round(health),\n    abilities,\n    loot,\n    isBoss,\n  };\n}\nfunction generateEnemyLoot(state, difficulty, numAbilities, isBoss) {\n  const luck = state.luck ?? 0;\n  const level = state.level ?? 1;\n  const deck = state.campaign?.deck ?? [];\n  const allGemmedOrUnsocketable =\n    deck.length > 0 && deck.every((card) => card.gem || card.unsocketable);\n  const weights = {\n    gold: 30,\n    potion: 30,\n    card: 40,\n    relic: 5 + luck + numAbilities * 4,\n    gem: allGemmedOrUnsocketable ? 0 : 5 + luck + numAbilities * 4,\n  };\n\n  let dropsRemaining = isBoss ? 3 : 1;\n  if (!isBoss) {\n    const chanceTwo = 50 + luck + numAbilities * 20;\n    if (Math.random() * 100 < chanceTwo) {\n      dropsRemaining++;\n      const chanceThree = 35 + luck + numAbilities * 15;\n      if (Math.random() * 100 < chanceThree) {\n        dropsRemaining++;\n      }\n    }\n  }\n\n  const usedTypes = new Set();\n  const loot = [];\n\n  console.log(\"💥 Generating loot — boss:\", isBoss, \"drops:\", dropsRemaining);\n\n  // === Guaranteed gold for bosses\n  if (isBoss) {\n    const guaranteedGold = 100;\n    console.log(\"💰 Boss gold drop (guaranteed):\", guaranteedGold);\n    loot.push({ type: \"gold\", value: guaranteedGold });\n\n    const bossRelic = getRandomBossRelic();\n    if (bossRelic && bossRelic.name) {\n      console.log(\"🧿 Boss Relic drop:\", bossRelic.name);\n      loot.push({ type: \"relic\", value: bossRelic });\n      usedTypes.add(\"relic\");\n      dropsRemaining--; // Only reduce dropsRemaining for relic\n    } else {\n      console.warn(\"⚠️ Boss relic was null or missing .name:\", bossRelic);\n    }\n\n    usedTypes.add(\"gold\"); // Prevent gold from dropping again\n  }\n\n  while (dropsRemaining > 0) {\n    const available = Object.entries(weights).filter(\n      ([type, weight]) => weight > 0 && !usedTypes.has(type)\n    );\n\n    if (available.length === 0) {\n      console.warn(\"⚠️ No available loot types remaining.\");\n      break;\n    }\n\n    const totalWeight = available.reduce((sum, [_, w]) => sum + w, 0);\n    let roll = Math.random() * totalWeight;\n\n    let selected;\n    for (const [type, weight] of available) {\n      if (roll < weight) {\n        selected = type;\n        break;\n      }\n      roll -= weight;\n    }\n\n    usedTypes.add(selected);\n    console.log(\"🎁 Loot type selected:\", selected);\n\n    // === Loot Type Handling ===\n    if (selected === \"gold\") {\n      const base = { easy: 3, medium: 5, hard: 8 }[difficulty] ?? 2;\n      const amount =\n        (base + level + luck + numAbilities * 3) * (0.5 + Math.random());\n      const goldAmount = Math.max(1, Math.round(amount));\n      console.log(\"💰 Gold awarded:\", goldAmount);\n      loot.push({ type: \"gold\", value: goldAmount });\n    } else if (selected === \"card\") {\n      const card = generateRandomCard(state);\n      if (!card) {\n        console.warn(\"⚠️ Card generation returned null or undefined!\");\n        continue;\n      }\n      console.log(\"🃏 Card awarded:\", card.name ?? \"[Unnamed card]\");\n      loot.push({ type: \"card\", value: card });\n    } else if (selected === \"potion\") {\n      const potion = generateRandomPotion(state);\n      if (!potion) {\n        console.warn(\"⚠️ Potion generation returned null or undefined!\");\n        continue;\n      }\n      console.log(\n        \"🧪 Potion awarded:\",\n        potion.name || potion.type || \"[Unnamed potion]\"\n      );\n      loot.push({ type: \"potion\", value: potion });\n    } else if (selected === \"relic\") {\n      const relic = generateRandomRelic(state);\n      if (!relic) {\n        console.warn(\"⚠️ Relic generation returned null or undefined!\");\n        continue;\n      }\n      console.log(\"💎 Relic awarded:\", relic.name ?? \"[Unnamed relic]\");\n      loot.push({ type: \"relic\", value: relic });\n    } else if (selected === \"gem\") {\n      const gem = generateRandomGem(state);\n      if (!gem) {\n        console.warn(\"⚠️ Gem generation returned null or undefined!\");\n        continue;\n      }\n      console.log(\n        \"🔮 Gem awarded:\",\n        gem.name || gem.color || gem.type || \"[Unnamed gem]\"\n      );\n      loot.push({ type: \"gem\", value: gem });\n    } else {\n      console.warn(\"❓ Unknown loot type selected:\", selected);\n    }\n\n    dropsRemaining--;\n  }\n\n  console.log(\"🎉 Final generated loot:\", loot);\n  return loot;\n}\n\nfunction permanentlyUpgradeRandomCardsInDeck(deck, numUpgrades = 1) {\n  const upgradableCards = deck.filter((card) => !card.unupgradable);\n  const shuffled = [...upgradableCards].sort(() => Math.random() - 0.5);\n  const toUpgrade = shuffled.slice(0, numUpgrades);\n  const upgradedCards = toUpgrade.map((card) => upgradeCard(card, 1));\n\n  return deck.map((card) => {\n    const index = toUpgrade.indexOf(card);\n    return index !== -1 ? upgradedCards[index] : card;\n  });\n}\n\nfunction addCardToCombatDeck(state, cardName) {\n  const base = cardList.find((c) => c.name === cardName);\n  if (!base) {\n    console.warn(`Could not find card \"${cardName}\"`);\n    return state;\n  }\n\n  const newCard = createCardInstance(cardName);\n  const combatDeck = Array.isArray(state.combat?.deck)\n    ? [...state.combat.deck]\n    : [];\n\n  const insertIndex = Math.floor(Math.random() * (combatDeck.length + 1));\n  combatDeck.splice(insertIndex, 0, newCard); // insert at random index\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      deck: combatDeck,\n    },\n  };\n}\n\n//#endregion\n//#region game reducer\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.NEW_GAME:\n      return {\n        ...createInitialState(),\n        log: [\"New game started.\"],\n      };\n\n    case ACTIONS.SET_DIFFICULTY: {\n      if (state.difficulty === action.payload) {\n        console.log(\"Difficulty already set to\", action.payload);\n        return state;\n      }\n      console.log(`Difficulty set to ${action.payload}`);\n      return {\n        ...state,\n        difficulty: action.payload, // ✅ store at root\n        log: [`Difficulty set to ${action.payload}.`, ...state.log],\n      };\n    }\n\n    case ACTIONS.GENERATE_STARTER_DECK:\n      return generateStarterDeck(state);\n\n    case ACTIONS.APPLY_DIFFICULTY_MODIFIERS:\n      return applyDifficultyModifiers(state);\n\n    case ACTIONS.ADVANCE_PHASE:\n      const newState = advancePhaseTo(state, action.payload);\n      return handlePhaseTransitions(newState);\n\n    case ACTIONS.CREATE_CARD_INSTANCE: {\n      const newCard = createCardInstance(\n        action.payload.cardName,\n        action.payload.rarity,\n        action.payload.upgrades,\n        action.payload.gem\n      );\n      return {\n        ...state,\n        campaign: {\n          ...state.campaign,\n          deck: [...state.campaign.deck, newCard],\n        },\n        log: [`Created card: ${newCard.name}`, ...state.log],\n      };\n    }\n\n    case ACTIONS.POPULATE_RELIC_OFFERINGS:\n      return populateRelicOfferings(state, action.payload?.rarity);\n\n    case ACTIONS.PICK_RELIC:\n      return pickRelic(state, action.payload);\n\n    case ACTIONS.POPULATE_PATH_OFFERINGS:\n      return populatePathOfferings(state);\n\n    case ACTIONS.PICK_PATH:\n      return pickPath(state, action.payload);\n\n    case ACTIONS.POPULATE_CARD_OFFERINGS:\n      return populateCardOfferings(state);\n\n    case ACTIONS.PICK_CARD:\n      return pickCard(state, action.payload);\n\n    case ACTIONS.POPULATE_POTION_OFFERINGS:\n      return populatePotionOfferings(state);\n\n    case ACTIONS.PICK_POTION:\n      return pickPotion(state, action.payload);\n\n    case ACTIONS.DRINK_POTION: {\n      const potionIndex = action.payload;\n      const potionToDrink = state.potionBelt[potionIndex];\n      if (!potionToDrink) {\n        console.error(\"Invalid potion index:\", potionIndex);\n        return state;\n      }\n      return drinkPotion(state, potionToDrink);\n    }\n\n    case ACTIONS.POPULATE_GEM_OFFERINGS:\n      return populateGemOfferings(state);\n\n    case ACTIONS.OPEN_MOD_SCREEN:\n      return openModScreen(state, action.payload.mod, action.payload.origin);\n\n    case ACTIONS.APPLY_CARD_MOD:\n      return applyModToCard(state, action.payload); // payload = selected card\n\n    case ACTIONS.SCREEN_CHANGE:\n      return {\n        ...state,\n        previousScreen: state.currentScreen,\n        currentScreen: action.payload,\n      };\n\n    case ACTIONS.POPULATE_SHOPFRONT:\n      return populateShopfront(state);\n\n    case ACTIONS.INCREASE_BASE_BUNNIES:\n      return increaseBaseBunnies(state, action.payload);\n\n    case ACTIONS.GAIN_GOLD:\n      return gainGold(state, action.payload);\n\n    case ACTIONS.PRACTICE_WANDWORK:\n      return practiceWandwork(state);\n\n    case ACTIONS.LOOT_HOARD:\n      return lootHoard(state);\n\n    case ACTIONS.REST:\n      return rest(state);\n\n    case ACTIONS.START_TURN:\n      return startTurn(state, action.dispatch);\n\n    case ACTIONS.CLOSE_COMBAT_REWARDS:\n      return closeCombatRewards(state);\n\n    case ACTIONS.MULLIGAN:\n      return mulligan(state);\n\n    case ACTIONS.CLAIM_GOLD_REWARD: {\n      const { index, amount } = action.payload;\n      const newRewards = [...state.offerings.combatRewards];\n      newRewards.splice(index, 1);\n\n      return {\n        ...gainGold(state, amount),\n        offerings: {\n          ...state.offerings,\n          combatRewards: newRewards,\n        },\n      };\n    }\n\n    case ACTIONS.DRAW_CARD:\n      return drawCard(state);\n\n    case ACTIONS.PLAY_CARD:\n      return playCard(state, action.payload);\n\n    case ACTIONS.CAST_SPELLBOOK:\n      return castSpellbook(state);\n\n    case ACTIONS.EXIT_SHOP:\n      return exitShop(state);\n\n    case ACTIONS.LOG_MESSAGE:\n      return {\n        ...state,\n        log: [action.payload, ...state.log],\n      };\n\n    default:\n      console.warn(\"Unknown action type:\", action.type);\n      return state;\n  }\n}\n//#endregion\n//#region render function\nfunction render(state, dispatch) {\n  // Get or create output div\n  let output = document.getElementById(\"output\");\n  if (!output) {\n    output = document.createElement(\"div\");\n    output.id = \"output\";\n    document.body.appendChild(output);\n  }\n  output.innerHTML = \"\"; // Clear previous contents\n  // //check and see if all cards in the deck are socketed\n  const allCardsSocketed =\n    state.campaign.deck?.length > 0 &&\n    state.campaign.deck.every((card) => card.gem != null || card.unsocketable);\n\n  //\n  function renderCardList(title, cards) {\n    const section = document.createElement(\"div\");\n    section.innerHTML = `<h3>${title}</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    cards.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    section.appendChild(ul);\n    output.appendChild(section);\n  }\n\n  // render utility function\n  function renderModPhaseEntry(phase, label, modKey) {\n    if (state.currentPhase === phase && state.currentScreen !== SCREENS.MOD) {\n      const modBtn = document.createElement(\"button\");\n      modBtn.textContent = label;\n      modBtn.style.fontSize = \"1.5rem\";\n      modBtn.style.padding = \"1rem 2rem\";\n      modBtn.onclick = () => {\n        modBtn.disabled = true; // prevent double click\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { [modKey]: true },\n            origin: phase,\n          },\n        });\n      };\n      output.appendChild(modBtn);\n    }\n  }\n\n  // === Game Info ===\n  const info = document.createElement(\"div\");\n  info.innerHTML = `\n  <h2>Game Info</h2>\n  <p><strong>Current Screen:</strong> ${state.currentScreen}</p>\n  <p><strong>Phase:</strong> ${\n    state.currentPhase\n  } &nbsp;&nbsp; <strong>Level:</strong> ${state.level ?? 0}</p>\n  <p><strong>Gold:</strong> ${state.gold}</p>\n  <p><strong>Health:</strong> ${state.health}/${state.maxHealth}</p>\n  <p><strong>Deck Size:</strong> ${state.campaign.deck.length}</p>\n  <p><strong>Relics:</strong> ${\n    state.relicBelt.length > 0\n      ? Object.entries(\n          state.relicBelt.reduce((acc, relic) => {\n            acc[relic.name] = (acc[relic.name] || 0) + 1;\n            return acc;\n          }, {})\n        )\n          .map(([name, count]) => (count > 1 ? `${name} x${count}` : name))\n          .join(\", \")\n      : \"None\"\n  }</p>\n`;\n  output.appendChild(info);\n\n  // === Combat Display ===\n  const isCombatInspectScreen = [\n    SCREENS.COMBAT_DECK,\n    SCREENS.GRAVEYARD,\n    SCREENS.EXILE,\n  ].includes(state.currentScreen);\n\n  if (state.currentPhase === PHASES.COMBAT && state.combat) {\n    const combatSection = document.createElement(\"div\");\n    combatSection.style.border = \"2px solid black\";\n    combatSection.style.padding = \"1rem\";\n    combatSection.style.margin = \"1rem 0\";\n    combatSection.innerHTML = `<h3>Combat</h3>`;\n\n    // === Main Combat UI (skip if inspecting)\n    if (!isCombatInspectScreen) {\n      // Enemy Name + HP (on same line)\n      const enemyBox = document.createElement(\"div\");\n      enemyBox.style.display = \"flex\";\n      enemyBox.style.justifyContent = \"space-between\";\n      enemyBox.style.alignItems = \"center\";\n      enemyBox.style.fontSize = \"1.5rem\";\n      enemyBox.style.fontWeight = \"bold\";\n      enemyBox.style.border = \"1px solid red\";\n      enemyBox.style.padding = \"1rem\";\n      enemyBox.style.marginBottom = \"1rem\";\n\n      // Enemy name\n      const nameSpan = document.createElement(\"span\");\n      nameSpan.textContent = state.combat.enemy.name;\n\n      // Enemy HP\n      const hpSpan = document.createElement(\"span\");\n      hpSpan.textContent = `HP: ${state.combat.enemyHp}`;\n\n      enemyBox.appendChild(nameSpan);\n      enemyBox.appendChild(hpSpan);\n      combatSection.appendChild(enemyBox);\n\n      // Spellbook Pages\n      const spellbook = document.createElement(\"div\");\n      spellbook.style.display = \"flex\";\n      spellbook.style.gap = \"0.5rem\";\n      spellbook.style.marginBottom = \"1rem\";\n      state.combat.spellbook.forEach((page, index) => {\n        const pageDiv = document.createElement(\"div\");\n        pageDiv.style.width = \"60px\";\n        pageDiv.style.height = \"90px\";\n        pageDiv.style.border = \"1px solid #333\";\n        pageDiv.style.display = \"flex\";\n        pageDiv.style.alignItems = \"center\";\n        pageDiv.style.justifyContent = \"center\";\n        pageDiv.style.backgroundColor =\n          page === \"blank page\" ? \"lightgrey\" : \"white\";\n        pageDiv.textContent = page === \"blank page\" ? \"\" : page.name;\n        spellbook.appendChild(pageDiv);\n      });\n\n      const spellbookLabel = document.createElement(\"p\");\n      spellbookLabel.textContent = \"Spellbook:\";\n      spellbookLabel.style.fontWeight = \"bold\";\n      spellbookLabel.style.marginBottom = \"0.25rem\";\n      combatSection.appendChild(spellbookLabel);\n      combatSection.appendChild(spellbook);\n\n      // Cast + Ink + Bunny Count\n      const castRow = document.createElement(\"div\");\n      castRow.style.display = \"flex\";\n      castRow.style.alignItems = \"center\";\n      castRow.style.gap = \"1rem\";\n      castRow.style.marginBottom = \"0.5rem\";\n\n      const allPagesBlank =\n        state.combat.spellbook.length > 0 &&\n        state.combat.spellbook.every((page) => page === \"blank page\");\n\n      const castButton = document.createElement(\"button\");\n      if (allPagesBlank) {\n        castButton.textContent = \"Skip Turn\";\n        castButton.style.backgroundColor = \"#f88\";\n      } else {\n        castButton.textContent = \"Cast Spellbook\";\n      }\n      castButton.onclick = () => dispatch({ type: ACTIONS.CAST_SPELLBOOK });\n\n      const bunnyDisplay = document.createElement(\"span\");\n      bunnyDisplay.textContent = `BUNNIES: ${state.combat?.bunnies || 0}`;\n\n      castRow.appendChild(castButton);\n      castRow.appendChild(castButton);\n\n      // === Mulligan Button ===\n      const mulliganBtn = document.createElement(\"button\");\n      const remaining = state.combat?.mulligans ?? 0;\n      mulliganBtn.textContent = `Mulligan (${remaining})`;\n\n      if (remaining <= 0) {\n        mulliganBtn.disabled = true;\n        mulliganBtn.style.backgroundColor = \"#ccc\";\n        mulliganBtn.style.cursor = \"not-allowed\";\n      } else {\n        mulliganBtn.onclick = () => {\n          dispatch({ type: ACTIONS.MULLIGAN });\n        };\n      }\n\n      castRow.appendChild(mulliganBtn);\n      castRow.appendChild(bunnyDisplay);\n      combatSection.appendChild(castRow);\n\n      // === INK and BOOKS Line (below cast + bunnies)\n      const resourcesRow = document.createElement(\"div\");\n      resourcesRow.style.display = \"flex\";\n      resourcesRow.style.gap = \"1rem\";\n      resourcesRow.style.marginBottom = \"1rem\";\n\n      const inkDisplay = document.createElement(\"span\");\n      inkDisplay.textContent = `INK: ${state.combat.ink}/${state.combat.maxInk}`;\n\n      const booksDisplay = document.createElement(\"span\");\n      booksDisplay.textContent = `BOOKS: ${state.combat.books}`;\n\n      resourcesRow.appendChild(inkDisplay);\n      resourcesRow.appendChild(booksDisplay);\n      combatSection.appendChild(resourcesRow);\n\n      // Hand\n      const handRow = document.createElement(\"div\");\n      handRow.style.display = \"flex\";\n      handRow.style.gap = \"0.5rem\";\n      handRow.style.flexWrap = \"wrap\";\n\n      if (state.combat.hand && state.combat.hand.length > 0) {\n        state.combat.hand.forEach((card, index) => {\n          const cardBtn = document.createElement(\"button\");\n\n          const cardCost = card.inkCost ?? 0;\n          const canAfford = cardCost <= state.combat.ink;\n          const isUncastable = !!card.uncastable;\n\n          // Display name and cost\n          const costText =\n            !isUncastable && card.inkCost != null\n              ? ` (Cost: ${card.inkCost})`\n              : \"\";\n          cardBtn.textContent = `${card.name}${costText}`;\n\n          // Disable the button if the card is uncastable or too expensive\n          cardBtn.disabled = isUncastable || !canAfford;\n\n          // Style disabled buttons\n          if (cardBtn.disabled) {\n            cardBtn.style.opacity = \"0.5\";\n            cardBtn.style.cursor = \"not-allowed\";\n          }\n\n          // Only dispatch if allowed\n          cardBtn.onclick = () => {\n            if (!cardBtn.disabled) {\n              dispatch({ type: ACTIONS.PLAY_CARD, payload: index });\n            }\n          };\n\n          handRow.appendChild(cardBtn);\n        });\n      } else {\n        const empty = document.createElement(\"p\");\n        empty.textContent = \"Your hand is empty.\";\n        handRow.appendChild(empty);\n      }\n\n      // Hand label\n      const handLabel = document.createElement(\"p\");\n      handLabel.textContent = \"Hand:\";\n      handLabel.style.fontWeight = \"bold\";\n      handLabel.style.marginBottom = \"0.25rem\";\n      combatSection.appendChild(handLabel);\n\n      combatSection.appendChild(handRow);\n    }\n\n    // === Inspect Buttons (always shown in combat)\n    const inspectRow = document.createElement(\"div\");\n    inspectRow.style.marginTop = \"1rem\";\n    inspectRow.style.display = \"flex\";\n    inspectRow.style.gap = \"0.5rem\";\n\n    [\n      {\n        label: `Combat Deck (${state.combat.deck.length})`,\n        screen: SCREENS.COMBAT_DECK,\n      },\n      {\n        label: `Graveyard (${state.combat.graveyard.length})`,\n        screen: SCREENS.GRAVEYARD,\n      },\n      {\n        label: `Exile (${state.combat.exile.length})`,\n        screen: SCREENS.EXILE,\n      },\n    ].forEach(({ label, screen }) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent =\n        state.currentScreen === screen ? \"Return\" : `Inspect ${label}`;\n      btn.onclick = () => {\n        if (state.currentScreen === screen) {\n          returnToMain(dispatch);\n        } else {\n          changeScreen(dispatch, screen);\n        }\n      };\n      inspectRow.appendChild(btn);\n    });\n\n    //label\n    const inspectZoneLabel = document.createElement(\"p\");\n    inspectZoneLabel.textContent = \"Inspect Zones:\";\n    inspectZoneLabel.style.fontWeight = \"bold\";\n    inspectZoneLabel.style.marginBottom = \"0.25rem\";\n    combatSection.appendChild(inspectZoneLabel);\n    combatSection.appendChild(inspectRow);\n    output.appendChild(combatSection);\n  }\n\n  if (state.currentScreen === SCREENS.COMBAT_DECK) {\n    renderCardList(\"Combat Deck\", state.combat?.deck || []);\n  }\n  if (state.currentScreen === SCREENS.GRAVEYARD) {\n    renderCardList(\"Graveyard\", state.combat?.graveyard || []);\n  }\n  if (state.currentScreen === SCREENS.EXILE) {\n    renderCardList(\"Exile\", state.combat?.exile || []);\n  }\n\n  // === Log ===\n  const log = document.createElement(\"div\");\n  log.innerHTML = `<h3>Log</h3><ul>${state.log\n    .slice(0, 5)\n    .map((msg) => `<li>${msg}</li>`)\n    .join(\"\")}</ul>`;\n  output.appendChild(log);\n\n  // === Main Menu ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.MAIN_MENU\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = \"New Game\";\n    button.onclick = () => {\n      dispatch({\n        type: ACTIONS.ADVANCE_PHASE,\n        payload: PHASES.DIFFICULTY_SELECTION,\n      });\n    };\n    output.appendChild(button);\n  }\n\n  // === Difficulty Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.DIFFICULTY_SELECTION\n  ) {\n    const difficulties = [\n      DIFFICULTIES.EASY,\n      DIFFICULTIES.MEDIUM,\n      DIFFICULTIES.HARD,\n    ];\n    difficulties.forEach((difficulty) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `Start ${difficulty} Game`;\n      btn.onclick = () => selectDifficultyAndBeginGame(dispatch, difficulty);\n      output.appendChild(btn);\n    });\n  }\n\n  // === Relic Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.relics &&\n    state.offerings.relics.length > 0\n  ) {\n    const relicSection = document.createElement(\"div\");\n    relicSection.innerHTML = `<h3>Relic Offerings</h3>`;\n    state.offerings.relics.forEach((relic, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${relic.name}`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n      relicSection.appendChild(btn);\n    });\n    output.appendChild(relicSection);\n  }\n  // === Path Selection ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.paths &&\n    state.offerings.paths.length > 0\n  ) {\n    const pathSection = document.createElement(\"div\");\n    pathSection.innerHTML = `<h3>Choose a Path</h3>`;\n\n    state.offerings.paths.forEach((path, index) => {\n      const btn = document.createElement(\"button\");\n\n      // === Conditionally render based on anonymity ===\n      if (path.anonymousNameDisplay) {\n        btn.textContent = `???`;\n      } else {\n        btn.textContent = `${path.path}`;\n      }\n\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_PATH, payload: index });\n\n      pathSection.appendChild(btn);\n    });\n\n    output.appendChild(pathSection);\n  }\n\n  // === Card Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.offerings.cards &&\n    state.offerings.cards.length > 0\n  ) {\n    const cardSection = document.createElement(\"div\");\n    cardSection.innerHTML = `<h3>Choose a Card</h3>`;\n\n    state.offerings.cards.forEach((card, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.inkCost})${\n        card.gem ? ` [Gem: ${card.gem.name}]` : \"\"\n      }`;\n\n      btn.onclick = () => dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n      cardSection.appendChild(btn);\n    });\n\n    output.appendChild(cardSection);\n  }\n\n  // === Potion Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentPhase === PHASES.POTION_OFFERING &&\n    state.offerings.potions &&\n    state.offerings.potions.length > 0\n  ) {\n    const potionSection = document.createElement(\"div\");\n    potionSection.innerHTML = `<h3>Choose a Potion</h3>`;\n\n    state.offerings.potions.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${potion.name} (${potion.rarity})`;\n      btn.onclick = () =>\n        dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n      potionSection.appendChild(btn);\n    });\n\n    output.appendChild(potionSection);\n  }\n\n  // ==== Gem Offerings ===\n  if (\n    state.currentScreen !== SCREENS.DECK &&\n    state.currentScreen === SCREENS.MAIN &&\n    state.currentPhase === PHASES.GEM_OFFERING &&\n    state.offerings.gems &&\n    state.offerings.gems.length > 0\n  ) {\n    const gemSection = document.createElement(\"div\");\n    gemSection.innerHTML = `<h3>Choose a Gem</h3>`;\n\n    state.offerings.gems.forEach((gem, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${gem.name} (${gem.rarity})`;\n\n      btn.onclick = () =>\n        dispatch({\n          type: ACTIONS.OPEN_MOD_SCREEN,\n          payload: {\n            mod: { gem },\n            origin: PHASES.GEM_OFFERING,\n          },\n        });\n\n      gemSection.appendChild(btn);\n    });\n\n    output.appendChild(gemSection);\n  }\n  // === Shopfront Display ===\n\n  if (\n    state.currentPhase === PHASES.SHOP &&\n    state.currentScreen !== SCREENS.MOD &&\n    state.offerings.shopfront.length > 0\n  ) {\n    const shopSection = document.createElement(\"div\");\n    shopSection.innerHTML = `<h3>Shop Inventory</h3>`;\n\n    const list = document.createElement(\"ul\");\n    state.offerings.shopfront.forEach((entry, index) => {\n      if (!entry || !entry.item || !entry.item.name) return;\n\n      const li = document.createElement(\"li\");\n\n      const btn = document.createElement(\"button\");\n      const price = entry.item?.price ?? 0;\n      const playerGold = state.gold ?? 0;\n      const isGem = entry.type === \"gem\";\n      const disabled = price > playerGold || (isGem && allCardsSocketed);\n      btn.textContent = `${entry.type.toUpperCase()}: ${\n        entry.item.name\n      } (${price}g)`;\n      if (disabled) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      // Bind correct function based on type\n      btn.onclick = () => {\n        switch (entry.type) {\n          case \"card\":\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n            break;\n          case \"potion\":\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n            break;\n          case \"gem\":\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: entry.item },\n                origin: PHASES.SHOP,\n              },\n            });\n            break;\n\n          case \"relic\":\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n            break;\n          default:\n            console.warn(\"Unknown shop item type:\", entry.type);\n        }\n      };\n\n      li.appendChild(btn);\n      list.appendChild(li);\n    });\n\n    // Exit Shop Button (for future logic)\n    const exitBtn = document.createElement(\"button\");\n    exitBtn.textContent = \"Exit Shop\";\n    exitBtn.onclick = () => {\n      dispatch({ type: ACTIONS.EXIT_SHOP });\n    };\n    shopSection.appendChild(list);\n    shopSection.appendChild(exitBtn);\n    output.appendChild(shopSection);\n  }\n\n  // === Mod Screen ===\n  if (state.currentScreen === SCREENS.MOD && state.modData?.mod) {\n    const modSection = document.createElement(\"div\");\n    modSection.innerHTML = `<h3>Choose a card to modify</h3>`;\n\n    const mod = state.modData.mod;\n    const isGemMod = !!mod.gem;\n\n    state.campaign.deck.forEach((card) => {\n      // === Filter based on mod type ===\n      if (isGemMod && (card.gem || card.unsocketable)) return;\n      if (mod.upgrade && card.unupgradable) return;\n\n      const btn = document.createElement(\"button\");\n      btn.textContent = `${card.name} (Cost: ${card.inkCost})`;\n\n      btn.onclick = () => {\n        dispatch({ type: ACTIONS.APPLY_CARD_MOD, payload: card });\n      };\n\n      modSection.appendChild(btn);\n    });\n\n    output.appendChild(modSection);\n  }\n\n  // ======= render purge, transmute, and enchant phases (AKA mod phases) ======\n\n  renderModPhaseEntry(PHASES.PURGE, \"Lethian Font\", \"purge\");\n  renderModPhaseEntry(PHASES.TRANSMUTE, \"Metamorphosis\", \"transmute\");\n  renderModPhaseEntry(PHASES.ENCHANT, \"Enchanted Dolmen\", \"upgrade\");\n\n  // ====== render hoard phase= ======\n  if (state.currentPhase === PHASES.HOARD) {\n    const btn = document.createElement(\"button\");\n    btn.textContent = \"Loot Hoard\";\n    btn.style.fontSize = \"1.5rem\";\n    btn.style.padding = \"1rem 2rem\";\n    btn.onclick = () => {\n      // Placeholder until lootHoard is implemented\n      dispatch({ type: \"LOOT_HOARD\" }); // or just console.log(\"Loot Hoard\")\n    };\n    output.appendChild(btn);\n  }\n  // ====== rest phase rendering ======\n  if (state.currentPhase === PHASES.REST) {\n    const restBtn = document.createElement(\"button\");\n    restBtn.textContent = \"Fireside Rest\";\n    restBtn.style.fontSize = \"1.5rem\";\n    restBtn.style.padding = \"1rem 2rem\";\n    restBtn.onclick = () => {\n      dispatch({ type: \"REST\" }); // Placeholder\n    };\n\n    const practiceBtn = document.createElement(\"button\");\n    practiceBtn.textContent = \"Practice Wandwork\";\n    practiceBtn.style.fontSize = \"1.5rem\";\n    practiceBtn.style.padding = \"1rem 2rem\";\n    practiceBtn.onclick = () => {\n      dispatch({ type: \"PRACTICE_WANDWORK\" }); // Placeholder\n    };\n\n    output.appendChild(restBtn);\n    output.appendChild(practiceBtn);\n  }\n\n  // === Combat End Phase ===\n  if (state.currentPhase === PHASES.COMBAT_END) {\n    const combatEndSection = document.createElement(\"div\");\n    combatEndSection.innerHTML = `<h3>Combat Concluded</h3>`;\n\n    const hasUnclaimedLoot =\n      state.offerings?.combatRewards &&\n      state.offerings.combatRewards.length > 0;\n\n    const btn = document.createElement(\"button\");\n    btn.textContent = hasUnclaimedLoot ? \"Skip Loot\" : \"Continue\";\n    btn.onclick = () => {\n      dispatch({ type: ACTIONS.CLOSE_COMBAT_REWARDS });\n    };\n\n    combatEndSection.appendChild(btn);\n    output.appendChild(combatEndSection);\n  }\n  if (\n    state.currentPhase === PHASES.COMBAT_END &&\n    state.offerings.combatRewards &&\n    state.offerings.combatRewards.length > 0\n  ) {\n    console.log(\"🔎 Rendering combatRewards:\", state.offerings.combatRewards);\n\n    const rewardSection = document.createElement(\"div\");\n    rewardSection.innerHTML = `<h3>Combat Rewards</h3>`;\n\n    state.offerings.combatRewards.forEach((reward, index) => {\n      const btn = document.createElement(\"button\");\n\n      let label = \"\";\n      switch (reward.type) {\n        case \"gold\":\n          label = `Gold: ${reward.value}`;\n          break;\n        case \"card\":\n          label = `Card: ${reward.value.name}`;\n          break;\n        case \"relic\":\n          label = `Relic: ${reward.value.name}`;\n          break;\n        case \"potion\":\n          label = `Potion: ${reward.value.name}`;\n          break;\n        case \"gem\":\n          label = `Gem: ${reward.value.name}`;\n          break;\n        default:\n          label = \"Unknown Reward\";\n      }\n\n      btn.textContent = label;\n\n      const isGem = reward.type === \"gem\";\n      const shouldDisable = isGem && allCardsSocketed;\n\n      if (shouldDisable) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      if (!shouldDisable) {\n        btn.onclick = () => {\n          if (reward.type === \"gold\") {\n            dispatch({\n              type: ACTIONS.CLAIM_GOLD_REWARD,\n              payload: { index, amount: reward.value },\n            });\n          } else if (reward.type === \"card\") {\n            dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n          } else if (reward.type === \"relic\") {\n            dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n          } else if (reward.type === \"potion\") {\n            dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n          } else if (reward.type === \"gem\") {\n            dispatch({\n              type: ACTIONS.OPEN_MOD_SCREEN,\n              payload: {\n                mod: { gem: reward.value },\n                origin: PHASES.COMBAT_END,\n              },\n            });\n          }\n        };\n      }\n\n      rewardSection.appendChild(btn);\n    });\n\n    output.appendChild(rewardSection);\n  }\n  // === GAME OVER screen ====\n  if (state.currentPhase === PHASES.GAME_OVER) {\n    const gameOverSection = document.createElement(\"div\");\n    gameOverSection.classList.add(\"game-over\");\n\n    const banner = document.createElement(\"h1\");\n    banner.textContent =\n      state.gameOverResult === \"victory\" ? \"🏆 Victory!\" : \"💀 Defeat!\";\n    gameOverSection.appendChild(banner);\n\n    const summary = document.createElement(\"div\");\n    summary.innerHTML = `\n      <p>Game ended at level: ${state.level}</p>\n      <h3>Decklist:</h3>\n      <ul>\n        ${state.campaign.deck\n          .map(\n            (card) =>\n              `<li>${card.name}</li>\n`\n          )\n          .join(\"\")}\n      </ul>\n      <h3>Relics:</h3>\n      <ul>\n        ${state.relicBelt.map((relic) => `<li>${relic.name}</li>`).join(\"\")}\n      </ul>\n    `;\n    gameOverSection.appendChild(summary);\n\n    const newGameBtn = document.createElement(\"button\");\n    newGameBtn.textContent = \"Return to Main Menu\";\n    newGameBtn.onclick = () => {\n      dispatch({ type: ACTIONS.NEW_GAME });\n    };\n\n    gameOverSection.appendChild(newGameBtn);\n    output.appendChild(gameOverSection);\n  }\n\n  // === Deck Inspect / Return Button ===\n  //deck inspect button\n  if (\n    (state.currentScreen === SCREENS.MAIN ||\n      state.currentScreen === SCREENS.DECK) &&\n    state.campaign.deck.length > 0\n  ) {\n    const deckBtn = document.createElement(\"button\");\n    deckBtn.textContent =\n      state.currentScreen === SCREENS.MAIN\n        ? `Inspect Deck (${state.campaign.deck.length})`\n        : \"Return\";\n    deckBtn.onclick = () => {\n      const nextScreen =\n        state.currentScreen === SCREENS.MAIN ? SCREENS.DECK : SCREENS.MAIN;\n      dispatch({\n        type: ACTIONS.SCREEN_CHANGE,\n        payload: nextScreen,\n      });\n    };\n    output.appendChild(deckBtn);\n  }\n  // deck inspect screen\n  if (state.currentScreen === SCREENS.DECK) {\n    const deckView = document.createElement(\"div\");\n    deckView.innerHTML = `<h3>Campaign Deck</h3>`;\n    const ul = document.createElement(\"ul\");\n\n    state.campaign.deck.forEach((card) => {\n      const li = document.createElement(\"li\");\n      li.textContent = card.name;\n      ul.appendChild(li);\n    });\n\n    deckView.appendChild(ul);\n    output.appendChild(deckView);\n  }\n\n  // === Always-Visible Potion Belt ===\n  if (state.potionBelt && state.potionBelt.length > 0) {\n    const beltSection = document.createElement(\"div\");\n    beltSection.innerHTML = `<h3>Your Potions</h3>`;\n\n    const isCombatPhase = state.currentPhase === PHASES.COMBAT;\n    const isGameOver = state.currentPhase === PHASES.GAME_OVER;\n\n    state.potionBelt.forEach((potion, index) => {\n      const btn = document.createElement(\"button\");\n      btn.textContent = potion.name;\n\n      const isDrinkableNow =\n        !isGameOver && (potion.drinkableOutOfCombat !== false || isCombatPhase);\n\n      if (!isDrinkableNow) {\n        btn.disabled = true;\n        btn.style.opacity = 0.5;\n        btn.style.cursor = \"not-allowed\";\n      }\n\n      btn.onclick = () => {\n        if (isDrinkableNow) {\n          dispatch({ type: ACTIONS.DRINK_POTION, payload: index });\n        }\n      };\n\n      beltSection.appendChild(btn);\n    });\n\n    output.appendChild(beltSection);\n  }\n  setupHotkeys(state, dispatch);\n}\n// #endregion\n\n// Initialize the game app\nwindow.onload = () => {\n  createGameApp(createInitialState(), gameReducer, render);\n};\n\n//hotkeys\nfunction setupHotkeys(state, dispatch) {\n  document.onkeydown = null; // clear previous\n\n  document.onkeydown = (e) => {\n    const key = e.key;\n\n    // === Always Available\n    if (key === \"Escape\") {\n      dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: SCREENS.MAIN });\n    }\n\n    // === Path Selection\n    const isPathSelection =\n      state.currentPhase === PHASES.PATH_SELECTION &&\n      state.offerings.paths?.length > 0;\n\n    if (isPathSelection) {\n      const index = parseInt(key, 10) - 1;\n      if (!isNaN(index) && state.offerings.paths[index]) {\n        dispatch({ type: ACTIONS.PICK_PATH, payload: index });\n      }\n    }\n\n    // === Combat Phase\n    const isCombat =\n      state.currentPhase === PHASES.COMBAT &&\n      state.combat &&\n      ![SCREENS.COMBAT_DECK, SCREENS.GRAVEYARD, SCREENS.EXILE].includes(\n        state.currentScreen\n      );\n\n    if (isCombat) {\n      if (/^[1-9]$/.test(key) || key === \"0\") {\n        const index = key === \"0\" ? 9 : parseInt(key, 10) - 1;\n        const card = state.combat.hand?.[index];\n        if (\n          card &&\n          !card.uncastable &&\n          (card.inkCost ?? 0) <= state.combat.ink\n        ) {\n          dispatch({ type: ACTIONS.PLAY_CARD, payload: index });\n        }\n      }\n\n      if (key === \" \") {\n        e.preventDefault();\n        dispatch({ type: ACTIONS.CAST_SPELLBOOK });\n      }\n\n      if (key.toLowerCase() === \"m\" && (state.combat?.mulligans ?? 0) > 0) {\n        dispatch({ type: ACTIONS.MULLIGAN });\n      }\n\n      if (key === \"[\")\n        toggleCombatInspect(dispatch, state, SCREENS.COMBAT_DECK);\n      if (key === \"]\") toggleCombatInspect(dispatch, state, SCREENS.GRAVEYARD);\n      if (key === \"\\\\\") toggleCombatInspect(dispatch, state, SCREENS.EXILE);\n    }\n\n    // === Main Menu: Spacebar to start new game\n    if (state.currentPhase === PHASES.MAIN_MENU) {\n      if (key === \" \") {\n        e.preventDefault();\n        dispatch({\n          type: ACTIONS.ADVANCE_PHASE,\n          payload: PHASES.DIFFICULTY_SELECTION,\n        });\n      }\n    }\n\n    // === Difficulty Selection: 1 = Easy, 2 = Medium, 3 = Hard\n    if (state.currentPhase === PHASES.DIFFICULTY_SELECTION) {\n      if (key === \"1\") {\n        selectDifficultyAndBeginGame(dispatch, DIFFICULTIES.EASY);\n      }\n      if (key === \"2\") {\n        selectDifficultyAndBeginGame(dispatch, DIFFICULTIES.MEDIUM);\n      }\n      if (key === \"3\") {\n        selectDifficultyAndBeginGame(dispatch, DIFFICULTIES.HARD);\n      }\n    }\n\n    // === Relic Offerings: 1, 2, 3 to pick relics\n    if (\n      state.offerings.relics &&\n      state.offerings.relics.length > 0 &&\n      state.currentScreen !== SCREENS.DECK\n    ) {\n      const relicIndex = parseInt(key) - 1;\n      if (relicIndex >= 0 && relicIndex < state.offerings.relics.length) {\n        dispatch({ type: ACTIONS.PICK_RELIC, payload: relicIndex });\n      }\n    }\n\n    // === Combat End Phase\n    const isCombatEnd =\n      state.currentPhase === PHASES.COMBAT_END &&\n      state.offerings.combatRewards?.length >= 0;\n\n    if (isCombatEnd) {\n      if (key === \" \") {\n        e.preventDefault();\n        dispatch({ type: ACTIONS.CLOSE_COMBAT_REWARDS });\n      }\n\n      // Claim specific reward (1–9, 0)\n      if (/^[1-9]$/.test(key) || key === \"0\") {\n        const index = key === \"0\" ? 9 : parseInt(key, 10) - 1;\n        const reward = state.offerings.combatRewards?.[index];\n        if (!reward) return;\n\n        if (reward.type === \"gold\") {\n          dispatch({\n            type: ACTIONS.CLAIM_GOLD_REWARD,\n            payload: { index, amount: reward.value },\n          });\n        } else if (reward.type === \"card\") {\n          dispatch({ type: ACTIONS.PICK_CARD, payload: index });\n        } else if (reward.type === \"relic\") {\n          dispatch({ type: ACTIONS.PICK_RELIC, payload: index });\n        } else if (reward.type === \"potion\") {\n          dispatch({ type: ACTIONS.PICK_POTION, payload: index });\n        } else if (reward.type === \"gem\") {\n          dispatch({\n            type: ACTIONS.OPEN_MOD_SCREEN,\n            payload: {\n              mod: { gem: reward.value },\n              origin: PHASES.COMBAT_END,\n            },\n          });\n        }\n      }\n    }\n  };\n}\n\n// Helper function for toggling inspect screens\nfunction toggleCombatInspect(dispatch, state, screen) {\n  if (state.currentScreen === screen) {\n    dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: SCREENS.MAIN });\n  } else {\n    dispatch({ type: ACTIONS.SCREEN_CHANGE, payload: screen });\n  }\n}\n\n//#region WIP\n// //------------------------------------------------WIP functions for MVP ------------------------------------------------\nfunction startTurn(state) {\n  console.log(\">>> Starting new turn. Books remaining: \", state.combat.books);\n\n  if (state.combat.books < 1) {\n    return {\n      ...state,\n      combat: {\n        ...state.combat,\n        combatEnded: true,\n      },\n      log: [\"📕 You have no books left. Combat ends.\", ...state.log],\n    };\n  }\n\n  // Open a new spellbook of blank pages\n  const newBook = Array(state.combat.pages).fill(\"blank page\");\n\n  const baseBunnies = state.combat.baseBunnies ?? 0;\n\n  // Subtract one book, set up spellbook, and apply base bunnies\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      books: state.combat.books - 1,\n      spellbook: newBook,\n      bunnies: baseBunnies, // ✅ Set starting bunnies for the turn\n      combatEnded: false,\n    },\n    log: [\n      `📖 A new turn begins. 🐇 Gained ${baseBunnies} bunnies.`,\n      ...state.log,\n    ],\n  };\n\n  updatedState = newHand(updatedState);\n  updatedState = refillInkpot(updatedState);\n\n  return updatedState;\n}\n\nfunction shuffleGraveyardIntoDeck(state) {\n  const graveyard = state.combat?.graveyard ?? [];\n  const deck = state.combat?.deck ?? [];\n\n  if (graveyard.length === 0) {\n    return {\n      ...state,\n      log: [\"Your graveyard is already empty.\", ...state.log],\n    };\n  }\n\n  // Purely combine and shuffle\n  const combinedDeck = [...deck, ...graveyard];\n  const shuffledDeck = shuffleArray(combinedDeck);\n\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      deck: shuffledDeck,\n      graveyard: [], // clear graveyard\n    },\n    log: [\"You shuffled your graveyard into your deck.\", ...state.log],\n  };\n\n  // 🔁 Check for relic triggers\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.SHUFFLE_GRAVEYARD_INTO_DECK\n  );\n\n  // 🧪 Check if anyone died as a result of relic effects\n  updatedState = checkCombatEndViaDeath(updatedState);\n\n  return updatedState;\n}\n\nfunction refillInkpot(state) {\n  const maxInk = state.combat?.maxInk ?? 0;\n\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      ink: maxInk,\n    },\n    log: [`🔮 Inkpot refilled to ${maxInk}.`, ...state.log],\n  };\n}\nfunction checkCombatEndViaDeath(state) {\n  const playerDead = state.health <= 0;\n  const enemyDead = state.combat?.enemyHp <= 0;\n\n  if (playerDead) {\n    console.log(\">>> Player is dead. Ending combat.\");\n\n    return combatEnd(state, { result: \"loss\" });\n  }\n\n  if (enemyDead) {\n    console.log(\">>> Enemy is dead. Ending combat.\");\n\n    return combatEnd(state, { result: \"win\" });\n  }\n\n  // No one is dead — combat continues\n  return state;\n}\nfunction newHand(state) {\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      hand: [], // clear hand before drawing\n    },\n  };\n\n  for (let i = 0; i < updatedState.combat.handSize; i++) {\n    updatedState = drawCard(updatedState);\n  }\n\n  return updatedState;\n}\nfunction drawCard(state) {\n  let updatedState = { ...state };\n\n  // 🛠 Use the most recent combat state from the input state\n  let currentCombat = updatedState.combat;\n\n  // Step 1: If deck is empty, try to shuffle from graveyard\n  if (currentCombat.deck.length === 0) {\n    updatedState = shuffleGraveyardIntoDeck(updatedState);\n  }\n\n  // 🧠 Rebind again after potential shuffle\n  currentCombat = updatedState.combat;\n\n  // Step 2: If still no cards, apply fatigue\n  if (currentCombat.deck.length === 0) {\n    updatedState = takeDamage(updatedState, 1, { skipDeathCheck: false });\n    updatedState = {\n      ...updatedState,\n      log: [\n        \"💀 Lost 1 HP to fatigue by attempting to draw from an empty deck.\",\n        ...updatedState.log,\n      ],\n    };\n    return updatedState;\n  }\n\n  // Step 3: Draw the card normally\n  const [drawnCard, ...remainingDeck] = currentCombat.deck;\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...currentCombat,\n      deck: remainingDeck,\n      hand: [...currentCombat.hand, drawnCard],\n    },\n    // log: [`📜 Drew card: ${drawnCard.name}`, ...updatedState.log],\n  };\n\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.DRAW_CARD);\n  updatedState = checkCardTriggers(\n    updatedState,\n    drawnCard,\n    TRIGGER_EVENTS.DRAW_CARD\n  );\n\n  return updatedState;\n}\n\nfunction checkCardTriggers(state, card, triggerEvent, context = {}) {\n  let updatedState = { ...state };\n  const effect = card.triggers?.[triggerEvent];\n  if (!effect) return updatedState;\n  // === Handle DRAW_CARD triggers ===\n  if (triggerEvent === TRIGGER_EVENTS.DRAW_CARD) {\n    // on draw triggers go here\n  }\n  // === Handle PICK_CARD triggers ===\n  if (triggerEvent === TRIGGER_EVENTS.PICK_CARD) {\n    // on pick triggers go here\n  }\n  return updatedState;\n}\nfunction addBunnies(state, bunnyAdd) {\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      bunnies: (state.combat.bunnies ?? 0) + bunnyAdd,\n    },\n  };\n}\nfunction multiplyBunnies(state, bunnyMult) {\n  return {\n    ...state,\n    combat: {\n      ...state.combat,\n      bunnies: Math.floor((state.combat.bunnies ?? 0) * bunnyMult),\n    },\n  };\n}\nfunction takeDamage(state, dmg, options = {}) {\n  console.trace(\"taking damage:\", dmg, \"options:\", options);\n  const skipDeathCheck = options.skipDeathCheck ?? false;\n\n  const updatedState = {\n    ...state,\n    health: Math.max(0, state.health - dmg),\n    log: [`You took ${dmg} damage.`, ...state.log],\n  };\n\n  return skipDeathCheck ? updatedState : checkCombatEndViaDeath(updatedState);\n}\n\nfunction dealDamage(state, damage, damageTypes = [], options = {}) {\n  const { isBonus = false } = options;\n  const newEnemyHp = Math.max(0, state.combat.enemyHp - damage);\n\n  console.log(\n    `>> dealDamage: current enemy HP = ${\n      state.combat.enemyHp\n    }, damage = ${damage}, new = ${newEnemyHp}, types = [${damageTypes.join(\n      \", \"\n    )}], isBonus = ${isBonus}`\n  );\n\n  let updatedState = {\n    ...state,\n    combat: {\n      ...state.combat,\n      enemyHp: newEnemyHp,\n    },\n    log: [\n      `⚔️ You dealt ${damage} damage to ${state.combat.enemy.name}` +\n        (damageTypes.length > 0 ? ` (${damageTypes.join(\", \")})` : \"\") +\n        \".\",\n      ...state.log,\n    ],\n  };\n\n  // Only trigger relics if this isn't bonus damage\n  if (!isBonus) {\n    for (const damageType of damageTypes) {\n      updatedState = checkRelicTriggers(\n        updatedState,\n        TRIGGER_EVENTS.DEAL_DAMAGE,\n        {\n          damageType,\n          amount: damage,\n          enemy: state.combat.enemy,\n        }\n      );\n    }\n  }\n\n  updatedState = checkCombatEndViaDeath(updatedState);\n  updatedState = checkGameOver(updatedState);\n\n  return updatedState;\n}\n\nfunction playCard(state, index) {\n  const hand = [...state.combat.hand];\n  const card = hand[index];\n\n  /* ── Guard clauses ─────────────────────────────────────────────────── */\n  if (!card || card.uncastable) return state;\n  if ((card.inkCost ?? 0) > state.combat.ink) return state;\n\n  /* ── Step 1: deduct ink ────────────────────────────────────────────── */\n  let updatedState = modifyCombatInk({ ...state }, -card.inkCost);\n\n  /* ── Step 2: remove card from hand ─────────────────────────────────── */\n  hand.splice(index, 1);\n  updatedState = {\n    ...updatedState,\n    combat: { ...updatedState.combat, hand },\n  };\n\n  /* ── Step 3: relic triggers for PLAY_CARD ──────────────────────────── */\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.PLAY_CARD, {\n    card,\n  });\n\n  /* ── INSTANT cards resolve immediately ─────────────────────────────── */\n  if (card.cardType === CARD_TYPES.INSTANT) {\n    //  No zone-placement here!  resolveSpell will handle graveyard/exile\n    updatedState = resolveSpell(updatedState, card);\n    updatedState = checkCombatEndViaDeath(updatedState);\n    updatedState = checkGameOver(updatedState);\n    return updatedState;\n  }\n\n  /* ── SPELL cards: place into spellbook ─────────────────────────────── */\n  const spellbook = [...updatedState.combat.spellbook];\n  const firstBlank = spellbook.indexOf(\"blank page\");\n  if (firstBlank === -1) return updatedState; // failsafe\n\n  spellbook[firstBlank] = card;\n  updatedState = {\n    ...updatedState,\n    combat: { ...updatedState.combat, spellbook },\n  };\n\n  /* ── Auto-cast when the spellbook is full ───────────────────────────── */\n  if (!spellbook.includes(\"blank page\")) {\n    updatedState = castSpellbook(updatedState);\n    updatedState = checkCombatEndViaDeath(updatedState);\n    updatedState = checkGameOver(updatedState);\n  }\n\n  return updatedState;\n}\n\nfunction castSpellbook(state) {\n  let updatedState = { ...state };\n\n  // 🌀 Trigger relic effects for CAST_SPELLBOOK\n  updatedState = checkRelicTriggers(\n    updatedState,\n    TRIGGER_EVENTS.CAST_SPELLBOOK\n  );\n\n  // 🔮 Cast each non-blank spell in the spellbook\n  for (const card of updatedState.combat.spellbook) {\n    if (typeof card !== \"object\" || card.name === \"blank page\") continue;\n    updatedState = resolveSpell(updatedState, card);\n  }\n\n  // 🐇 Release bunnies (deal damage equal to bunny count)\n  updatedState = releaseBunnies(updatedState);\n\n  // ✅ If enemy is still alive\n  if (updatedState.combat?.enemyHp > 0) {\n    // 👇 Check if any books remain\n    if (updatedState.combat.books > 0) {\n      console.log(\">>> Enemy survived, but books remain. Next turn begins.\");\n      return startTurn(updatedState);\n    } else {\n      console.log(\">>> Enemy survived. No books left. Player loses combat.\");\n      return combatEnd(updatedState, { result: \"loss\" });\n    }\n  }\n\n  // ✅ Enemy is dead → player wins\n  return combatEnd(updatedState, { result: \"win\" });\n}\n\nfunction releaseBunnies(state) {\n  const bunnyDamage = state.combat.bunnies ?? 0;\n\n  if (bunnyDamage <= 0) {\n    return {\n      ...state,\n      combat: {\n        ...state.combat,\n        bunnies: 0,\n      },\n    };\n  }\n\n  let updatedState = { ...state };\n\n  // ✅ Pass as an array now\n  updatedState = dealDamage(updatedState, bunnyDamage, [DAMAGE_TYPES.BUNNY]);\n\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...updatedState.combat,\n      bunnies: 0,\n    },\n    log: [\n      `Released ${bunnyDamage} bunn${bunnyDamage === 1 ? \"y\" : \"ies\"}!`,\n      ...updatedState.log,\n    ],\n  };\n\n  return updatedState;\n}\n\nfunction endTurn(state) {\n  let updatedState = { ...state };\n\n  // 🧪 Check if combat has ended via death\n  updatedState = checkCombatEndViaDeath(updatedState);\n  if (updatedState.combat.combatEnded) return updatedState;\n\n  // 🪦 Move remaining cards in hand to the graveyard\n  const remainingHand = updatedState.combat.hand || [];\n  const updatedGraveyard = [...updatedState.combat.graveyard, ...remainingHand];\n\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...updatedState.combat,\n      hand: [],\n      graveyard: updatedGraveyard,\n    },\n    log: [`You ended your turn.`, ...updatedState.log],\n  };\n\n  // 🧪 Check again before starting next turn\n  if (updatedState.combat.combatEnded) return updatedState;\n\n  // 🔁 Start a new turn\n  return startTurn(updatedState);\n}\n\nfunction resolveSpell(state, card) {\n  if (!card || typeof card !== \"object\") return state;\n\n  let updatedState = { ...state };\n  const effects = [];\n\n  // === Bunny Add ===\n  if (card.bunnyAdd) {\n    updatedState = addBunnies(updatedState, card.bunnyAdd);\n    effects.push(`+${card.bunnyAdd} bunn${card.bunnyAdd === 1 ? \"y\" : \"ies\"}`);\n  }\n\n  // === Bunny Add Based on Deck Size Multiplier ===\n  if (typeof card.bunnyAddPerCardInDeck === \"number\") {\n    const multiplier = card.bunnyAddPerCardInDeck;\n    const deckSize = updatedState.campaign.deck.length;\n    const bunnyAmount = Math.floor(deckSize * multiplier);\n\n    if (bunnyAmount > 0) {\n      updatedState = addBunnies(updatedState, bunnyAmount);\n      effects.push(`+${bunnyAmount} bunnies (${multiplier}× deck size)`);\n    }\n  }\n\n  // === Gain Gold Based on Deck Size Multiplier ===\n  if (typeof card.goldAddPerCardInDeck === \"number\") {\n    const multiplier = card.goldAddPerCardInDeck;\n    const deckSize = updatedState.campaign.deck.length;\n    const goldAmount = Math.floor(deckSize * multiplier);\n\n    if (goldAmount > 0) {\n      updatedState = gainGold(updatedState, goldAmount);\n      effects.push(`+${goldAmount} gold (${multiplier}× deck size)`);\n    }\n  }\n\n  // === Heal Based on Deck Size Multiplier ===\n  if (card.healPerCardInDeck) {\n    const multiplier = card.healPerCardInDeck;\n    const deckSize = updatedState.campaign.deck.length;\n    const healAmount = Math.floor(deckSize * multiplier);\n\n    if (healAmount > 0) {\n      updatedState = heal(updatedState, healAmount);\n      effects.push(`+${healAmount} HP (${multiplier}× deck size)`);\n    }\n  }\n\n  // === Bunny Multiply ===\n  if (card.bunnyMult) {\n    updatedState = multiplyBunnies(updatedState, card.bunnyMult);\n    effects.push(`×${card.bunnyMult} bunnies`);\n  }\n\n  // === Gain Gold ===\n  if (card.goldAdd) {\n    updatedState = gainGold(updatedState, card.goldAdd);\n    effects.push(`+${card.goldAdd} gold`);\n  }\n\n  // === Add Ink ===\n  if (card.inkAdd) {\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        ink: updatedState.combat.ink + card.inkAdd,\n      },\n    };\n    effects.push(`+${card.inkAdd} ink`);\n  }\n\n  // === Draw Cards ===\n  if (card.cardDraw) {\n    for (let i = 0; i < card.cardDraw; i++) {\n      updatedState = drawCard(updatedState);\n    }\n    effects.push(`Drew ${card.cardDraw} card${card.cardDraw === 1 ? \"\" : \"s\"}`);\n  }\n\n  // === Health Cost ===\n  if (card.healthCost) {\n    updatedState = takeDamage(updatedState, card.healthCost);\n    effects.push(`-${card.healthCost} HP`);\n  }\n\n  // === Heal ===\n  if (card.heal) {\n    updatedState = heal(updatedState, card.heal);\n    effects.push(`+${card.heal} HP`);\n  }\n\n  // === Permanently Upgrade Cards in Deck ===\n  if (card.permanentlyUpgradeRandomCardsInDeck) {\n    const numToUpgrade = Math.min(\n      card.permanentlyUpgradeRandomCardsInDeck,\n      updatedState.campaign.deck.length\n    );\n    const upgradedDeck = permanentlyUpgradeRandomCardsInDeck(\n      updatedState.campaign.deck,\n      numToUpgrade\n    );\n    updatedState = {\n      ...updatedState,\n      campaign: {\n        ...updatedState.campaign,\n        deck: upgradedDeck,\n      },\n    };\n    effects.push(`Upgraded ${numToUpgrade} card(s) in deck`);\n  }\n\n  // === Permanently Upgrade Cards in Hand ===\n  if (card.permanentlyUpgradeRandomCardsInHand) {\n    const numToUpgrade = Math.min(\n      card.permanentlyUpgradeRandomCardsInHand,\n      updatedState.combat.hand.length\n    );\n    const upgradedHand = permanentlyUpgradeRandomCardsInDeck(\n      updatedState.combat.hand,\n      numToUpgrade\n    );\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        hand: upgradedHand,\n      },\n    };\n    effects.push(`Upgraded ${numToUpgrade} card(s) in hand`);\n  }\n\n  // === Weaken Enemy by Percent (e.g., Poison)\n  if (card.weakenEnemyHpPercent > 0) {\n    const percent = card.weakenEnemyHpPercent;\n    const baseHp = updatedState.combat.enemy?.hp || 0;\n    const poisonDamage = Math.floor(baseHp * percent);\n\n    if (poisonDamage > 0) {\n      updatedState = dealDamage(\n        updatedState,\n        poisonDamage,\n        [DAMAGE_TYPES.POISON],\n        { isBonus: true }\n      );\n      effects.push(`Dealt ${poisonDamage} poison damage (max HP % effect)`);\n    }\n  }\n\n  // === Flat Damage ===\n  if (card.damage) {\n    const types =\n      Array.isArray(card.damageTypes) && card.damageTypes.length > 0\n        ? card.damageTypes\n        : [DAMAGE_TYPES.BUNNY];\n\n    updatedState = dealDamage(updatedState, card.damage, types);\n    effects.push(`Dealt ${card.damage} ${types.join(\"/\")} damage`);\n  }\n\n  // === Rolled Damage (e.g., Lightning) ===\n  if (\n    card.damageRoll &&\n    typeof card.damageRoll.dice === \"number\" &&\n    typeof card.damageRoll.sides === \"number\"\n  ) {\n    const { dice, sides, flatBonus = 0 } = card.damageRoll;\n    const damage = rollDice(dice, sides, flatBonus);\n\n    const types =\n      Array.isArray(card.damageTypes) && card.damageTypes.length > 0\n        ? card.damageTypes\n        : [DAMAGE_TYPES.BUNNY];\n\n    updatedState = dealDamage(updatedState, damage, types);\n\n    const typeList = types.join(\" & \");\n    effects.push(`Dealt ${damage} ${typeList} damage`);\n  }\n\n  /// === Upgrade on Cast (if applicable) ===\n  if (card.upgradesOnCast) {\n    const upgradedCard = upgradeCard(card, card.upgradesOnCast);\n\n    // === Update campaign deck with upgraded version\n    updatedState = upgradeSpecificCardInCampaignDeck(\n      updatedState,\n      card,\n      card.upgradesOnCast\n    );\n\n    const destination = upgradedCard.exileOnCast ? \"exile\" : \"graveyard\";\n    const updatedSpellbook = updatedState.combat.spellbook.filter(\n      (c) => c.name !== card.name\n    );\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        spellbook: updatedSpellbook,\n        [destination]: [...updatedState.combat[destination], upgradedCard],\n      },\n      trashpile: [...(updatedState.trashpile || []), card],\n      log: [`Cast ${card.name}: ${effects.join(\", \")}`, ...updatedState.log],\n    };\n\n    return checkCombatEndViaDeath(updatedState);\n  } else {\n    // === Move to Exile or Graveyard ===\n    const destination = card.exileOnCast ? \"exile\" : \"graveyard\";\n    const updatedSpellbook = updatedState.combat.spellbook.filter(\n      (c) => c.name !== card.name\n    );\n\n    updatedState = {\n      ...updatedState,\n      combat: {\n        ...updatedState.combat,\n        spellbook: updatedSpellbook,\n        [destination]: [...updatedState.combat[destination], card],\n      },\n      trashpile: [...(updatedState.trashpile || []), card],\n      log: [`Cast ${card.name}: ${effects.join(\", \")}`, ...updatedState.log],\n    };\n\n    return checkCombatEndViaDeath(updatedState);\n  }\n}\n\nfunction combatEnd(state, context = {}) {\n  console.log(\">>> Entered combatEnd with context:\", context);\n\n  if (!state.combat || state.currentPhase === PHASES.COMBAT_END) {\n    return state; // Already ended or invalid\n  }\n\n  let updatedState = { ...state };\n  const result = context.result ?? \"loss\";\n  const victory = result === \"win\";\n  const enemy = updatedState.combat?.enemy;\n\n  // === Call relic triggers for COMBAT_END\n  updatedState = checkRelicTriggers(updatedState, TRIGGER_EVENTS.COMBAT_END);\n\n  // === Handle victory\n  if (victory) {\n    const rewards = [\n      ...(updatedState.combat.rewards ?? []),\n      ...(enemy?.loot ?? []),\n    ];\n\n    const defeatedEnemies = [...(updatedState.defeatedEnemies ?? []), enemy];\n\n    if (enemy?.isBoss) {\n      const newStage = (updatedState.stage ?? 0) + 1;\n\n      updatedState = {\n        ...updatedState,\n        stage: newStage,\n        log: [\n          `🏆 You defeated a boss! Stage increased to ${newStage}.`,\n          ...updatedState.log,\n        ],\n      };\n    }\n\n    updatedState = {\n      ...updatedState,\n      defeatedEnemies,\n    };\n\n    console.log(\n      \"[DEBUG] Boss defeated, checking for game over. Stage =\",\n      updatedState.stage\n    );\n\n    // 🧠 Check if the game is over BEFORE assigning rewards\n    updatedState = checkGameOver(updatedState);\n\n    if (!updatedState.gameOverResult) {\n      updatedState = {\n        ...updatedState,\n        offerings: {\n          ...updatedState.offerings,\n          combatRewards: rewards,\n        },\n      };\n    }\n  } else {\n    // === Handle defeat\n    if (enemy?.isBoss) {\n      // Bosses cause instant game over — no damage calculation needed\n      updatedState = {\n        ...updatedState,\n        gameOverResult: \"loss\",\n        log: [\n          `☠️ You were defeated by the boss ${enemy.name}. Your journey ends here.`,\n          ...updatedState.log,\n        ],\n      };\n    } else {\n      // Safe damage calc for regular enemies\n      const enemyMaxHp = enemy?.maxHp ?? 0;\n      const enemyCurrentHp = updatedState.combat?.enemyHp ?? enemyMaxHp;\n      const remainingEnemyHp = Math.max(0, enemyCurrentHp);\n\n      if (remainingEnemyHp > 0) {\n        updatedState = takeDamage(updatedState, remainingEnemyHp, {\n          skipDeathCheck: true,\n        });\n        updatedState = {\n          ...updatedState,\n          log: [\n            `☠️ You were defeated by ${\n              enemy?.name ?? \"the enemy\"\n            } and took ${remainingEnemyHp} damage.`,\n            ...updatedState.log,\n          ],\n        };\n      } else {\n        updatedState = {\n          ...updatedState,\n          log: [\n            `☠️ You were defeated by ${enemy?.name ?? \"the enemy.\"}`,\n            ...updatedState.log,\n          ],\n        };\n      }\n\n      console.log(\"[DEBUG] Player defeated. Health:\", updatedState.health);\n      updatedState = checkGameOver(updatedState);\n    }\n  }\n\n  // === Clean up combat state\n  const cleanedCombat = {\n    ...updatedState.combat,\n    spellbook: [],\n    hand: [],\n    graveyard: [],\n    bunnies: 0,\n  };\n\n  // === Determine next phase\n  let finalState = {\n    ...updatedState,\n    combat: cleanedCombat,\n  };\n\n  console.log(\n    \"[DEBUG] Final combatEnd state. Game over?\",\n    finalState.gameOverResult\n  );\n\n  if (finalState.gameOverResult) {\n    finalState = advancePhaseTo(finalState, PHASES.GAME_OVER);\n    finalState = {\n      ...finalState,\n      log: [`🛑 Game Over: ${finalState.gameOverResult}`, ...finalState.log],\n    };\n  } else {\n    finalState = advancePhaseTo(finalState, PHASES.COMBAT_END);\n  }\n\n  return handlePhaseTransitions(finalState);\n}\n\nfunction closeCombatRewards(state) {\n  const hasUnclaimedLoot =\n    state.offerings?.combatRewards && state.offerings.combatRewards.length > 0;\n\n  // Optional: Log message about skipping loot\n  const logEntry = hasUnclaimedLoot\n    ? \"Skipped remaining combat loot.\"\n    : \"Combat complete.\";\n\n  const newState = {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      combatRewards: [], // clear the rewards\n    },\n    log: [logEntry, ...state.log],\n  };\n\n  const pathState = advancePhaseTo(newState, PHASES.PATH_SELECTION);\n  return handlePhaseTransitions(pathState);\n}\nfunction checkGameOver(state) {\n  const playerDead = state.health <= 0;\n  const defeatedBosses = (state.defeatedEnemies || []).filter(\n    (enemy) => enemy.isBoss\n  ).length;\n  console.log(\n    \"[DEBUG] checkGameOver called. Health:\",\n    state.health,\n    \"Bosses defeated:\",\n    defeatedBosses\n  );\n\n  if (playerDead) {\n    return {\n      ...state,\n      gameOverResult: \"loss\",\n    };\n  }\n\n  if (defeatedBosses >= 3) {\n    return {\n      ...state,\n      gameOverResult: \"victory\",\n    };\n  }\n\n  return state;\n}\n\nfunction gameOver(state, result) {\n  return {\n    ...state,\n    gameResult: result,\n    currentPhase: PHASES.GAME_OVER,\n    log: [`🛑 Game Over: ${result}`, ...state.log],\n  };\n}\nfunction exitShop(state) {\n  const cleanedState = {\n    ...state,\n    offerings: {\n      ...state.offerings,\n      shopfront: [], // Clear the shop\n    },\n    log: [\"🛒 Exited the shop.\", ...state.log],\n  };\n\n  // Use your phase transition helpers to change to the next phase\n  return handlePhaseTransitions(\n    advancePhaseTo(cleanedState, PHASES.PATH_SELECTION)\n  );\n}\n\nfunction rollDice(numDice, sidesPerDie, flatBonus = 0) {\n  let total = 0;\n  for (let i = 0; i < numDice; i++) {\n    total += Math.floor(Math.random() * sidesPerDie) + 1;\n  }\n  return total + flatBonus;\n}\n\nfunction upgradeSpecificCardInCampaignDeck(state, card, upgrades = 1) {\n  if (!state?.campaign?.deck || !Array.isArray(state.campaign.deck)) {\n    console.error(\"No valid campaign deck found in state.\");\n    return state;\n  }\n\n  const deck = [...state.campaign.deck];\n  const index = deck.findIndex((c) => c.name === card.name);\n\n  if (index === -1) {\n    console.warn(`Card not found in campaign deck: ${card.name}`);\n    return state;\n  }\n\n  deck[index] = upgradeCard(deck[index], upgrades);\n\n  return {\n    ...state,\n    campaign: {\n      ...state.campaign,\n      deck,\n    },\n  };\n}\n\nfunction getShopPriceMultiplier(state) {\n  return state.relicBelt.reduce((multiplier, relic) => {\n    const effect = relic.triggers?.[TRIGGER_EVENTS.ASSIGN_SHOP_PRICES];\n    return effect?.shopPriceMultiplier\n      ? multiplier * effect.shopPriceMultiplier\n      : multiplier;\n  }, 1);\n}\n\nfunction mulligan(state) {\n  let updatedState = { ...state };\n  const combat = updatedState.combat;\n\n  if (!combat || combat.mulligans <= 0) {\n    console.warn(\"Cannot mulligan: no mulligans remaining.\");\n    return updatedState;\n  }\n\n  const handSize = combat.hand.length;\n\n  // Move hand to graveyard\n  updatedState = {\n    ...updatedState,\n    combat: {\n      ...combat,\n      hand: [],\n      graveyard: [...combat.graveyard, ...combat.hand],\n      mulligans: combat.mulligans - 1,\n    },\n    log: [`🔄 Mulliganed ${handSize} card(s).`, ...updatedState.log],\n  };\n\n  // Draw the same number of cards\n  for (let i = 0; i < handSize; i++) {\n    updatedState = drawCard(updatedState);\n  }\n\n  return updatedState;\n}\n\nfunction weakenEnemyByPercent(state, percent) {\n  if (\n    !state?.combat?.enemy ||\n    typeof state.combat.enemy.hp !== \"number\" ||\n    percent <= 0\n  ) {\n    console.warn(\"Invalid state or percent passed to weakenEnemyByPercent.\");\n    return state;\n  }\n\n  const enemyMaxHp = state.combat.enemy.hp;\n  const damage = Math.floor(enemyMaxHp * percent);\n\n  if (damage <= 0) {\n    console.log(\n      `No damage dealt by weakenEnemyByPercent (percent = ${percent}).`\n    );\n    return state;\n  }\n\n  return dealDamage(state, damage, [], { isBonus: true });\n}\n\n// ============================================= expanding the game =============================================================\n// a mythic gem that makes a spell cost 1 less ink, be an instant, and exile on cast.\n\n// implement \"critical hit\" mechanics; cards, gems, and relics, plus three 'critical hit matters' mythics - one that boosts crit amounts,  one that increases crit chance, and one that gives crits to everything.\n// a relic that gives the cast spellbook button +10% chance for a 200% crit.\n// a gem that gives the card a 10% chance for double effect on cast.\n\n// implement three boss abilties keyed to the boss name: 'downgrade all cards in enemy deck', '+1 ink cost to all enemy cards', and 'enemy loses 1 hp whenever they play a card'.\n// IMPORTANT: implement an enemy ablity that exiles 3 random cards from your deck at combat start, increment value 2. (\"Milling\")\n// IMPORTANT: implement an enemy ability that removes the 1 most-upgraded card in your deck (\"Lobotomizing\"), increment value 1.\n\n// a potion that does (20+(10*upgrades))*(stage+1) damage.\n\n// enemies with resistances: X% bunny, X% lightning, X% fire, etc.\n\n//reward deck size mechanics:\n// make mega bunniplication mult bunnies based on decksize.\n// make hand of midas add gold based on decksize.\n// make healing light heal based on decksize.\n// make rest mechanic heal 2x decksize.\n\n// a relic that on pickup gives you +HP based on the #cards in the campaign deck.\n// a relic that on pickup gives you +baseBunnies based on the #cards in the campaign deck.\n\n// a potion that heals based on the #cards in the campaign deck.\n\n//structure & organization:\n// refactor into proper file management system - it's really getting too bloated.\n// reorganize properly during refactor.\n// ensure that all actions and game reducer elements are correctly named and traced on the whitelist.\n\n//implement //firemages hat\n"]}